<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IT Ninjas – Git Vertiefung Labs</title><link>/labs/02_git/02_vertiefung/</link><description>Recent content in Git Vertiefung Labs on IT Ninjas</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/labs/02_git/02_vertiefung/index.xml" rel="self" type="application/rss+xml"/><item><title>Labs: Aufgabe: Teambildung</title><link>/labs/02_git/02_vertiefung/01_team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/02_git/02_vertiefung/01_team/</guid><description>
&lt;p>Dies ist einen Gemeinschaftsaufgabe, die gemeinsam von allen Beteiligten und nur einmal ausgeführt werden muss.&lt;/p>
&lt;h3 id="schritt-1-teambildung">Schritt 1: Teambildung&lt;/h3>
&lt;p>Finde ein bis vier Ninjas, die das Modul Git abgeschlossen haben und zusammen mit dir die praktische
Anwendung von Git/Bitbucket im Team erlernen wollen oder schliesse dich einem bestehenden Team an.&lt;/p>
&lt;h3 id="schritt-2-rollenverteilung">Schritt 2: Rollenverteilung&lt;/h3>
&lt;p>Legt einen Lead-Developer für euer Team fest. Der Lead-Developer verteilt die Aufgaben im Team, d.h. er/sie
legt fest, wer an welchem Projekt arbeitet und welche &amp;ldquo;Verbesserung&amp;rdquo; jeweils umgesetzt wird.&lt;/p>
&lt;h3 id="schritt-3-vorbereitung-der-repositories">Schritt 3: Vorbereitung der Repositories&lt;/h3>
&lt;p>Wählt die zwei Projekte aus, mit denen euer Team arbeiten soll. Nutzt dazu die folgende Liste:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Streamingdienst&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Immobilienfirma&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Ninja Cups&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Weltmeisterschaft&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Rollenspiel&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Für jedes der zwei Projekte wird der vorhandene Code eines beliebigen Teammitglieds genutzt.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Für die Aufgabe wird der Code in ein neues Repository übernommen (&lt;em>fork&lt;/em>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Der jeweilige Originalstand wird im Branch &lt;code>master&lt;/code> gehalten.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Vom master wird ein Standard-Arbeitsbranch &lt;code>develop&lt;/code> erzeugt.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Die Repositories sind für alle Teammitglieder freizugeben (schreibender Zugriff).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="hinweise">Hinweise&lt;/h4>
&lt;ul>
&lt;li>Die neuen Repositories können wahlweise über die Bitbucket Weboberfläche oder via Git Kommando erstellt werden.&lt;/li>
&lt;li>Die Branches sollten über die Weboberfläche erstellt werden.&lt;/li>
&lt;/ul>
&lt;h3 id="schritt-4-festlegen-des-repositories-für-die-aufgabe-zusammenarbeit">Schritt 4: Festlegen des Repositories für die Aufgabe &amp;ldquo;Zusammenarbeit&amp;rdquo;&lt;/h3>
&lt;p>Legt gemeinsam fest, welches Repository für die gemeinsame Arbeit an einem Projekt genutzt werden soll.
Dieses wird in den nachfolgenden Aufgaben immer als &lt;em>erstes Repository&lt;/em> bezeichnet.&lt;/p></description></item><item><title>Labs: Aufgabe: Vorbereiten der IDE</title><link>/labs/02_git/02_vertiefung/02_preparing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/02_git/02_vertiefung/02_preparing/</guid><description>
&lt;p>Diese Aufgabe ist von jedem Teilnehmer auf seinem Rechner auszuführen.&lt;/p>
&lt;h3 id="schritt-1-klonen-des-ersten-repository">Schritt 1: Klonen des ersten Repository&lt;/h3>
&lt;ol>
&lt;li>Starte deinen Browser.&lt;/li>
&lt;li>Rufe die Bitbucketseite mit dem ersten Repository auf.&lt;/li>
&lt;li>Wähle &amp;ldquo;Klonen&amp;rdquo; in der Navigationsleiste (links) aus und kopiere die URL.&lt;/li>
&lt;li>Starte IntelliJ.&lt;/li>
&lt;li>Wähle im Menu Git -&amp;gt; Clone&amp;hellip; aus.&lt;/li>
&lt;li>Füge die kopierte URL in der ersten Zeile ein.&lt;/li>
&lt;li>Wähle dein Arbeitsverzeichnis für das neue Repository aus.&lt;/li>
&lt;li>Klicke auf &amp;ldquo;Clone&amp;rdquo;.&lt;/li>
&lt;/ol>
&lt;h3 id="schritt-2-klonen-des-zweiten-repository">Schritt 2: Klonen des zweiten Repository&lt;/h3>
&lt;ol>
&lt;li>Wiederhole die Punkte 2, 3 und 5 - 8 aus Schritt 4 für das zweite Repository.&lt;/li>
&lt;/ol>
&lt;h3 id="schritt-3-branch-für-die-aufgabe-zusammenarbeit-erstellen">Schritt 3: Branch für die Aufgabe &amp;ldquo;Zusammenarbeit&amp;rdquo; erstellen&lt;/h3>
&lt;ol>
&lt;li>Starte deinen Browser.&lt;/li>
&lt;li>Rufe die Bitbucketseite mit dem ersten Repository auf.&lt;/li>
&lt;li>Klicke auf &lt;em>Branch erstellen&lt;/em>.&lt;/li>
&lt;li>Wähle den &lt;em>Branch-Typ&lt;/em> &amp;ldquo;Feature&amp;rdquo; aus.&lt;/li>
&lt;li>Wähle unter &lt;em>Branch von&lt;/em> &amp;ldquo;develop&amp;rdquo; aus.&lt;/li>
&lt;li>Trage als &lt;em>Branch-Name&lt;/em> &amp;ldquo;Modul-S3-‹dein Vorname›-collaboration&amp;rdquo; ein (ohne Anführungszeichen).&lt;/li>
&lt;li>Klicke auf &lt;em>Branch erstellen&lt;/em>.&lt;/li>
&lt;/ol></description></item><item><title>Labs: Aufgabe: Arbeiten im Team an einem Projekt</title><link>/labs/02_git/02_vertiefung/03_collaboration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/02_git/02_vertiefung/03_collaboration/</guid><description>
&lt;p>In dieser Aufgabe wird die Zusammenarbeit an einem gemeinsamen Projekt ohne Merge-Konflikte simuliert.
Dazu führt jedes Team-Mitglied die nachfolgenden Aktionen auf seinem Rechner aus. Der Lead Developer
legt fest, wer welchen Teil in welcher Datei ändern soll.&lt;/p>
&lt;p>Die Schritte 1 bis 5 sind Einzelaufgaben, die jeder Ninja selbständig lösen muss/kann. Schritt 6 ist
eine Teamaufgabe und muss ebenfalls für jeden Feature-Branch ausgeführt werden.&lt;/p>
&lt;h3 id="schritt-1-neuen-branch-auschecken">Schritt 1: Neuen Branch auschecken&lt;/h3>
&lt;ol>
&lt;li>Starte IntelliJ.&lt;/li>
&lt;li>Wechsle zum ersten Projekt (Menu › File › Recent Projects).&lt;/li>
&lt;li>Aktualisiere den lokalen Stand von Git (Menu › Git › Fetch).&lt;/li>
&lt;li>Checke den oben erstellten Branch aus (Menu › Git › Branches&amp;hellip;).&lt;/li>
&lt;/ol>
&lt;h3 id="schritt-2-dateien-mit-ausschliessen">Schritt 2: Dateien mit ausschliessen&lt;/h3>
&lt;p>Das Verzeichnis .idea soll von der Versionsverwaltung ausgeschlossen werden. Nutze dazu den passenden
Eintrag aus dem Git-Menu.&lt;/p>
&lt;h3 id="schritt-3-unterschiedliche-dateien-bearbeiten">Schritt 3: Unterschiedliche Dateien bearbeiten&lt;/h3>
&lt;p>Jedes Teammitglied bekommt vom Lead-Developer eine andere Datei für Änderungen zugewiesen bzw. wählt
eine Datei aus. Es werden nur kleine Änderungen vorgenommen, wie z.B.&lt;/p>
&lt;ul>
&lt;li>zusätzliche Ausgabe über System.out.println,&lt;/li>
&lt;li>Auslagern von Code in eine eigene Methode,&lt;/li>
&lt;li>oder kleinere Verbesserungen.&lt;/li>
&lt;/ul>
&lt;p>Durch die Änderungen sollten keine zusätzlichen Fehler im Programm eingebaut werden, es können aber
bekannte Fehler behoben werden. Für die Änderungen sollte nicht mehr als eine halbe Stunde Zeit
benötigt werden.&lt;/p>
&lt;h3 id="schritt-4-änderungen-auf-den-branch-pushen">Schritt 4: Änderungen auf den Branch pushen&lt;/h3>
&lt;p>Nun sollen die Änderungen committed und auf den remote Feature-Branch gepusht werden. Gehe dazu in
IntelliJ auf&lt;/p>
&lt;ul>
&lt;li>&lt;em>Git › Commit&lt;/em> im Menu&lt;/li>
&lt;li>oder &lt;em>Git › Push&lt;/em> über das Kontextmenu auf dem Projekt.&lt;/li>
&lt;/ul>
&lt;p>Wähle unter Changes die geänderten Dateien aus und übertrage sie mit &lt;em>Commit and Push&amp;hellip;&lt;/em> in das lokale
und remote Git-Repository.&lt;/p>
&lt;h3 id="schritt-5-pull-request-erstellen">Schritt 5: Pull Request erstellen&lt;/h3>
&lt;p>Gehe in Bitbucket (Browser) auf den FeatureBranch und&lt;/p>
&lt;ol>
&lt;li>erstelle einen Pull Request (Pull Requests oder Pull-Anfragen in der Seitenleiste),&lt;/li>
&lt;li>achte dabei darauf, das du &lt;code>develop&lt;/code> als Zielbranch ausgewählt hast und&lt;/li>
&lt;li>kontrolliere den Pull Request auf Konflikte.&lt;/li>
&lt;/ol>
&lt;h3 id="schritt-6-zusammenführen">Schritt 6: Zusammenführen&lt;/h3>
&lt;p>Dieser Schritt muss mindestens vom Besitzer des Feature-Branches und vom Lead Developer gemeinsam
bearbeitet werden. Es wird aber empfohlen, dass jeweils alle Team-Mitglied teilnehmen, um den Merge-Vorgang
in Bitbucket zu üben.&lt;/p>
&lt;ol>
&lt;li>Ruft den Pull Request in Bitbucket auf.&lt;/li>
&lt;li>Vergleicht die Codeänderungen des aktuellen Pull Requests zum Stand von &lt;code>develop&lt;/code> via &lt;em>diff&lt;/em>.&lt;/li>
&lt;li>Fügt mindestens ein Team-Mitglied als Prüfer hinzu. (Achtung das kann nicht der Ersteller des Pull Requests sein!)&lt;/li>
&lt;li>Genehmigt nun als Prüfer den Pull Request (grüner Button).&lt;/li>
&lt;li>Mergt den Pull Request (sofern dies nicht automatisch startet).&lt;/li>
&lt;/ol></description></item><item><title>Labs: Aufgabe: Arbeiten im Team an einem Projekt</title><link>/labs/02_git/02_vertiefung/04_merge-conflict/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/02_git/02_vertiefung/04_merge-conflict/</guid><description>
&lt;p>In dieser Aufgabe wird die Zusammenarbeit an einem gemeinsamen Projekt mit Merge-Konflikte und deren
Lösung simuliert. Dazu führt jedes Team-Mitglied die nachfolgenden Aktionen auf seinem Rechner aus.
Der Lead Developer legt fest, welche Datei geändert werden soll.&lt;/p>
&lt;p>Die Schritte 1 bis 4 sind Einzelaufgaben, die jeder Ninja selbständig lösen muss/kann. Die Schritte
5 bis 7 sind Teamaufgaben.&lt;/p>
&lt;h3 id="schritt-1-feature-branch-aktualisieren">Schritt 1: Feature-Branch aktualisieren&lt;/h3>
&lt;p>&lt;strong>Diese Aufgabe kann erst gestartet werden, wenn alle Feature-Branches aus dem &lt;a href="/labs/02_git/02_vertiefung/03_collaboration/">vorherigen Lab&lt;/a>
erfolgreich gemergt wurden.&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Starte IntelliJ.&lt;/li>
&lt;li>Wechsle zum ersten Projekt (Menu › File › Recent Projects).&lt;/li>
&lt;li>Achte darauf, dass du auf deinem Feature-branch arbeitest.&lt;/li>
&lt;li>Aktualisiere den lokalen Stand von Git (Menu › Git › Fetch).&lt;/li>
&lt;li>Aktualisiere den Stand des Feature-Branch mit &lt;em>Git › rebase&lt;/em> von &lt;code>develop&lt;/code>.&lt;/li>
&lt;/ol>
&lt;h3 id="schritt-2-bearbeiten-der-gleichen-codestelle">Schritt 2: Bearbeiten der gleichen Codestelle&lt;/h3>
&lt;p>Jedes Teammitglied führt Änderungen an der Methode/Datei aus, die vorher gemeinsam festlegt wurde.
Achte darauf, dass die Änderungen auf den einzelnen Feature-Branches zwar die gleichen Codezeilen
betreffen, aber nicht identisch sind.&lt;/p>
&lt;p>Die Änderungen sollten nicht mehr als eine halbe Stunde Zeit benötigen.&lt;/p>
&lt;h3 id="schritt-3-änderungen-auf-den-branch-pushen">Schritt 3: Änderungen auf den Branch pushen&lt;/h3>
&lt;p>Anschliessend werden die Änderungen committet und auf den remote Feature-Branch gepusht.
Gehe dazu in IntelliJ auf&lt;/p>
&lt;ul>
&lt;li>&lt;em>Git › Commit&amp;hellip;&lt;/em> im Menu&lt;/li>
&lt;li>oder &lt;em>Git › Push&amp;hellip;&lt;/em> über das Kontextmenu auf dem Projekt.&lt;/li>
&lt;/ul>
&lt;p>Wähle unter Changes die geänderten Dateien aus und übertrage sie mit &lt;em>Commit and Push&amp;hellip;&lt;/em> in das
lokale und remote Git-Repository.&lt;/p>
&lt;h3 id="schritt-4-pull-request-erstellen-und-überprüfen">Schritt 4: Pull Request erstellen und überprüfen&lt;/h3>
&lt;p>Gehe in Bitbucket (Browser) auf den Feature-Branch und&lt;/p>
&lt;ol>
&lt;li>Erstelle einen Pull Request (Pull Requests oder Pull-Anfragen in der Seitenleiste).&lt;/li>
&lt;li>Achte dabei darauf, das du &lt;code>develop&lt;/code> als Zielbranch ausgewählt hast.&lt;/li>
&lt;li>Kontrolliere den Pull Request auf Konflikte.
(Solange noch kein Pull Request gemergt wurde, sollten hier keine Konflikte auftreten.)&lt;/li>
&lt;/ol>
&lt;h3 id="schritt-5-mergen-des-ersten-feature-branch">Schritt 5: Mergen des ersten Feature-Branch&lt;/h3>
&lt;p>Legt ein Team-Mitglied fest, welches seinen Feature-Branch als erstes auf &lt;code>develop&lt;/code> mergt. Bei dieser
Aktion sollte es noch nicht zu Konflikten kommen.&lt;/p>
&lt;h3 id="schritt-6-mergen-der-übrigen-feature-branches">Schritt 6: Mergen der übrigen Feature-Branches&lt;/h3>
&lt;p>Legt nun die Reihenfolge fest, in der die übrigen Feature-Branches auf &lt;code>develop&lt;/code> gemergt werden sollen.
Führt die folgenden Schritte jeweils vollständig aus, bevor ihr mit dem nächsten Branch startet.&lt;/p>
&lt;ol>
&lt;li>Wechselt auf den Pull Request.&lt;/li>
&lt;li>Kontrolliert den aktuellen Zusatnd (es sollten Konflikte vorhanden sein).&lt;/li>
&lt;li>Überprüft den Code mit &lt;em>diff&lt;/em>.&lt;/li>
&lt;li>Löst den Konflikt manuell oder folgt den Empfehlungen von Bitbucket.&lt;/li>
&lt;li>Genehmigt den Pull Request, wenn der Konflikt gelöst ist. (Achtung, das kann nicht der Ersteller des Pull Requests machen!)&lt;/li>
&lt;li>Führt Merge auf &lt;code>develop&lt;/code> aus.&lt;/li>
&lt;li>Wiederholt Punkt 1 bis 6 für den nächsten Pull Request.&lt;/li>
&lt;/ol>
&lt;h3 id="schritt-7-überprüfen-des-finalen-standes">Schritt 7: Überprüfen des finalen Standes&lt;/h3>
&lt;p>Geht nun zum &lt;code>develop&lt;/code> Branch und überprüft, ob alle Änderungen korrekt übernommen wurden. In der Praxis
sollten Tests (Unittests und/oder integrative Tests) existieren, die ohne Fehler ausführbar sein müssen.&lt;/p></description></item><item><title>Labs: Aufgabe: Arbeiten mit mehreren Projekten</title><link>/labs/02_git/02_vertiefung/05_project-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/02_git/02_vertiefung/05_project-switch/</guid><description>
&lt;p>In diesem Lab soll die Arbeit mit mehreren Git Repositories kennengelernt werden. Dazu wird in einer
ersten Aufgabe zwischen zwei Repositories gewechselt und jeweils kleinere Änderungen vorgenommen.&lt;/p>
&lt;p>Diese Aufgabe ist eine Einzelaufgabe, die von jedem IT-Ninja eigenständig bearbeitet werden muss.&lt;/p>
&lt;h3 id="schritt-1-feature-branch-auf-dem-2-repository-erstellen">Schritt 1: Feature-Branch auf dem 2. Repository erstellen&lt;/h3>
&lt;ol>
&lt;li>Starte deinen Browser.&lt;/li>
&lt;li>Rufe die Bitbucketseite mit dem zweiten Repository auf.&lt;/li>
&lt;li>Klicke auf &lt;em>Branch erstellen&lt;/em>.&lt;/li>
&lt;li>Wähle den &lt;em>Branch-Typ&lt;/em> &amp;ldquo;Feature&amp;rdquo; aus.&lt;/li>
&lt;li>Wähle unter &lt;em>Branch von&lt;/em> &amp;ldquo;develop&amp;rdquo; aus.&lt;/li>
&lt;li>Trage als &lt;em>Branch-Name&lt;/em> &amp;ldquo;Modul-S3-‹dein Vorname›-projekte&amp;rdquo; ein (ohne Anführungszeichen).&lt;/li>
&lt;li>Klicke auf &lt;em>Branch erstellen&lt;/em>.&lt;/li>
&lt;/ol>
&lt;h3 id="schritt-2-neu-erstellten-branch-auschecken">Schritt 2: Neu erstellten Branch auschecken&lt;/h3>
&lt;ol>
&lt;li>Starte IntelliJ.&lt;/li>
&lt;li>Wechsle zum zweiten Projekt (Menu › File › Recent Projects).&lt;/li>
&lt;li>Klicke bei der entsprechenden Nachfrage &amp;ldquo;This Window&amp;rdquo; an.&lt;/li>
&lt;li>Aktualisiere den lokalen Stand von Git (Menu › Git › Fetch).&lt;/li>
&lt;li>Checke den oben erstellten Branch aus (Menu › Git › Branches&amp;hellip;).&lt;/li>
&lt;/ol>
&lt;h3 id="schritt-3-codeänderung">Schritt 3: Codeänderung&lt;/h3>
&lt;p>Suche dir eine beliebige Datei des Projekts und ändere einige Codezeilen. Speichere die Änderungen,
aber führe kein commit aus.&lt;/p>
&lt;h3 id="schritt-4-zu-projekt-1-wechseln">Schritt 4: Zu Projekt 1 wechseln&lt;/h3>
&lt;ol>
&lt;li>Wechsle nun zu deinem Feature-Branch von Projekt 1.&lt;/li>
&lt;li>Klicke bei der entsprechenden Nachfrage &amp;ldquo;This Window&amp;rdquo; an. (Der Arbeitsbereich der IDE wird wieder auf das 1. Projekt gesetzt.)&lt;/li>
&lt;li>Überprüfe, dass wirklich das erste Projekt geladen ist. Du solltest das am Projektnamen erkennen
und daran, dass keine uncommitteten Änderungen vorhanden sind.&lt;/li>
&lt;/ol>
&lt;h3 id="schritt-5-zu-projekt-2-wechseln">Schritt 5: Zu Projekt 2 wechseln&lt;/h3>
&lt;p>Wechsle zurück auf das Projekt zwei und kontrolliere den aktuellen Stand. Deine Änderungen sollten
vorhanden und in der Commit Vorschau auswählbar sein.&lt;/p>
&lt;p>Du kannst nun den lokalen Arbeitsbereich zwischen verschiedenen Projekten wechseln. Da bei unterschiedlichen
Repositories (Projekten) der Zeiger auf das Wurzelverzeichnis des Projekts in der IDE geändert wird,
werden hierbei keine lokalen Daten überschrieben.&lt;/p>
&lt;h3 id="schritt-6-projekt-in-2-ide-fenster-öffnen">Schritt 6: Projekt in 2. IDE-Fenster öffnen&lt;/h3>
&lt;ol>
&lt;li>Wähle über &lt;em>Menu › File › Recent Projects&lt;/em> das erste Projekt aus.&lt;/li>
&lt;li>Klicke bei der entsprechenden Nachfrage &amp;ldquo;New Window&amp;rdquo; an. Es wird eine neue Instanz der IDE mit eigenem Arbeitsbereich geöffnet.&lt;/li>
&lt;li>Jetzt kannst du durch Switchen der geöffneten IDE-Instanz an beiden Projekten arbeiten.&lt;/li>
&lt;/ol>
&lt;p>Mit dieser 2. Variante hast du die Möglichkeit mehrere Repositories direkt in einem lokalen Arbeitsbereich
zu öffnen und ohne Wartezeit zwischen ihnen zu wechseln.&lt;/p></description></item><item><title>Labs: Aufgabe: Arbeiten mit unterschiedlichen Branches</title><link>/labs/02_git/02_vertiefung/06_branch-switch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/02_git/02_vertiefung/06_branch-switch/</guid><description>
&lt;p>Das Lab ist eine praktische Übung zum Wechseln zwischen verschiedenen Branches oder Commits eines
Repositories. Dabei sollen die erlernten Kenntnisse zu &lt;strong>checkout&lt;/strong>, &lt;strong>stash&lt;/strong>, &lt;strong>commit&lt;/strong>, &lt;strong>pull&lt;/strong>
und &lt;strong>push&lt;/strong> vertieft werden. Für die Aufgabe wird nur das zweite Projekt benötigt.&lt;/p>
&lt;p>Diese Aufgabe ist eine Einzelaufgabe, die von jedem IT-Ninja eigenständig bearbeitet werden muss.&lt;/p>
&lt;h3 id="schritt-1-feature-branch-auf-dem-2-repository-erstellen">Schritt 1: Feature-Branch auf dem 2. Repository erstellen&lt;/h3>
&lt;p>Erstelle einen neuen Feature-Branch von &lt;code>develop&lt;/code>auf dem 2. Repository. Nutze dazu die dir bekannten
Tools und Befehle.&lt;/p>
&lt;h3 id="schritt-2-neuen-branch-ausschecken">Schritt 2: Neuen Branch ausschecken&lt;/h3>
&lt;p>Hole den neuen Branch als Arbeitskopie auf deinen Rechner. Gehe dazu vor, wie in den anderen Aufgaben
gelernt.&lt;/p>
&lt;h3 id="schritt-3-code-ändern">Schritt 3: Code ändern&lt;/h3>
&lt;p>Ändere eine beliebige Methode oder erstelle eine neue Methode in einer beliebigen Klasse. Speichere
deine Änderungen im lokalen Arbeitsbereich und führe &lt;code>commit &amp;amp; push&lt;/code> aus.&lt;/p>
&lt;h3 id="schritt-4-hotfix-erstellen">Schritt 4: &amp;ldquo;Hotfix&amp;rdquo; erstellen&lt;/h3>
&lt;p>Erstelle einen weiteren Branch von &lt;code>develop&lt;/code> auf diesem Repository und checke diesen aus. Mache einen
Hotfix, indem du die Zeile &lt;strong>System.out.println(&amp;ldquo;This is a hotfix&amp;rdquo;);&lt;/strong> in einer beliebigen Methode
einfügst. Committe deine Änderungen (ohne push!).&lt;/p>
&lt;h3 id="schritt-5-zum-ersten-branch-wechseln">Schritt 5: Zum ersten Branch wechseln&lt;/h3>
&lt;p>Checke wieder den ersten Branch aus und füge hier den folgenden Code in der main-Methode ein:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>if (args.length &amp;gt; 0) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.out.println(&amp;#34;Es wurden &amp;#34; + args.length + &amp;#34; Argumente übergeben&amp;#34;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Speichere deine Änderungen.&lt;/p>
&lt;h3 id="schritt-6-zuruck-zum-hotfix-branch">Schritt 6: Zuruck zum Hotfix-Branch&lt;/h3>
&lt;p>Gehe auf &lt;em>Git › Branches&amp;hellip;&lt;/em>, wähle den Hotfix-Branch aus und gehe auf &lt;em>Checkout&lt;/em>. Du solltest nun
einen Hinweis sehen, der dich vor dem Überschreiben von nicht committeten Änderungen warnt. Klicke auf
&lt;code>Don't checkout&lt;/code>.&lt;/p>
&lt;h4 id="schritt-7-stash">Schritt 7: Stash&lt;/h4>
&lt;p>Stashe deine lokalen Änderungen mit dem Git Befehl oder über das Kontextmenü in der IDE (muss auf der
geänderten Klasse aufgerufen werden).&lt;/p>
&lt;h3 id="schritt-8-checkout">Schritt 8: Checkout&lt;/h3>
&lt;p>Führe den Checkout auf dem Hotfix-Branch erneut aus. Überprüfe die main-Methode. Die Änderungen aus
Schritt 5 sollten nun nicht mehr vorhanden sein.&lt;/p>
&lt;h3 id="schritt-9-unstash">Schritt 9: Unstash&lt;/h3>
&lt;p>Kehre nun zum Feature-Branch zurück und überprüfe die Main-Methode. Auch hier sind die Änderungen aus
Schritt 5 nicht vorhanden. Überlege, warum das so ist.&lt;/p>
&lt;p>Führe nun &lt;code>git pop&lt;/code> oder &lt;code>git apply&lt;/code> auf dieser Klasse aus. Begründe deine Entscheidung!&lt;/p></description></item></channel></rss>