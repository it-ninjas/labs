<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome Ninja – Programmiersprachen</title><link>/de/docs/99_tools/programmiersprachen/</link><description>Recent content in Programmiersprachen on Welcome Ninja</description><generator>Hugo -- gohugo.io</generator><language>de</language><atom:link href="/de/docs/99_tools/programmiersprachen/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Java</title><link>/de/docs/99_tools/programmiersprachen/java/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/de/docs/99_tools/programmiersprachen/java/</guid><description>
&lt;h2 id="was-ist-java">Was ist Java?&lt;/h2>
&lt;p>Java ist eine objektorientierte Programmiersprache, die seit über zwei Jahrzehnten grosse Popularität geniesst. Die
Entwicklung begann Anfang der 1990er-Jahre beim US-amerikanischen Unternehmen &lt;strong>Sun Microsystems&lt;/strong>. 1995 erschien die
erste Java-Version. Seit der Übernahme von Sun durch &lt;strong>Oracle&lt;/strong> im Jahr 2010 wird Java von Oracle weiterentwickelt.&lt;/p>
&lt;p>Aktuell erscheint alle sechs Monate eine neue Java-Version. Die zuletzt veröffentlichte Version ist &lt;strong>Java 24&lt;/strong>
(März 2025). Die nächste geplante Version ist &lt;strong>Java 25&lt;/strong>, ein Long-Term-Support-Release (LTS), das im &lt;strong>September 2025&lt;/strong>
erscheinen soll.&lt;/p>
&lt;h2 id="wichtige-merkmale-von-java">Wichtige Merkmale von Java&lt;/h2>
&lt;h3 id="plattformunabhängigkeit-write-once-run-anywhere">Plattformunabhängigkeit: «Write once, run anywhere»&lt;/h3>
&lt;p>Java-Code wird nicht direkt von der Hardware ausgeführt. Stattdessen wird er vom &lt;strong>Compiler&lt;/strong> in sogenannten &lt;strong>Bytecode&lt;/strong>
übersetzt. Dieser Bytecode wird von der &lt;strong>Java Virtual Machine (JVM)&lt;/strong> interpretiert.&lt;/p>
&lt;p>Die JVM ist eine Software, die eine virtuelle Umgebung schafft – sie simuliert einen Computer innerhalb deines Rechners.&lt;br>
Weil es JVMs für Windows, Linux und macOS gibt, kann derselbe Bytecode auf allen Plattformen ausgeführt werden, &lt;strong>ohne
Anpassung am Code&lt;/strong>.&lt;/p>
&lt;p>Das macht Java besonders &lt;strong>plattformunabhängig&lt;/strong>: Einmal schreiben – überall ausführen.&lt;/p>
&lt;h3 id="objektorientierte-programmierung">Objektorientierte Programmierung&lt;/h3>
&lt;p>Java ist in erster Linie eine &lt;strong>objektorientierte Sprache&lt;/strong>. Das bedeutet: Fast alles besteht aus &lt;strong>Objekten&lt;/strong>, die
bestimmte Eigenschaften (Daten) und Fähigkeiten (Methoden) besitzen.&lt;/p>
&lt;p>In einem Programm beschreibst du Klassen – das sind &lt;strong>Baupläne&lt;/strong> für Objekte.&lt;/p>
&lt;p>Ein Beispiel: Ein &lt;em>Auto&lt;/em> könnte als Objekt Eigenschaften wie &lt;em>Farbe&lt;/em>, &lt;em>Marke&lt;/em> oder &lt;em>Anzahl Sitze&lt;/em> haben und Methoden wie
&lt;em>fahren()&lt;/em> oder &lt;em>stoppen()&lt;/em>.&lt;/p>
&lt;p>Ein Java-Programm besteht aus vielen solcher Objekte, die &lt;strong>zusammenarbeiten&lt;/strong>, um Aufgaben zu erfüllen.&lt;/p>
&lt;h3 id="weitere-programmierkonzepte-in-java">Weitere Programmierkonzepte in Java&lt;/h3>
&lt;p>Neben der Objektorientierung unterstützt Java auch weitere Konzepte:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Generische Programmierung&lt;/strong>&lt;br>
Ermöglicht es, Klassen und Methoden so zu schreiben, dass sie mit beliebigen Datentypen arbeiten.&lt;/p>
&lt;p>Beispiel: &lt;code>List&amp;lt;String&amp;gt;&lt;/code> oder &lt;code>List&amp;lt;Integer&amp;gt;&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Parallele Programmierung&lt;/strong>&lt;br>
Java erlaubt es, mehrere Aufgaben gleichzeitig auszuführen – etwa mit &lt;em>Threads&lt;/em>. Das ist hilfreich für performante
Anwendungen.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Funktionale Programmierung&lt;/strong>&lt;br>
Seit Java 8 unterstützt Java Funktionen als Objekte (z. B. Lambdas). Das erlaubt einen funktionalen Stil – oft
nützlich bei Streams und Events.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Prozedurale Programmierung&lt;/strong>&lt;br>
Bei der prozeduralen Programmierung steht nicht die Modellierung von Objekten im Vordergrund, sondern die Gliederung
in Funktionen (in Java: statische Methoden), die auf Datenstrukturen zugreifen.&lt;br>
Anstatt ein Objekt mit Methoden und Eigenschaften zu definieren, wird eine Datenstruktur verwendet, die an verschiedene
Funktionen übergeben wird.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div style="display: flex; align-items: flex-start; background-color: #e0f2fe; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-info.png" alt="it-ninja info" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Gerade als Einsteiger wirst du viele Programme &lt;strong>prozedural&lt;/strong> aufbauen. Du verwendest einfache Daten (z. B. &lt;code>int&lt;/code>,
&lt;code>String&lt;/code>, Arrays oder Listen) und rufst Methoden auf, ohne eigene Objekte zu definieren. ¨
Das hilft dir, die Grundlagen der Programmierung zu lernen, bevor du dich mit objektorientierten Konzepten beschäftigst.
&lt;/div>
&lt;/div>
&lt;h2 id="begriffe-zum-nachschlagen">Begriffe zum Nachschlagen&lt;/h2>
&lt;h3 id="bytecode-und-ausführung">Bytecode und Ausführung&lt;/h3>
&lt;p>Java-Programme werden in &lt;strong>Bytecode&lt;/strong> übersetzt – das ist ein plattformunabhängiger Zwischencode. Ausführbare Programme
benötigen eine spezielle Methode namens &lt;code>main&lt;/code>, z. B.:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HelloWorld&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>(String&lt;span style="color:#f92672">[]&lt;/span> args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System.&lt;span style="color:#a6e22e">out&lt;/span>.&lt;span style="color:#a6e22e">println&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hallo Java!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mehrere Klassen und Bibliotheken werden oft in einer &lt;strong>JAR-Datei&lt;/strong> (Java ARchive) zusammengefasst. Eine &lt;code>.jar&lt;/code> ist
technisch gesehen eine ZIP-Datei mit einem definierten Aufbau.&lt;/p>
&lt;h3 id="klassenpfad">Klassenpfad&lt;/h3>
&lt;p>Der &lt;strong>Klassenpfad&lt;/strong> (Classpath) sagt der JVM, &lt;strong>wo&lt;/strong> sie nach Klassen und Bibliotheken suchen soll. Er kann beim
Ausführen angegeben oder über Umgebungsvariablen gesetzt werden.&lt;/p>
&lt;h3 id="garbage-collector">Garbage Collector&lt;/h3>
&lt;p>Java kümmert sich automatisch um die Speicherbereinigung. Nicht mehr benötigte Objekte werden durch den &lt;strong>Garbage
Collector&lt;/strong> entfernt – du musst dich nicht selbst darum kümmern, wie z. B. in C oder C++.&lt;/p>
&lt;p>Das vereinfacht die Programmierung und verhindert viele typische Speicherfehler.&lt;/p>
&lt;h3 id="multithreading">Multithreading&lt;/h3>
&lt;p>Java unterstützt die gleichzeitige Ausführung von &lt;strong>mehreren Threads&lt;/strong>. Ein Thread ist ein Teilprozess, der unabhängig
vom Rest des Programms läuft.&lt;/p>
&lt;p>Das ist nützlich bei:&lt;/p>
&lt;ul>
&lt;li>parallelen Datenverarbeitungen&lt;/li>
&lt;li>Benutzeroberflächen&lt;/li>
&lt;li>Netzwerkanwendungen&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;a href="/de/docs/02_java/">Jetzt starten: Java-Programmierung lernen&lt;/a>&lt;/p></description></item></channel></rss>