




































































































































































































































[{"body":"Node.js Traditionell wurde JavaScript hauptsächlich im Browser verwendet, um interaktive Webseiten zu erstellen. Node.js ermöglicht es jedoch, JavaScript-Code ausserhalb des Browsers (z.B. direkt via Kommandozeile) auszuführen und bietet auch die Möglichkeiten, um serverseitige Anwendungen (Backends) mittles JavaScript zu entwickeln. Mit Node können wir später diverse Packages installieren und in unserer Webapplikation einsetzen.\nNodeJS ermöglicht es also, JavaScript als Programmiersprache im Backend zu verwenden. Zusätzlich verwenden viele Frontends wie Angular und React NodeJS als Grundgerüst für das Projekt.\nInstallation von Node.js In diesem Kapitel wir nun Node.js installiert, falls Node.js noch nicht installiert ist.\nZuerst prüfen, ob Node.js bereits auf dem System installiert ist:\n1  node --version   Falls Node.js noch nicht auf dem System installiert ist, kann Node.js über nvm (Node Version Manager) installiert werden.\nUm nvm zu installieren, verwende das Skriptinstall.sh, das sich innerhalb des repository github.com/nvm-sh/nvm befindet:\n1  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash   Verwende den Befehl\n1  nvm --version   um zu überprüfen, ob nvm richtig installiert wurde.\nnvm install\nUm eine spezifische Version\u003cx.y.z\u003evon Node.js zu installieren (Beispiel 12.22.7), verwende den Befehl\n1  nvm install \u003cversion\u003e   nvm list\nVerwende den Befehl\n1  nvm list   um alle installierten Versionen von Node.js aufzulisten.\nnvm use\nFalls bereits eine Version von Node.js auf dem System installiert war, und man nvm nachträglich installiert hat, kann mit dem Befehl\n1  nvm use system   die bereits vorher installierte Version zur Verwendung ausgewählt werden.\nEine über nvm installierte Version \u003cx.y.z\u003e von Node.js kannst du mit\n1  nvm use \u003cx.y.z\u003e   zur Verwendung auswählen.\nnvm alias default\nZum Schluss, verwende\n1  nvm alias default \u003cversion\u003e   um eine mit Angular kompatible Version \u003cversion\u003e (Beispiele system, 12.22.7) von Node.js als Standard festzulegen.\nnpm Node.js enthält einem integrierten Package-Manager namens “npm” (Node Package Manager). npm ermöglicht es, Libraries und Module von anderen Entwicklern herunterzuladen, zu installieren und in ihren eigenen Projekten zu verwenden. Er bietet Zugriff auf eine riesige Sammlung von Open-Source-Packages.\nnpm ermöglicht es auch eigene Packages zu erstellen und veröffentlichen, sodass andere Entwickler sie verwenden können. Durch das Veröffentlichen der Packages auf npm kann man es für die gesamte Community zugänglich machen und Updates und Verbesserungen bereitstellen.\nnpm Commands Hier sind einige wichtige npm-Befehle, die beim Arbeiten mit Node.js Projekten und dem Node Package Manager (npm) hilfreich sind:\n npm init: Erstellt eine neue package.json-Datei, um ein neues Projekt zu initialisieren. npm install: Installiert alle Dependencies, die in der package.json-Datei aufgeführt sind. Der einfachheit halber kann man auch einfach npm i schreiben. npm install \u003cpackagename\u003e: Installiert ein bestimmtes Package und fügt es zur package.json-Datei hinzu. npm uninstall \u003cpackagename\u003e: Deinstalliert ein Package und entfernt es aus der package.json-Datei. npm update: Aktualisiert alle Dependencies auf die neuesten Versionen, gemäss den in der package.json-Datei angegebenen Versionsbeschränkungen. npm run \u003cscriptname\u003e: Führt ein in der scripts-Sektion der package.json-Datei definiertes Skript aus. Zum Beispiel: npm run build oder npm run start.  packages.json npm verwendet eine Datei namens package.json, um Informationen über das Projekt und seine Dependencies zu speichern. Diese Datei enthält Metadaten wie den Namen des Projekts, die Version, die Autorinformationen und die Liste der Dependencies. Man kann das package.json manuell erstellen oder den Befehl npm init verwenden, um einen interaktiven Assistenten zu starten, der hilft, die Informationen einzugeben.\nIn der package.json Datei werden die Dependencies des Projekts aufgelistet. Es gibt zwei Arten von Dependencies: “dependencies” und “devDependencies”. “dependencies” sind Packages, die für die Ausführung der Anwendung erforderlich sind, während “devDependencies” Packages sind, die nur für die Entwicklung, Tests und den Build-Prozess verwendet werden. Wenn man ein Packages mit npm install installieren, wird es automatisch zur richtigen Kategorie hinzugefügt.\nZudem kann man auch benutzerdefinierte Skripte definieren, die bestimmte Aufgaben ausführen. Diese Skripte können verwendet werden, um Tests durchzuführen, den Code zu kompilieren, den Server zu starten und andere Entwicklungs- oder Build-Aufgaben zu automatisieren. Man kann die Skripte mit dem Befehl npm run \u003cscriptname\u003e ausführen.\npackages-lock.json Die package-lock.json-Datei ist eine Datei, die von npm automatisch generiert wird, sobald man das erste Mal npm install im Projektverzeichnis ausgeführt hat. Sie dient dazu, die genauen Versionen der heruntergeladenen Pakete und deren Dependencies festzuhalten. Das package-lock.json ermöglicht eine deterministische Wiederholbarkeit von Paketinstallationen in einem Projekt, was bedeutet, dass jeder Entwickler oder jede Build-Umgebung die gleichen Versionen der Pakete erhält.\nEs ist wichtig, die package-lock.json-Datei nicht manuell zu bearbeiten, da dies zu Inkonsistenzen und Problemen führen kann. npm soll die Datei automatisch generieren.\nnpm i vs npm ci Die Befehle npm i und npm ci werden beide verwendet, um die Dependencies eines Node.js-Projekts zu installieren. Es gibt jedoch einen wichtigen Unterschied zwischen den beiden Befehlen.\nnpm i installiert die neuste Version der Dependencies, auch wenn im packages.json eine ältere Version angegeben ist. Jedoch ist dies aber nur bei denjenigen die mit ^ beginnen der Fall, also z.B. ^12.2.12 und sich nur die hinterste Zahl ändert. Denn die hinterste Zahl bei einer Version bedeutet das nur fixes gemacht wurden. Wenn man nun so neue Versionen holt, wird die neue Version automatisch ins packages-lock.json geschrieben.\nnpm ci holt die Dependencies dann vom packages-lock.json bedeutet es holt die Dependencies direkt vom «resolved» und nicht wie npm i, welches beim lokalen Register holt. Zudem holt es mit der Version, welche je nachdem vom npm i erneuert wurde.\nnode_modules Um ein Package zu installieren, kann man den Befehl npm install \u003cpackagename\u003e verwenden. npm lädt das Package und alle seine Dependencies (Dependency) herunter und installiert sie in einem Verzeichnis namens node_modules im Projektordner. Wenn man dann den Code schreibt, kann man das installierte Package in den JavaScript-Dateien verwenden.\n5' - Einzelarbeit\nInstalliere Node.js unter folgendem Link: https://nodejs.org/en/. Verwende die LTS Version, diese werden für die meisten Nutzer empfohlen. Bei der Installation sind keine Anpassungen notwendig. Du kannst dich einfach durchklicken.  ","categories":"","description":"In diesem Kapitel wird Node.js genauer erläutert.\n","excerpt":"In diesem Kapitel wird Node.js genauer erläutert.\n","ref":"/docs/web/ide_advanced/01_nodejs/","tags":"","title":"Node.js"},{"body":"Bevor man mit dem neuen Kapitel JavaScript beginnen kann, sollte man nochmals das Kapitel Node JS Installation durcharbeiten und sicherstellen das alles installiert ist.\nJetzt wird es Zeit, dass du auch Programm-Logik auf deiner Website einbauen kannst. Dafür lernst du gleich die Programmiersprache JavaScript kennen, die von praktisch allen bekannten Browsern unterstützt wird.\nDamit du eine Übersicht über die Programmiersprache bekommst, kannst du z.B. dieses Video schauen, ohne dass du den ersten Satz verstehen musst.\nMotivation für JavaScript JavaScript hat sehr viele Verwendungen im Browser. Einerseits können Funktionen ähnlich wie mit Java programmiert werden, sodass z.B. Berechnungen ausgeführt werden können. Zudem kann aber auch direkt mit dem angezeigten Inhalt interagiert werden. So können Validierungen oder auch Animationen ausgeführt werden. Wenn du mal sehen willst, wie eine Website aussieht ohne JS kannst du dir hier eine Chrome extension herunterladen mit welcher du JS komplett ausschalten kannst.\nNun beginnen wir aber zuerst klein: Mit einem Button, der beim Klick eine MessageBox anzeigt.\n1 2 3 4 5 6 7  \u003cbutton onclick=\"onClickMeClick()\" type=\"button\"\u003eKlick mich\u003c/button\u003e \u003cscript\u003e function onClickMeClick() { alert('Klick mich nicht an!!'); } \u003c/script\u003e   Versuche zuerst, dieses Beispiel ohne Erläuterung zu verstehen.\n Erläuterung (click to expand) Zuerst hast du im HTML einen Button erstellt mit dem Text \"Klick mich\". Weiter unten siehst du ein \u003cscript\u003e-Element. Dort drin ist eine Funktion namens onClickMeClick() definiert. Die Funktion ruft alert(message: string) auf. Diese alert-Funktion öffnet eine MessageBox mit der übergebenen Nachricht.\nWie du siehst, wird die selbst definierte Funktion beim Klick auf den Button aufgerufen. Dies passiert, weil du diesen Aufruf im onclick-Attribut des \u003cbutton\u003es definiert hast. Beachte in diesem Beispiel, dass nicht die Funktion sondern deren Aufruf drin steht. Im Prinzip wird beim Button-Klick der Wert des onclick-Attributs ausgeführt. Theoretisch könntest du auch direkt onclick=\"alert('Klick mich nicht an!!')\" schreiben.\n JavaScript einbinden Wie du im oberen Beispiel gesehen hast, wird Javascript via \u003cscript\u003e-Tag eingebunden. Dein Code kann direkt im \u003cscript\u003e-Tag geschrieben werden:\n1 2 3  \u003cscript\u003e console.log('my Js Code'); \u003c/script\u003e   Du kannst aber dein Code auch in einem separatem .js File haben und via Script Tag referenzieren:\nindex.html\n1 2  \u003cscript src=\"mycode.js\"\u003e\u003c/script\u003e   mycode.js\n1  console.log('my Js Code');   Die zweite Variante ist meist sauberer, da Code und HTML sauber aufgeteilt wird. Bei unseren Übungen wirst du aber meist direkt im \u003cscript\u003e-Tag arbeite können ohne separates JS File.\n","categories":"","description":"Modul #F4 - JavaScript - Code im Browser auführen\n","excerpt":"Modul #F4 - JavaScript - Code im Browser auführen\n","ref":"/docs/web/javascript/01_js_intro/","tags":"","title":"JavaScript: Einführung"},{"body":"Was ist TypeScript Die Programmiersprache wurde von Microsoft entwickelt und wurde im Jahr 2012 mit der ersten Version veröffentlicht. Seitdem wird die Programmiersprache kontinuierlich weiterentwickelt. Zahlreiche JavaScript-Frameworks setzen heute auf die Verwendung von TypeScript. Dazu gehören zum Beispiel Angular 2+ und React.\nTypeScript bildet eine Erweiterung von JavaScript, fügt also JavaScript bestimmte Features hinzu. Es handelt sich dabei also um ein sogenanntes Superset von JavaScript.\nDa Quellcode geschrieben in TypeScript zu JavaScript transpiliert wird, ist der Code in jedem Browser lauffähig.\nVorteile von TypeScript  TypeScript hebt Fehler während der Kompilierung hervor, während JavaScript - zur Laufzeit. TypeScript unterstützt statische Typisierung. Ermöglicht bessere Code-Strukturierung und Objekt-Orientierte Programmiertechniken. TypeScript ist in jedem Browser oder JS Engine lauffähig. Hervorragendes “Tooling” mit IntelliSense, das beim Hinzufügen des Codes aktive Hinweise liefert.  Grundlegende Syntax Da es sich bei TypeScript um ein Superset von JavaScript handelt, ist JavaScript-Code auch gültiger TypeScript-Code. Jedoch fügt TypeScript darüber hinaus viele neue Funktionen hinzu.\nMit TypeScript wird JavaScript zu einer stark typisierten, objektorientierten Sprache, die C# und Java ähnelt. Dies bedeutet, dass TypeScript-Code für grosse Projekte leichter zu verstehen, verwenden und verwalten ist. Die starke Typisierung bedeutet auch, dass die Sprache vorkompiliert werden kann und dass Variablen keine Werte zugewiesen werden können, die ausserhalb ihres angegebenen Bereichs liegen. Wenn zum Beispiel eine TypeScript-Variable als Zahl deklariert ist, kann man dieser Variable keinen Textwert zuweisen.\nNull Safety In TypeScript gibt es standardmäßig keine “Null Safety” im Sinne einer statischen Typüberprüfung auf mögliche Null- oder Undefined-Werte. Das bedeutet, dass Variablen jeder Typ sein können, einschliesslich null oder undefined, es sei denn es wird explizit angegeben, dass sie einen anderen Typ haben sollen. Dies kann dazu führen, dass in TypeScript-Code unerwartete Fehler auftreten, wenn versucht wird, auf Eigenschaften oder Methoden von null- oder undefined-Variablen zuzugreifen. Solche Fehler treten normalerweise zur Laufzeit auf und werden nicht vom Compiler erkannt.\nUm das Risiko von Fehlern durch null- oder undefined-Werte zu reduzieren, kann man die Option strictNullChecks in der tsconfig.json-Datei aktivieren.\nTypanmeldungen Typdeklarationen können zu Variablen, Funktionsparametern und Funktionsrückgabetypen hinzugefügt werden. Der Typ folgt jeweils nach einem Doppelpunkt hinter dem Variablennamen:\n1  const num: number = 1;   Der Compiler überprüft dann die Typen während des Kompilierens und meldet allfällige Typfehler.\nDie verschiedenen Grundtypen von TypeScript sind hier ersichtlich.\nType Any Der Typ any ein spezieller Typ, der es ermöglicht Variablen, Funktionen und andere Objekte ohne explizite Typisierung zu deklarieren. Wenn eine Variable oder ein Objekt mit any deklariert wird, bedeutet dies, dass der Typ nicht eingeschränkt ist und dass alle Arten von Werten diesem Typ zugewiesen werden können, ohne dass eine Typenüberprüfung durchgeführt wird. Bedeutet das man so die gesamte Typisierung umgehen kann und dann wie bei JavaScript Typfehler erst während der Laufzeit sehen würde.\nBeispiel mit any, welches zu Laufzeitfehler führt:\n1 2 3 4 5 6  function add(a: any, b: any) { return a + b; } const result = add(\"3\", 5); console.log(result);   Der Objektorientierte Ansatz Bei der objektorientierten Programmierung handelt es sich um einen Programmierstil / eine Denkweise.\nMan kann sich das so vorstellen, dass alles in der objektorientierten Programmierung durch Objekte abgebildet wird. Jedes “Teil” eines Programmes wird durch ein Objekt beschrieben.\nEin Beispiel:\n In einer Spielewelt gibt es einen frei herumlaufenden Hund. Dann wäre dieser Hund nichts anderes als ein Objekt. Nun könnte man sich fragen, wie man diesen Hund wahrnimmt, denn nicht jeder Hund ist gleich. Sie könnten sich in Rasse, Gattung etc. unterscheiden. Ein Objekt kann also verschiedene Eigenschaften besitzen, diese werden auch Attribute genannt.\n Nun kann sich unser Hund von Anderen unterscheiden, jedoch kann er noch nicht bellen. Deshalb haben Objekte auch Funktionen (Methoden). In unserem Beispiel könnte der Hund z.B. über die Methode “bark()” verfügen, welche ihm erlaubt zu bellen.\nIn unserem Beispiel handelt es sich bei dem Hund um eine Klasse. Klassen sind also wie Baupläne für Objekte.\nNun sagen wir, dass es in unserer Spielwelt auch Katzen gibt. An dieser Stelle kommt dann die Vererbung ins Spiel.\nHunde sowie Katzen sind beides Tiere. In der Objektorientierten Programmierung würde man dazu also eine Klasse “Animal” erstellen. Die beiden Klassen “Cat” und “Dog” würden dann die Klasse “Animal” erben. Dies Bedeutet, dass sie die Eigenschaften der Klasse “Animal” übernehmen und durch ihre eigenen Eigenschaften erweitern.\nDa sich beide Tiere fortbewegen, könnte man also der Klasse “Animal” die Funktion “move()” geben, welche dann von den beiden anderen Klassen geerbt werden würde. Dadurch hat man verhindert, dass sich die Funktion zum bewegen mehrmals im Quellcode befindet.\nKlassen Ein einfaches Beispiel einer Klasse:\n1 2 3 4 5 6 7 8 9 10 11  class Greeter { greeting: string; constructor(message: string) { this.greeting = message; } greet() { return \"Hello, \" + this.greeting; } } let greeter = new Greeter(\"world\");   In diesem Beispiel wird eine neue Klasse “Greeter” deklariert. Die Klasse enthält 3 Member:\n Das Property “greeting” Den Konstruktor Die Methode “greet”  Wenn wir in einer Klasse auf ein Member innerhalb der Klasse referenzieren, verwenden wir this..\nAuf der letzten Zeile erstellen wir eine neue Instanz der Klasse Greeter mit new.\nVererbung In TypeScript können wir allgemeine objektorientierte Muster verwenden. Eines der grundlegendsten Muster in der klassenbasierten Programmierung ist die Möglichkeit, vorhandene Klassen durch Vererbung zu erweitern, um neue Klassen zu erstellen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  class Animal { move(distanceInMeters: number = 0){ console.log(`Animal moved ${distanceInMeters}m.`); } } class Dog extends Animal { bark(){ console.log(\"Woof!\"); } } const dog = new Dog(); dog.bark(); dog.move(10); dog.bark();   Dieses Beispiel zeigt die grundlegendste Vererbungsfunktion: Klassen erben Eigenschaften und Methoden von Basisklassen (Animal). Dog ist hier eine abgeleitete Klasse, die mit dem Schlüsselwort extends von der Basisklasse Animal abgeleitet wird. Abgeleitete Klassen werden häufig als Unterklassen bezeichnet, und Basisklassen als Superklassen.\nDa Dog die Funktionalität von Animal erweitert, konnten wir eine Instanz von Dog erstellen, die sowohl bark() als auch move() ausführen konnte.\nEin komplexeres Beispiel zur Vertiefung:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  class Animal { name: string; constructor(theName: string){ this.name = theName; } move(distanceInMeters: number = 0){ console.log(`Animal moved ${distanceInMeters}m.`); } } class Snake extends Animal { constructor(name: string){ super(name); } move(distanceInMeters: number = 5){ console.log(\"Slithering...\"); super.move(distanceInMeters); } } class Horse extends Animal { constructor(name: string){ super(name); } move(distanceInMeters: number = 45){ console.log(\"Galloping...\"); super.move(distanceInMeters); } } let sammy = new Snake(\"Sammy the Python\"); let tom: Animal = new Horse(\"Tom the Palomino\"); sammy.move(); tom.move(35);   In diesem Beispiel werden 2 neue Subklassen von Animal erstellt: Horse und Snake.\nEin Unterschied zum vorherigen Beispiel besteht darin, dass jede abgeleitete Klasse, die eine Konstruktorfunktion enthält, super() aufrufen muss, wodurch der Konstruktor der Basisklasse ausgeführt wird. Ausserdem müssen wir super() aufrufen, damit wir im Konstruktorkörper auf name mit this zugreifen können.\nKonsolenausgabe des Beispiels:\n1 2 3 4  Slithering... Sammy the Python moved 5m. Galloping... Tom the Palomino moved 34m.   ","categories":"","description":"Modul #F5 - TypeScript - JavaScript mit Typen.\n","excerpt":"Modul #F5 - TypeScript - JavaScript mit Typen.\n","ref":"/docs/web/typescript/01_ts_intro_typescript/","tags":"","title":"Einführung in TypeScript"},{"body":"","categories":"","description":"Entwickungsumgebung aufsetzen für das Arbeiten mit HTML, CSS und JavaScript.\n","excerpt":"Entwickungsumgebung aufsetzen für das Arbeiten mit HTML, CSS und …","ref":"/docs/web/ide_basic/","tags":"","title":"Frontend IDE Basics"},{"body":"","categories":"","description":"Exams zu HTML, CSS und JavaScript.\n","excerpt":"Exams zu HTML, CSS und JavaScript.\n","ref":"/exams/web/html_css/","tags":"","title":"HTML-, CSS- und JavaScript-Exams"},{"body":"IDE In den folgenden Kapiteln ist alles aufgeführt was man für das Programmieren mit HTML und CSS benötigt.\nVS Code Die Beispiele in diesem Modul werden mit Visual Studio Code erklärt. Visual Studio Code ist ein kostenloser Codierungseditor, mit welchem du schnell mit dem Coden beginnen kannst. Du kannst Visual Studio Code verwenden, um in beinahe jeder Programmiersprache zu programmieren, ohne den Editor zu wechseln. Es werden viele Sprachen unterstützt, darunter sind JavaScript, Angular, Vue und viele mehr. https://code.visualstudio.com/\nExtensions Folgende Extensions sind praktisch für die Entwicklung von Webapps mit VS Code:\nVS-Code: - Code Spell Checker - ESLint - GitLens - Material Icon Theme - Path Intellisense - Prettier – Code formatter - Auto Rename Tag - Auto Close Tag - Better Comments - Template String Converter - Live Server  IntelliJ IntelliJ IDEA ist eine IDE für Softwareentwicklung, die von JetBrains entwickelt wurde. Es ist eine der beliebtesten IDEs für die Entwicklung von Java-Anwendungen, bietet jedoch auch Unterstützung für viele andere Programmiersprachen und Technologien wie Kotlin, Scala, Groovy, JavaScript, TypeScript, HTML, CSS, SQL etc.\nIntelliJ kann man am besten über die JetBrains Toolbox herunterladen. https://www.jetbrains.com/lp/toolbox/\nExtensions (Plugins) Folgende Extensions sind praktisch für die Entwicklung von Webapps mit IntelliJ:\nIntelliJ: - Prettier - Rainbow Bracket - Key Promoter X - ESLint (muss mittels npm instlliert werden, Anleitung befindet sich im Kapitel zu den Linter.) - LiveEdit  Vim Vim steht für “Vi IMproved” und ist ein erweiterter Texteditor, der auf dem älteren vi-Editor basiert. Es ist ein beliebter Texteditor unter Entwicklern und Systemadministratoren, der auf verschiedenen Betriebssystemen wie Linux, macOS und Windows verwendet werden kann. Vim zeichnet sich durch seine Effizienz, Flexibilität und Erweiterbarkeit aus.\nFür VS-Code muss man das Plugin Vim und für IntelliJ das Plugin IdeaVim installieren, damit man diesen Editor verwenden kann.\nLive-Server Wozu braucht man den Live-Server? Normalerweise verwendet der Browser HTTP, um Websites und andere Ressourcen von einem Server zu laden. Beim lokalen Entwickeln greifen Entwickler jedoch häufig direkt über den Browser auf das Dateisystem zu. Es gibt jedoch bestimmte Techniken, wie z. B. JavaScript-Module, die Ressourcen nur über HTTP laden können. Aus diesem Grund müssen wir für bestimmte Funktionen auch lokal einen Webserver verwenden, der die Ressourcen über HTTP bereitstellt.\nDie Live-Server-Erweiterung erfüllt genau diese Anforderungen: Sie ermöglicht es, Dateien in einem bestimmten Ordner (dem Projektverzeichnis) auf deiner Festplatte über HTTP verfügbar zu machen. Ein zusätzliches Feature besteht darin, dass deine Seite automatisch aktualisiert wird, sobald du Änderungen vornimmst.\nLive-Server in VS Code Die Live-Server Extension ist eine beliebte Erweiterung für Visual Studio Code, die Entwicklern dabei hilft, Webanwendungen während der Entwicklung automatisch neu zu laden. Sie ermöglicht es, eine lokale Entwicklungsumgebung einzurichten und den Code in Echtzeit zu aktualisieren, ohne die Seite manuell neu zu laden.\nLive-Server erstellt einen einfachen Entwicklungsserver auf dem lokalen Rechner, der die Webanwendung unter einer lokalen Adresse (z.B. “http://localhost:5500”) bereitstellt. Dadurch kann man die Anwendung in einer isolierten Umgebung testen und auf sie zugreifen.\nNeben der Bereitstellung von HTML-, CSS- und JavaScript-Dateien unterstützt Live-Server auch das Laden von statischen Dateien wie Bildern, Schriftarten und anderen Ressourcen. Dadurch kann man die gesamte Webanwendung über den Entwicklungsserver verfügbar machen.\nUm eine Datei (z.B. eine HTML-Datei) via Live Server im Browser zu öffnen, tätige einen Rechtsklick auf die gewünschte Datei und klicke auf “Open with Live Server”. Nun geht die gewünschte Seite im Browser auf und ist erreichbar via die URL “http://localhost:5500”.\nGanz unten in VS Code siehst du nun einen versteckten Button mit der Aufschrift “Port 5500”. Wenn du darauf klickst, beendest du den Live Server wieder. [Besser noch ein Bild hinzufügen]\nLive-Server in IntelliJ Wenn man jedoch IntelliJ als seine IDE wählt, kann man ähnlich wie bei VS Code einen Liv Server mittels Extension erhalten. Dazu muss mah jedoch die Extension LiveEdit installieren. Nach dem man es installiert hat muss man es noch ein wenig konfigurieren, dafür einfach in den Einstellungen auf “Build, Execution, Deployment” -\u003e Debugger -\u003e Live Edit. Dort muss man folgendes anpassen:\n “Update Node.js application on changes in” Checkbox anwählen und Millisekunden auf 300ms ändern. “Update application in Chrome on changes in” Checkbox anwählen und Millisekunden auf 300ms ändern. “JavaScript, HTML and CSS” auswählen. “Track changes in files compiled to JavaScript, HTML or CSS” Checkbox anwählen. “Restart if hotswap fails” Checkbox anwählen.  Das gesamte nun sichern und danach kann es verwendet werden. Dazu muss man einfach den Debugger starten und ein Chromefernster öffnet sich. Man kann nun im Code Änderungen vornhemen solange man im Debugger ist und es wird live im Chromefenster aktualisiert.\n15' - Einzelarbeit\nInstalliere die IDE, die genannten Extensions, und richte sie entsprechend deiner Präferenz ein.  Git Git ist dir bereits bekannt ein Codeversionierungssystem, welches bei diesem Modul genutzt wird.\n5' - Einzelarbeit\nInstalliere Git. Hierfür gibt es zwei Möglichkeiten: 1. Vielleicht klappt es unter Windows direkt mit diesem Kommandozeilenbefehl: winget install --id Git.Git -e --source winget 2. Ansonsten lade es unter folgendem Link herunter: https://git-scm.com/. Bei der Installation sind keine Anpassungen zwingend. Vielleicht helfen dir in Zukunft die \"Components\" \"Windows Explorer integration - Git Bash Here\" und \"Add a Git Bash Profile to Windows Terminal\". Ansonsten kannst du dich einfach durchklicken.  ","categories":"","description":"In diesem Kapitel wird die IDE beschrieben.\n","excerpt":"In diesem Kapitel wird die IDE beschrieben.\n","ref":"/docs/web/ide_basic/01_ide/","tags":"","title":"IDE"},{"body":"Was ist das Frontend? Das Wort Frontend deutet schon darauf hin, worum es sich handelt. Es ist das, was der Nutzer sieht. Bei einer Webapplikation ist es das, was dem Besucher im Browser angezeigt wird: die Benutzeroberfläche.\nWas ist ein Framework? Ein Framework ist eine Art “Grundgerüst” für die Entwicklung von Software, welche es dem Entwickler ermöglicht, schnell und effizient Applikationen zu entwickeln, ohne von Grund auf beginnen zu müssen.\nJS Frameworks JavaScript-Frameworks sind also da, um die Arbeit mit JavaScript einfacher und reibungsloser zu machen.\nDurch verschiedenste Web-Frameworks wird die Gestaltung von Websites sehr flexibel, daher bevorzugen es die meisten Entwickler.\nDie bekanntesten JS-Frameworks:\n Angular Eines der leistungsstärksten, effizientesten und Open-Source-JavaScript-Frameworks ist Angular. Google betreibt dieses Framework, welches für die Entwicklung einer Single Page Application (SPA) verwendet wird.\nReact Das von Facebook erstellte Framework React hat innerhalb kurzer Zeit an Popularität gewonnen. Es wird verwendet, um die dynamische Benutzeroberfläche der Webseiten mit hohem eingehenden Datenverkehr zu entwickeln und zu betreiben.\nVue.js Obwohl dieses JavaScript-Framework erst im Jahr 2016 entwickelt wurde, hat es bereits seinen Weg in den Markt gefunden und sich durch verschiedene Funktionen bewährt. Es ist sehr zuverlässig um Cross-Plattform zu entwickeln.\n","categories":"","description":"Modul #F6 - Angular - Was sind JavaScript Frameworks?\n","excerpt":"Modul #F6 - Angular - Was sind JavaScript Frameworks?\n","ref":"/docs/web/angular/01_1_angular_javascript_frameworks/","tags":"","title":"Javascript Frameworks"},{"body":"Aufgaben In diesen Aufgaben wirst du eine Applikation erstellen, die dir Informationen über verschiedene Velos anzeigt. Erstelle die Applikation anhand des bereitgestellten Codes und den dazugehörigen Informationen.\nAufgabe 1 Folgender Code ist gegeben: Datei ../interfaces.ts:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69  export interface Bicycle { name: string; url: string; } export interface BicycleImage { displayLink: string; fileFormat: string; htmlSnippet: string; htmlTitle: string; image: { byteSize: number; contextLink: string; height: number; thumbnailHeight: number; thumbnailLink: string; thumbnailWidth: number; width: number; }; kind: string; link: string; mime: string; snippet: string; title: string; } export interface GoogleCustomSearchResponse { kind: string; url: { type: string; template: string; }; queries: { request: { count: number; cx: string; inputEncoding: string; outputEncoding: string; safe: string; searchTerms: string; searchType: string; startIndex: number; title: string; totalResults: string; }[]; nextPage: { count: number; cx: string; inputEncoding: string; outputEncoding: string; safe: string; searchTerms: string; searchType: string; startIndex: number; title: string; totalResults: string; }[]; }; searchInformation: { searchTime: number; formattedSearchTime: string; totalResults: string; formattedTotalResults: string; }; items: BicycleImage[]; context?: { title: string; }; }   Datei bicycle.component.ts:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  import { Component, OnInit } from '@angular/core'; import { HttpClient } from '@angular/common/http'; import { Bicycle, BicycleImage, GoogleCustomSearchResponse } from '../interfaces'; @Component({ selector: 'app-bicycle', templateUrl: './bicycle.component.html', styleUrls: ['./bicycle.component.scss'], }) export class BicycleComponent implements OnInit { public bicycle: Bicycle = { name: '', url: '' }; favoriteBicycle: BicycleImage[] = []; constructor(private httpClient: HttpClient) {} ngOnInit(): void { this.bicycle.name = 'Specialized Diverge Pro Carbon'; this.bicycle.url = 'https://assets.specialized.com/i/specialized/96220-10_DIVERGE-PRO-CARBON-ETAP-REDWD-SMK-CHRM_HERO?bg=rgb(241,241,241)\u0026w=2500\u0026h=1406\u0026fmt=auto'; } public displayBicycleName() { alert(this.bicycle.name); } public getFavoriteBicycleImage() { const url = 'https://www.googleapis.com/customsearch/v1?key=AIzaSyDNGfS6NUdgwXOwKu9xlZPJFm84ylG6J4g\u0026cx=005124428384360536924:rstfldysumw\u0026q=' + this.bicycle.name + '\u0026searchType=image\u0026safe=high'; this.httpClient.get\u003cGoogleCustomSearchResponse\u003e(url).subscribe((response: GoogleCustomSearchResponse) =\u003e { for (let i = 0; i \u003c 4; i++) { let item: BicycleImage = response.items[i]; item.image.height = (200 / item.image.width) * item.image.height; item.image.width = 200; this.favoriteBicycle.push(item); } }); } }   Folgendes muss angezeigt werden, wenn die Seite geladen wurde:\n “Wie heisst mein Fahrrad?” ist mit der Funktion “displayBicycleName()” verknüpft. “Mein Liebslingsfahrrad suchen” ist mit der Funktion “getFavoriteBicycleImage()” verknüpft. Für die Anzeige der Lieblingsfahrräder muss ein *ngFor gebraucht werden. Tipp: Die Weite und Höhe der Bilder kann direkt mit einem Propertybinding gemacht werden.  Folgendes wird nach dem Klick auf “Wie heisst mein Fahrrad?” angezeigt:\nFolgende Seite wird nach dem Klick auf “Mein Lieblingsfahrrad suchen” angezeigt:\nAufgabe 1.1 Passe den bestehenden Code aus Aufgabe 1 so an, dass das Inputfeld ein FormControl ist. Zudem soll neu dieses Inputfeld als Suche funktionieren, das bedeutet das man der Funktion der Wert des Inputs übergeben kann. So soll dann immer die Bilder zum Wert angezeigt werden und auch der Text “Mein Lieblingsfahrrad: \" sollte immer den Wert es Inputs anzeigen.\nAufgabe 2 Diese Aufgabe wird ein nun grösseres Projekt, der Sinn hinter diesem ist das Verwalten der Fahrräder mit einem objekt-orientierten Ansatz. Zusätzlich soll die Trennung von Modell-Klassen, Services und Components detaillierter betrachtet werden. Zudem besitzt man nach Abschluss der Aufgabe ein richtiges und praxisorientiertem Beispiel für ein Frontend.\nErstelle ein neues Angular Projekt.\nIm neu erstellten Projekt wollen wir Daten für folgende (Datenbank-)Entitäten mit einem objekt-orientierten Ansatz abbilden: Folgende Anforderungen sind gegeben:\n Behalte die Ordnerstruktur korrekt (Ordner für die Components, Ordner für die Services, etc.). Erstelle für jede Entität (ohne die Zwischentabelle Bicycle_Type) des Models eine geeignete Modell-Klasse. Erstelle für jede Modell-Klasse einen Service. Erstelle bei jedem Service Beispieldaten. Der BicycleService enthält folgende Funktionen:  getBicycle(id: number): Gibt ein bestimmtes Bicycle über die ID zurück. getAllBicycle(): Gibt alle Bicycles zurück. Ein Bicycle hat stellvertretend für den Typ und die Marke nur die dazugehörige id. getFullBicycle(id: number): Gibt alle Bicycles zurück. Ein FullBicycle hat den effektiven Wert des Typs und der Marke.   Der BrandService enthält folgende Funktionen: getBrand(id: number) und getBrandName(id: number). Der TypeService enthält folgende Funktionen: getTypes(ids: number[]) und getTypesName(ids: number[]). Sollte der Benutzer bei den Services versuchen etwas zu getten was es nicht gibt sol einen Fehler geworfen werden mit throw Error. Erstelle einen globalen ErrorHandler um die möglichen Fehler der Services abzufangen und gib eine Mitteilung damit der Benutzer weiss, das ein Fehler passierte (Subject verwenden). Erstelle einen neuen Component um die Daten alles Fahrräder anzuzeigen.  Aufgabe 2.1 Erweitern wir die Anwendung nun ein wenig.\n Erstelle einen weiteren neuen Component, welcher ein Eingabefeld, mit ReactiveForms, besitzt um nach einem Fahrrad zu suchen und dieses anzuzeigen. Erstelle eine Navigation für zwischen den Components hin und her zu wechseln. Erstelle eine Route für die Components. Der Component welcher alle Fahrräder anzeigt ist zudem die Defaultroute. Füge auf der Seite aller Fahrräder zwei Buttons hinzu. Einer um die Such-Seite zu aktiveren und den anderen um sie zu deaktivieren. Verwende hier ein BehaviorSubject um den momentan State zu kennen. Erstelle einen Guard welcher dich nur zu der Suche-Seite lässt, wenn du diese aktiviert hast mittels Button. Erstelle auch ein Routing auf den neu zu Erstellenden Component, welche mithilfe eines Parameters alle Fahrräder (der name, wert, marke und typen) der jeweiligen Marke anzeigt. Zudem soll die Marke als Titel der Seite stehen. Verlinke die brand_id, als routerLink auf der Seite aller Fahrräder um auf den neuen Component zu gelangen.  Aufgabe 2.2 In den vorherigen Aufgaben hast du eine Grundstruktur geschaffen für die Anzeige. Wenn man nach einem Fahrrad sucht, sollte nun das Ergebnis mit einer Pipe angepasst werden.\n Erstelle nun eine Pipe welche die Spalte value im Format 1'720.00 CHF anzeigt. Der Währungstyp wird mit einem Parameter weitergegeben. Sofern nichts angegeben wird, wähle Standardmässig CHF. Geh davon aus das in der Spalte value auch Zahlen wie 1287.87 oder 5421.21 gespeichert sind. Runde diese je nachdem auf oder ab. Auch das Hochzeichen (') soll immer nach 3 Stellen erscheinen. Erstelle eine weitere Pipe, welche den Markennamen nur mit Grossbuchstaben anzeigt und hinter den Markennamen ein Copyrightzeichen (©) setzt.  Wichtig: Wende die Pipe im Template an und nicht im Typescript.\nAufgabe 2.3 Um die Anwendung nun ein bisschen schöner darzustellen, brauchen wir nun Angular Material. Hier kannst du selbst auswählen welche Components du verwenden möchtest. Du musst jedoch mindestens 5 verschiedene Components in deiner Anwendung verwendet haben.\n","categories":"","description":"Aufgaben zu Angular.\n","excerpt":"Aufgaben zu Angular.\n","ref":"/labs/web/angular/01_angular/","tags":"","title":"Labs zu Angular"},{"body":"Aufgaben Aufgabe 1 Erstelle eine neue TypeScript-Projektstruktur und richte eine tsconfig.json-Datei ein, um den TypeScript-Compiler für das Projekt zu konfigurieren.\n Erstelle ein neues Verzeichnis für dein TypeScript-Projekt. Navigiere in das Verzeichnis und Initialisiere das Projekt mit den Node Befehlen. Diese können hier nachgelesen werden. InstalliereTypeScript. Erstelle eine tsconfig.json-Datei im Stammverzeichnis des Projekts. Und richte diese anhand der folgenden Informationen korrekt ein:  ECMAScript-Version = es6 Modulsystem = commonjs Ausgabeverzeichnis = dist Typen-Check-Modus = true   Erstelle im Projektverzeichnis ein Unterverzeichnis namens src. Erstelle eine TypeScript-Datei mit dem Namen index.ts im Verzeichnis src und schreibe darin eine Funktion, welche einen Parameter entgegennimmt und diesen ausgibt (Typisiere zuerst den Parameter nicht und prüfe, ob die tsconfig-Datei funktioniert. Wenn die tsconfig-Datei korrekt ist, wird die IDE folgendes anzeigen: Parameter '' implicitly has an 'any' type.ts). Rufe danach in diesem File die Funktion mit dem Parameter HelloWorld! auf. Transpiliere die TypeScript-Datei. Führe die JS-Datei aus.  In der Konsole solltest du HelloWorld! sehen.\nAufgabe 2 - Einzelarbeit\nLade die Datei herunter und fülle wo nötig Quellcode ein. Die Person soll sich folgendermassen vorstellen:\n1  Hallo, mein Name ist [Name].   Die Grundstruktur, sowie die letzten 2 Codezeilen dürfen nicht verändert werden.\nAufgabe 2.1 - Einzelarbeit\nIn dieser Übung wollen wir die Vererbung in einem Fallbeispiel anwenden. Wir erweitern in dieser Aufgabe den Quellcode von Übung 2. Erstelle dazu am Besten gleich eine neue Datei und kopiere den Quellcode von Aufgabe 2. Lösche die letzten 2 Zeilen, sodass nur noch die Klasse “Person” übrig ist. Erstelle anschliessend die Klasse Friend, welche die Klasse Person erbt. Diese Klasse soll die Methode timeKnown(), sowie introduceSelf() der Parent-Klasse zur Verfügung stellen. Die Methode timeKnown() soll folgendes ausgeben können: “Wir sind Freunde seit [AnzahlJahre] Jahren” Achte also darauf, welche zusätzlichen Eigenschaften Friend besitzen muss. Erstelle am Schluss (wie bei Übung 2) eine neue Instanz von Friend\" Verwende als Parameter “Peter” und “5”. Führe dann introduceSelf() und timeKnown() aus.\nIn der Konsole sollte Dir nun folgendes angezeigt werden.\nHallo, mein Name ist Peter\nWir sind Freunde seit 5 Jahren\nAufgabe 3 - Einzelarbeit\nLade diese Datei herunter. In dieser Aufgabe wollen wir Benutzereingabe in der Konsole verarbeiten. Dazu verwenden wir in diesem Beispiel readline(https://nodejs.org/api/readline.html) von NodeJS. Wir wollen nun ein kleines Programm schreiben, welches wie folgt aussieht.\n1 2 3 4  Wie ist dein name? Hansli hallo Hansli War diese Aufgabe lehrreich für dich= [j / n]j Super!   1 2 3 4  Wie ist dein name? Hansli hallo Hansli War diese Aufgabe lehrreich für dich= [j / n]n Schade! :(   Zuerst wird der Anwender nach seinem Namen gefragt. Danach wird er begrüsst. Und anschliessend wird gefragt ob diese Aufgabe lehrreich für ihn war.\nFülle in der Aufgabendatei den benötigten Code an den entsprechenden Stellen ein.\n- Info zu readline.\nUm readline benutzen zu können, musst du erst den entsprechenden npm-Befehl ausführen. Achte darauf, dass du den Befehl im selben Verzeichnis ausführst, indem sich die .ts-Datei befindet!\nAufgabe 4 Implementiere eine Funktion, welche den Durchschnitt eines Numberarrays berechnet. Die Funktion sollte nur Numberarrays akzeptieren und eine einzelne Zahl zurückgeben. Wenn das Array jedoch leer ist sollte NaN (Not a Number) zurückgegeben werden.\nAufgabe 5 Implementiere eine User Klasse mit den Properties name und email. Die Klasse besitzt zwei Funktionen, eine um die email zu validieren (mit dem Format “example@example.com”) und die andere um einen Begrüssungsnachricht zu erhalten in welcher der Name und die Email genannt wird.\nAufgabe 6 Implementiere eine ShoppingCart Klasse, welche den ShoppingCart eines Onlineshops repräsentieren soll. Die Klasse sollte Funktionen für das hinzufügen von Produkten, dem Errechnen des gesamten Preises und für das Anzeigen der sich im ShoppingCart befindenden Produkten haben. Ein Produkt sollte einen name und price haben.\n","categories":"","description":"Einfache Aufgaben zu den Basics von TypeScript.\n","excerpt":"Einfache Aufgaben zu den Basics von TypeScript.\n","ref":"/labs/web/typescript/01_typescript/","tags":"","title":"Labs zu den TypeScript-Basics"},{"body":"","categories":"","description":"Exams zu Java Technologie\n","excerpt":"Exams zu Java Technologie\n","ref":"/exams/java/","tags":"","title":"Java Exams"},{"body":"Ziele  Du kennst den allgemeinen Aufbau einer Datenbank und kannst ihn erklären Du kennst den Unterschied zwischen raltionalen und No-SQL Datenbanken Du weisst wann welcher Datenbank-typ sinn macht Du kennst die wichtigsten Datentypen und ihren Nutzen  Was ist eine Datenbank? Eine Datenbank ist ein System zur elektronischen Verwaltung von Daten. Grundsätzlich sagt der Name “Datenbank” bereits was sie ist: In einer Datenbank werden Daten in einer bestimmten Ordnung abgelegt. Ähnlich wie bei einer normalen Bank werden die Daten an einem klar definierten Ort abgespeichert. Fast so wie bei deinem Bankkonto, wo jeweils der Lohn eingezahlt wird.\nEine Datenbank ist meist in Stufen aufgebaut, die wie folgt aussehen können:\nZu oberst ist die Datenbank an sich. Sie ist eigentlich das Gebäude der Bank wo schlussendlich die Infrastruktur, sowie das Geld zu finden ist.\nDie nächste Stufe ist das Schema. Dieses ist mit einem Raum zu vergleichen, der viele verschiedene Aktenschränke beinhaltet.\nDiese Aktenschränke wären in einer Datenbank die Tabellen. Die Tabellen beinhalten schlussendlich die verschiedenen Daten, wie zum Beispiel dein erwähntes Bankkonto mit deinem Kontostand.\nSchlussendlich sieht der Aufbau also so aus:\nSchema und Tabelle Ein Schema ist eine strukturierte Art und Weise, wie Daten organisiert werden. Es legt fest, wie die Datenbank aufgebaut ist und wie die Daten gespeichert und abgerufen werden können. Eine Tabelle ist ein Tabellenblatt mit Spalten und Zeilen, in dem die eigentlichen Daten gespeichert werden. Schemata und Tabellen helfen dabei, Daten organisiert und leicht zugänglich zu halten. Sie ermöglichen es uns, Daten effizient abzufragen, zu aktualisieren und zu verwalten. Schemata und Tabellen sind auch wichtig, um die Sicherheit und Integrität der Daten zu gewährleisten, indem sie Zugriffsrechte und Einschränkungen festlegen.\nArten von Datenbanken In diesem Kapitel soll ein kleiner Überblick der verschiedenen Arten von Datenbanken und deren Vor- und Nachteile geklärt werden.\nDie am meisten verwendeten Datenbank Arten sind Relationale (SQL) und NO-SQL Datenbanken. Relationale (SQL) Datenbanken werden klar am häufigsten eingesetzt und sind auch am bekanntesten\n Bei den Übungen, sowie Exams werden ausschliesslich Relationale (SQL) Datenbanken verwendet.\n Relational (SQL) Relationale Datenbanken sind ähnlich wie Excel Tabellen aufgebaut. Der Name kommt vom Konzept der Relationen (Tabellen) , die es ermöglichen, Daten logisch und strukturiert zu speichern und abzurufen. Sie verwenden Tabellen, die jeweils Zeilen und Spalten beinhalten (auch Rows und Columns genannt). Pro Spalte (Column), auch Attribut genannt, muss ein Datentyp festgelegt werden. Dieser Datentyp definiert, welche Art von Daten in dieser Spalte gespeichert werden kann. Beispiel: Eine Spalte mit dem Namen “Alter” hat einen nummerischen Datentyp. Also können ausschliesslich Zahlen in dieser Spalte eingegeben werden.\nEine Zeile (Row), auch Tupel genannt, beinhaltet jeweils einen ganzen Datensatz, wie beispielsweise alle Benutzerdaten.\nQuelle: https://de.wikipedia.org/wiki/Datenbanktabelle\nNO-SQL Im Gegensatz zu relationalen Datenbanken speichern NoSQL-Datenbanken Daten in Formaten wie Dokumenten, Schlüssel-Wert-Paaren, Spalten oder Graphen. Dies ermöglicht es, unstrukturierte Daten effektiver zu speichern und abzurufen. Außerdem sind NoSQL-Datenbanken horizontal skalierbar, was bedeutet, dass sie auf mehrere Server verteilt werden können, um die Leistung zu verbessern und die Belastung auf mehrere Maschinen zu verteilen.\nWie erklärt gibt es viele verschiedene Ansätze bei NO-SQL, deshalb gibt es auch keine gemeinsame Syntax wie es sie bei SQL gibt. Bei den verschiedenen Anbietern kann also die Verwendung sehr unterscheiden. Auch wegen der verschiedenen Speicherarten ist keine NO-SQL Datenbank wie die andere.\nQuelle: https://www.geeksforgeeks.org/types-of-nosql-databases/\nWann verwende ich welche Datenbank? Eine relationale Datenbank eignet sich gut für Anwendungsfälle, bei denen eine komplexe Datenstruktur mit starken Beziehungen zwischen den Daten besteht, z. B. in Unternehmenssystemen oder Finanzanwendungen, da sie eine konsistente und sichere Datenhaltung gewährleistet.\nNoSQL-Datenbanken sind nützlich, wenn Flexibilität und Skalierbarkeit Priorität haben und wenn die Datenstruktur häufig geändert werden muss oder es viele unstrukturierte oder semistrukturierte Daten gibt, wie beispielsweise in Big Data-Anwendungen, sozialen Netzwerken oder Echtzeit-Analysen.\nDatentypen In diesem Teil werden kurz die wichtigsten Datentypen aufgelistet. Je nach Datenbank können die Namen der Datentypen abweichen, sollten jedoch von der Funktionalität gleich sein. In dieser Auflistung wurden die PostgreSQL Datentypen verwendet:\n   Typ-Name Beschreibung Beispiel     INTEGER Ganze Zahlen ohne Nachkommastellen im Bereich von -2.147.483.648 bis 2.147.483.647. 123   NUMERIC Genaue Dezimalzahlen mit beliebiger Anzahl von Dezimalstellen, häufig in der Finanz- und Buchhaltungsbranche verwendet. 1234.567   CHAR(n) Zeichenkette mit fester Länge von n Zeichen, aufgefüllt mit Leerzeichen, falls kürzer. ‘ABC’   VARCHAR(n) Zeichenkette mit variabler Länge bis maximal n Zeichen. ‘OpenAI’   DATE Datumsangaben im Bereich zwischen 4713 v. Chr. und 5874897 n. Chr. ‘2023-05-31’   TIME Zeitwerte im Bereich zwischen 00:00:00 und 24:00:00. ‘14:30:00’   TIMESTAMP Datum und Uhrzeit kombiniert, häufig für Zeitstempel in Anwendungen verwendet. ‘2023-05-31 14:30:00’   BOOLEAN Wahrheitswerte (TRUE oder FALSE), oft für Ja/Nein-Entscheidungen verwendet. TRUE    Wenn du noch mehr über die einzelnen Datentypen erfahren möchtest, findest du unter diesem Link alle verfügbaren Datentypen in PostgreSQL: Liste aller Datentypen (PostgreSQL)\n","categories":"","description":"","excerpt":"Ziele  Du kennst den allgemeinen Aufbau einer Datenbank und kannst ihn …","ref":"/docs/database/01_db-erklaert/","tags":"","title":"Datenbank 101"},{"body":"Ziele  Ich habe die Ersteinrichtung des Laptops vollständig durchgeführt Ich habe die notwendigen Programme heruntergeladen und installiert Ich verstehe was ein Proxy ist und wie ich ihn einstellen muss   Programme und Tools Die folgenden Programme sollten heruntergeladen und installiert werden, sie werden für die Grundausbildung verwendet.\n   Anwendung Link Zweck     JetBrains Toolbox (optional) https://www.jetbrains.com/toolbox/app/ Management für Entwicklungsumgebungen   IntelliJ IDEA Durch die JetBrains Toolbox oder direkt unter https://www.jetbrains.com/de-de/idea/download/ Entwicklungsumgebung, beim Starten den Lizenzserver eintragen: http://intellij-license.sbb.ch   Notepad++ https://notepad-plus-plus.org/downloads/ Erweiterter Texteditor mit vielen nützlichen Funktionen   Google Chrome https://www.google.com/intl/de/chrome/ Web-Browser von Google mit sehr guten Entwickler-Funktionen   GIT https://git-scm.com/download/win Zugriff auf das Versionsverwaltungssystem GIT   Apache Maven https://maven.apache.org/download.cgi Build Management Tool von Apache, beim Herunterladen das Binary auswählen (nicht die Source)   JDK https://www.oracle.com/java/technologies/javase-jdk14-downloads.html Java Development Kit zur Herstellung von Java-Anwendungen   Postman https://www.postman.com/downloads/ Anwendung zum Absetzen von Requests an REST-Schnittstellen     Firewall / Sicherheit Dein Betriebssystem verfügt mit dem Windows-Betriebssystem über eine eigene Firewall. Du bist persönlich für deren Konfiguration verantwortlich. Gleichzeitig verfügt das SBB-Netzwerk selbstverständlich über entsprechende Schutzmechanismen, darunter auch diverse Firewalls. Im Intranet der SBB ist der Besuch von diversen Webseiten eingeschränkt. Dein Browser informiert dich sofort, wenn du auf eine nicht zugelassene Seite navigierst.\nLies den folgenden Artikel im Intranet betreffend Weisungen über Datensicherheit und Datenschutz: https://sbb.sharepoint.com/sites/intranet_servicessupport/SitePages/datensicherheit-und-datenschutz.aspx\n Proxy Ein Proxy ist eine Kommunikationsstelle in einem Netzwerk. Je nachdem, in welchem Netzwerk du dich befindest ist die Konfiguration eines Proxys unumgänglich. Typ: Hostname: Port: Kein Proxy für: Proxy Authentifizierung:\nDiese Einstellungen können in Applikationen wie IntelliJ oder Postman hinterlegt werden.\n","categories":"","description":"Modul #O4 - Entwicklungsumgebung\n","excerpt":"Modul #O4 - Entwicklungsumgebung\n","ref":"/docs/java/entwicklungsumgebung/","tags":"","title":"Entwicklungsumgebung einrichten"},{"body":"Gegeben Gegeben ist das folgende Array mit Zahlen:\n1 2 3 4 5 6 7 8 9 10 11  int[] numbers = { -8, 0, 13, 0, -8, 23, -22, 18, -6, -1, -21, -1, 2, 20, -24, 21, 25, -16, -10, -2, -20, 15, -15, 0, -16, -19, 13, 24, -3, 7, 21, -15, 21, -11, 4, -17, 3, 11, 22, 12, 11, 12, 6, -4, -21, -20, -24, -3, -25, -13, 17, 19, 19, 20, 22, 9, -10, 12, 16, -1, 21, -24, 12, 19, -7, 15, 5, -22, 23, 12, 6, 2, -14, 12, 17, -13, 3, -4, -16, 8, 16, 6, -23, 0, 3, -16, -6, -14, 8, 25, -22, 2, 7, 8, -6, 20, 3, -5, -19, -15 };   Aufgabe 1 Schreibe eine Methode, welche alle Zahlen im Array zählt, welche zwischen 0 und 10 liegen und keine 5 sind. Die Methode liefert die Anzahl dieser Zahlen zurück.\nAufgabe 2 Schreibe eine Methode, welche aus dem Array alle positiven Zahlen inklusive 0 in ein neues Array schreibt. Die Reihenfolge der Zahlen im Array muss gleich bleiben. Die Methode liefert das neue Array zurück.\nAufgabe 3 Schreibe eine Methode, welche aus dem Array alle Zahlen sucht, welche nicht mehr als 10 von der Zahl -6 abweichen. Schreibe diese Zahlen in ein neues Array. Die Methode liefert das neue Array zurück.\nAufgabe 4 Schreibe eine Methode, welche alle Zahlen aus dem Array in positive Zahlen verwandelt und diese in ein neues Array schreibt. Die Methode liefert das neue Array zurück.\nMath.abs darf für diese Aufgabe nicht verwendet werden.\nAufgabe 5 Schreibe eine Methode, welche alle Zahlen aus dem Array ausliest, die sich von ihren direkten Nachbarn um jeweils nicht mehr als den Wert 5 unterscheiden. Schreibe diese Zahlen in ein neues Array. Die Methode liefert das neue Array zurück. Für die erste und die letzte Zahl im Array gibt es nur einen Nachbar.\n","categories":"","description":"Einfache Aufgaben mit einem Zahlen-Array\n","excerpt":"Einfache Aufgaben mit einem Zahlen-Array\n","ref":"/exams/java/java-grundlagen/exam1/","tags":"","title":"Exam Java Grundlagen - Zahlen-Array"},{"body":"Die folgenden Aufgaben bestehen zum Teil aus Exception Handling. Behandle die Exception also auch so, wie es in der Theorie erklärt wurde.\nAufgabe 1: File Reader Hier findest du eine Datei, welche eine Liste mit ungefähr 466 Tausend englischen Wörtern enthält.\nSchreibe eine Anwendung, welche diese Wörter einlesen kann, und schreibe jeweils eine Methode für die folgenden Aufgaben:\n Zähle alle Wörter in dieser Liste Zähle alle Wörter, welche den Buchstaben Q benutzen Gib alle Sonderzeichen zurück, welche in der Liste vorkommen (jedes Zeichen wird nur einmal zurückgegeben) 2 weitere Methoden deiner Wahl  Implementiere vorher ein Interface, um deine Methoden zu definieren.\nAufgabe 2: File Writing Die Verwendung von System.out.println() hat das Problem, dass nach einem Neustart der Applikation alle Logs aus der Konsole verschwinden, dies kann mit der Zeit mühsam werden. Schreibe eine Klasse mit mindestens einer öffentlichen Methode, welcher man einen Text als Parameter gibt. Die Methode soll diesen Text zuerst in eine Datei mit dem Namen application.log speichern und nachher mit System.out.println() in die Konsole schreiben. Achte auch hier wieder auf ein entsprechendes Exception Handling.\nAufgabe 3: ParseInt Wenn wir Zahlen von einem User über die Konsole entgegennehmen wollen, kann man scanner.nextLine() brauchen. Wir können aber nie sicher sein, ob es sich bei der Eingabe wirklich um eine Zahl handelt. Darum müssen wir mit einem Exception Handling die Programmlogik vor einem solchen Fall schützen.\nSchreibe eine Anwendung, welche den User einzeln für zwei Zahlen fragt und diese dann entweder addiert, subtrahiert, multipliziert, oder dividiert. Die Auswahl der Rechnungsmethode kann zufällig oder durch den Benutzer erfolgen.\n","categories":"","description":"Aufgaben zu Modul #J5 - Exception Handling\n","excerpt":"Aufgaben zu Modul #J5 - Exception Handling\n","ref":"/labs/java/java-exception-handling/01_exercises/","tags":"","title":"Exception Handling - Aufgaben"},{"body":"Aufgabe 1 - generische Methode um alle Elemente in einem Array auszugeben Schreibe eine generische Methode, welche ein Array als Parameter erhält und alle Elemente im Array ausgibt. Verwende diese Methode jeweils mit Arrays, welche folgende Typen beinhalten: Integer, String, Double.\nAufgabe 2 - generische Klasse Schreibe eine generische Klasse “NumberList”, welche eine Liste von Zahlen erhält und folgende Operationen auf diesen Zahlen ausführen kann:\n Die grösste Zahl in der Liste finden Die kleinste Zahl in der Liste finden  Die Typen der Input-Zahlen können unterschiedlich sein (Ganzzahlen, Kommazahlen…)\n","categories":"","description":"Aufgaben zu Modul #J2 - Generics I\n","excerpt":"Aufgaben zu Modul #J2 - Generics I\n","ref":"/labs/java/java-generics/01_exercises/","tags":"","title":"Generics I - Aufgaben"},{"body":"","categories":"","description":"Labs zu Git\n","excerpt":"Labs zu Git\n","ref":"/labs/git/","tags":"","title":"Git Labs"},{"body":"Ziele  Ich weiss, was HTML ist und warum es bei Webseiten angewendet wird. Ich kann zwischen HTML, CSS und JavaScript unterscheiden.  Wie funktionieren Webseiten? Im Gegensatz zu Desktop-Programmen SOLLTEN Webseiten auf jedem Betriebssystem und Browser gleich laufen und aussehen. Damit das funktionieren kann, müssen die Webseiten so programmiert/geschrieben worden sein, dass sie von jedem Browser verstanden werden können.\nGenau das wird mit HTML erreicht. Jeder Browser versteht HTML.\nWas ist HTML? Beginnen wir mit der Definition der Abkürzung “HTML”. Diese steht für “HyperText Markup Language”. Okay, was aber bedeutet das?\nMit HyperText ist ein Dokument gemeint, das nicht dafür gemacht ist, um von oben nach unten gelesen zu werden. HyperText enthält also z.B. Links, die auf andere Dokumente führen. Unter Markup ist zu verstehen, dass das Dokument strukturiert (Kopfzeilen, Hauptteil, Fusszeilen) und formatiert (z.B. kursiver/fetter Text) ist.\nSomit ist HTML also eine Sprache, die alle Elemente auf einer Webseite BESCHREIBT. Die Betonung liegt hier auf “beschreibt”. Das bedeutet, dass HTML keine Programmiersprache ist. Code, der auf der Webseite ausgeführt wird, ist in JavaScript geschrieben.\nÜbersicht zu HTML, CSS und JavaScript (JS) Während Deiner Einführung in die Webentwicklung wirst du die Begriffe “HTML”, “CSS” und “JavaScript” immer wieder hören bzw. lesen. Deswegen beginnen wir mit einem Überblick:\nIm HTML beschreibst du die Struktur einer Webseite und fügst auch die wichtigsten Elemente davon ein. Diese Elemente können Text, UI-Elemente, Bilder und vieles mehr sein.\nIn CSS beschreibst du, wie das HTML im Browser aussehen soll. Beispielsweise kannst du Schriftfarben, -arten, -grössen, das Aussehen von UI-Elementen und Layouts damit beschreiben.\nMöchtest du im Browser Code ausführen, dann geschieht das mit der Programmiersprache JavaScript. Zum Beispiel kannst Du im HTML definieren, dass eine JavaScript-Funktion ausgeführt wird, wenn Du auf einen Button klickst.\n","categories":"","description":"Modul #F3 - HTML und CSS - Einführung\n","excerpt":"Modul #F3 - HTML und CSS - Einführung\n","ref":"/docs/web/html_css/01_html_intro/","tags":"","title":"HTML"},{"body":"Aufgabe 1 - Input-Elemente Um zu zeigen, wie einfach Input-Elemente verwendet werden könnten, kannst du folgendes Beispiel ausprobieren:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u003ch2\u003eLogin\u003c/h2\u003e \u003cform action=\"https://www.w3schools.com/action_page.php\" method=\"get\"\u003e \u003clabel\u003eemail: \u003cinput type=\"email\" name=\"your-email\" /\u003e\u003c/label\u003e \u003cbr /\u003e \u003clabel for=\"pw\"\u003epassword:\u003c/label\u003e \u003cinput type=\"password\" name=\"your-password\" id=\"pw\" /\u003e \u003cbr /\u003e \u003clabel\u003e\u003cinput type=\"checkbox\" name=\"stay\" value=\"yes\" /\u003eStay logged in.\u003c/label\u003e \u003ch4\u003eFavorite Language?\u003c/h4\u003e \u003cp\u003e \u003cinput type=\"radio\" id=\"html\" name=\"fav_language\" value=\"HTML\"\u003e \u003clabel for=\"html\"\u003eHTML\u003c/label\u003e\u003cbr\u003e \u003cinput type=\"radio\" id=\"css\" name=\"fav_language\" value=\"CSS\"\u003e \u003clabel for=\"css\"\u003eCSS\u003c/label\u003e\u003cbr\u003e \u003c/p\u003e \u003cinput type=\"submit\" /\u003e \u003c/form\u003e   Entwickle eine Registrierungsseite. Auf dieser Seite soll man mindestens folgendes angeben müssen:\n Name Email Gewünschtes Passwort Mögliche Interessen (mittels Checkboxen) Geburtsdatum Lieblingsfarbe Geschlecht (mittels Radiobuttons) Handynummer  Als Backend kannst du “https://www.w3schools.com/action_page.php” (wie im vorherigen Beispiel) verwenden. Schaue nach dem Klick an, wie die Daten übermittelt worden sind. Wie sieht die URL im Browser aus? Variiere die HTTP Request Method.\nAufgabe 2 - Inspiziere diese Seite Suche auf dieser Website (ja, auf dieser IT Ninjas-Seite) mit Hilfe der Entwicklertools ([F12]-Taste) den \u003cheader\u003e, eine \u003cnav\u003e und den \u003cfooter\u003e.\nNotiere dir deine Erkenntnisse. Versuche zudem folgende Fragen zu beantworten:\n Wie ist diese Seite aufgebaut? Wo befinden sich \u003cheader\u003e, \u003cnav\u003e, usw.? Halte das in einer Skizze fest. Wie wurde die Übersicht (am linken Rand) und das rechte Aside (mit Git-Informationen) realisiert. Welche Tags und Attribute sind deiner Meinung nach die relevantesten? Würdest du das gleich realisieren? Oder was würdest du anders machen?  Aufgabe 3 - Dokument als HTML Suche einen spanneden Text (z.B. aus einer alten Word-Datei, Wikipedia-Artikel, Anleitung). Dieser Text sollte mehrere Überschriften und Bilder besitzen. Setze diesen Text mit HTML um und versuche bereits, viele Semantic Tags zu verwenden. Zeige dein Resultat einem Coach.\nAufgabe 4 - persönliche Portfolio Erstelle eine reine HTML-Webseite, welche dein persönliches Portfolio darstellt. Die Seite soll folgende Struktur und Elemente beinhalten:\nNavigation\nDie Navigation besteht auf drei Elemente:\n Über mich Hobbies Kontakt  Beim Klicken auf einem Navigationsitem wird die Anzeige entsprechend geändert. Dazu siehe folgende Abschnitte.\nÜber mich\nWenn man auf “Über mich” klickt, erscheint eine ähnliche Seite wie hier dargestellt:\nHobbies\nWenn man auf “Hobbies” klickt, erscheint eine ähnliche Seite wie hier dargestellt:\nDie Texte unterhalb der Fotos sind Links auf entsprechende Webseiten, welche in einem neuen Browserfenster/-tab geöffnet werden.\nKontakt\nWenn man auf “Kontakt” klickt, erscheint eine ähnliche Seite wie hier dargestellt:\nWenn man auf “Github” oder “Twitter” usw. klickt, wird ein neues Browserfenster mit der richtigen Seite geöffnet\nHinweise:\n Verwende semantische Elemente wo nötig/sinnvoll. Hier geht es um die Struktur der Seite, nicht um das Styling. Es ist wichtig, dass die Elemente gemäss der Anforderungen funktionieren und dass das HTML gut strukturiert ist.  ","categories":"","description":"Aufgaben zu Modul #F3 - HTML\n","excerpt":"Aufgaben zu Modul #F3 - HTML\n","ref":"/labs/web/html_css/01_html/","tags":"","title":"HTML - Aufgaben"},{"body":"","categories":"","description":"Exercises zu HTML und CSS\n","excerpt":"Exercises zu HTML und CSS\n","ref":"/labs/web/html_css/","tags":"","title":"HTML und CSS - Aufgaben"},{"body":"","categories":"","description":"Challenges zu Java Module\n","excerpt":"Challenges zu Java Module\n","ref":"/challenges/java/","tags":"","title":"Java Challenges"},{"body":"Ziele  Ich kann Text und Zahlen auf der Konsole ausgeben Ich kann Text und Zahlen auf der Konsole eingeben und diese wieder ausgeben Ich kann statische Methoden schreiben, die einfache Rechnungen durchführen Ich kann statische Methoden mit Parametern und Return-Statements schreiben Ich verstehe und kenne die verschiedenen Conditional Statements Ich weiss, wann und wie ich welches Conditional Statement einsetzen sollte Ich verstehe, was Loops sind und kenne die verschiedenen Loops Ich weiss, wann und wie ich welchen Loop brauchen soll Ich kann mit Hilfe von String-Methoden Strings bearbeiten Ich kann Arrays initialisieren, auf deren Werte zugreifen und Werte in einem Array verändern Ich kann mein Programm mit einem Debugger zur Laufzeit untersuchen  Aufgabe 1 - Ausgaben auf die Kommandozeile Gib die folgenden Daten in der Kommandozeile aus:\n Hello World Hello + \u003cDein Name\u003e Zeichne ein Haus, nutze dazu beliebige Zeichen Zeichne eine Schweizerfahne  Aufgabe 2 - Conditional Statements Aufgabe 2a - Die if- und else-Bedingungen Löse die folgende Aufgaben:\n Schreibe ein Programm, die feststellen kann, ob eine Zahl (als Parameter) grösser, kleiner oder gleich 0 ist. Schreibe ein Programm, die dich begrüsst wenn dein Name als Parameter übergeben wird. Schreibe ein Programm, die feststellt, ob das übergebene Jahr ein Schaltjahr ist. Recherchiere, was die Bedingungen sind. Schreibe ein Programm, die überprüft, ob eine Zahl (als Parameter) gerade oder ungerade ist.  Aufgabe 2b - Das switch-Statement Löse die folgende Aufgaben:\n Schreibe ein Programm, die eine Zahl zwischen 1 und 12 als Parameter erhält und dann den entsprechenden Monat ausgibt (für den Wert 2 wird dann der String \"Februar\" zurückgegeben). Schreibe ein Programm, die einen Wochentag als Parameter übergeben bekommt und dann ausgibt, der wievielte Tag in der Woche er ist: Der \u003cWochentag\u003e ist der \u003cX\u003e. Tag in der Woche. Schreibe die Methode so, dass maximal 1 println() (oder ähnliches) verwendet wird. Hinweis: Hier kann dir ein switch-Assignment sehr viel Code ersparen. Debugge mindestens zwei dieser Methoden mit einem Breakpoint.  Aufgabe 3 - Loops Löse die folgenden Aufgaben:\n Schreibe ein Programm, welche eine beliebige Ganzzahl als Parameter übernimmt und die Fakultät dieser Zahl berechnet. Schreibe einen Loop, welcher alle Zahlen von 1 bis 100 zusammenzählt, welche durch 8 teilbar sind.  Erweitere deine Lösung mit einer Methode, welche eine Zahl entgegennimmt und dann die Zahlen zusammenzählt, welche durch diese Zahl teilbar sind.    Aufgabe 4 - Einfache Berechnungen Berechne die folgenden Dinge:\n Fläche eines Rechtecks Fläche eines Kreises Umfang eines Rechtecks Inhalt einer Pyramide mit quadratischen Grundriss und einer bestimmten Höhe Berechne dein Alter am heutigen Tag in Jahren, Monaten und Tagen Schreibe eine Methode, welche eine beliebige Ganzzahl als Parameter übernimmt und die Vielfache von 3 zusammen mit der Vielfache von 5 dieser Zahl summiert.  Aufgabe 5 - Strings Du hast den folgenden String:\n1 2 3 4 5 6 7 8 9 10 11  String poem = \"\"\" Ein Ninja leise wie der Wind, Seine Waffen stets geschwind. \"Shurikens\" fliegen, scharf und schnell, Klingen funkeln, furchterregend hell. \"Nunchakus\" wirbeln im Tanz, Mit jedem Schlag, im Vorteil er ganz. Seine Waffen, geheim und klug, Begleiten ihn bei jedem Zug.\"\"\";   Löse mit Hilfe dieses Strings folgende Aufgaben:\n Gib in der Konsole die Anzahl Wörter aus. Gib den Text in Grossbuchstaben aus. Gib den Text so aus, dass jedes Leerzeichen mit einem Punkt ersetzt wurde. Schneide das Wort “Shurikens” aus. Ermittle hierfür die Position des Wortes anhand des \"-Zeichens. Hinweis: Die indexOf()-Methode bietet ein optionales Argument fromIndex an. Übergibst du die Position des ersten Anführungszeichen + 1, dann wird die Position des zweiten zurückgegeben.  Aufgabe 6 - Strings und Loops Löse die folgende Aufgaben:\n Schreibe ein Programm, welche als Parameter einen beliebigen String übernimmt und dessen Zeichenfolge umkehrt Schreibe ein Programm, welche als Parameter einen beliebigen String übernimmt und die Anzahl Wörter darin ausgibt  Aufgabe 7 - Methoden Löse die folgende Aufgaben:\n Schreibe eine Methode, die zwei beliebigen Ganzzahlen als Parameter übernimmt und die Summe der beiden zurückliefert. Schreibe eine eigene Methode, die als Parameter einen Namen übernimmt. Die Methode soll dann die folgenden Daten auf die Kommandozeile ausgeben Hello + \u003cParameter-Name\u003e  Aufgabe 8 - Eingaben von der Kommandozeile Lies zuerst deinen Namen und danach dein Alter über einen Scanner von der Kommandozeile ein und gib dann die folgenden Daten auf die Kommandozeile aus\n Hello + \u003cDein Name\u003e + you are + \u003cDein Alter\u003e + years old. Next year, you will be \u003cDein Alter + 1\u003e years old.  Generiere diesen Output\n mithilfe eines StringBuilders und mithilfe der String.format()-Methode.  Aufgabe 9 - Arrays Löse die folgenden Aufgaben:\n Schreibe eine Methode, welche zwei Parametern übernimmt: einen beliebigen Zahlen-Array und eine beliebige Zahl. Die Methode gibt die Position der Zahl im Array aus. Schreibe eine Methode, welche als Parameter einen beliebigen Zahlen-Array übernimmt und die grösste Zahl im Array zurückliefert.  ","categories":"","description":"Exercises zu Modul #J1\n","excerpt":"Exercises zu Modul #J1\n","ref":"/labs/java/java-grundlagen/01_basicexercises/","tags":"","title":"Java Exercises - Grundlagen"},{"body":"Die Aufgabe besteht darin ein “Vier-Gewinnt” Spielfeld in Form eines zweidimensionalen Arrays zu überprüfen. Das zweidimensionale Array hat in beiden Dimensionen eine variable Grösse. Die zweite Dimension ist jedoch bei allen Arrays gleich gross.\nDas Ziel ist herauszufinden, ob auf einem gegebenen Spielfeld einer der Spieler gewonnen hat. Die Gewinnkombination in Form von vier aufeinanderfolgenden gleichen Feldern kann dabei horizontal, vertikal oder diagonal auf dem Spielfeld liegen. Im Spielfeld kommen drei Zeichen vor: “X” für Spielsteine von Spieler 1, “O” für Spielsteine von Spieler 2 und \" \" für ein Feld, wo noch kein Spielstein liegt.\nDie Methode, welche das Spielfeld überprüft liefert einen String als Rückgabewert zurück. Der Rückgabewert ist “X” falls Spieler 1 gewonnen hat, “O” wenn Spieler 2 gewonnen hat und \" \" wenn noch keiner der Spieler eine Gewinnkombination hat.\nDie Implementation muss in der folgenden Klasse gemacht werden:\n1 2 3 4 5 6 7 8 9  public class ConnectFourExtra implements ConnectFourCheck { @Override public String checkWin(String[][] board) { // TODO: Implementation here ...  // TODO: Change return value according to the challenge description  return \" \" + \"X\" + \"O\"; } }   Das dazugehörige Interface kann einfach als neue Klasse im gleichen Package angelegt werden:\n1 2 3  interface ConnectFourCheck { String checkWin(String[][] board); }   Wenn du an der Challenge teilnehmen willst, dann musst du die Aufgabe alleine lösen. Die Lösung vom Pult-Nachbar interessiert uns also (leider) nicht.\n","categories":"","description":"Challenge zu Modul #J1\n","excerpt":"Challenge zu Modul #J1\n","ref":"/challenges/java/java-grundlagen/01_basicchallenge/","tags":"","title":"Java Grundlagen Challenge"},{"body":"","categories":"","description":"Exams zu Modul #J1\n","excerpt":"Exams zu Modul #J1\n","ref":"/exams/java/java-grundlagen/","tags":"","title":"Java Grundlagen Exams"},{"body":"Ziele  Ich weiss, dass jede Anweisung mit einem Strichpunkt abgeschlossen werden muss. Ich weiss, dass geschweifte Klammern einen Block definieren und ich verwende sie in jeder Kontrollstruktur, um die Code-Blocks voneinander abzugrenzen. Ich kenne die main-Methode und weiss, warum eine Applikation nur EINE Main-Methode haben sollte. Ich kenne die Methode System.out.println und kann sie anwenden.  Cheatsheet zum Herunterladen Core Java Cheatsheet\n Einführung Was ist Java? Java ist eine objektorientierte Programmiersprache, die schon seit ca. zwei Jahrzehnten grosse Popularität geniesst. Die Entwicklung von Java begann Anfang der 1990er-Jahre beim US-amerikanischen Hard- und Softwarehersteller Sun Microsystems. 1995 wurde die erste Version veröffentlicht. 2010 wurde Sun Microsystems von Oracle übernommen. Gegenwärtig erscheinen im Halbjahrestakt neue Java-Versionen; die nächste Version, Java 21, wird im September 2023 veröffentlicht.\n Wichtigste Merkmale von Java Plattformunabhängigkeit: «Write once, Run anywhere» Der Compiler wandelt den Quellcode in Bytecode (Kompilat) um, und anschliessend führt die Java Virtual Machine (JVM) den Bytecode aus. Jedes Betriebssystem hat eine andere JVM, aber jede JVM kann den Bytecode ausführen, daher kann ein- und dieselbe Java-Anwendung auf Windows, Linux, Mac OS und anderen Plattformen lauffähig sein.\nMehrfach-Paradigma Java ist in erster Linie eine objektorientierte und imperative Programmiersprache, bei der fast alles ein Objekt einer Klasse (eines Typs) ist. Wir können ein typisches Java-Programm als eine Menge von interagierenden Objekten betrachten. Die Objekte können Entitäten aus der realen Welt oder eine Art von Programmierabstraktionen darstellen. Wenn wir ein Programm schreiben, erklären wir, wie die Objekte miteinander interagieren sollen. Java unterstützt aber auch andere Programmierparadigmen, darunter generische Programmierung, parallele Programmierung, funktionale Programmierung (teilweise unterstützt) und andere.\nAusführbarer Bytecode Eine kompilierte Klasse, welche bestimmte Voraussetzungen erfüllt (dazu später), kann eigenständig ausgeführt werden. Applikationen und Klassenbibliotheken bestehen oft aus mehreren Klassen und werden als Java Archive (JAR-Datei genannt) verpackt, verteilt und bereitgestellt. Eine JAR-Datei ist technisch gesehen eine komprimierte Datei in ZIP-Format und kann auch so erstellt werden, dass sie von der JVM ausgeführt werden kann.\nKlassenpfad Um den Bytecode ausführen zu können, muss die JVM wissen wo sich dieser befindet. Damit die JVM nicht überall suchen muss, wird mit einem Klassenpfad (Classpath) angegeben, wo sie nach dem Bytecode suchen soll. Der Klassenpfad besteht aus einer Liste von Ordnern und .jar Dateien (sog. Java-Archive) und kann entweder als Parameter bei der Ausführung des Programms oder als eine Umgebungsvariable angegeben werden.\nGarbage Collector Der Garbage Collector (Teil der JVM) führt zur Laufzeit eine automatische Speicherbereinigung von unbenutzten Objekten durch. Der Entwickler muss sich also nicht um das Aufräumen von unbenutzen Objekten kümmern.\nMultithreading Java unterstützt Multithreading auf der Ebene der Sprache und der Standardbibliothek. Es ermöglicht die gleichzeitige und parallele Ausführung mehrerer Teile eines Java-Programms.\n Code, Compile, Run Ein/e Java-Entwickler/in schreibt ein Programm in eine Textdatei mit der Erweiterung .java. Ein Programm kann eine Vielzahl solcher Dateien enthalten. Dann übersetzt der Compiler (normalerweise javac) das Programm in eine .class-Datei, die den Bytecode des Programms enthält. Danach führt die JVM das Programm aus und gibt Low-Level-Befehle an den Computer. Der Computer ist hier eine Abstraktion, welche ein Server, ein PC oder sogar ein mobiles Gerät sein kann. Tatsächlich sind die Prozesse komplexer, als hier gezeigt wird. Es ist wichtig, Folgendes zu verstehen: Der Teil vor der JVM ist plattformunabhängig, der Teil nach der JVM ist plattformabhängig.  Hello World Anhand des simplen Hello-World-Programms können wir bereits vieles über die zentralen Bestandteile einer Java-Anwendung erklären. Der folgende Sourcecode ist in einer Datei mit dem Namen HelloWorld.java abgelegt.\n1 2 3 4 5  public class HelloWorld { public static void main(String[] args) { System.out.println(\"Hello, world!\"); } }   Bei diesem Beispiel arbeiten wir uns nun von aussen nach innen vor. Der erste Teil definiert eine neue Klasse mit dem Namen HelloWorld. Die Deklaration der Klasse besteht aus dem Zugriffsmodifizierer public (dazu später mehr) gefolgt vom Keyword class und dem Klassennamen. Jede Java-Datei darf nur eine Klasse mit dem Zugriffsmodifizierer public enthalten, weitere Klassen ohne public sind jedoch erlaubt. Der Name der Klasse mit dem Modifizierer public muss stets mit dem Dateinamen übereinstimmen. Der Klassenname wird stets gross geschrieben, einzelne Wörter werden durch einen erneuten Grossbuchstaben getrennt. Dies wird CamelCase genannt. Der Block der Klasse wird durch geschweifte Klammern angegeben.\nInnerhalb der Klasse wird nun eine Main-Methode definiert. Diese Methode ist der Einstiegspunkt eines jeden Java-Programms. Nur über eine solche Methode kann eine Java-Anwendung gestartet werden. Die Methode besteht aus dem Zugriffsmodifizierer public, dem Keyword static, dem Rückgabewert void und dem Methodennamen main. An den Namen der Methode schliesst sich ein paar runde Klammern an. Innerhalb dieser Klammern befinden sich die Parameter der Methode, in diesem Fall handelt es sich um ein String-Array. Die Angabe der genannten Teile einer Methode nennt man Methodensignatur. Der Block der Methode wird durch geschweifte Klammern angegeben. Die Main-Methode hat immer die oben gezeigte Signatur.\nInnerhalb der Main-Methode sehen wir ein einzelnes Statement. Es besteht aus einer einfachen Anweisung, welche den Text “Hello, world!” auf die Kommandozeile ausgibt. Die statische Methode println() auf dem öffentlich zugänglichen Feld der Klasse System dient dazu Text auf der Konsole auszugeben. Das Statement wird mit einem Semikolon abgeschlossen.\nJetzt bist du dran. Löse bitte die Aufgabe 1 in den Labs.\n","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/01_java_intro/","tags":"","title":"Java-Einführung"},{"body":"Aufgabe 1 - Seite mit Joke Schreibe eine Website, die auf Knopfdruck einen Witz anzeigt.\nVerwende hierfür die Juck Norris-API: GET https://api.chucknorris.io/jokes/random\nSolltest du fertig mit dieser Aufgabe sein, dann melde dich bei einem Coach.\nAufgabe 2 - Eine andere API anbinden Versuche, ein(e) andere(s) API/Backend anzubinden und etwas auf einer Website anzuzeigen.\nAufgabe 3 - Uhr Schreibe ein HTML, das eine Uhrzeit visuell anzeigt.\nDeine Website soll zentriert eine Uhrzeit anzeigen. Die Uhrzeit soll analog angezeigt werden - also mit Stunden-, Minuten- und Sekundenzeiger.\nEine analoge Uhr kannst du mit Hilfe von Vektorgrafiken (SVGs) oder Canvas rendern.\nDu kannst es aber auch mit gewöhnlichen HTML-Elementen versuchen.\nHilfestellungen zu\n SVG Canvas  Aufgabe 4 - Global Scope, Function Scope und Block-Scope Im Kapitel ES6: Variablen deklarieren hast du die Funktionsweise vom Global und Function Scope kennengelernt mit einem Beispiel-Code mit console.log(...)s. In diesem Beispiel wurden alle Variablen mit var deklariert/definiert - also keine lets oder consts.\nÄndere in diesem Code alle vars zu lets oder consts.\nBeantworte folgende Fragen und dokumentiere deine Antworten:\n Was ist ein Scope? Was sind Global Scope, Function Scope und Block-Scope? Was sind die Unterschiede? Mit welchem Scope arbeitest du in Java? Begründe. Wie werden Variablen im globalen Scope definiert? Wie kannst du definieren, welche Variable welchen Scope haben soll? Wann könnte die Verwendung von var sinnvoll sein?  Aufgabe 5 - Nummern Liste Erstelle eine HTML-Seite, auf der ein Benutzer eine Liste von Zahlen eingeben kann. Die Eingabe soll geprüft werden, damit der Benutzer nur Zahlen eingeben kann. Der Benutzer kann die Liste speichern und dann Operationen auf der Liste durchführen lassen. Es sind folgende Operationen gefordert:\n Die grösste Zahl der Liste finden. Die kleinste Zahl der Liste finden. Die Summe aller geraden Zahlen der Liste finden. Die Summe der ungeraden Zahlen der Liste finden. Die Liste der grösse nach sortieren. Alle Zahlen der Liste zusammenrechnen. Den Durchschnitt der Liste errechnen.  Die Ergebnisse der Operationen sollen dem Benutzer im HTML angezeigt werden.\nAufgabe 6 - Die optionalen Import-Inseln Entwerfe eine HTML-Seite, welche nachfolgendes JavaScript als Daten-Grundlage verwendet.\n Hierfür musst du eine Klasse Island in der Datei island.js mit genau EINEM Konstruktor erstellen. Auf der HTML-Seite zeigst du alle Inseln an. Wenn eine Insel einen bestimmten Wert besitzt, wird dieser Wert angezeigt, ansonsten nicht. Wenn die Insel ein Bild besitzt, blendest du dieses ein. Das nachfolgende Script darfst du NICHT abändern (auch keine geschweiften Klammern beim Import hinzufügen).  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  import Island from \"./island.js\"; export const islands = [ new Island({ name: \"Atlantis\" }), new Island({ name: \"Maldives\", country: \"Maldives\", imageUrl: \"https://www.planetware.com/photos-large/SEY/best-islands-maldives.jpg\", }), new Island({ name: \"Bora Bora\", country: \"French Polynesia\", imageUrl: \"https://www.planetware.com/photos-large/SEY/best-islands-bora-bora.jpg\", }), new Island({ name: \"Seychelles\", country: \"Seychelles\", imageUrl: \"https://www.planetware.com/photos-large/SEY/best-islands-seychelles.jpg\", }), new Island({ name: \"Diomede\", imageUrl: \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/8e/Little_Diomede_Island_village.jpeg/1280px-Little_Diomede_Island_village.jpeg\", }), ]; for (const island of islands) { console.info( `Explore the island ${island.name}in ${ island.country ?? \"an unknown country\" }: ${island.imageUrl ?? \"no image available :/\"}` ); }   Aufgabe 7 Schreibe eine Funktion, die ein Array von Objekten erwartet. Jedes Objekt im Array repräsentiert einen Schüler mit den folgenden Eigenschaften:\n name: Der Name des Schülers grades: Ein Array von Noten des Schülers (in Dezimalzahlen)  Jeder Schüler darf nur einmal vorkommen, also keine Duplikate.\nDie Funktion soll ein Promise zurückgeben, das den Durchschnitt der Noten aller Schüler berechnet und als Ergebnis ein Objekt zurückgibt, das den Durchschnitt als eine Dezimalzahl und eine Beschreibung des Durchschnitts enthält. Die Beschreibung sollte basierend auf folgendem generiert werden:\n Wenn der Durchschnitt 6,0 ist, soll die Beschreibung “Sehr gut” sein. Wenn der Durchschnitt grösser oder gleich 5,0 und kleiner als 6,0 ist, soll die Beschreibung “Gut” sein. Wenn der Durchschnitt grösser oder gleich 4,0 und kleiner als 5,0 ist, soll die Beschreibung “Befriedigend” sein. Wenn der Durchschnitt grösser oder gleich 3,0 und kleiner als 4,0 ist, soll die Beschreibung “Ausreichend” sein. Wenn der Durchschnitt kleiner als 3,0 ist, soll die Beschreibung “Mangelhaft” sein.  Schreibe zusätzlich eine Funktion, um neue Schüler zu erfassen. Der zu erfassende Schüler darf jedoch noch nicht existieren ansonsten soll eine Exception geworfen werden. Auch die Noten sollen validiert werden so, dass nur Dezimalzahlen als Noten akzeptiert werden und die Dezimalzahl muss zwischen 1.0 und 6.0 liegen.\nNoch zu ergänzen sind je eine Funktion, welche beide auch ein Array von Schülern erwarten. Die eine Funktion soll den Schüler mit der besten und die andere Funktion mit dem schlechtesten Durchschnitt herausfinden. Die Funktionen sollen den Namen des Schülers und dessen Durchschnitt zurückgegeben. Versuche diese beiden Funktionen mit so wenig Redundanzen wie möglich zu schreiben (evtl. kann man eine Funktion draus machen).\nDie letzte Funktion sollte ein Array von Schülern entgegennehmen und sie anhand des Durchschnitts ordnen. Der schlechteste Durchschnitt kommt zuerst. Die Funktion soll ein Promise mit nur den Namen aller Schüler zurückgeben, nachdem diese sortiert wurden.\nSchreibe ein HTML-File, in welchem man neue Schüler hinzufügen kann und wo die Ergebnisse aus den Funktionen angezeigt werden.\n","categories":"","description":"Aufgaben zu Modul #F4 - JavaScript\n","excerpt":"Aufgaben zu Modul #F4 - JavaScript\n","ref":"/labs/web/javascript/01_javascript/","tags":"","title":"JavaScript - Aufgaben"},{"body":"Persistente Notenverwaltungssystem Schreibe eine Konsolen-basierte Java Anwendung, welche deine Schulnoten verwaltet und in einer Datenbank persistiert.\nDie Anwendung soll mindestens die folgende Funktionalität beinhalten:\n Neue Note für ein bestimmtes Fach erfassen (inkl. Datum) Eine bestehende Note löschen Eine bestehende Note bearbeiten Den aktuellen Notenstand eines Fachs ausgeben (Auflistung aller Noten und die Durchschnittsnote) Die Durchschnittsnoten aller Fächer ausgeben (#Zeugnis)  Verwende eine MariaDB und setzte sie selbst auf. Den nötigen Treiber dazu findest du im Internet. Die Datenbank muss mindestens die folgenden Tabellen beinhalten:\n SCHOOL_SUBJECT - beinhaltet alle Schulfächer GRADE - beinhaltet alle gültigen Noten zwischen 1 und 6 (in 0.25 Stufen -\u003e also 1, 1.25. 1.5, 1.75, 2 usw..) SCHOOL_SUBJECT_GRADE - beinhaltet die Relation zwischen Schulfächern und Noten. Jede Zeile stellt eine Note für ein Fach an einem bestimmten Tag dar.  Achte auf korrektes Exception-Handling (denke an “try with resources”) und sauberen Code.\n","categories":"","description":"Modul #J8 - JDBC\n","excerpt":"Modul #J8 - JDBC\n","ref":"/labs/java/java-jdbc/01_jdbc_exercises/","tags":"","title":"JDBC - Aufgaben"},{"body":"java.util.List Listen sind geordnete Collections, denn sie enthalten beliebige Objekte in einer bestimmten Reihenfolge. In Listen werden eine Menge von Elemente (genauer genommen Referenzen auf Objekte) abgespeichert, wobei die Menge geordnet ist, da jedes Element an einer bestimmten Position zu finden ist:\nBeachte, dass wir bei den Listen, die Indexierung der Positionen bei 0 beginnt, genauso wie bei dem primitiven Datentyp Array.\nListen haben eine dynamische Grösse, d.h. die Grösse der Liste muss bei der Erstellung nicht bekannt sein und die Anzahl der enthaltenen Elemente kann sich während der Laufzeit ändern. Daher ist es möglich, fortlaufend Elemente zur Liste hinzuzufügen oder aus der Liste zu entfernen. Hierbei entstehen nie Lücken: Fügt man ein Element an einer bestimmten Position zur Liste hinzu, dann rutschen alle nachfolgenden Elemente eine Position nach. Entfernt man ein Element an einer bestimmten Position, so rutschen alle nachfolgen Elemente eine Position nach oben.\nMan kann auf Elemente über ihren ganzzahligen Index (Position in der Liste) zugreifen und nach Elementen in der Liste suchen.\nEin Element aus einer Liste entfernen:\nWie zu Beginn erwähnt, enthalten Lists Referenzen auf Objekte. Deshalb ist es nicht möglich, Listen zu erstellen, welche primitive Datentypen als Elemente enthalten (int, double, boolean, char, ...). Dafür müssen die sogenannten Wrapper-Klassen verwendet werden. Wrapper-Klassen bieten eine Möglichkeit, primitive Datentypen (int, double, boolean, char, …) als Objekte zu verwenden: java.lang.Integer, java.lang.Double, java.lang.Boolean, java.lang.Character,..\nSchauen wir uns die folgenden Beispiele an, wo wir einer Liste mit Elementen vom Typ Integer das Element 3 hinzufügen:\n1 2  List\u003cInteger\u003e integerList = new ArrayList\u003c\u003e(); integerList.add(Integer.valueOf(3));   Oben haben wir der Liste das Integer-Objekt 3 hinzugefügt - also ein Integer-Objekt und nicht der Wert des primitiven Datentyps int.\n1 2  List\u003cInteger\u003e integerList = new ArrayList\u003c\u003e(); integerList.add(3);   Beim unteren Beispiel haben wir der Liste den int-Wert 3 als primitiven Datentyp hinzu. Obwohl wir den int-Wert 3 als primitiver Datentypen und nicht als Integer-Objekte zur Liste integerList hinzufügen, kompiliert dieser Code genau so ohne Fehler. integerList ist jedoch eine Liste von Integer-Objekten und nicht eine Liste von int-Werten. Warum haben wir dann beim Kompilieren dieses Codes kein gekriegt?\nDer Copmiler konvertiert den int-Wert zu einem Integer-Objekt und fügt dieses dann zur Liste integerList hinzu. Diese Konvertierung nennt man Autoboxing. Autoboxing ist die automatische Konvertierung zwischen den primitiven Datentypen zu Objekten ihrer entsprechenden Wrapper-Klassen, die der Java Compiler durchführt (beispielsweise int zu Integer, double zu Double, ect.). Wenn die Konvertierung in die andere Richtung erfolgt, nennt man dies Unboxing.\nSomit ist es nicht mehr nötig, dass wir dieses Autoboxing wie im ersten Beispiel selber durchführen müssen.\nEinige Methoden vom Interface java.util.List 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62  /* * Gibt die Anzahl der Elemente in dieser Liste zurück. */ int size(); /* * Gibt true zurück, wenn diese Liste keine Elemente enthält. */ boolean isEmpty(); /* * Gibt true zurück, wenn diese Liste das angegebene Element enthält. */ boolean contains(Object o); /* * Gibt das Element an der angegebenen Position in dieser Liste zurück. */ E get(int index); /* * Ersetzt das Element an der angegebenen Position in dieser Liste durch das angegebene Element. */ E set(int index,E element); /* * Gibt den Index des ersten Auftretens des angegebenen Elements in dieser Liste zurück, * oder -1, wenn diese Liste das Element nicht enthält. */ int indexOf(Object o); /* * Hängt das angegebene Element an das Ende der Liste an */ boolean add(E e); /* * Fügt das angegebene Element an der angegebenen Position in dieser Liste ein. * Verschiebt das Element, das sich derzeit an dieser Position befindet (falls vorhanden), * und alle nachfolgenden Elemente. */ void add(int index,E element); /* * Entfernt das erste Vorkommen des angegebenen Elements aus dieser Liste, * sofern es vorhanden ist. Wenn diese Liste das Element nicht enthält, * bleibt sie unverändert. */ boolean remove(Object o); /* * Entfernt das Element an der angegebenen Position in dieser Liste. */ E remove(int index); /* * Entfernt alle Elemente aus dieser Liste. /* void clear(); ...   Das Interface java.util.List im Collection Framework ist der Datentyp der Listen, wobei in der abstrakten Klasse java.util.AbstractList die grundlegenden Funktionalitäten implementiert sind, sodass diese den verschiedenen konkreten Listen-Implementierungen weiter geerbt werden können.\nAuf der nächsten Seite geht es mit einer konkreten Umsetzung einer List weiter. Nun wird es also praktischer!\n","categories":"","description":"Das Interface List.\n","excerpt":"Das Interface List.\n","ref":"/docs/java/java-collections/01_list/","tags":"","title":"List"},{"body":"Aufgabe 1 Wir programmieren eine eigene ArrayList-Klasse MyArrayList:\n Die Elemente sollen in einem Array gespeichert werden. Es dürfen keine Klassen aus dem Collection-Framework verwendet werden. Die Klasse muss das Interface MyListInterfaceSimple implementieren. Die Klasse weiss nicht, wie viele Element man speichert. Sie muss die Grösse der internen Datenstruktur dynamische anpassen. Die toString() der java.lang.Object Klasse soll von der MyArrayList so überschrieben werden, dass die Elemente kommasepariert ausgegeben werden: [Cat, Hamster, Dog, Goldfish] Überprüfe deine Implemenation mit dem JUnitTest MyArrayListSimpleTest  Input  Inferface MyListInterfaceSimple 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  package com.examples.list; public interface MyListInterfaceSimple\u003cE\u003e { /** * Appends the specified element to the end of this list . * @param element element to be appended to this list */ void add(E element); /** * Returns the element at the specified position in this list. * @param index index of the element to return * @return the element at the specified position in this list * @throws IndexOutOfBoundsException if the index is out of range */ E get(int index) throws IndexOutOfBoundsException; /** * Removes the element at the specified position in this list. * Returns the element that was removed from the list. * soll IndexOutOfBoundsException werfen * @param index the index of the element to be removed * @return the element previously at the specified position */ E remove(int index) throws IndexOutOfBoundsException; /** * Returns the number of elements in this list. * If this list contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE. * @return the number of elements in this list */ int size(); /** * Returns true if this list contains no elements. * @return true if this list contains no elements */ boolean isEmpty(); /** * Removes all the elements from this list. The list will be empty after this call returns. */ void clear(); }    Aufgabe 2 Nun erweitern wir unsere MyArrayList Klasse.\n Erstelle eine Kopie deiner Klasse und nenne diese MyArrayListExtended. Diese soll das Interface MyListInterfaceExtended implementieren, welche folgende zusätzliche Methoden aufweist:   void add(int index, E element) boolean contains(Object o) int indexOf(Object o) E set(int index, E element) boolean equals(Object o) boolean remove(Object o)  Überprüfe deine Implemenation mit dem JUnitTest MyArrayListExtendedTest  Input  Inferface MyListInterfaceExtended 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97  package com.examples.list; public interface MyListInterfaceExtended\u003cE\u003e { /** * Appends the specified element to the end of this list . * @param element element to be appended to this list */ void add(E element); /** * Returns the element at the specified position in this list. * @param index index of the element to return * @return the element at the specified position in this list * @throws IndexOutOfBoundsException if the index is out of range */ E get(int index) throws IndexOutOfBoundsException; /** * Removes the element at the specified position in this list. * Returns the element that was removed from the list. * soll IndexOutOfBoundsException werfen * @param index the index of the element to be removed * @return the element previously at the specified position */ E remove(int index) throws IndexOutOfBoundsException; /** * Returns the number of elements in this list. * If this list contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE. * @return the number of elements in this list */ int size(); /** * Returns true if this list contains no elements. * @return true if this list contains no elements */ boolean isEmpty(); /** * Removes all the elements from this list. The list will be empty after this call returns. */ void clear(); /** * Inserts the specified element at the specified position in this list. * Shifts the element currently at that position (if any) and any subsequent elements to the right. * @param index index at which the specified element is to be inserted * @param element element to be inserted * @throws IndexOutOfBoundsException if the add operation is not supported by this list */ void add(int index, E element) throws IndexOutOfBoundsException; /** * Returns true if this list contains the specified element. * @param o element whose presence in this list is to be tested * @return true if this list contains the specified element */ boolean contains(Object o); /** * Returns the index of the first occurrence of the specified element in this list, * or -1 if this list does not contain the element. * @param o element to search for * @return the index of the first occurrence of the specified element in this list, * or -1 if this list does not contain the element */ int indexOf(Object o); /** * Replaces the element at the specified position in this list with the specified element. * @param index index of the element to replace * @param element element to be stored at the specified position * @return the element previously at the specified position * @throws IndexOutOfBoundsException if the index is out of range */ E set(int index, E element) throws IndexOutOfBoundsException; /** * Compares the specified object with this list for equality. * Returns true if and only if the specified object is also a list, both lists have the same size, * and all corresponding pairs of elements in the two lists are equal. * @param o the object to be compared for equality with this list * @return true if the specified object is equal to this list */ boolean equals(Object o); /** * Removes the first occurrence of the specified element from this list, if it is present. * If this list does not contain the element, it is unchanged. * @param o element to be removed from this list, if present * @return true if this list contained the specified element */ boolean remove(Object o); }    Aufgabe 3 (Optional) Erstelle ein Programm, welches ein Zeugnis bestehend aus Modulen und deren Schlussnoten generiert und in der Konsole ausgibt.\nDazu sollen die Klassen Modul und LBV (Prüfung) erstellt werden. Zur weiteren Hilfe soll die ModulNotGradeableException dienen.\nAnforderungen an die LBV-Klasse:\n Die Note der LBV ist als Float-Attribut gespeichert Die Gewichtung der LBV ist ebenfalls als Float-Attribut gespeichert  Anforderungen an die Modul-Klasse:\n Ein Modul hat den Modulnamen als Attribut. Alle LBVs des Moduls, werden in einer ArrayList gespeichert. LBVs werden dem Modul über die addLBV(LBV exam) Methode hinzugefügt. Der Moduldurchschnitt, soll von der Methode getFinalModuleGrade() als float zurückgegeben werden. Das Modul kann nur bewertet werden, wenn die Gewichtung aller LBVs genau 1 ergib. Ansonsten soll eine ModulNotGradeableException geworfen werden. Die Methode printReportEntry() soll den Zeugnis-Eintrag des Moduls generieren und ausgeben. Dieser ist im Format \u003c MODUL_NAME\u003e : \u003cMODUL_SCHLUSSNOTE\u003e auszugeben.  ","categories":"","description":"Aufgaben zu [Java Collections - List](../../../../docs/java/java-collections/02_array-list)\n","excerpt":"Aufgaben zu [Java Collections - …","ref":"/labs/java/java-collections/01_list/","tags":"","title":"List - Aufgaben"},{"body":"Aufgabe 1 Schreibe ein Programm, welche aus der Kommandozeile eine Reihe von Zahlen liest und die Zahl an der Position x (x ist die erste Zahl in der Reihe) in der Konsole ausgibt. Folgende Bedingungen müssen eingehalten werden:\n Die Anzahl der Zahlen in der Reihe kann beliebig variert werden. Wenn es die Position nicht gibt, wird “ERROR! Die Position x existiert nicht” in der Konsole ausgegeben  Bei der Umsetzung dürfen keine Streams verwendet werden!\nBeispiel 1\nInput: 3 45 6 23 76 34\nOutput: Die Zahl an der Position 3 ist: 23\nBeispiel 2\nInput: 8 45 6 23 76 34\nOutput: ERROR! Die Position 8 existiert nicht\n Aufgabe 2 Schreibe ein Programm, welche einen Text mit einer beliebigen Anzahl Wörter aus der Kommandozeile liest und folgendes damit macht:\n Die Anzahl gelesene Wörter ausgeben Alle gelesenen Wörter in der Konsole wiedergeben Alle Nomen aus dem Text (Wörter, die mit einem grossen Buchstaben beginnen) in Grossbuchstaben ausgeben Alle gelesene Wörter in umgekehrte Reihenfolge ausgeben  Bei der Umsetzung dürfen keine Streams verwendet werden!\n","categories":"","description":"Aufgaben zu Modul #J2 - Lists Basics\n","excerpt":"Aufgaben zu Modul #J2 - Lists Basics\n","ref":"/labs/java/java-oop/01_lists/","tags":"","title":"Lists Basics - Aufgaben"},{"body":"Auftrag Einrichten von Maven  Generierung REPOSITORY_KEY Aufsetzen settings.xml IntelliJ Einstellungen überprüfen Umgebungsvariable einstellen  Maven-Projekt aufsetzen Erstellen eines neuen Projektes, welches wir später für das Modul Unit-Testing verwenden werden.\n Erstellen eines neuen persönlichen Repositories auf code.sbb.ch, der Name kann frei gewählt werden Klonen des neuen Repositories mit IntelliJ IDEA Repository aufsetzen wie unter code.sbb.ch beschrieben (nachdem man das Repo erstellt hat) Im IntelliJ die für Maven erforderliche Ordnerstruktur erstellen  Ordner src erstellen Im Ordner src zwei Ordner erstellen: main und test In den beiden Ordnern main und test jeweils zwei weitere Ordner erstellen: java und resources Die Ordner markieren (Rechtsklick -\u003e Mark Directory as…)  src/main/java -\u003e Sources Root src/main/resources -\u003e Resources Root src/test/java -\u003e Test Sources Root src/test/resources -\u003e Test Resources Root     Am Root des Projektes eine Datei mit dem Namen pom.xml anlegen und den folgenden Inhalt einfügen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003cgroupId\u003eDeine Group-ID\u003c/groupId\u003e \u003cartifactId\u003eDeine Artifact-ID\u003c/artifactId\u003e \u003cversion\u003e0.0.1-SNAPSHOT\u003c/version\u003e \u003cname\u003eName des Projekts\u003c/name\u003e \u003cdescription\u003eBeschreibung des Projekts\u003c/description\u003e \u003cproperties\u003e \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e \u003cjava.version\u003eJava-Version wählen\u003c/java.version\u003e \u003cmaven.build.timestamp.format\u003eyyyy-MM-dd HH:mm\u003c/maven.build.timestamp.format\u003e \u003ctimestamp\u003e${maven.build.timestamp}\u003c/timestamp\u003e \u003c/properties\u003e \u003cdependencies\u003e \u003c!-- Test --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter\u003c/artifactId\u003e \u003cversion\u003e5.6.2\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-api\u003c/artifactId\u003e \u003cversion\u003e5.6.2\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-engine\u003c/artifactId\u003e \u003cversion\u003e5.6.2\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-params\u003c/artifactId\u003e \u003cversion\u003e5.6.2\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.vintage\u003c/groupId\u003e \u003cartifactId\u003ejunit-vintage-engine\u003c/artifactId\u003e \u003cversion\u003e5.6.2\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.platform\u003c/groupId\u003e \u003cartifactId\u003ejunit-platform-engine\u003c/artifactId\u003e \u003cversion\u003e1.7.0-RC1\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.platform\u003c/groupId\u003e \u003cartifactId\u003ejunit-platform-commons\u003c/artifactId\u003e \u003cversion\u003e1.7.0-RC1\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.mockito\u003c/groupId\u003e \u003cartifactId\u003emockito-core\u003c/artifactId\u003e \u003cversion\u003e4.1.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003cbuild\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003ccompilerVersion\u003e${java.version}\u003c/compilerVersion\u003e \u003csource\u003e${java.version}\u003c/source\u003e \u003ctarget\u003e${java.version}\u003c/target\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003cdevelopers\u003e \u003cdeveloper\u003e \u003cid\u003eDeine Personalnummer\u003c/id\u003e \u003cname\u003eDein Name\u003c/name\u003e \u003cemail\u003eDein E-Mail\u003c/email\u003e \u003corganization\u003eSBB\u003c/organization\u003e \u003corganizationUrl\u003ehttps://www.sbb.ch\u003c/organizationUrl\u003e \u003croles\u003e \u003crole\u003eDeine Rolle\u003c/role\u003e \u003c/roles\u003e \u003c/developer\u003e \u003c/developers\u003e \u003c/project\u003e    Das Projekt im IntelliJ als Maven-Projekt hinterlegen, zu diesem Zweck Ctrl+Shift+A drücken und als Aktion “Maven” eintragen.\nAus der Liste dann entweder “Add as Maven Project” oder “Add Maven Projects” wählen.\nBei der ersten Aktion wird das Projekt direkt hinzugefügt, bei der zweiten muss das pom.xml noch ausgewählt werden Auf der rechten Seite im IntelliJ gibt es den Tab Maven, dort müsste das Projekt nun erscheinen.  Wenn alles geklappt hat, dann werden die definierten Abhängigkeiten aus dem POM in das lokale Repository heruntergeladen.\n","categories":"","description":"Aufgaben zu Modul #S2 - Maven\n","excerpt":"Aufgaben zu Modul #S2 - Maven\n","ref":"/labs/java/maven/01_exercises/","tags":"","title":"Maven und Continuous Integration - Aufgaben"},{"body":"Ziele  Ich erkläre anhand von Beispielen, wozu Git verwendet werden kann Ich richte selbständig ein persönliches Git-Repository gemäss Anleitung korrekt ein Ich verwalte meine Code-Aufgaben im persönlichen Git-Repository unter Einhaltung der firmeninternen Richtlinien korrekt  Voraussetzungen  Du hast Zugriff auf das Git-Tool Bitbucket Git (inkl. Git-Bash) ist auf deinem Computer installiert Du hast die Grundeinstellungen für Git im Terminal nach der Installation gemacht   Folgende Einstellungen sind hier gemeint und können im Git-Bash Terminal ausgeführt werden: 1 2 3 4 5  git config --global user.name \"u123456\" git config --global user.email \"u123456@sbb.ch\" # Für Windows zusätzlich: git config --global core.autocrlf true git config --global core.longpaths true    Warum du Git ab heute verwenden wirst Stell dir folgendes Szenario vor: Du arbeitest mit deinem Computer seit mehreren Stunden um deine Hausaufgaben, welche morgen fällig werden, zu erledigen. Du speicherst deine Anpassungen immer wieder, damit diese nicht verloren gehen. Plötzlich stürzt dein Computer ab und startet nicht wieder. Zum Glück, hast du noch ein altes Laptop, welcher funktionstüchtig ist und womit du morgen in die Schule gehen kannst. Nur, was ist mit deinen Hausaufgaben? Die ganze Arbeit ist verloren und du musst wieder von Anfang an beginnen. Grrr….\nWenn du deine Arbeit nicht nur auf deinem Computer, sondern auch irgendwo anders gespeichert hättest (z.B. Dropbox, Google-Drive usw.), wäre es ganz einfach die Arbeit auf deinem Ersatz-Computer von dort aus herunterzuladen und dort weiterzumachen, wo du aufgehört hast.\nUnd hier ein weiteres Szenario: Du arbeitest an einem Computer-Programm. Es funktioniert. Nun musst du etwas Neues in dem Programm einbauen. Du arbeitest ein paar Stunden dran und am Schluss merkst du, dass was bisher einwandfrei funktioniert hat, jetzt gar nicht funktioniert. Du willst die Änderungen rückgängig machen, weisst aber nicht wie der Code vor der Änderungen ausgesehen hat. Grrr….\nWenn du deine ursprüngliche Arbeit als eine Art “Snapshot” irgendwo abgelegt hättest bevor du mit den Änderungen begonnen hast, so hättest du ganz einfach auf diesen “Snapshot” zurückgreifen können und den alten, funktionierenden Zustand wiederherstellen können.\nDiese zwei, in der Realität nicht ganz seltenen, Szenarien sind nur zwei Gründe, warum du ab heute mit Git und mit dem Git-Tool “Bitbucket” arbeiten wirst. Git ist ein Software-System, das es ermöglicht, den Arbeitszustand in einem sog. lokalen Repository aufzubewahren und diesen bei Bedarf (z.B. im zweiten Szenario) wiederherzustellen. Bitbucket ist ein Git-Cloud-Tool, welches sog. Remote-Repositories in der Cloud zur Verfügung stellt. Diese Remote-Repositories sind im Wesentlichen eine Kopie der lokalen Repositories und dienen unter anderem auch als Backup der Arbeit ausserhalb der eigenen Maschine.\nSpäter im Ausbildungsprogramm wirst du mehr über Git und seine weitere Anwendungszwecke erfahren. Hier geht es aber in erster Linie um das Backup deiner Arbeit, damit du bei einem Computerabsturz nicht alles von vorne machen musstest.\nPersönliches Bitbucket Repository einrichten Um deine Arbeit ausserhalb deines Computers zu sichern, wirst du in den nächsten Abschnitten ein Remote Git-Repository in Bitbucket erstellen und einrichten.\nAnschliessend, wirst du dieses Repository bei dir (lokal) “klonen”, sodass du auch ein lokales Repository hast, womit du auch ohne Internetverbindung arbeiten kannst.\nRemote Repository erstellen  Klicke auf den folgenden Link, um Bitbucket in deinem Browser zu öffnen: Bitbucket Wenn du noch nicht eingeloggt bist, folge den Anweisungen auf der Login-Seite Nach dem Login wirst du oben rechts ein, vermutlich, noch leeres Profil-Bild sehen. Klicke darauf und wähle View Profile (Profil anzeigen) aus\n Auf deiner Profilseite, klickst du nun den Create repository (Neues Repository erstellen) Schaltfläche Gib im geöffneten Formular deinem Repository einen Namen (z.B. “ausbildungsprogramm”) und lasse die andere Felder leer. Anschliessend klicke auf Create Repository (Repository erstellen).  Bitbucket erstellt nun das Repository für dich und du wirst automatisch zu deinem, noch leeren, Repository geführt. Herzliche Gratulation! Du hast soeben dein erstes Git-Repository erstellt.\nSSH-Schlüssel für dein Repository erstellen Ein SSH-Schlüssel ist ein Zugriffsberechtigungsnachweis für das SSH-Netzwerkprotokoll (Secure Shell). Dieses authentifizierte und verschlüsselte sichere Netzwerkprotokoll wird für die Remote-Kommunikation zwischen Computern verwendet.\nSSH verwendet ein Schlüsselpaar, um einen sicheren Handshake zwischen Remote-Parteien zu initiieren. Das Schlüsselpaar enthält einen öffentlichen und einen privaten Schlüssel. Den öffentlichen Schlüssel kannst du dir als Schloss und den privaten Schlüssel als Schlüssel für dieses Schloss vorstellen.\nSSH Schlüssel-Paar erstellen: Öffne ein Git-Bash Terminal und gib folgenden Befehl ein. Verwende hierfür deine E-Mail-Adresse:\n1  ssh-keygen -t rsa -b 4096 -C \"u123456@sbb.ch\"   Danach wirst du aufgefordert, eine Datei anzugeben, in der der Schlüssel gespeichert werden soll. Drücke hier die Eingabetaste (Enter), um den Standardspeicherort zu übernehmen. Bei der nächsten Eingabeaufforderung wirst du nach einer sicheren Passphrase gefragt. Auch hier kannst du die Eingabetaste verwenden, um keine Passphrase zu definieren (oder du wählst dir eine Passphrase aus).\nDeine SSH-Schlüsselpaar-Dateien sind nun in deinem Standardverzeichnis (auf Windows: C:\\Users\u003cdeine-uNummer\u003e.ssh) vorhanden: Der private Schlüssel ist in der Datei id_rsa abgelegt. Der öffentliche Schlüssel ist in der Datei id_rsa.pub abgelegt.\nÖffentlicher Schlüssel in Bitbucket ablegen Als letzter Schritt legst du deinen öffentlichen SSH-Schlüssel wie folgt in Bitbucket ab:\n Öffne ein Git-Bash Terminal und navigiere zum Speicherort deines SSH-Schlüsselpaars Gib folgenden Befehl ein, um deinen Schlüssel im Terminal auszugeben:  1  C:\\Users\\u123456\\.ssh\u003e cat id_rsa.pub   Markiere die Ausgabe und kopiere sie zum Clipboard (CTRL+C) Klicke hier, um deinen öffentlichen Schlüssel ins Bitbucket hinzuzufügen Klicke die “Add key” Schaltfläche, fülle das geöffnete Formular wie folgt aus und drücke anschliessend die “Save” Schaltfläche:\n  Somit hast du die SSH-Konfiguration abgeschlossen und du kannst dieses Protokoll beim Klonen benutzen.\nRepository lokal klonen Dein erstelltes Repository befindet sich nun auf dem Bitbucket-Server.\nDamit du diesen Repository aus deinem Computer benutzen kannst, musst du jetzt dieses lokal “klonen”.\nKlonen bedeutet hier einerseits lokal kopieren und andererseits eine Verbindung zwischen Remote- und Lokal-Repository herzustellen, um die Arbeit zwischen den beiden synchronisieren zu können.\nDa du jetzt einen Ort hast, an dem du deine Arbeitsdateien hinzufügen und sichern kannst, muss es auch eine Möglichkeit geben,\nvon deinem lokalen System (also direkt von deinem Computer und nicht nur über Browser) darauf zuzugreifen.\nUm dies einzurichten, kopierst du das Bitbucket-Repository auf dein System.\nBei Git wird dieser Kopiervorgang als Klonen bezeichnet.\nWenn du ein Repository klonst, erstellst du eine Verbindung zwischen dem Bitbucket-Server (den Git als “origin” kennt) und deinem lokalen System.\nOrdner für deine Repositories anlegen Bevor du dein Repository klonen wirst, erstellst du nun ein Ordner, welcher dieses Repository (und später auch weitere Repositories) beinhalten wird.\nAufgabe\nErstelle den Ordner “local_repos” unter deinem Startverzeichnis (bei Windows unter “C:\\Users\\\u003cdein Benutzername\u003e\")\n Falls du Hilfe brauchst.. 1 2 3 4  C:\\\u003e cd Users\\e123456 # e123456 ist der Benutzername auf dieser Maschine C:\\Users\\e123456\u003e mkdir local_repos # erstellt den Ordner \"local_repos\" unter dein Startverzeichnis C:\\Users\\e123456\u003e cd local_repos # ins Ordner local_repos navigieren C:\\Users\\e123456\\local_repos\u003e # fertig...    Repository klonen  Auf deiner Bitbucket-Repository Seite, klicke die Clone (klonen) Schaltfläche. Im geöffneten Popup-Fenster, wähle SSH als Protokoll und kopiere (CTRL+C) die URL zu deinem Repository (direkt neben dem Protokoll) in dein Clipboard\n Öffne nun dein Git-Bash Terminal und navigiere zu deinem, im vorherigen Schritt erstellten, “local_repos” Ordner Verwende folgenden Befehl, um dein Repository zu klonen:  1  C:\\Users\\e123456\\local_repos\u003e git clone ssh://git@codessh.sbb.ch:7999/~e123456/ausbildungsprogramm.git   Nun findest du unter deinem “local_repos” Ordner einen neuen Ordner mit dem Namen deines Repositorys. Dieser neue Ordner ist dein lokales Git-Repository und hier wirst du deine Arbeit ab jetzt speichern und verwalten.\nGratuliere! Nun hast du dein lokales Repository, worin du deine Arbeit verwalten kannst.\nOrdnerstruktur im lokalen Repository anlegen Jetzt erstellst du eine Ordnerstruktur, welche dazu dient, deine Arbeit im Ausbildungsprogramm strukturiert zu speichern und zu verwalten.\nAufgabe:\nErstelle folgende Ordnerstruktur in deinem lokalen Repository Ordner:\nIm Ordner J1 wirst du die Arbeit, welche zum ersten Java-Modul gehört speichern und verwalten (J1 entspricht der ID des ersten Moduls). Für jedes weitere Modul, welches du bearbeitest, wirst du einen Ordner unter deinem Repository-Ordner erstellen mit der ID des Moduls als Ordnername. Der src Ordner wirst du mit deinem Code befüllen. Darin wird später eine Java-Package-Struktur sein, die du dann anlegen wirst.\n“Snapshots” erstellen und ins Repository commiten In diesem Schritt wirst du eine neue Datei erstellen, diese in deinem lokalen Repository hinzufügen und Änderungen als “Snapshots” im Repository speichern.\nAufgabe:\nErstelle eine Datei mit dem Namen “README.md” in deinem src Folder.\n“git add” und “git status” Die Datei, welche du eben erstellt hast, befindet sich in deinem Arbeitsverzeichnis. Damit du diese nun in deinem Repository speichern kannst, musst du die Datei zuerst in eine sog. Staging-Umgebung verschieben. Dies wird mit dem Befehl git add gemacht. Gib folgenden Befehl in deinem Git-Bash Terminal ein:\n1  C:\\Users\\e123456\\local_repos\\ausbildungsprogramm\\J1\u003e git add README.md   Somit befindet sich ein Snapshot deiner Datei in der Staging-Umgebung.\nMit dem Befehl git status kannst du dies auch prüfen. Gebe den Befehl im Terminal ein.\nDie Ausgabe zeigt dir, dass es eine neue Datei in der Staging-Umgebung gibt, die aber noch nicht ins Repository “commited” wurde. Dies machst du nun im nächsten Schritt.\n“git commit” Wenn du den Befehl git commit eingibst, speicherst du die “gestagete” Arbeit in deinem lokalen Repository. Bei Bedarf, kannst du diesen Snapshot aus dem Repository wiederherstellen.\nFühre folgender Befehl aus, um den ersten Snapshot deiner Datei im Repository zu speichern:\n1  C:\\Users\\e123456\\local_repos\\ausbildungsprogramm\\J1\u003e git commit -m 'Eine leere README.md Datei'   Das “-m” gibt an, dass eine Commit-Nachricht folgt. Diese ist dann im Repository auch ersichtlich und hilft dir später herauszufinden was du in diesem Snapshot gemacht hast. Nun ist der erste Snapshot deiner Datei im lokalen Repository gespeichert.\nWenn du wieder git status ausführst, wirst du sehen, dass es jetzt nichts zu commiten gibt.\nWenn du beim Ausführen von git status die folgende Meldung siehst:\nkannst du dies mit dem vorgeschlagenen Befehl korrigieren:\n1  C:\\Users\\e123456\\local_repos\\ausbildungsprogramm\\J1\u003e git branch --unset-upstream   Wenn du git status oder auch andere Git-Befehle nun eingibst, siehst du diese Meldung nicht mehr.\nAufgabe:\nÖffne deine README.md Datei mit einem Text-Editor (z.B. Notepad++) und füge den folgenden Text hinzu:\n1 2 3 4  Nützliche Git-Befehle: git add: verschiebt Änderungen aus dem Arbeitsverzeichnis in die Staging-Umgebung von Git. git status: gibt den Status des Arbeitsverzeichnisses und den Status des Snapshots in der Staging-Umgebung zurück. git commit: committet den Snapshot aus der Staging-Umgebung in den Projektverlauf. Das bedeutet, dass dieser Snapshot nun in deinem lokalen Repository gespeichert wurde.   Erstelle einen neuen Snapshot deiner Datei und commite sie in deinem lokalen Repository.\nDateien ins Remote-Repository laden Bis jetzt hast du deine Arbeit im lokalen Repository, sprich nur auf der Festplatte deines Computers, gespeichert. Damit du diese Arbeit immer noch hast, auch wenn dein Computer oder die Festplatte versagen, wirst du nun deine Arbeit zum Remote-Repository auf Bitbucket schicken.\n“git push” Der Befehl git push, schickt die committeten Änderungen von deinem lokalen Repository an das Remote-Repository. Das Remote-Repository wird als origin bezeichnet.\nGib also folgenden Befehl in deinem Git-Bash Terminal ein:\n1  C:\\Users\\e123456\\local_repos\\ausbildungsprogramm\\J1\\src\u003egit push origin master   Wenn du dein Bitbucket-Repository im Browser öffnest, wirst du deine Arbeit jetzt auch dort sehen.\nNun ist deine Arbeit auch ausserhalb deines Computers abgesichert.\nAufgabe\nÖffne deine README.md Datei in einem Texteditor und füge den folgenden Text hinzu:\n1  git push origin master: pusht die Änderungen aus dem lokalen Repository in den Haupt-Branch **master** (Bitbucket-Branch) auf \"origin\" (Bitbucket-Server).   Erstelle einen neuen Snapshot deiner Datei, commite sie in deinem lokalen Repository und pushe sie auf den Bitbucket-Server.\nDen Ernstfall üben Deine Arbeit ist nun auf dem Bitbucket-Server gesichert.\nWenn dein Computer sich jetzt für immer verabschiedet, kannst du die Arbeit auf einem neuen Computer wiederherstellen.\nDieses Szenario wirst du jetzt üben.\nAufgabe\n Lösche dein lokale Repository (das Verzeichnis unter local_repos und alles darunter löschen). Stelle deine Arbeit aus dem Bitbucket-Server wieder her. Füge folgenden Text deinem README.md File hinzu: “git clone: klont ein Remote-Repository auf das lokale System in einem lokalen Repository.” Erstelle ein Snapshot für die Änderung, commite sie und pushe sie auf den Bitbucket-Server   Falls du etwas Hilfe brauchst... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  # Mit Git-Bash auf deinem \"local_repos\" Verzeichnis wechseln cd C:\\Users\\[deine U/E-Nummer]\\local_repos # Remote Repository klonen git clone ssh://git@codessh.sbb.ch:7999/~[deine U/E-Nummer]/ausbildungsprogramm.git # Wechsle in das Arbeitsverzeichnis deines lokalen Repositorys # Du findest deine README.md Datei im Verzeichnis C:\\Users\\[deine U/E-Nummer]\\local_repos\\ausbildungsprogramm\\J1\\src cd ausbildungsprogramm\\J1\\src # Füge den gewünschten Text mit einem Texteditor hinzu und speichere die Datei # Verschiebe die Datei in die Staging-Umgebung git add README.md # Commite deine Änderungen in das lokale Repository git commit -m 'Information zu git clone hinzugefügt' # pushe deine Änderungen auf dem Bitbucket-Server git push origin master    Coaches auf deinem Repository berechtigen Nun kannst du deine Arbeit mit Git verwalten. Somit stellst du sicher, dass deine Arbeit auch im schlimmsten Fall nicht verloren geht. Damit deine Coaches dich bei Problemsituationen unterstützen können, musst du sie auf deinem Bitbucket-Repository berechtigen. Dies erledigst du mit folgenden Schritten:\n Öffne dein Bitbucket-Repository im Browser Im Navigationsbereich klicke auf Repository Settings und dort auf Repository Permissions  Klicke die Schaltfläche “Add user or group” und berechtige alle Coaches als Administratoren auf deinem Repository. Anschliessend klicke die “Add” Schaltfläche   Nun sind alle Coaches auf deinem Repository berechtigt.\n","categories":"","description":"Modul #O4 - Persönliches Git-Repository einrichten\n","excerpt":"Modul #O4 - Persönliches Git-Repository einrichten\n","ref":"/docs/tools/personal_bitbucket_repo/","tags":"","title":"Persönliches Git-Repository einrichten"},{"body":"Um alle Übungen machen zu können wird eine lokale Datenbank benötigt. Dazu verwenden wir MariaDB. Falls du MariaDB noch nicht installiert hast, sind hier die Downloadlinks. Das DB-Tool dbeaver ist optional. Beim Download von MariaDB wird gleichzeitig HeidiSQL installiert, jedoch ist dieses Tool teilweise nicht so praktisch. Eine Alternative zu dbeaver ist die Intellij-Datenbankview, die bereits in Intellij ohne installation vorhanden ist.\nMariaDB:\n Download: https://mariadb.org/download/ DB-Tool: https://dbeaver.io/download/ Intellij-Datenbankview: https://www.jetbrains.com/help/idea/relational-databases.html#first-steps  Bei beiden Tools kann der normale Installationsprozess durchlaufen werden. Merke dir das Passwort, dass du bei MariaDB gesetzt hast. Du wirst es im nächsten Schritt brauchen. Nach der Installation kannst du DBeaver öffnen und MariaDB wie folgt verbinden:\n Klicke oben links auf das Verbinden-Icon (Stecker, im Bild rot markiert):  Wähle MariaDB aus und klicke auf “Weiter”:  Gib dein Passwort ein und klicke auf “Fertigstellen”:  Wenn alles funktioniert hat, solltest du die DB in der Liste sehen können:  Um ein SQL-Script auszuführen, musst du einen SQL-Editor öffnen. Mache dazu Rechtsklick auf localhost und wähle SQL-Editor -\u003e SQL-Skript aus:\n Vom SQL-Editor aus kannst du alle gelernten SQL-Statements anwenden. Zuerst solltest du jedoch eine Datenbank mit CREATE DATABASE name erstellen. Dort kannst du wie in den Docs gelernt Tabellen usw. erstellen.  Wenn diese Schritte funktioniert haben, bist du für die Labs bereit.\n","categories":"","description":"","excerpt":"Um alle Übungen machen zu können wird eine lokale Datenbank benötigt. …","ref":"/labs/database/00_setup/","tags":"","title":"Setup"},{"body":"Aufträge Voraussetzungen Im Lab zu Modul #J8 (JDBC) hast du ein persistentes Notenverwaltungssystem umgesetzt. Zu diesem Zweck hast du eine MariaDB-Instanz mit folgenden Tabellen aufgesetzt:\n SCHOOL_SUBJECT GRADE SCHOOL_SUBJECT_GRADE  Mehr Details dazu findest du im obenerwähnten Lab. Diese Datenbank und das dazu gehörende Datenbankmodel wirst du für unsere Spring-Aufgabe benötigen.\nBei Bedarf kannst du das Model erweitern.\nAuftrag Die Aufgaben in diesem Lab führen dich Schritt für Schritt durch die Umsetzung einer Webanwendung mit Spring Boot, welche einem Notenverwaltungssystem entspricht. Die folgenden Abschnitte listen die groben Funktionalen (was soll die Anwendung können) und die nicht-funktionalen (zusätzliche Anforderungen z.B. an die Qualität der Anwendung) Anforderungen an die Anwendung auf. Genauere Details zu den Anforderungen und den Akzeptanzkriterien werden in den entsprechenden Kapiteln aufgeführt.\nFunktionale Anforderungen  Die Anwendung unterstützt zwei unterschiedliche Profile: “student” und “admin” Wenn die Anwendung mit dem Profil “student” gestartet wird, stehen die folgenden Funktionalitäten zur Verfügung:  Alle Fächer und all deren Noten auflisten (ein Fach kann mehreren Noten beinhalten) Alle Fächer und deren Durchschnittsnote auflisten Für ein bestimmtes Fach:  Alle Noten und die Durchschnittsnote des Fachs auflisten Eine neue Note hinzufügen Eine bestehende Note ändern Eine bestehende Note löschen     Wenn die Anwendung mit dem Profil “admin” gestartet wird, stehen zusätzlich auch folgende Funktionalitäten zur Verfügung:  Alle Fächer auflisten Neue Fächer hinzufügen Bestehende Fächer bearbeiten Bestehende Fächer löschen   Die Anwendung bietet die Möglichkeit abzufragen, welches Profil gestartet ist.  Nicht funktionale Anforderungen (NFAs)  Der Code (das Design) der Anwendung ist sinnvoll in entsprechenden Packages aufgesplittet. Eine Klasse hat eine einzige Aufgabe (Single Responsibility Principle). Direkter Zugriff auf der internen Struktur einer Klasse ist verboten (Encapsulation / Information Hiding). Jede Klasse ist getestet.  Schritt 1: Maven-Projekt erstellen / pom.xml In diesem ersten Schritt wirst du eine Spring Boot Anwendung erstellen und ausführen. Hier stehen dir zwei Möglichkeiten für die Umsetzung zur Verfügung:\n Die Projektstruktur manuell anzulegen (#Hard-Core-Variante) Die Projektstruktur mit Spring-Initializr anlegen (#Easy-Going-Variante)  Beide Möglichkeiten werden in dieser Aufgabe aufgeführt.\nVoraussetzungen (was du brauchst)  Java 20 oder neuer ist installiert. Maven 3.5 oder neuer ist installiert. IntelliJ ist installiert und konfiguriert. Ein Bitbucket Repository steht bereit, um den Code des Projektes zu verwalten und ist auf der lokalen Maschine geklont worden.  Variante I: Projekt manuell anlegen Erstelle ein Maven-Projekt in IntelliJ Öffne IntelliJ und erstelle ein neues Maven-Projekt (File → New → Project): Ersetze GroupId, ArtifactId, Name und Location durch passende Werte.\nPasse dein pom.xml File an Füge den “Parent” und folgende Dependencies und Maven-Plugins in deine pom.xml Datei hinzu:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  \u003c!-- Parent kommt normalerweise nach der modelVersion --\u003e \u003cparent\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-parent\u003c/artifactId\u003e \u003cversion\u003e3.1.5\u003c/version\u003e \u003crelativePath/\u003e \u003c!-- lookup parent from repository --\u003e \u003c/parent\u003e \u003c!-- Dependencies kommen normalerweise nach den Properties --\u003e \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-web\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-test\u003c/artifactId\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003c!-- Build kommen normalerweise nach den Dependencies --\u003e \u003cbuild\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-maven-plugin\u003c/artifactId\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e   Lade alle Dependencies erneut (Maven-View -\u003e Reload all maven projects).\nErsetze die Main Klasse mit einer SpringBootApplikation Klasse Wenn du beim Erstellen des Projektes “add sample code” angekreuzt hast, beinhaltet dein Projekt nun eine Main-Klasse in deinem Source-Folder (im richtigen Package selbstverständlich). Diese Main Klasse werden wir nun in einer SpringBootApplication-Klasse umwandeln:\n Benenne die Main Klasse um, so dass sie \u003cname-deines-artefaktes\u003eApplication heisst (z.B. wenn dein Artefakt “demo” heisst, wird die Klasse nun “DemoApplication” heissen). Füge die Annotation @SpringBootApplication auf der Klassenebene hinzu Passe deine main Methode an, so dass sie wie folgt aussieht (Ersetzte DemoApplication mit deinem Application-Klassennamen):  1 2 3  public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); }   Gratuliere! Du hast nun dein Projekt angelegt, und zwar Hard-Core. Bravo! Fahre nun mit dem Schritt “Führe deine Anwendung aus” fort.\nVariante II: Projekt mit Spring-Initializr anlegen Öffne die Seite: https://start.spring.io/ und ersetzte die Angaben zu Group, Artifact (der Name wird sich automatisch ändern) und Description durch passende Werte. Achte das bei Project “Maven” ausgewählt ist und nicht Gradle. Füge die Abhängigkeit für “Spring Web” hinzu und drücke den “GENERATE” Knopf. Entpacke das heruntergeladene Zip-File in deinem Repository-Verzeichnis und öffne die Anwendung als Maven-Projekt in IntelliJ: File → New → Project from existing sources → Zum Root-Folder des Projektes navigieren und pom.xml auswählen.\nFühre deine Anwendung aus Öffne deine Application-Klasse (normalerweise heist sie Application). Wenn du Spring-Initializr benutzt hast, wurde diese Klasse für dich automatisch erstellt. Starte deine Anwendung mit der Default-Run-Konfiguration. Zu diesem Zweck kannst du die Application-Klasse öffnen und die Main-Methode ausführen.\nAkzeptanzkriterien Schritt 1 Du bist mit diesem Schritt fertig erst, wenn folgende Aussagen stimmen:\n Dein Projekt weist eine richtige Maven Projektstruktur aus:\n Das Projekt ist in IntelliJ richtig konfiguriert (JDK, Maven, Source-Verzeichnisse, Resource-Verzeichnisse usw.) Du verstehst, wozu wir die Dependencies im pom.xml File brauchen Eine “SpringBootApplication”-Klasse ist vorhanden, ist richtig annotiert und beinhaltet eine “main” Methode, welche die Applikation ausführt. Spring Boot Applikation startet fehlerfrei In der Run-Konsole ist eine ähnliche Ausgabe zu sehen:  Dein Projekt ist im vorbereiteten Bitbucket-Repository vorhanden  Schritt 2: Rest Schnittstellen definieren und umsetzen In diesem Schritt geht es darum die Schnittstellen (die API) zur Anwendung zu definieren. Über diese Schnittstellen können die Benutzer:innen die gewünschten Aktionen ausführen\nSystem-Design erstellen und Code Struktur anlegen Damit, du den Code gemäss den nicht-funktionalen Anforderungen (NFA) aufbauen kannst, überlege dir zuerst, wie du deine Anwendung zerlegen möchtest.\nDazu kannst du die Schritte der Methodik “functional decomposition” anwenden (mehr Information zur Methode findest du in diesem Artikel).\nBei der Zerlegung des Systems beachte auch Prinzipien wie Kohäsion (starke Kohäsion ist gewünscht) und Kopplung (lose Kopplung sollte das Ziel sein).\nAufgabe\nSobald du die Zerlegung deiner Anwendung gemacht hast, kannst du die passende Java-Packages erstellen, welche diese Zerlegung dann abbildet. Dein Code fügst du später an den richtigen Stellen hinzu.\nREST-Schnittstelle definieren Die Struktur für deine Anwendung steht. Nun definierst du die Schnittstellen, womit die Benutzer:innen mit der Anwendung interagieren werden. Die nötige Funktionalität entnimmst du aus den funktionalen Anforderungen.\nBeispiel: Anforderung - ein neues Schulfach hinzufügen\nDie entsprechende Schnittstelle könnte entsprechend so aussehen:\n   Beschreibung Http-Methode URL Request-Body Beispiel Path-Variable Response-Body Beispiel     Neues Schulfach hinzufügen POST /admin/schulfaecher {“name”: “Physik”} keine {“id”: 3, “name”: “Physik”}    Dort wo ein Request-Body und/oder ein Response-Body benötigt wird, wird mit JSON-Objekten gearbeitet. Diese JSON-Objekte werden wir im nächsten Abschnitt verwenden, um die Resource-Representation Klassen zu erzeugen.\n Aufgabe\nErweitere die obige Tabelle mit den restlichen Funktionen gemäss den funktionalen Anforderungen. Buche sobald du fertig bist ein Review mit einem Coach, damit spätere Fehler vermieden werden.\n Wichtig Endpunkt für Profil: Vergiss nicht das du noch einen Endpunkt erstellen musst, um herauszufinden, mit welchem Profil die Anwendung gestartet wurde.\nResource-Representation Klassen erstellen Unsere Schnittstellendefinition verwendet JSON-Objekte bei bestimmten Requests und Responses. Diese JSON-Objekte stellen sog. “Resource” dar. Im Beispiel “Neues Schulfach hinzufügen” stellt das JSON-Objekt ein Schulfach dar.\nIn diesem Abschnitt wirst du für alle JSON-Objekte entsprechende Java-Klassen erstellen. Das sind sogenannte Resource-Representation Klassen, auch Modelle genannt.\nIn unserer Anwendung werden wir die Resource-Representation Klassen als sog. DTOs (Data Transfer Objects) umsetzen. Diese Klassen wirst du später in deinen Controllern verwenden.\nBeispiel: Schulfach Resource-Representation\nDas folgende JSON-Objekt stellt ein Schulfach dar:\n1 2 3 4  { \"id\": 1, \"name\": \"Deutsch\" }   Daraus können wir unsere DTO-Klasse erstellen (vorerst nur mit Feldern und noch keine weitere Funktionalität):\n1 2 3 4  public class SchulfachDto { private final Long id; private final String name; }    Aufgabe\nErstelle für jedes JSON-Objekt aus dem vorherigen Abschnitt eine DTO-Klasse. Denke daran, die Klassen in die richtigen Packages zu setzen.\n Controller erstellen In Spring werden HTTP Requests an REST-Services von Controllern behandelt. Das ist eine Java-Klasse, welche mit @RestController annotiert wird. Controller sind also die Umsetzung unserer Schnittstellendefinition. Da wir noch keine persistierten Daten haben, wirst du vorerst Mockdaten aus den Schnittstellenmethoden liefern müssen.\nBeispiel: Controller für die Schulfachverwaltung\n1 2 3 4 5 6 7 8 9 10 11 12  @RestController @RequestMapping(\"/api/admin\") public class SchulfachAdminController { @PostMapping(\"/schulfaecher\") public SchulfachDto createNewSchulfach(@RequestBody SchulfachDto newSchulfach) { // TODO: Das sind Mockdaten und sollten zu einem späteren Zeitpunkt mit \"echtem\" Code ersetzt werden  return new SchulfachDto(3, \"Physik\"); } // hier können weitere Methoden der Schnittstelle umgesetzt werden }    Aufgabe\nErstelle Controller und Methoden (mit Mockdaten), um die Umsetzung deiner Schnittstellen abzuschliessen.\n Akzeptanzkriterien Schritt 2  Ein grobes System-Design ist vorhanden (z.B. mit der Hilfe des Functional-Decomposition-Diagramm). Die Codestruktur entspricht dem Design. Die REST Schnittstellen sind für jede relevante Funktion (gemäss funktionalen Anforderungen) dokumentiert und mit Controllern umgesetzt. Jede API-Methode, welche einen Wert liefert, schreibt diesen Wert direkt in den Response-Body (RestController) Die API-Methoden sind “RESTful” (siehe HTTP Methods in RESTful Web Services) Die API-Methoden, welche einen Wert liefern, liefern zurzeit Mockdaten zurück (alle Aufrufe einer Methode liefern immer die gleiche Mockdaten zurück) Mit Insomnia oder mit dem HTTP-Browser kann auf jede API-Methode zugegriffen werden Für jede API-Methode wurden passende Unit-Tests geschrieben und erfolgreich ausgeführt  Schritt 3: Services anlegen Service-Klassen erstellen In diesem Schritt wird ein komplett neuer Layer angelegt, welcher die Business-Logik der Applikation enthalten wird. Er ist zuständig für Aufgaben wie Exception-Handling und Validierung. Dieser Layer wird Service-Layer genannt. Service-Klassen werden grundsätzlich mit der Annotation @Service annotiert. Diese Annotation ist eine von drei möglichen Spezialisierungen eines Spring Components.\nDie möglichen Annotationen für einen Spring Component sind die folgenden:\n @Component @Controller @Service @Repository  Im folgenden Beispiel wird nun eine Service-Klasse angelegt, welche den vom Controller empfangenen Request-Body als Parameter entgegennimmt und diesen dann später weiter verarbeiten wird. Im Moment begnügen wir uns damit die Mock-Daten aus dem Controller hierher zu verschieben.\nBeispiel: Service für die Schulfachverwaltung\n1 2 3 4 5 6 7 8 9 10  @Service public class SchulfachAdminService { public SchulfachDto createNewSchulfach(SchulfachDto newSchulfach) { // TODO: Dies sind die Mock-Daten aus dem Controller, sie werden später durch richtige Daten ersetzt  return new SchulfachDto(3, \"Physik\"); } // hier können weitere Methoden des Services umgesetzt werden }    Aufgabe\nErstelle die nötigen Service-Klassen mit entsprechenden Methoden und verschiebe die Mock-Daten aus den Controllern in die Service-Methoden. Versuche die Methoden, welche das gleiche fachliche Thema behandeln im gleichen Service unterzubringen. Denke daran, die Service-Klassen in das richtige Package zu setzen.\n Service-Klassen und Controller verbinden Nun ist es an der Zeit, die erstellten Controller- und Service-Klassen miteinander zu verbinden. Dazu nutzen wir die Dependency Injection. Controller- und Service-Klassen werden durch ihre Annotationen als Spring-Components erkannt und durch den Spring Container instanziiert. Die Injection eines Service in einen Controller kann beispielsweise durch eine Constructor-Injection erfolgen. Durch diese Art von Implementation holt sich der Controller den Service aus dem Container selbst. Die Methoden der Controller leiten nun ihre Anfragen an die entsprechenden Service-Klassen weiter.\nBeispiel: Constructor-Injection\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  @RestController @RequestMapping(\"/api/admin\") public class SchulfachAdminController { private final SchulfachAdminService schulfachAdminService; public SchulfachAdminController(SchulfachAdminService schulfachAdminService) { this.schulfachAdminService = schulfachAdminService; } @PostMapping(\"/schulfaecher\") public SchulfachDto createNewSchulfach(@RequestBody SchulfachDto newSchulfach) { return this.schulfachAdminService.createNewSchulfach(newSchulfach); } // ... }    Aufgabe\nVerbinde die erstellten Controller-Klassen mit den entsprechenden Services. Leite sämtliche Anfragen aus den Controllern an die Service-Methoden weiter. Die ursprünglich erstellten Test sollten immer noch erfolgreich ausführbar sein.\n Akzeptanzkriterien Schritt 3  Die Mock-Daten wurden in Methoden auf dem Service-Layer ausgelagert Die Service-Klassen sind nach Thema aufgebaut Sämtliche Anfragen der Controller (Requests) wurden an die Service-Klassen und deren Methoden weitergeleitet Die Controller- und Service-Klassen sind mittels Constructor-Injection miteinander verbunden Sämtliche Unit-Tests für die Controller funktionieren nach wie vor Für alle Service-Methoden wurden entsprechende neue Unit-Tests geschrieben  Schritt 4: Datenbank-Verbindung herstellen Repository-Klassen erstellen In diesem Schritt wird erneut ein komplett neuer Layer angelegt, welcher die Verbindung der Applikation zu einer Datenbank aufbauen wird. Dieser Layer wird Persistenz-Layer genannt. Repository-Klassen werden grundsätzlich mit der Annotation @Repository annotiert.\nDie Verbindung zu einer Datenbank kann auf verschiedene Arten realisiert werden. In diesem Kapitel werden wir JPA oder JDBCTemplate eingehen.\n Möglichkeit 1: JPA-Repository mit Spring Data Möglichkeit 1: JPA-Repository mit Spring Data Bei dieser Variante wird die Jakarta Persistence API (JPA) mit Spring Data verwendet. Sie ermöglicht die automatische Generierung von Queries durch die Deklaration eines entsprechenden Methodennamens. Dies bedeutet, dass der Methodenname zugleich ein Datenbank-Query darstellt.\nDamit diese Möglichkeit der Implementation überhaupt besteht, müssen zuerst sogenannte Entitäten angelegt werden. Eine Entität ist in Java das Abbild einer Datenbank-Tabelle. Jede Zeile in einer Datenbank-Tabelle führt zu einem neuen Objekt der Entität. Entitäten können untereinander, genauso wie Datenbank-Tabellen, Beziehungen eingehen.\nBeispiel: Entität für ein Schulfach\n1 2 3 4 5 6 7 8 9  @Entity @Table(name = \"SCHOOL_SUBJECT\") public class Schulfach { @Id @Column(name = \"description\") private String bezeichnung; }   Die gezeigte Entität wird mit @Entity annotiert, damit sie generell als solche erkannt wird. Die Annotation @Table verbindet die Entität mit der entsprechenden Tabelle. Für jede Kolonne in der Datenbank wird eine Instanzvariable angelegt, welche diese mit @Column und der Angabe des Spaltennamens mit der entsprechenden Spalten aus der Datenbank verbindet. Die Annotation @Id dient der Markierung des Primärschlüssels.\n Aufgabe\nErstelle die Entitäten für die anderen beiden Tabellen GRADE und SCHOOL_SUBJECT_GRADE. Wähle für alle Attribute die richtigen Datentypen und gib die richtigen Spaltennamen an.\n Nun sollen die drei Entitäten miteinander verbunden werden. Die Beziehung zwischen den Tabellen ist wie folgt geregelt:\n Ein Eintrag in SCHOOL_SUBJECT_GRADE besitzt immer ein SCHOOL_SUBJECT und eine GRADE Eine GRADE kann in mehreren SCHOOL_SUBJECT_GRADE eingesetzt werden Ein SCHOOL_SUBJECT kann in mehreren SCHOOL_SUBJECT_GRADE eingesetzt werden  Damit sind die Beziehungen zwischen den Tabellen jeweils 1:m, dies wird auch One-To-Many genannt. Aus Sicht eines SCHOOL_SUBJECT_GRADE ist die Beziehung umgekehrt m:1, dies wird auch Many-To-One genannt. Mit diesen Kenntnissen können nun die entsprechenden Annotationen aus JPA verwendet werden, um die Entitäten zu verbinden.\nBeispiel: Beziehung zwischen Schulfach und Mapping-Tabelle\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  @Entity @Table(name = \"SCHOOL_SUBJECT\") public class Schulfach { @OneToMany(mappedBy = \"schulfach\") private Set\u003cSchulfachNote\u003e noten; } @Entity @Table(name = \"SCHOOL_SUBJECT_GRADE\") public class SchulfachNote { @ManyToOne @JoinColumn(name = \"FK_SCHOOL_SUBJECT_ID\", nullable = false) private Schulfach schulfach; }   Bei der Klasse Schulfach sehen wir die Verbindung zu allen Schulfach-Noten über ein Set und die Annotation @OneToMany unter Angabe des Namens der Instanzvariable aus der Klasse SchulfachNote. Bei der Klasse SchulfachNote sehen wir die Verbindung zu einem Schulfach über die Annotation @ManyToOne und der Angabe der Kolonne, welche den Fremdschlüssel enthält. Die Angabe von nullable = false dient der Angabe, dass die Kolonne des Fremdschlüssels keine null-Werte zulässt.\n Aufgabe\nVerbinde die anderen beiden Entitäten GRADE und SCHOOL_SUBJECT_GRADE mit den richtigen Beziehungen.\n Im nächsten Schritt werden nun die Repository-Interfaces angelegt.\nBeispiel: JPA-Repository für die Schulfachverwaltung\n1 2 3 4  @Repository public interface SchulfachAdminRepository extends JpaRepository\u003cSchulfach, String\u003e { }   Bei diesem Repository sehen wir die Definition eines Interfaces, welches ein JpaRepository erweitert. Die generischen Angaben stehen für die Klasse der Entität und dessen Primärschlüssel-Typ. Durch dieses Repository stehen bereits die wichtigsten CRUD-Operationen zur Verfügung.\n Aufgabe\nErstelle die Repository-Klassen für die beiden anderen Entitäten.\n Die folgende Aufzählung der Operationen ist nicht vollständig, zeigt aber welchen Funktionsumfang ein solches Repository nun bereits besitzt:\n List\u003cT\u003e findAll() liefert alle Einträge der Entität zurück T getReferenceById(ID id) liefert den Eintrag mit der entsprechenden ID zurück Optional\u003cT\u003e findById(ID id) liefert den Eintrag mit der entsprechenden ID als Optional zurück long count() zählt alle Einträge void delete(T entity) löscht die angegebene Entität \u003cS extends T\u003e S save(S entity) speichert die angegebene Entität und liefert sie zur weiteren Bearbeitung zurück  Für die Realisierung von Methoden zur Abdeckung der funktionalen Anforderungen dient die folgende Tabelle:\n   Funktionale Anforderung Abdeckung durch JpaRepository     Alle Fächer und all deren Noten auflisten (ein Fach kann mehreren Noten beinhalten) Nein   Alle Fächer und deren Durchschnittsnote auflisten Nein   Für ein bestimmtes Fach: Alle Noten und die Durchschnittsnote des Fachs auflisten Nein   Für ein bestimmtes Fach: Eine neue Note hinzufügen Methode save   Für ein bestimmtes Fach: Eine bestehende Note ändern Methode save   Für ein bestimmtes Fach: Eine bestehende Note löschen Methode delete   Alle Fächer auflisten Methode findAll   Neue Fächer hinzufügen Methode save   Bestehende Fächer bearbeiten Methode save   Bestehende Fächer löschen Methode delete    Damit müssen nur die Methoden für die ein wenig komplizierteren Datenbank-Abfragen definiert werden. Der einfachste Weg zu schnellen Resultaten führt über die Entitäten und deren Verbindungen untereinander.\nEine Note (GRADE) und ein Schulfach (SCHOOL_SUBJECT) sind jeweils über die letzte Tabelle (SCHOOL_SUBJECT_GRADE) miteinander verbunden. Diese Verbindung kann ebenfalls über JPA in den Entitäten abgebildet werden.\nBeispiel: Many-To-Many Verbindung zwischen Noten und Schulfächern\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  @Entity @Table(name = \"SCHOOL_SUBJECT\") public class Schulfach { @ManyToMany @JoinTable( name = \"SCHOOL_SUBJECT_GRADE\", joinColumns = @JoinColumn(name = \"FK_SCHOOL_SUBJECT_ID\"), inverseJoinColumns = @JoinColumn(name = \"FK_GRADE_ID\") ) private List\u003cNote\u003e noten; } @Entity @Table(name = \"GRADE\") public class Note { @ManyToMany @JoinTable( name = \"SCHOOL_SUBJECT_GRADE\", joinColumns = @JoinColumn(name = \"FK_GRADE_ID\"), inverseJoinColumns = @JoinColumn(name = \"FK_SCHOOL_SUBJECT_ID\") ) private List\u003cSchoolSubject\u003e subjects; }   Es reicht also die “Mapping”-Tabelle und die gerichteten Verbindungen in Form der Kolonnen-Namen anzugeben.\nDamit für ein bestimmtes Fach nun alle Noten abgeholt werden können, ist die folgende Implementation notwendig: Beispiel: Laden aller Noten für ein bestimmtes Fach\n1 2 3 4 5 6  @Repository public interface GradeRepository extends JpaRepository\u003cGrade, Integer\u003e { List\u003cGrade\u003e findGradesBySubjectsSubject(String subject); }     Möglichkeit 2: JDBC-Template Möglichkeit 2: JDBC-Template Wer nicht mehr genau weiss was JDBC ist kann es hier nachlesen.\nDependency Damit JDBC verwendet werden kann, muss zuerst eine neue Dependency in das pom.xml hinzufügen werden.\n1 2 3 4 5 6 7 8 9  \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-data-jdbc\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.mariadb.jdbc\u003c/groupId\u003e \u003cartifactId\u003emariadb-java-client\u003c/artifactId\u003e \u003cversion\u003e3.1.0\u003c/version\u003e \u003c/dependency\u003e   Entity-Klasse Eine Entity-Klasse ist eine normale Java-Klasse, die als Modell für eine Tabelle in der Datenbank dient. Jedes Objekt dieser Klasse entspricht einer Zeile in der Tabelle.\n1 2 3 4 5 6  @Getter @Setter public class Grade { private Long gradeId; private Double gradeValue; }   Die Annotationen @Getter und @Setter sind zwei der am häufigsten verwendeten Annotationen in Lombok. Sie generieren automatisch Getter- und Setter-Methoden für die Felder einer Klasse. Lombok ist eine Java-Bibliothek, die es Entwicklern ermöglicht, boilerplate Code in ihren Java-Klassen zu reduzieren.\nDamit man Lombok jedoch verwenden kann, muss man die folgende Dependency im pom.xml hinzufügen:\n1 2 3 4 5 6  \u003cdependency\u003e \u003cgroupId\u003eorg.projectlombok\u003c/groupId\u003e \u003cartifactId\u003elombok\u003c/artifactId\u003e \u003cversion\u003e1.18.30\u003c/version\u003e \u003cscope\u003eprovided\u003c/scope\u003e \u003c/dependency\u003e   Repository Ein Repository ein Designmuster oder eine Klasse, die den Datenbankzugriff für eine bestimmte Entität oder ein bestimmtes Objektmodell verwaltet. Es hilft, den Code zu organisieren und zentrale Methoden für den Zugriff auf die Datenbank bereitzustellen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  @Repository public class StudentRepository { private final JdbcTemplate jdbcTemplate; public StudentRepositoryImpl(JdbcTemplate jdbcTemplate) { this.jdbcTemplate = jdbcTemplate; } public List\u003cSchoolSubject\u003e getAllSubjectsAndGrades() { return null; } // ... }    Repository-Klassen und Service-Klassen verbinden Die Verbindung zwischen Repository- und Service-Klassen in einer Softwareanwendung ist entscheidend für eine saubere Struktur und effiziente Datenverwaltung. Repository-Klassen handhaben den Datenzugriff, während Service-Klassen die Geschäftslogik umsetzen. Service-Klassen nutzen die Methoden der Repository-Klassen, um auf Daten zuzugreifen oder diese zu manipulieren. Diese Trennung ermöglicht eine klare Aufgabenverteilung, verbessert die Wartbarkeit und erleichtert die Integration von Datenzugriff und Geschäftslogik.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  @Service public class StudentService { private final StudentRepository studentRepository; public StudentService(StudentRepository studentRepository) { this.studentRepository = studentRepository; } public List\u003cSchoolSubjectGradeDto\u003e getAllSubjectsAndGrades() { return studentRepository.getAllSubjectsAndGrades(); } // ... }    Aufgabe Füge die benötigte Dependency in dein Projekt ein und erstelle die nötigen Entity-Klassen. Zudem erstelle die benötigten Services und Repositories in der korrekten packages Struktur.\n Akzeptanzkriterien Schritt 4  Dependency wurde im pom.xml hinzugefügt. Alle nötigen Entities wurden erstellt. Alle benötigten Services wurden erstellt und in einen Ordner für alle Services abgelegt. Alle benötigten Repositories wurden erstellt und in einen Ordner für alle Repositories abgelegt.  Schritt 5: Konfiguration anlegen In der Konfigurationsdatei können Einstellungen für die Datenbankverbindung, Log-Ebene, Profile, Spring-Profile, Webserver-Port, Sicherheitskonfigurationen und viele andere Aspekte der Anwendung angegeben werden.\nDie zwei häufigsten Arten eine Konfigurationsdatei anzulegen sind in application.yml oder die application.properties. Der Unterschied der beiden besteht darin das die application.yml-Datei, in YAML-Syntax geschrieben ist, und die application.properties-Datei eine einfache Key-Value-Paar-Syntax verwendet.\napplication.properties:\n1 2 3 4  spring.datasource.url=jdbc:mariadb://localhost:3306/[your_database] spring.datasource.username=[your_username] spring.datasource.password=[your_password] spring.datasource.driver-class-name=org.mariadb.jdbc.Driver   application.yml:\n1 2 3 4 5 6  spring: datasource: url: jdbc:mariadb://localhost:3306/[your_database] username: [your_username] password: [your_password] driver-class-name: org.mariadb.jdbc.Driver    Aufgabe\nErstelle deine Konfigurationsdatei entsprechend deiner Datenbank.\n Akzeptanzkriterien Schritt 5  Die Spring Boot Applikation startet mit der Datenbank.  Schritt 6: Profile anlegen In diesem Schritt erstellst du die gewünschten Spring Boot Profile: “student” und “admin”. Diese Profile werden benutzt, um die verfügbare Funktionalität einzuschränken bzw. zu erweitern. Welche Funktionalität mit welchem Profil zur Verfügung stehen darf, entnimmst du aus den funktionalen Anforderungen.\nMit der @Profile Annotation, kannst du bestimmte Beans für das gegebene Profil aktivieren bzw. deaktivieren.\n Aufgabe\nAktiviere bzw. deaktiviere die Schnittstellen-Funktionalität entsprechend dem aktiven Profil\n Akzeptanzkriterien Schritt 6  Wenn die Anwendung mit dem Profil “student” gestartet wird, darf die Admin-Funktionalität nicht zur Verfügung stehen. Direkter Zugriff auf Admin-URLs liefert den HTTP Status-Code: 404 (Not Found) Wenn die Anwendung mit dem Profil “admin” gestartet wird, steht die gesamte Funktionalität zur Verfügung. Wenn die Anwendung mit dem Default-Profil gestartet wird, muss sie sich genauso verhalten, wie mit dem “student” Profil.  Schritt 7 Business-Logik- und Persistenz-Layer anpassen Repository- und Service-Implementierungen In Spring Boot ist die Verwendung von Repository- und Service-Implementierungen eine bewährte Methode, um eine saubere Trennung von Geschäftslogik, Datenzugriff und Präsentation sicherzustellen. Diese Trennung hilft, den Code übersichtlich, wartbar und testbar zu machen.\n  Repository-Interface: Definiert die Methoden für den Datenzugriff.\n  Repository-Implementierung (RepositoryImpl): Implementiert die Methoden des Repository-Interfaces und führt die tatsächlichen Datenbankoperationen aus.\n  Service-Interface: Definiert die Methoden für die Geschäftslogik.\n  Service-Implementierung (ServiceImpl): Implementiert die Methoden des Service-Interfaces und ruft bei Bedarf das Repository auf, um auf Daten zuzugreifen.\n  1 2 3 4 5  public interface StudentRepository { List\u003cSchoolSubject\u003e getAllSubjectsAndGrades(); // ... }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  @Repository public class StudentRepositoryImpl implements StudentRepository { private final JdbcTemplate jdbcTemplate; public StudentRepositoryImpl(JdbcTemplate jdbcTemplate) { this.jdbcTemplate = jdbcTemplate; } @Override public List\u003cSchoolSubject\u003e getAllSubjectsAndGrades() { return null; } // ... }    Aufgabe\nPasse deine Services und Repositories entsprechend der Implementierungs-Methode an.\n Akzeptanzkriterien Schritt 7  Alle Services sind mit der Implementierungs-Methode ausgestattet. Alle Repositories sind mit der Implementierungs-Methode ausgestattet   Schritt 8 Persistenz-Layer fertigstellen (Nur für JDBC) Schritt 8 Persistenz-Layer fertigstellen (Nur für JDBC) Queries Typischerweise implementieren JDBC-Repositories benutzerdefinierte Methoden für spezielle Datenbankabfragen. Diese Methoden nutzen das JdbcTemplate (Teil des Spring-Frameworks), um SQL-Queries auszuführen. Dabei können Platzhalter oder Named Parameters verwendet werden, um dynamische Werte in die Abfragen einzufügen.\nPreparedStatementSetter ist ein funktionales Interface in Spring JDBC. Es wird verwendet, um Parameter für parametrisierte Abfragen auf einem PreparedStatement festzulegen. Die Verwendung von PreparedStatementSetter hilft, die Logik zum Setzen von Parametern zu kapseln, was den Code modularer und leichter wartbar macht.\n1  INSERT INTO SCHOOL_SUBJECT (subject_name) VALUES (?)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  @Repository public class StudentRepositoryImpl implements StudentRepository { private final JdbcTemplate jdbcTemplate; public StudentRepositoryImpl(JdbcTemplate jdbcTemplate) { this.jdbcTemplate = jdbcTemplate; } // ...  @Override public void addSubject(SchoolSubjectDto schoolSubjectDto) { String sql = \"INSERT INTO SCHOOL_SUBJECT (subject_name) VALUES (?)\"; PreparedStatementSetter preparedStatementSetter = preparedStatement -\u003e { preparedStatement.setString(1, schoolSubjectDto.getSubjectName()); }; jdbcTemplate.update(sql, preparedStatementSetter); } // ... }   Mapping In der Softwareentwicklung stellt sich oft die Frage, wie man das Mapping zwischen verschiedenen Ebenen der Anwendung am besten handhabt. Insbesondere geht es darum, wie man Daten zwischen der Datenbank, der Geschäftslogik (Services) und der Benutzerschnittstelle (DTOs - Data Transfer Objects) hin- und herbewegt.\nEine Möglichkeit ist, das Mapping nicht im Service durchzuführen. Dies wird zwar nicht zwingend empfohlen, aber es ähnelt dem Ansatz von JPA (Java Persistence API) und kann daher vorteilhaft sein. Hierbei wird das Mapping eher in den Repositories durchgeführt. Dies verringert die Belastung des Service mit zusätzlichem Mapping und spezifischen Abfragen (Queries). Allerdings kann dies zu einer unübersichtlichen Repository-Schicht führen, da sie dann sowohl für das Mapping als auch für die Abfragen verantwortlich ist.\nWenn das Mapping im Service durchgeführt wird, bedeutet dies ein zusätzliches Mapping von der Abfrage (Query) zu den Entity-Objekten und dann zu den DTOs. Dies kann ineffizient erscheinen, da man ein Objekt erstellt, das später vom Garbage Collector aufgeräumt werden muss.\nDer JPA-Ansatz könnte mehr Daten zurückholen, als tatsächlich benötigt werden, da alle Eigenschaften in das Entity-Objekt geladen werden, selbst wenn sie im DTO nicht benötigt werden. Dies könnte ineffizient sein, insbesondere wenn nur ein Teil der Daten benötigt wird.\nIm Kontext von JDBC (Java Database Connectivity) gibt es viele verschiedene Ansätze und keinen “einen” richtigen Weg. Es ist möglich, JPA und JDBC zu mischen, um das Beste aus beiden Welten zu nutzen.\nInsgesamt ist die Wahl des richtigen Ansatzes abhängig von den Anforderungen des Projekts, der Skalierbarkeit, der Performance und den individuellen Vorlieben des Entwicklungsteams. Es ist wichtig, die Vor- und Nachteile der verschiedenen Ansätze abzuwägen und den am besten geeigneten Ansatz für das spezifische Projekt zu wählen.\nDTO zu Entity Durch das Mappen der Entity-Objekte auf DTOs können wir die Datenstruktur an die spezifischen Anforderungen anpassen. DTOs enthalten nur die relevanten Daten, die zwischen verschiedenen Teilen der Anwendung oder sogar zu externen Systemen übertragen werden müssen. Dies ermöglicht eine effizientere Datenübertragung und verhindert die Offenlegung von sensiblen oder unnötigen Informationen.\nDes Weiteren schafft die Verwendung von DTOs eine klare Trennung der Verantwortlichkeiten. Die Entity-Objekte kümmern sich um die Interaktion mit der Datenbank, während die DTOs die übertragenen Daten in geeigneter Form halten. Somit wird eine saubere Architektur gefördert, die gut skalierbar und wartbar ist.\n1 2 3 4 5 6 7 8 9 10  public static SchoolSubject mapDtoToEntity(SchoolSubjectDto dto) { if (dto == null) { return null; } SchoolSubject entity = new SchoolSubject(); entity.setSubjectId(dto.getSubjectId()); entity.setSubjectName(dto.getSubjectName()); return entity; }   1 2 3 4 5 6 7 8 9 10 11 12 13  @Service public class AdminService { private final AdminRepository adminRepository; public AdminService(AdminRepository adminRepository) { this.adminRepository = adminRepository; } public void addSubject(SchoolSubjectDto schoolSubjectDto) { adminRepository.addSubject(mapDtoToEntity(schoolSubjectDto)); } }   RowMapper In JDBC, ist der RowMapper ein Interface, das verwendet wird, um das Mapping von Zeilen aus dem ResultSet auf Objekte zu ermöglichen. Es wird verwendet, um das Ergebnis jedes Datensatzes aus der Abfrage in ein Objekt umzuwandeln.\nErstelle eine Klasse, die das RowMapper-Interface implementiert und die mapRow-Methode überschreibt. In dieser Methode wird definiert, wie eine Zeile aus dem ResultSet in ein Objekt gemappt wird.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import org.springframework.jdbc.core.RowMapper; import java.sql.ResultSet; import java.sql.SQLException; public class SchoolSubjectDtoRowMapper implements RowMapper\u003cSchoolSubjectDto\u003e { @Override public SchoolSubjectDto mapRow(ResultSet resultSet, int rowNum) throws SQLException { Long subjectId = resultSet.getLong(\"subject_id\"); String subjectName = resultSet.getString(\"subject_name\"); return new SchoolSubjectDto(subjectId, subjectName); } }   Im RepositoryImpl kann man nun die erstellte Mapper-Methode verwenden, um das Ergebnis der JDBC-Operation zu mappen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  @Repository public class StudentRepositoryImpl implements StudentRepository { private final NamedParameterJdbcTemplate namedParameterJdbcTemplate; private final CommonDeclarableProperties declarableProperties; public StudentRepositoryImpl(NamedParameterJdbcTemplate namedParameterJdbcTemplate, CommonDeclarableProperties declarableProperties) { this.namedParameterJdbcTemplate = namedParameterJdbcTemplate; this.declarableProperties = declarableProperties; } // ...  @Override public List\u003cSchoolSubjectDto\u003e getAllSubjects() { String sql = \"SELECT * FROM SCHOOL_SUBJECT\"; return namedParameterJdbcTemplate.query(sql, new SchoolSubjectDtoRowMapper()); } // ...  }   ResultSetExtractor Auch der ResultSetExtractor ist ein funktionales Interface, das verwendet wird, um das Mapping von ResultSet auf ein Objekt oder eine Liste von Objekten zu ermöglichen. Es ermöglicht eine benutzerdefinierte Verarbeitung der ResultSet-Daten.\nErstelle eine Klasse und verwende das ResultSetExtractor-Interface, um zu definieren, wie das ResultSet in ein Objekt oder eine Liste von Objekten umgewandelt werden soll.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  public class SchoolSubjectDtoResultSetExtractor implements ResultSetExtractor\u003cList\u003cSchoolSubjectDto\u003e\u003e { @Override public List\u003cSchoolSubjectDto\u003e extractData(ResultSet resultSet) throws SQLException { List\u003cSchoolSubjectDto\u003e schoolSubjectDtos = new ArrayList\u003c\u003e(); while (resultSet.next()) { Long gradeId = resultSet.getLong(\"subject_id\"); String subjectName = resultSet.getString(\"subject_name\"); SchoolSubjectDto schoolSubjectDto = new SchoolSubjectDto(gradeId, subjectName); schoolSubjectDtos.add(schoolSubjectDto); } return schoolSubjectDtos; } }   Im RepositoryImpl kann man nun die erstellte Extractor-Methode verwenden um das Ergebnis der JDBC Operation zu mappen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  @Repository public class AdminRepositoryImpl implements AdminRepository { private final NamedParameterJdbcTemplate namedParameterJdbcTemplate; private final JdbcTemplate jdbcTemplate; public AdminRepositoryImpl(NamedParameterJdbcTemplate namedParameterJdbcTemplate, JdbcTemplate jdbcTemplate) { this.namedParameterJdbcTemplate = namedParameterJdbcTemplate; this.jdbcTemplate = jdbcTemplate; } // ...  @Override public List\u003cSchoolSubjectDto\u003e getAllSubjects() { String sql = \"SELECT * FROM SCHOOL_SUBJECT\"; return namedParameterJdbcTemplate.query(sql, new SchoolSubjectDtoResultSetExtractor()); } // ... }    Aufgabe Ergänze deine Repositories mit den nötigen SQL-Queries (wähle selbst, ob du es auslagern möchtest oder nicht). Implementiere die benötigten Mapper und setze sie an den benötigten Orten ein (wähle selbst, ob du es mit einem Mapper oder Extractor machen willst).\n Akzeptanzkriterien Schritt 8  Es werden nun nicht mehr mittels Mockdaten verwendet, sondern direkt SQL-Queries benutzt. Die erhaltenen Daten, aus der Datenbank, werden korrekt für die DAOs gemappt. Die DAOs werden korrekt gemappt bevor sie an die Datenbank gesendet werden.   Schritt 9: API testen Sobald deine Schnittstelle umgesetzt wird bzw. bereits ab dem zweiten Schritt in diesem Auftrag, kann die Schnittstelle von HTTP-Clients angesprochen und getestet werden. In diesem Schritt wirst du deine Schnittstelle mit dem IntelliJ HTTP-Client testen.\nEine Alternative zum IntelliJ HTTP-Client bietet Swagger an. Swagger ist ein Open-Source-Framework, das in erster Linie dazu dient, APIs zu entwerfen, zu dokumentieren und zu testen. Es ermöglicht eine einfache und strukturierte Beschreibung von Webdiensten, um deren Funktionalitäten, Parameter und Endpunkte zu verstehen.\nMit Spring Boot 3 kann man neu nur noch einen Dependency hinzufügen damit der Swagger läuft. Diese sieht folgerndermassen aus:\n1 2 3 4 5  \u003cdependency\u003e \u003cgroupId\u003eorg.springdoc\u003c/groupId\u003e \u003cartifactId\u003espringdoc-openapi-starter-webmvc-ui\u003c/artifactId\u003e \u003cversion\u003e2.2.0\u003c/version\u003e \u003c/dependency\u003e   Für unsere Test-Zwecke reicht der IntelliJ HTTP-Client völlig aus.\nTesten mit IntelliJ HTTP Client Wenn du eine RestController-Klasse in IntelliJ offen hast, wird an einigen Stellen ein Symbol dargestellt wie hier mit Rot unterstrichen: Wenn man den Pfeil neben dem Symbol drückt, kann man die Option “Generate Request in HTTP Client” auswählen: Somit wird der HTTP-Client Editor geöffnet, mit dem entsprechenden HTTP-Method und Pfad: Mit einem Klick auf dem grünen Pfeil, wird die HTTP Request ausgeführt. Wenn du ein Beispiel brauchst, um zu wissen, wie du Requests erstellst (z.B. solche mit einem Request-Body) kannst du auf dem Examples Pfeil (oben rechts) klicken und die entsprechende Beispiel-Datei öffnen.\nWeitere Dokumentation zum IntelliJ HTTP-Client findest du auf dieser IntelliJ IDEA Seite\n Aufgabe\nErstelle eine HTTP-Request Datei, welche alle Methoden in deiner Schnittstelle ausführt.\n Akzeptanzkriterien Schritt 9  Eine HTTP-Request Datei liegt vor, welche alle öffentlichen Schnittstellen-Methoden ausführen kann. Bei Methoden, welche Parameter oder einen Request-Body brauchen, sind diese in den Requests auch so konfiguriert. Jede Methode, welche ausgeführt wird, liefert die erwarteten Ergebnisse (ggf. auch Anpassungen der Daten in der darunterliegenden Datenbank).  Integrationstests mit H2 umsetzen Integrationstests mit H2 in einem Spring-Boot-Projekt umzusetzen ist eine bewährte Methode, um die Interaktion zwischen verschiedenen Komponenten einer Anwendung zu testen, ohne auf eine reale Datenbank angewiesen zu sein. In diesem Kontext dient H2, eine In-Memory-Datenbank, als Ersatz für die eigentliche Datenbank und erlaubt es, Tests zu schreiben, welche die Anwendungslogik unter simulierten Bedingungen überprüft.\nStruktur Es wird folgende Ordnerstruktur empfohlen, damit das gesamte Testing wie gewollt funktioniert:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  src/ |-- main/ | |-- java/ | | |-- com/ | | |-- example/ | | |-- myapp/ | | |-- YourProductionCode.java |-- test/ | |-- java/ | | |-- com/ | | |-- example/ | | |-- myapp/ | | |-- integration/ | | |-- YourIntegrationTests.java | |-- resources/ | |-- application-test.properties | |-- schema.sql | |-- data.sql   Dependencies Damit man H2 verwenden kann, muss man auch hier noch einen Dependency im pom.xml hinzufügen. Diese ist folgende:\n1 2 3 4 5  \u003cdependency\u003e \u003cgroupId\u003ecom.h2database\u003c/groupId\u003e \u003cartifactId\u003eh2\u003c/artifactId\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e   Konfiguration anlegen In der Testkonfiguration (z. B. application-test.properties), konfiguriert man H2 als Datenbank für die Integrationstests. Es wird die Verbindungs-URL, der Treiber und die Anmeldeinformationen für H2 festgelegt. Diese Datenbank wird in den Tests automatisch erstellt und verwaltet.\napplication-test.properties:\n1 2 3 4 5 6  spring.datasource.url=jdbc:h2:mem:testdb spring.datasource.driverClassName=org.h2.Driver spring.datasource.username=sa spring.datasource.password=password spring.datasource.platform=h2 spring.jpa.hibernate.ddl-auto=update   application-test.yml:\n1 2 3 4 5 6 7 8 9 10  spring: datasource: url: jdbc:h2:mem:testdb username: sa password: password platform: h2 driver-class-name: org.h2.Driver jpa: hibernate: ddl-auto: update   SQL Files Nun werden SQL-Skripte benötigt, die das Datenbankschema und Testdaten definieren. Diese Skripte werden während der Testausführung automatisch geladen.\nSchema File 1 2 3 4  CREATE TABLE SCHOOL_SUBJECT ( subject_id INT AUTO_INCREMENT PRIMARY KEY, subject_name VARCHAR(255) NOT NULL );   Data File 1 2 3 4  INSERT INTO SCHOOL_SUBJECT (subject_name) VALUES ('Mathematics'); INSERT INTO SCHOOL_SUBJECT (subject_name) VALUES ('History'); INSERT INTO SCHOOL_SUBJECT (subject_name) VALUES ('Science'); INSERT INTO SCHOOL_SUBJECT (subject_name) VALUES ('English');   Integration Test Integrationstests sind wichtig, um sicherzustellen, dass verschiedene Komponenten einer Anwendung (z. B. Klassen, Module, Services, REST-Endpunkte) ordnungsgemäss miteinander interagieren und Daten korrekt austauschen. Sie helfen dabei, potenzielle Fehler und Inkompatibilitäten zwischen den Komponenten frühzeitig zu erkennen und zu beheben.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  @SpringBootTest @AutoConfigureMockMvc @ActiveProfiles(\"admin\") @ExtendWith(SpringExtension.class) public class AdminControllerIntegrationTest { @Autowired private MockMvc mockMvc; @MockBean private AdminService adminService; @Test public void testGetAllSubjects() throws Exception { List\u003cSchoolSubjectDto\u003e subjects = new ArrayList\u003c\u003e(); subjects.add(new SchoolSubjectDto(1, \"Mathematics\")); subjects.add(new SchoolSubjectDto(2, \"History\")); when(adminService.getAllSubjects()).thenReturn(subjects); mockMvc.perform(get(\"/api/admin/subjects\") .contentType(MediaType.APPLICATION_JSON)) .andExpect(status().isOk()) .andExpect(content().contentType(MediaType.APPLICATION_JSON)) .andExpect(jsonPath(\"$[0].subjectId\").value(1)) .andExpect(jsonPath(\"$[0].subjectName\").value(\"Mathematics\")) .andExpect(jsonPath(\"$[1].subjectId\").value(2)) .andExpect(jsonPath(\"$[1].subjectName\").value(\"History\")); } // ... }   ","categories":"","description":"Umsetzung einer Spring Boot Applikation für die Notenverwaltung aus Modul #J8\n","excerpt":"Umsetzung einer Spring Boot Applikation für die Notenverwaltung aus …","ref":"/labs/java/spring/01_spring/","tags":"","title":"Spring und Spring Boot - Aufgaben"},{"body":"Aufgabe 1 - User-Eingabe in Liste umwandeln Schreibe folgendes Programm:\n Lies eine Reihe von Zahlen aus der Kommandozeile in einer beliebigen Reihenfolge ein. Gib die unsortierte wie auch die sortierte Liste in der Konsole aus.  Verwende hierfür Streams.\nAufgabe 2 - Einfache mathematische Operation Schreibe folgendes Programm:\n Lies eine Reihe von Zahlen aus der Kommandozeile in einer beliebigen Reihenfolge ein. Jede Zahl in der Liste wird mit sich selber multipliziert und schlussendlich werden die ursprüngliche wie auch die neue Liste (mit den Berechnungen) in der Konsole ausgegeben - einmal unsortiert und einmal sortiert.  Verwende hierfür Streams.\nAufgabe 3 - Kalorien berechnen Mache dir Gedanken über das, was du gestern gegessen hast. Schreibe die einzelnen Gerichte/Snacks auf.\nVersuche für jede Mahlzeit die Anzahl Kalorien zu ermitteln. Speichere die Gerichte mit den Kalorien-Werten als String in einem Array oder einer Liste - z.B. {\"Grilled Chicken Breast (230 calories)\", \"Mixed Greens Salad (50 calories)\", \"Balsamic Vinaigrette Dressing (60 calories)\", \"500 ml Cola (200 calories)\"}.\nSchreibe ein Programm, das mit Hilfe von Streams die Kalorien-Anzahl aus den Strings zusammenzählt.\nAufgabe 4 - Notenschnitt berechnen Schreibe ein Programm, dass den Notenschnitt über Fächer berechnet.\nErstelle hierfür eine Klasse, die eine Note und ein Fach speichert. Erstelle einen Stream, der Objekte dieser Klasse beinhaltet.\n","categories":"","description":"Aufgaben zu Modul #J7 - Collections\n","excerpt":"Aufgaben zu Modul #J7 - Collections\n","ref":"/labs/java/java-collections/06_streams/","tags":"","title":"Streams Basics - Aufgaben"},{"body":"Inhalt In diesem Bereich werden Tools vorgestellt, welche du beim Erstellen von Lerndokumentation o.ä\neinsetzen wirst.\n","categories":"","description":"Einführung Markdown,   Word Basics\n","excerpt":"Einführung Markdown,   Word Basics\n","ref":"/docs/tools/","tags":"","title":"Tools"},{"body":"Die folgenden Aufgaben bestehen darin für bestehende Programmlogik entsprechende Unit-Tests zu schreiben.\nAufgabe 1: Tageszeit Schreibe Unit-Tests, um die Logik der folgenden Methode zu testen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import java.time.LocalDateTime; public class TimeOfDay { public String getTimeOfDay(LocalDateTime time) { if (time.getHour() \u003c 6) { return \"Night\"; } if (time.getHour() \u003c 12) { return \"Morning\"; } if (time.getHour() \u003c 18) { return \"Afternoon\"; } return \"Evening\"; } }   Aufgabe 2 Schreibe Unit-Tests, um die Methode move zu testen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  public class Mover { private LocalDateTime lastMovingTime; private Direction lastDirection; public void move(Direction direction) { if (Direction.getOpposite(direction) != this.lastDirection) { this.lastDirection = direction; this.lastMovingTime = LocalDateTime.now(); } } public LocalDateTime getLastMovingTime() { return lastMovingTime; } public Direction getLastDirection() { return lastDirection; } private enum Direction { NORTH, EAST, SOUTH, WEST; public static Direction getOpposite(Direction direction) { switch (direction) { case NORTH -\u003e { return SOUTH; } case EAST -\u003e { return WEST; } case SOUTH -\u003e { return NORTH; } case WEST -\u003e { return EAST; } } return null; } } }   Falls du meinst, dass es unmöglich ist diese Methode genau zu testen. Schreibe die Methode um, damit sie einfacher zu testen ist. Benutze dazu ein Clock-Objekt. Weitere Informationen findest du hier.\nAufgabe 3 In dieser Aufgabe geht es darum, dass die Unit-Tests für eine bestimmte Methode schon geschrieben wurden. Die Methode muss nun implementiert werden, so dass sie alle Unit-Tests erfüllt. Arbeite dich von Test zu Test durch.\nTest Source\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  import static org.junit.jupiter.api.Assertions.assertTrue; import org.junit.jupiter.api.Test; public class PasswordValidatorTest { private PasswordValidator uut; @Test public void testPasswordNull() { assertFalse(this.uut.isPasswordValid(null)); } @Test public void testPasswordTooShort() { assertFalse(this.uut.isPasswordValid(\"1234567\")); } @Test public void testPasswordTooLong() { assertFalse(this.uut.isPasswordValid(\"ABCDEFGHIJKLMNOPQRSTU\")); } @Test public void testPasswordContainsNoSpace() { assertFalse(this.uut.isPasswordValid(\"ABCDEFGHIJKLMNOPQR T\")); } @Test public void testPasswordContainsNoNumeric() { assertFalse(this.uut.isPasswordValid(\"ABCDEFGHIJKLMNOPQRST\")); } @Test public void testPasswordContainsNoLowercaseChar() { assertFalse(this.uut.isPasswordValid(\"ABCDEFGHIJ0123456789\")); } @Test public void testPasswordContainsNoUppercaseChar() { assertFalse(this.uut.isPasswordValid(\"abcdefghij0123456789\")); } @Test public void testPasswordContainsNoSpecialChar() { assertFalse(this.uut.isPasswordValid(\"abcdeFGHIJ0123456789\")); } @Test public void testPasswordValid() { assertTrue(this.uut.isPasswordValid(\"abcdeFGHIJ01234$*%?+\")); } }   Source\n1 2 3 4 5 6  public class PasswordValidator { public boolean isPasswordValid(String password) { // Ersetze die Exception durch deine Implementation...  throw new IllegalStateException(); } }   Wenn du eine Lösung gefunden hast, dann kannst du diese noch aufräumen (Refactoring).\n","categories":"","description":"Aufgaben zu Modul #J4 - Unit Testing / JUnit\n","excerpt":"Aufgaben zu Modul #J4 - Unit Testing / JUnit\n","ref":"/labs/java/java-testing/01_unit-testing/","tags":"","title":"Unit Testing mit JUnit - Aufgaben"},{"body":" Git [ɡɪt] ist eine freie Software zur verteilten Versionsverwaltung von Dateien, die durch Linus Torvalds initiiert wurde.\n Inhalt  Was ist Versionsverwaltung Geschichte Name Wie funktioniert Git  Was ist Versionsverwaltung Eine Versionsverwaltung ist ein System, welches Änderungen an einer oder mehreren Dateien über die Zeit protokolliert, um die Entwicklung nachvollziehbar zu machen und womit man jederzeit auf bestimmte vorherige Versionen zugreifen kann.\nLokale Versionsverwaltung Eine lokale Versionsverwaltung hat wohl fast jeder schon mal bei sich eingesetzt. Die einfachste Version davon ist, wenn man zum Beispiel eine Datei kopiert und an der Kopie weiter arbeitet:\n1 2  [user@computer ~/gymi/arbeit/]$ ls matura_arbeit.docx matura_arbeit_fastfertig.docx matura_arbeit_wirklichfertig.docx matura_arbeit_wirklichfertig_formatiert.docx matura_final.docx   Dies ist jedoch sehr Fehleranfällig, da man schnell die falsche Datei erwischt. Aus diesem Grund, haben Programmierer bereits vor langer Zeit, lokale Versionsverwaltungssysteme entwickelt, die alle Änderungen an allen relevanten Dateien in einer Datenbank verwalten. Ein Beispiel dafür ist RCS\nZentrale Versionsverwaltung Um die Zusammenarbeit von mehreren Personen zu vereinfachen wurden zentrale Versionsverwaltungssysteme entwickelt. Diese Systeme basieren auf einem zentralen Server der alle Dateien verwaltet. User holen eine Datei ab (Auschecken oder engl. to check out) editieren sie und nur berechtigte User dürfen die Datei anschliessend wieder auf den Server stellen. Ein Beispiel dafür ist SVN\nVerteilte Versionsverwaltung Im Gegensatz zu zentralen Systeme wo der Benutzer nur den letzten Stand zur Verfügung hat, kopiert er bei verteilten Versionsverwaltungen eine vollständiger Klon des Repositories auf sein System und hat somit auch die komplette Geschichte lokal. Dies vereinfacht dem Entwickler das lokale arbeiten und erhöht die Ausfallsicherheit. Zusätzlich können solche System gut mit verschiedenen externen Repositories (Remotes) umgehen was die Zusammenarbeit weiter vereinfacht. Ein Beispiel dafür ist GIT\nGeschichte Git entstand aufgrund einer Lizenzänderung von BitKeeper, der Versionsverwaltung welche vom Linux Kernel bis 2005 verwendet wurde. Da die Kernel Entwickler die Software nicht mehr kostenlos nutzen konnten, entwickelten sie selber eine Lösung. Ziele der neuen Software waren Geschwindigkeit, einfaches Design, gute Unterstützung von nicht linearer Entwicklung, dezentrale Struktur und die Fähigkeit grosse Projekte effektiv zu verwalten. Git wird seit 2005 kontinuierlich weiterentwickelt.\nName Der Name „Git“ bedeutet in der britischen Umgangssprache so viel wie „Blödmann“. Linus Torvalds erklärte seine Wahl des ungewöhnlichen Namens mit einem Witz sowie damit, dass das Wort praktikabel und in der Softwarewelt noch weitgehend unbenutzt war:\n „Ich bin ein egoistischer Mistkerl, und ich benenne all meine Projekte nach mir. Zuerst ‚Linux‘, jetzt eben ‚Git‘.“\n – Linus Torvalds\nDazu muss man anmerken, dass Linus den Namen Linux nur widerwillig akzeptierte.\nWie funktioniert Git Git funktioniert im Gegensatz zu den meisten anderen Versionsverwaltungen nicht indem es eine Liste von Änderungen an einer Datei abspeichert, sondern eher wie ein Dateisystem, welches bei jedem Commit ein Snapshot aller Dateien anlegt. Um effizient zu bleiben, werden unveränderte Dateien nicht kopiert sondern nur verknüpft. Weiter stellt Git die Integrität aller verwalteten Dateien sicher, indem es eine Prüfsumme jeder Datei anlegt. Dies verunmöglicht Änderungen an Dateien, ohne dass es Git mitbekommen würde.\nDrei Zustände einer Datei Eine Datei in einem Git Repository kann drei (Haupt-) Zustände haben:\n Modified: Die Datei wurde geändert aber noch nicht in die lokale Datenbank eingecheckt. Staged: Die Datei wurde im aktuellen Zustand für den nächsten Commit vorgemerkt. Commited: Die Datei ist im aktuellen Zustand in die lokale Datenbank eingecheckt.  Minimaler Workflow Hat man ein Repository von einem anderen Rechner geklont, kann man eine oder mehrere Dateien im Verzeichnisbaum editieren. Anschliessend staged man diese Änderungen und commited diese anschliessend.\n","categories":"","description":"","excerpt":" Git [ɡɪt] ist eine freie Software zur verteilten Versionsverwaltung …","ref":"/docs/git/was-ist-git/","tags":"","title":"Was ist Git"},{"body":"Modelliere* einen Klassenaufbau für einen Zoo. Folgende Klassen sollen enthalten sein:\n Personen Gehege Tiere  Jede dieser Klassen soll mehrere Spezialisierungen enthalten.\n *Modelliere bedeutet in diesem Zusammenhang, dass du nur den Aufbau mittels Klassen darstellen musst. Es wird keine Funktionalität gefordert.\n Bei den Personen wird zwischen Mitarbeitern und Mitgliedern unterschieden. Ein Mitarbeiter hat beispielsweise einen Lohn, welcher ein Mitglied nicht hat. Die folgenden Attribute sollen vorhanden sein:\n Lohn Beschreibung des Jobs Telefonnummer Mitglied seit Nummer der Mitglied-Karte  Verteile die Attribute also korrekt auf die Generalisierung und die Spezialisierungen.\nBei den Gehegen wird unterschieden zwischen Gelände, Terrarium, Aquarium und Käfig. Die einzigartigen Eigenschaften der verschiedenen Gehege sollen wie folgt modelliert werden:\n Gehege-Nummer Grösse in Quadratmeter Temperatur Feuchtigkeit Süss- / Salzwasser Fassungsvermögen Zaunhöhe Wassergraben vorhanden  Verteile die Attribute also korrekt auf die Generalisierung und die Spezalisierung. Selbstverständlich kann ein Gehege auch von einem anderen abgeleitet werden.\nBei den Tieren könnt ihr selber entscheiden, welche Tiere euer Zoo enthalten soll und wie diese auf die Gehege verteilt werden.\nFalls ihr keine Ideen habt, gibt es hier ein paar Beispiele:\n Landtiere Amphibien Wassertiere Vögel  oder\n Aufteilung nach Spezies wie Insekten, Säugetiere, Wirbeltiere, Reptilien  oder\n Aufteilung nach Ernährung (Fleischfresser, Pflanzenfresser, Allesfresser :-))  Der Zoo hat also Mitarbeiter und Mitglieder und verschiedene Tiere, die in verschiedenen Gehegen leben. Die Beziehung zwischen den einzelnen Klassen wie dem Zoo seinen Gehegen und Tieren soll sich an der realen Welt orientieren.\n","categories":"","description":"Aufgabe zu Modul #J3 - OOD - Zoo\n","excerpt":"Aufgabe zu Modul #J3 - OOD - Zoo\n","ref":"/labs/java/java-ood/01_zoo/","tags":"","title":"Zoo"},{"body":"","categories":"","description":"Labs zu Javascript\n","excerpt":"Labs zu Javascript\n","ref":"/labs/web/javascript/","tags":"","title":"Javascript Labs"},{"body":"Inhalt Im Lab von Spring Boot hast du bereits ein Backend für eine Notenverwaltung geschrieben. In diesem Exam sollst du zusätzlich ein Frontend schreiben, welches dieses Backend verwendet. Schlussendlich solltest du eine komplett selbst erstellte Fullstack Applikation haben, die einwandfrei funktioniert.\nSetup Bevor du mit den Aufgaben beginnst, solltest du ein neues Angular Projekt wie gelernt aufsetzen. Du kannst beim Setup bereits das Routing integrieren und wähle als stylesheet SCSS aus. Den Namen kannst du frei wählen. Wenn diese Bedingungen erfüllt sind, kannst du mit den Aufgaben beginnen.\nAnforderungen Funktional   Die Anwendung unterstützt zwei unterschiedliche Profile: “student” und “admin”\n  Wenn die Anwendung mit dem Profil “student” gestartet wird, steht folgende Funktionalität zur Verfügung:\n Alle Fächer und all deren Noten auflisten (ein Fach kann mehreren Noten beinhalten) Alle Fächer und deren Durchschnittsnote auflisten Für ein bestimmtes Fach:  Alle Noten und die Durchschnittsnote des Fachs auflisten Eine neue Note hinzufügen Eine bestehende Note ändern Eine bestehende Note löschen      Wenn die Anwendung mit dem Profil “admin” gestartet wird, steht zusätzlich auch folgende Funktionalität zur Verfügung:\n Alle Fächer auflisten Neue Fächer hinzufügen Bestehende Fächer bearbeiten Bestehende Fächer löschen    Die Anwendung ist Responsive gestaltet und ist auf Desktop, Tablet und Mobile verwendbar\n Die Verwendung von Bootstrap ist nicht erlaubt    Zusätzliche Anforderungen\n Die Anwendung ist in den Sprachen Deutsch, Französisch und Englisch verfügbar Die Sprache kann direkt in der Applikation gewechselt werden    Nicht-Funktional  Der Code (das Design) der Anwendung ist sinnvoll in entsprechenden Components/Services aufgesplittet. Ein Component/Service hat eine einzige Aufgabe (Single Responsibility Prinzip).  Design Die Notenverwaltung sollte ungefähr dem vorgegebenen Design entsprechen. Farben und Schriftarten können frei gewählt werden, jedoch sollte das vorgegebene Design immer noch erkennbar sein.\nDas Design wurde mit Figma erstellt und ist navigierbar. Also kannst du die benötigten Verlinkungen so selbst herausfinden. Teilweise wurde eine Funktion, wie das Bearbeiten einer Note, nur einmal umgesetzt. Die Funktion soll beim Endprodukt aber logischerweise überall umgesetzt sein. Das Design wurde für Desktop, Tablet und Mobile erstellt, die Anwendung sollte sich dementsprechend wie im Design anpassen.\nHier der Link zum Design: Figma Design - Notenverwaltung\nEs ist zu empfehlen, dass zum Erstellen der Applikation Angular Material eingesetzt wird. So können bereits erstellte Komponenten inklusive Design verwendet werden.\nAufgabe 1 - Erstellen der Components Um alle Daten der Notenverwaltung anzeigen, erstellen, löschen und bearbeiten zu können, werden verschiedene Components benötigt. In dieser Aufgabe solltest du diese Punkte abarbeiten:\n Überlege dir anhand der Anforderungen, wofür du alles einen Component benötigst. Die Unterscheidung zwischen Admin und Student Profil kann aktuell ignoriert werden. Erstelle bereits jetzt alle Components dazu. Entwickle ein einfaches und benutzerfreundliches Design für die einzelnen Seiten. Verwende aktuell feste Daten, diese werden in einer späteren Aufgabe ersetzt.  Aufgabe 2 - Models erstellen und verwenden Aktuell werden in deiner Applikation feste Daten angezeigt, die im HTML angegeben sind. Da die Daten später jedoch aus dem Backend kommen sollten, ist es von Vorteil, wenn du Models hast, die den benötigten Daten entsprechen. Diese Punkte sollten in dieser Aufgabe erledigt werden:\n Erstelle alle deiner Meinung nach benötigten Models. Ändere deine festen Daten und setze deine erstellten Models ein. Versuche, wo nötig, Forms zu verwenden, um diese Später verwenden zu können.   Tipp: Wenn du dir unsicher bist welche Daten du benötigst, kannst du im Backend bei den DAOs etwas spicken und so die richtige Struktur finden.\n Aufgabe 3 - Services erstellen und verwenden Da wir bald schon das Backend anbinden, solltest du noch die benötigten Services erstellen. Erledige dazu folgende Aufgaben:\n Erstelle alle deiner Meinung nach benötigten Services Lass alle Daten aus einem Service laden und erstelle dazu Mockdaten  Aufgabe 4 - Backend anbinden In dieser Aufgabe verbindest du jetzt das Frontend mit dem Backend. Erledige dazu diese Aufgaben:\n Verwende die korrekten Endpoints aus dem Backend Hole die Daten Asynchron aus dem Backend Entferne alle Mockdaten  Aufgabe 5 - Admin und Student Ab diesem Zeitpunkt sollten alle grundlegenden Funktionen deiner Applikation umgesetzt sein, Glückwunsch! Jetzt möchten wir noch die Admin- und Student-Funktionen trennen. Dazu besteht im Backend ein Endpunkt, welcher das gestartete Profil im Backend an das Frontend sendet. Darüber soll das Frontend die verschiedenen freischalten oder verstecken. Dazu hast du im Backend einen oder mehrere Endpunkte erstellt, die du jetzt einsetzen kannst. Deine Applikation soll auch selbständig erkennen, welche Funktionen verfügbar sind und welche nicht.\n","categories":"","description":"Ein Angular Exam zum Erstellen eines Frontends zu einem bestehenden Backend.\n","excerpt":"Ein Angular Exam zum Erstellen eines Frontends zu einem bestehenden …","ref":"/exams/web/angular/01_notenverwaltung/","tags":"","title":"Exam zu Angular"},{"body":"Ziele  Du kennst, die wichtigen special Operators in Angular und kannst diese anwenden.  Special Operators Viele der wichtigen Operatoren wurden bereits beim JavaScript behandelt, diese können auch in TypeScript verwendet werden. Die Operatoren können hier nachgelesen werden.\n?-Operator Der ?-Operator ist der optionale Aufruf-Operator (optional chaining operator). Er ermöglicht den Zugriff auf Eigenschaften oder Methoden eines Objekts, wenn das Objekt potenziell null oder undefined sein kann.\nEr wird verwendet, um sicherzustellen, dass der Code nicht abbricht und einen Fehler auslöst, wenn eine Eigenschaft oder Methode auf einem möglicherweise null oder undefined Objekt aufgerufen wird. Wenn das Objekt null oder undefined ist, gibt er undefined zurück, anstatt einen Fehler zu werfen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  interface Person { name: string; age?: number; getInfo(): string; } const person1: Person = null; const person2: Person = { name: 'Alice', getInfo() { return `Name: ${this.name}, Age: ${this.age}`; }, }; console.log(person1?.name); // undefined console.log(person2?.name); // 'Alice'  console.log(person1?.getInfo()); // undefined console.log(person2?.getInfo()); // 'Name: Alice, Age: undefined'    Wichtig der hier gezeigte Operator ist nicht das gleiche wie der ternary Operator(?:)! Wenn du unsicher bist, lies dir nochmal die Beschreibung des ternary Operators durch.\n !-Operator Der !-Operator ist ein Non-null-Assertion-Operator. Er wird verwendet, um dem Compiler mitzuteilen und zu garantieren, dass eine Variabel während der Laufzeit nicht null oder undefiniert ist und somit einen gültigen Wert hat.\nDadurch wird der Compiler davon abgehalten, Warnungen oder Fehlermeldungen auszugeben, die normalerweise auftreten würden, wenn eine mögliche Null- oder Undefined-Zuweisung vorliegt.\nEs ist wichtig zu beachten, dass der Operator mit Vorsicht verwendet werden sollte. Wenn der Wert tatsächlich null oder undefined ist und der Operator verwendet wird, tritt zur Laufzeit ein Fehler auf.\n1 2 3 4 5 6 7 8 9  function greet(name: string): string { return `Hello, ${name!.toUpperCase()}!`; } let userName: string = 'Alice'; console.log(greet(userName)); // 'Hello, ALICE!'  userName = null; console.log(greet(userName)); // Error: Cannot read properties of null (reading 'toUpperCase')   ","categories":"","description":"Modul #F5 - TypeScript - Special Operators\n","excerpt":"Modul #F5 - TypeScript - Special Operators\n","ref":"/docs/web/typescript/02_ts_special_operators/","tags":"","title":"Special Typescript Operators"},{"body":"Linter Ein Linter analysiert den Quellcode auf der Grundlage vordefinierter Regeln, Konventionen und Best Practices. Er prüft den Code auf häufige Fehler wie fehlende Semikolons, undefinierte Variablen, nicht verwendete Importe, ungültige Syntax und andere potenzielle Probleme. Darüber hinaus kann ein Linter auch den Code-Stil überprüfen, um sicherzustellen, dass er den vereinbarten Standards im Projekt entspricht. Der Hauptzweck eines Linters besteht darin, Entwicklern dabei zu helfen, qualitativ hochwertigen Code zu schreiben, der gut strukturiert und leicht wartbar ist.\nPrettier Prettier ist ein beliebtes Codeformatierungstool, das dazu dient, den Code in einem einheitlichen und konsistenten Stil zu formatieren. Im Gegensatz zu einem Linter wie ESLint, der sich auf Code-Stilregeln konzentriert, konzentriert sich Prettier ausschliesslich auf die Formatierung des Codes.\nPrettier unterstützt eine Vielzahl von Programmiersprachen, einschliesslich JavaScript, TypeScript, HTML, CSS, JSON etc. Es bietet eine Reihe von Formatierungsregeln, die auf bewährten Praktiken basieren, um den Code lesbarer und einheitlicher zu gestalten. Prettier kann den gesamten Code automatisch formatieren, einschliesslich Einrückungen, Zeilenumbrüchen, Leerzeichen, Klammern und anderen Formatierungsaspekten.\nPrettier konfigurieren Prettier benötigt normalerweise keine umfangreiche Konfiguration, da es über standardmässige Formatierungsregeln verfügt. Man kann jedoch bestimmte Einstellungen in einer .prettierrc-Datei festlegen, um das Verhalten anzupassen.\nHier ist ein Beispiel wie man dies tun kann:\nWenn man z.B.\n die Anzahl der Leerzeichen (2) festlegen will, die für einen Tab verwendet werden sollen, doppelte Anführungszeichen \" mit einfachen ' ersetzen will, Tabs durch Leerzeichen ersetzen will, fehlende Semikolons (im JavaScript) automatisch hinzufügen will, automatisch Space bei Klammern hinzufügen will, dann kann dies wie folgt getan werden.  1 2 3 4 5 6 7 8  { \"printWidth\": 120, \"singleQuote\": true, \"useTabs\": false, \"tabWidth\": 2, \"semi\": true, \"bracketSpacing\": true }   Weitere Informationen zu den verfügbaren Optionen und deren Werten finden man in der Prettier-Dokumentation unter https://prettier.io/docs/en/configuration.html.\nPrettier ausführen Das Prettier Plugin kann man wie folgt ausführe.\n  IntelliJ: Alt-Shift-Ctrl-P auf Windows und Linux oder Alt-Shift-Cmd-P auf macOS.\n  VSCode: [Shift] + [Alt] + [F] unter Windows und Linux und [Shift] + [Option] + [F] auf macOS. Alternativ kannst du durch Klick auf [F1] den Task “Format Document (With…)” auswählen. Auf diese Weise kannst du auch gleich den Default-Formatter festlegen (wenn du es noch nicht in der Datei settings.json wie oben beschrieben getan hast).\n  ESLint ESLint ist ein äusserst beliebtes und leistungsstarkes statisches Code-Analysetool für JavaScript- und TypeScript-Projekte.\nESLinkt installieren Bevor ESLint verwendet werden kann, muss es installiert werden (und bei Windows am besten noch den PC neustarten). Mit den folgenden drei Befehlen kann man es installere:\n1 2 3  npm install eslint --save-dev npx eslint --init npx eslint src/index.js   ESLint konfigurieren Man kann eigene Regeln erstellen oder bereits vorhandene Regeln anpassen, um den Anforderungen des Projekts gerecht zu werden. Die Konfiguration erfolgt über eine .eslintrc-Datei, in der man die Regeln, Erweiterungen und spezifischen Projekteinstellungen festlegen kann.\nHier einige Beispiele wie man dies tun kann:\nAnpassen bestehender Regel:\nIn der .eslintrc-Datei kann man die Einstellungen für eine spezifische Regel ändern. Wenn die maximale Zeilenlänge auf 100 Zeichen beschränkt werden soll, wird dies wie folgt eingerichtet.\n1 2 3 4 5  { \"rules\": { \"max-len\": [\"error\", { \"code\": 100 }] } }   Hinzufügen neuer Regel:\nMan kann Regeln hinzufügen oder entfernen, indem man die rules-Eigenschaft anpassen. Angenommen, man möchten die Regel “no-console” aktivieren, um den Einsatz von console.log zu verhindern.\n1 2 3 4 5  { \"rules\": { \"no-console\": \"error\" } }   Weitere Informationen findest du in der ESLint-Dokumentation unter https://eslint.org/docs/user-guide/configuring.\nESLint ausführen ESLint kann man über die Konsole ausführen dazu sind folgende Schritte erforderlich:\n In der Konsole zum Wurzelverzeichnis des Projekts navigieren. Den Befehl eslint gefolgt von den Datei- oder Verzeichnisnamen ausführen, die man überprüfen möchten.  1  eslint src/index.js   ESLint überprüft nun die angegebenen Dateien oder Verzeichnisse anhand der definierten Regeln und gibt mögliche Fehler oder Warnungen in der Konsole aus.  ESLint kann man mit zusätzlichen Optionen und Flags verwenden, die wichtigste Flag ist --fix. Man kann sie verwenden, um automatische Code-Fixes für bestimmte Probleme durchzuführen.\n1  eslint --fix src/index.js   Vielfach ist ESLint bereits als Script im packages.json hinterlegt und kann dann so mit dem Befehl npm run \u003cscriptname\u003e (beispielsweise npm run lint) aufgerufen werden.\nESLint automatisch beim Speichern In VS-Code:\nMan öffnet die VS Code-Einstellungen, indem man “Datei” (File) in der Menüleiste wählt und dann “Einstellungen” (Preferences) auswählt. Oder man verwendet den Shortcut “[Ctrl] + [,]” für Windows/Linux oder “[Cmd] + [,]” für macOS.\nMan sucht nach Save Actions in den Einstellungen und wählt “In settings.json bearbeiten” (Edit in settings.json).\nIn der settings.json-Datei fügt man den folgenden Code hinzu:\n1 2 3 4 5  \"editor.formatOnSave\": true, \"editor.defaultFormatter\": \"esbenp.prettier-vscode\", \"editor.codeActionsOnSave\": { \"source.fixAll.eslint\": true }     \"editor.formatOnSave\": true: Diese Einstellung bewirkt, dass der Code automatisch entsprechend den in den Editor-Einstellungen konfigurierten Regeln formatiert wird, wenn das Dokument gespeichert wird.\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\": Diese Einstellung gibt den Standard-Codeformatter an, der verwendet wird, wenn \"editor.formatOnSave\" aktiviert ist. In diesem Fall wird Prettier verwendet.\n  \"editor.codeActionsOnSave\": { \"source.fixAll.eslint\": true } : Diese Einstellung aktiviert Code-Aktionen beim Speichern des Dokuments. Konkret wird hier die ESLint-Erweiterung verwendet. Durch das Aktivieren von \"source.fixAll.eslint\": true werden automatisch Vorschläge zur Fehlerbehebung und Verbesserung des Codes angezeigt, wenn das Dokument gespeichert wird.\n  Nun noch die Datei speichern und VS-Code wird automatisch den Code formatieren und Lint-Fixes anwenden.\nIn IntelliJ:\nMan öffnet die IntelliJ-Einstellungen, indem man den Shortcut “Strg + Alt + S” für Windows/Linux oder “Cmd + ,” für macOS verwendet.\nMan navigiert zu Languages \u0026 Frameworks -\u003e [Code-Language z.B. JavaScript] -\u003e Code Quality Tools -\u003e ESLint nun wählt man die Automatic ESLint configuration und Run eslint --fix on save Option an.\nÜberprüfen Nun hoffen wir, dass alle nötigen Installationen erfolgreich ausgeführt wurden.\n5' - Einzelarbeit\n- Öffne deine IDE - Öffne in deiner IDE ein neues Terminal - git --version - npm -v  Sofern alle Versionen angezeigt werden, war die Installation erfolgreich. Anderweitig solltest du einen Coach konsultieren.\n","categories":"","description":"Hier wird erklärt was Linter sind und wie man diese benutzt.\n","excerpt":"Hier wird erklärt was Linter sind und wie man diese benutzt.\n","ref":"/docs/web/ide_advanced/02_linter/","tags":"","title":"Linter"},{"body":"Was ist Angular Angular ist ein Framework um SPA’s (Single Page Applications) mittels HTML und JavaScript zu erstellen und besteht aus verschiedenen core und optionalen JavaScript Bibliotheken Angular wird für Frontend-Applikationen verwendet. Oft wird ein Backend via HTTP(s) angebunden. Vorteile von Angular   Umfangreiche Funktionalität: Angular bietet eine Vielzahl von Funktionen und Features, die für die Entwicklung von komplexen Webanwendungen erforderlich sind. Es enthält ein leistungsfähiges Template-System, Datenbindung, Routing, Formularvalidierung, Dependency Injection und vieles mehr.\n  Strukturierte Architektur: Angular basiert auf dem Konzept der Components-Based Architektur. Die Anwendung wird in unabhängige, wiederverwendbare Components strukturiert, was die Wartbarkeit und Testbarkeit erleichtert.\n  Produktivität: Angular bietet viele Hilfsmittel, die die Entwicklungszeit verkürzen. Dazu gehören die Angular CLI (Command Line Interface) zur Projektgenerierung und automatisierten Aufgaben, ein reichhaltiges Ökosystem von Libraries und Extensions sowie eine umfangreiche Dokumentation.\n  TypeScript-Unterstützung: Angular ist in TypeScript geschrieben, einer statisch typisierten Variante von JavaScript. TypeScript bietet statische Typisierung, verbesserte IDE-Unterstützung und ermöglicht eine bessere Fehlererkennung zur Entwicklungszeit.\n  Nachteile von Angular   Lernkurve: Angular ist ein umfangreiches Framework und erfordert eine gewisse Einarbeitungszeit. Die Konzepte wie Dependency Injection, TypeScript und das Componentmodel können für Entwickler mit wenig Erfahrung zunächst herausfordernd sein.\n  Grösse: Angular ist ein umfangreiches Framework, was zu einer grösseren Dateigrösse der Anwendung führen kann. Dies kann die Ladezeit beeinflussen, insbesondere für mobile Geräte mit langsamer Internetverbindung.\n  Komplexität: Aufgrund der vielen Funktionen und Konzepte kann die Komplexität von Angular zunehmen, insbesondere für kleinere Projekte, bei denen nicht alle Funktionen benötigt werden.\n  Abhängigkeit von Google: Angular wurde von Google entwickelt und ist stark mit dem Unternehmen verbunden. Einige Entwickler haben Bedenken hinsichtlich der langfristigen Unterstützung und der Unabhängigkeit von Google.\n  Angular Projekt aufsetzen Um ein neues Angular-Projekt zu erstellen, kann man das Angular CLI (Command Line Interface) verwenden. Dazu muss es aber zuerst installiert werden.\nAngular CLI installieren Man muss als Vorarbeit sicherstellen, dass Node.js auf dem Computer installiert ist (npm -v im Terminal eingeben). Im Terminal muss man danach den folgenden Befehl ausführen, um die Angular CLI global zu installieren:\n1  npm install -g @angular/cli   Projekt erstellen Nun muss in das Verzeichnis wechseln, in dem das Angular-Projekt erstellen werden möchten, und nun muss man den folgenden Befehl ausführen:\n1  ng new new-angular-project   Als Nächstes in das Projektverzeichnis wechseln, indem man den folgenden Befehl ausführen:\n1  cd new-angular-project   Projekt starten Mit dem folgenden Befehl, kann man den Entwicklungsserver starten und das Angular-Projekt im Browser anzuzeigen:\n1  ng serve   Der Entwicklungsserver wird gestartet und die Anwendung wird auf http://localhost:4200 bereitgestellt. Man kann diese URL in einem Webbrowser öffnen, um die Angular-Anwendung zu sehen.\nAngular CLI Das Angular CLI (Command Line Interface) ist ein Befehlszeilenwerkzeug, das von Angular bereitgestellt wird. Es ermöglicht Entwicklern, effizienter mit Angular zu arbeiten, indem es verschiedene Funktionen und Befehle zur Verfügung stellt, um die Erstellung, Entwicklung, Bereitstellung und Wartung von Angular-Projekten zu unterstützen.\nCommands   ng new : Erstellt ein neues Angular-Projekt mit der angegebenen Projektstruktur und Konfiguration.\n  ng serve: Startet den Entwicklungsserver und stellt Ihre Angular-Anwendung auf http://localhost:4200 bereit. Änderungen werden in Echtzeit reflektiert.\n  ng serve –open: Startet den Entwicklungsserver und öffnet automatisch Ihren Standardwebbrowser, um Ihre Anwendung anzuzeigen.\n  ng generate   (oder ng g  ): Generiert eine neue Datei oder Komponente basierend auf einer vorgegebenen Vorlage.\n  Component: ng generate component  oder ng g c  Erzeugt eine neue Component mit einer Componentdatei, einer Template-Datei, einer Stylesheet-Datei und einem Testfile.\n  Module: ng generate module  oder ng g m \n  Service: ng generate service  oder ng g s \n  Directive: ng generate directive  oder ng g d \n  Klassen: ng generate class  oder ng g cl \n  Enum: ng generate enum  oder ng g e \n  Interface: ng generate interface  oder ng g i \n  Pipe: ng generate pipe  oder ng g p \n  Guard: ng generate guard \n    ng build: Kompiliert und baut Ihre Angular-Anwendung für die Produktion. Erzeugt optimierten JavaScript-Code, der für die Bereitstellung auf einem Webserver verwendet werden kann.\n  ng test: Führt Ihre Unit-Tests aus, um sicherzustellen, dass Ihre Anwendung ordnungsgemäß funktioniert.\n  ng lint: Überprüft Ihren Code auf Einhaltung der definierten Linting-Regeln.\n  ng update: Aktualisiert Ihre Angular-Abhängigkeiten und -Pakete auf die neuesten Versionen.\n  ng add : Fügt ein externes Paket oder eine Bibliothek zu Ihrem Angular-Projekt hinzu. Installiert und konfiguriert das Paket automatisch.\n  ng help: Zeigt eine Liste der verfügbaren Befehle und Optionen der Angular CLI an.\n  Konfigurationsdatei für eine Angular-Anwendung Die angular.json-Datei ist die Konfigurationsdatei für ein Angular-Projekt. Sie enthält verschiedene Einstellungen und Konfigurationen für das Build-System, die Erstellung des Projekts, den Asset-Manager und vieles mehr. Die Datei wird automatisch generiert, wenn ein neues Angular-Projekt mit der Angular CLI erstellt wird.\nEinstiegspunkt einer Angular-Anwendung Typescript Der Einstiegspunkt einer Angular-Anwendung ist die Datei main.ts. Diese Datei ist das Hauptmodul der Anwendung, in dem der Bootstrap-Prozess gestartet wird.\n1 2 3 4 5 6 7  import { platformBrowserDynamic } from '@angular/platform-browser-dynamic'; import { AppModule } from './app/app.module'; platformBrowserDynamic().bootstrapModule(AppModule)$ .catch(err =\u003e console.error(err));   Das AppModule selbst ist das Root-Modul der Angular-Anwendung. Es wird in der Regel in einer separaten Datei (app.module.ts) definiert und enthält die erforderlichen Importe und Konfigurationen für die Anwendung, einschliesslich der Components, Services, Modules und anderer Funktionen, welche d Anwendung benötigt.\nDie main.ts-Datei wird beim Starten der Angular-Anwendung vom Build-System oder von der Angular CLI aufgerufen. Sie ist der erste Punkt, an dem der Angular-Bootstrap-Prozess beginnt und die erforderlichen Ressourcen und Module geladen werden.\nEs ist wichtig zu beachten, dass die main.ts-Datei normalerweise nicht manuell bearbeitet werden muss, es sei denn, man hat spezifische Anpassungen oder Erweiterungen für den Bootstrap-Prozess vorzunehmen. Die meisten Änderungen und Konfigurationen sollten im AppModule und den anderen Modulen der Anwendung vorgenommen werden.\nHTML Das Einstiegs-HTML-Dokument einer Angular-Anwendung ist die index.html-Datei. Diese Datei wird automatisch generiert, wenn die Anwendung kompiliert.\nIn der index.html-Datei befindet sich das grundlegende HTML-Markup für die Anwendung. Hier werden die erforderlichen Skripte und Stylesheets eingebunden und der Ort definiert, an dem die Angular-Anwendung in das DOM eingefügt wird.\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u003c!doctype html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003eAngular App\u003c/title\u003e \u003cbase href=\"/\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\"\u003e \u003c/head\u003e \u003cbody\u003e \u003capp-root\u003e\u003c/app-root\u003e \u003c/body\u003e \u003c/html\u003e   Im \u003chead\u003e-tag befindet sich der \u003ctitle\u003e-tag, dieser definiert den Titel der Webseite, der normalerweise im Browser-Tab angezeigt wird. Das \u003clink rel=\"icon\" type=\"image/x-icon\" href=\"...\"\u003e bindet das Favicon (Favoriten-Symbol) der Webseite ein, das normalerweise im Browser-Tab und in Lesezeichen angezeigt wird. Diese zwei kann man auch nach Belieben ändern.\nBeim Starten der Angular-Anwendung wird der Inhalt der index.html-Datei vom Webbrowser geladen. Der Angular-Bootstrap-Prozess findet das \u003capp-root\u003e-Element und ersetzt es durch den gerenderten Inhalt der Angular-Komponenten.\nApp Component Der “AppComponent” ist der Hauptcomponent einer Angular-Anwendung. Es handelt sich um die Wurzelcomponent, von der aus alle anderen Components und Elemente der Anwendung hierarchisch aufgebaut sind.\nEr wird automatisch während der Initialisierung der Anwendung erstellt und gerendert. Er dient als Container für das gesamte Anwendungslayout und ist der erste Component, die in der index.html-Datei der Anwendung geladen wird mittels dem \u003capp-root\u003e-Tag.\nAngular Best(Good)-Practices Angular bietet eine Reihe von Best Practices, die helfen können, die Angular-Anwendungen effizienter, wartbarer und skalierbarer zu gestalten. Hier sind einige wichtige Angular Best Practices:\n Verwendung der Angular CLI: Die Angular CLI erstellt automatisch eine standardisierte Projektstruktur, die bewährte Praktiken und Konventionen folgt. Dies erleichtert die Organisation und Wartung des Codes, da Entwickler eine einheitliche Struktur erwarten können. Daher sollte zum Erstellen von neuen Dateien sollte auch immer die CLI verwendet werden. Eine Aufgabe pro Component: Den Code sollte in kleine, wiederverwendbare Komponenten aufgeteilt werden. Jeder Component sollte eine klare Verantwortung haben und nur für eine spezifische Aufgabe zuständig sein. Um im Typescript Code Konventionen und Best Practices zu befolgen sollte man zudem einen Linter verwenden, um dies zu prüfen. Nutzung der Angular Template-Syntax: Es sollte die Angular-spezifische Template-Syntax verwendet werden, um Data-Bindung, Ereignisbehandlung und Strukturierung des DOMs im Templates zu erleichtern. Komplexe Logik in den Templates sollte vermieden werden, es sollte möglichst lesbar sein. Dazu kann man den Formatter wie Prettier am besten verwenden, um das gesamte zu vereinfachen. Nutzung von Lazy Loading für Module: Das Lazy Loading-Feature von Angular sollte verwendet werden, um die Ladezeit der Anwendung zu verbessern. Man sollte Module nur dann laden, wenn sie benötigt werden, anstatt die gesamte Anwendung auf einmal zu laden.  Angular Dokumentation Die offiziellen Dokumentationen bietet den Entwicklern eine umfassende und verlässliche Informationsquelle für das entsprechende Framework oder die entsprechende Technologie bereitzustellen. Diese Dokumentationen bieten eine strukturierte Anleitung und Erklärungen zu den verschiedenen Funktionen, Konzepten, APIs, Best Practices und Verwendungsmöglichkeiten. Angular hat mit dem Update auf die Version 17 auch eine neue Dokumentationsseite veröffentlicht. In dieser findet man alle Informationen zu den neuen Standards und Funktionen.\nEin wichtiger Teil einer Dokumentation ist die detaillierte API-Referenz. Hier werden alle verfügbaren Klassen, Methoden, Parameter und Rückgabewerte beschrieben. Dies erleichtert es Entwicklern, die verfügbaren Funktionen zu verstehen und effektiv zu nutzen.\nAbgesehen von reinen Codebeispielen bieten Dokumentationen auch konzeptionelle Erklärungen. Diese beschreiben die zugrunde liegenden Prinzipien, Architekturkonzepte und Entscheidungen, die beim Design der Technologie getroffen wurden.\nAuf der Angular Dokumentation sind zudem auch Tutorial zu finden, welche absolviert werden können, um das Verständnis in Angular zu stärken.\nZudem ist nun auch ein sogenannter Playground von Angular selbst hinzugefügt worden, diesen kann man auch über die Dokumentation erreichen. Der Playground hat die Aufgabe, das Entwickler bereits ihren Code im Browser testen können, ohne dafür ein neues Angular-Projekt aufsetzen zu müssen. Vor dem offiziellen Playground musste man dies immer auf der Seite Stackblitz erledigen. Diese ist jedoch auch heutzutage immer noch sehr hilfreich, da man dort in verschiedensten Sprachen Code im Browser testen kann.\n","categories":"","description":"Modul #F6 - Angular - Was ist Angular?\n","excerpt":"Modul #F6 - Angular - Was ist Angular?\n","ref":"/docs/web/angular/02_1_angular_einf%C3%BChrung/","tags":"","title":"Einführung in Angular"},{"body":"Aufgaben Aufgabe 1 Im folgenden Code befindet sich eine Funktion für das Erhalten einer zufälligen Zahl zwischen dem min und max. Zudem befindet sich bereits ein Observable im Code, welches in zufälligen Intervallen einen Wert zurückgeben soll.\nDie Aufgabe ist nun das Observable so anzupassen, dass in der Subscription jeweils in zufälligen Abständen ein Wert zurückgegeben wird.\n1 2 3 4 5 6 7 8 9 10 11 12 13  import { Observable } from \"rxjs\"; function getRandomInterval(min: number, max: number): number { return Math.floor(Math.random() * (max - min + 1)) + min; } // Observable const intervalObservable = new Observable\u003cnumber\u003e(); // subcription intervalObservable.subscribe((interval) =\u003e { console.log(`Interval: ${interval}ms`); });   Aufgabe 2 Auch bei dieser Aufgabe ist bereits ein wenig Code schon gegeben. Und zwar erneut eine Funktion zum Erhalten einer zufälligen Zahl für die Celsiusgrade. Auch das Observable ist hier bereits gegeben, dieses emitted alle zwei Sekunden eine neue Random Celsiusgrad Zahl.\nDie Aufgabe ist nun beim subscriben auf das Observable, die kommende Celsius Zahl in Fahreinheiten umzuwandeln und dann beide zu loggen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import { Observable } from \"rxjs\"; function getRandomDegree(min: number, max: number): number { return Math.floor(Math.random() * (max - min + 1)) + min; } const temperatureInC = new Observable\u003cnumber\u003e((subscriber) =\u003e { setInterval(() =\u003e { subscriber.next(getRandomDegree(0, 45)); }, 2000); }); temperatureInC.subscribe((celsius) =\u003e { console.log(`Celsius: ${celsius}`); });   Aufgabe 3 In den Docs wurden dir verschiedene Versionen von Subjects vorgestellt. Jede davon hat ihre speziellen Eigenschaften. Diese sollst du in dieser Aufgabe vertiefen. In der nachfolgenden Vorlage befindet sich ein grober Aufbau, den du erweitern sollt. Du sollst anhand dieser Vorlage eine Art Chat erstellen, der eine Nachricht an ein Subject schickt. Jede Nachricht soll ausserdem einen Zeitstempel haben. Ziel ist es, dass du alle bekannten Subjects verwendest. Schlussendlich soll jeweils die Ausgabe der Subjects im \u003cdiv class=\"output\"\u003e zu sehen sein. Schreibe dazu die benötigten Funktionen submit, addSubscriptions und complete.\n Vorlage 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003ctitle\u003eSubject Lab\u003c/title\u003e \u003cscript src=\"https://unpkg.com/rxjs@6.2.0/bundles/rxjs.umd.min.js\"\u003e\u003c/script\u003e \u003cscript\u003e function submit() { // TODO: Nachricht zu Subject senden  } function addSubscriptions() { // TODO: Subscription starten  } function complete() { // TODO: Subject complete  } \u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv class=\"wrapper\"\u003e \u003cdiv class=\"actions\"\u003e \u003cinput id=\"chat\" type=\"text\" placeholder=\"Please enter your message\"\u003e \u003cbutton id=\"submit\"\u003eSend\u003c/button\u003e \u003cbutton id=\"add-subscriptions\"\u003eSubscriptions\u003c/button\u003e \u003cbutton id=\"complete\"\u003eComplete\u003c/button\u003e \u003c/div\u003e \u003cdiv class=\"output\"\u003e \u003c!-- TODO: Für jeden Typ von Subject einen separaten Output--\u003e \u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e    ","categories":"","description":"Aufgaben zu Observales und RxJS.\n","excerpt":"Aufgaben zu Observales und RxJS.\n","ref":"/labs/web/angular/02_rxjs/","tags":"","title":"Labs zu RxJS"},{"body":"Eine Nachricht loggen In Java hast du Text mit System.out.println(...), in C# mit Console.WriteLine(...) und in Python vielleicht mit print(...) geloggt. Genau das gibt es auch in JavaScript.\nIn einer HTML-Datei kannst du folgendes hinzufügen:\n1 2 3 4 5  \u003cscript\u003e ... console.log('hello world'); \u003c/script\u003e   Um diese Meldung sehen zu können, musst du die Konsole des Browsers öffnen. Dies kannst du machen, indem du die Entwickler-Tools des Browsers öffnest (z.B. mit der [F12]-Taste). Anschliessend navigierst du zum “Konsole”-Tab. Nun solltest du die geloggte Nachricht entdecken können:\nCode direkt im Browser ausführen Du kannst Code direkt in der Konsole des Browsers ausführen lassen. Klicke hierfür in das Eingabefeld unterhalt deiner geloggten Nachricht. Dort kannst du dann folgendes reinkopieren:\n1 2 3  for (let i = 0; i \u003c 10; i++){ console.log(i); }   Nun sollten in deiner Konsole die Zahlen 0 - 9 geloggt worden sein. Den Code solltest du bereits seit deiner Einführung in Java verstehen. Das einzig neue hier ist, dass du hier die Nummer-Variable mit let deklariert hast.\nDu hast gesehen, wie einfach du Code auf der Website mit Hilfe der Konsole ausführen kannst. Die Konsole ist ein sehr mächtiges Tool, das die Entwicklung mit JavaScript extrem vereinfachen kann. Bevor du Code in der IDE (also deiner Entwicklungsumgebung) eingibst, kannst du vorher in der Konsole ausprobieren, ob dein Code zum gewünschten Resultat führt.\nJavaScript in HTML einbinden  Inline-Script: JavaScript-Code kann direkt innerhalb einer HTML-Datei mit dem \u003cscript\u003e-Tag eingebettet werden. Der \u003cscript\u003e-Tag sollte entweder im \u003chead\u003e-Bereich oder am Ende des \u003cbody\u003e-Bereichs platziert werden.  1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eJavaScript in HTML\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eJavaScript in HTML\u003c/h1\u003e \u003cscript\u003e // Hier kannst du deinen JavaScript-Code schreiben  alert(\"Hallo, Welt!\"); \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e   Externes Skript: Man kann JavaScript-Code in einer separaten Datei speichern und diese Datei mit dem \u003cscript\u003e-Tag in die HTML-Datei einbinden. Dazu eine neue JavaScript-Datei mit der Erweiterung .js erstellen und dann im Tag auf diese Datei mit dem src-Attribut verweisen.  1 2 3 4 5 6 7 8 9 10  \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eJavaScript in HTML\u003c/title\u003e \u003cscript src=\"script.js\"\u003e\u003c/script\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eJavaScript in HTML\u003c/h1\u003e \u003c/body\u003e \u003c/html\u003e   Es ist auch möglich, mehrere externe JavaScript-Dateien einzubinden, indem mehrere \u003cscript\u003e-Tags mit unterschiedlichen src-Attributen verwendet werden.\n","categories":"","description":"Modul #F4 - JavaScript - Konsole des Browsers benutzen.\n","excerpt":"Modul #F4 - JavaScript - Konsole des Browsers benutzen.\n","ref":"/docs/web/javascript/02_js_browser_tools/","tags":"","title":"JavaScript: Konsole"},{"body":"","categories":"","description":"Exams zu TypeScript und Angular.\n","excerpt":"Exams zu TypeScript und Angular.\n","ref":"/exams/web/angular/","tags":"","title":"Angular Exams"},{"body":"","categories":"","description":"Webseiten erstellen mit HTML und CSS.\n","excerpt":"Webseiten erstellen mit HTML und CSS.\n","ref":"/docs/web/html_css/","tags":"","title":"HTML und CSS"},{"body":"","categories":"","description":"Exams zu Web-Technologien\n","excerpt":"Exams zu Web-Technologien\n","ref":"/exams/web/","tags":"","title":"Web Exams"},{"body":"Exam 1 - HTML5 \u0026 CSS3 - Einzelarbeit\nErstelle mit Hilfe deines aktuellen Wissen eine neue Webseite. Sie soll nur die HTML-Elemente und das CSS-Styling besitzen. Die logischen Instrumente sind nicht nötig, da wir uns im nächsten Kurs mit Javascript/Typescript beschäftigen werden. Verwende die HTML5 konformen Tags.\nRTM Nachzubauen ist die neue Webseite vom RTM(login).\nNachfolgend werden die einzelnen Komponenten erklärt. Es werden nur diverse Stylings gegeben, den Rest müsst ihr selber versuchen zu definieren. Zu unterst im File findet ihr noch diverse Hints, welche euch helfen könnten.\nDie Icons sind hier hinterlegt. Header    Was Farbe Logo Grösse Hover Farbe     Hintergrundfarbe in Header rgba(236,239,242,1); - height: 57.25px; -   login Logo - login_logo.svg width: 180px; -   Text in Header rgba(119,119,119,1); - - -   Datum(Tag) rgba(213,45,40,1); - - -   Kommen Logo - kommen.svg width: 22px; height: 22px; rgba(255,255,255,1);   Farbe untere Zeile Logo rgba(255,0,0,1); - width: 250px; rgba(255,255,255,1);   Uhr Logo - uhr.svg width: 22px; height: 22px; rgba(255,255,255,1);   Pfeil (Menu Sprache) Logo - pfeil_unten.svg - rgba(255,255,255,1);   Refresh Logo - refresh.svg width: 22px; height: 22px; rgba(255,255,255,1);   Personen Logo - persons.svg width: 22px; height: 22px; rgba(255,255,255,1);   Profil Logo - profil.svg width: 22px; height: 22px; rgba(255,255,255,1);   Logout Logo - logout.svg width: 22px; height: 22px; rgba(255,255,255,1);    Linke Sidenav    Was Farbe Logo Grösse Hover Farbe     Hintergrund in Sidenav rgba(0,158,195,1) - width: 180px; rgba(0,100,128,1);   Profil Logo - profil.svg width: 88px;height: 88px; -   Abwesend Text rgb(211, 47, 47); - - -   Cockpit Logo background: rgba(230,230,230,1);color: rgba(115,115,115,1); cockpit.svg width: 16px; height: 16px; -   Personen Logo - persons.svg width: 16px; height: 16px; background: rgba(0,100,128,1);   Einsatzplan Logo - einsatzplan.svg width: 16px; height: 16px; background: rgba(0,100,128,1);   Abfragen Logo - abfragen.svg width: 16px; height: 16px; background: rgba(0,100,128,1);   Abfragen Pfeil Logo - pfeil_oben.svg width: 9px; height: 14px; rgba(0,100,128,1);   Palungsliste Logo - einsatzplan.svg width: 16px; height: 16px; rgba(0,100,128,1);   Tagesübersicht Logo - buchung.svg width: 16px; height: 16px; rgba(0,100,128,1);   Buchungsliste Logo - buchung.svg width: 16px; height: 16px; rgba(0,100,128,1);   Zeitwertliste Logo - buchung.svg width: 16px; height: 16px; rgba(0,100,128,1);   Saldoübersicht Logo - saldo.svg width: 16px; height: 16px; rgba(0,100,128,1);   Spesenauswertung Logo - buchung.svg width: 16px; height: 16px; rgba(0,100,128,1);   Auftragsauswertung Logo - buchung.svg width: 16px; height: 16px; rgba(0,100,128,1);   Berichte Logo - drucken.svg width: 16px; height: 16px; rgba(0,100,128,1);    Rechte Sidenav    Was Farbe Logo Grösse Hover Farbe     Hintergrund in Sidenav rgba(255, 255, 255, 1); - width: 250px; rgba(245, 245, 245, 1);   Anwesend Text rgba(66,159,70,1); - - -   Profil Logo - profil.svg width: 35px; height: 35px; -   Uhr Logo - clock.svg width: 24px; height: 28px; -   Abwesend Text rgba(255,0,0,1); - - -   Text allgemein rgba(33,33,33,1); - - -    Content    Was Farbe Logo Grösse Hover Farbe     Hintergrund in Content background: rgb(243, 243, 243,1); color: rgba(33,33,33,1); - - -   Bearbeiten Logo - edit.svg width: 14px; height: 14px; rgba(250, 250, 250, 1);   Plus Logo (disabled) plus.svg color: lightgrey; width: 11px; height: 14px; rgba(250, 250, 250, 1);   Pfeil-Unten Logo (disabled) pfeil_unten.svg color: lightgrey; width: 9px; height: 14px; rgba(250, 250, 250, 1);   Speichern Logo (disabled) save.svg color: lightgrey; width: 12px; height: 14px; rgba(250, 250, 250, 1);   Rückgängig Logo (disabled) undo.svg color: lightgrey; width: 12px; height: 14px; rgba(250, 250, 250, 1);   SBB Crackhead rgba(217,230,242,1); - width: 716.5px; height: 180px; rgba(224,231,235,1);   Profil Logo - profil.svg width: 140px; height: 140px; -   Ausrufezeichen Logos - request.svg width: 24px; height: 24px; -   Absenzen Text rgb(33, 150, 243); - width: 352.75px; height: 180px; -   Visum Text rgb(16, 85, 192); - width: 352.75px; height: 180px; -   Warnung Logo - warning.svg width: 24px; height: 24px; -   Warnung Text rgb(219, 73, 216); - width: 352.75px; height: 180px; -   Alarm Logo - alert.svg width: 24px; height: 24px; -   Alart Text rgb(255, 67, 81); - width: 352.75px; height: 180px; -    Hint: über allen hover-Elementen pointer\nSchatten: box-shadow\nScrollleiste: overflow-y oder overflow-x\nSobald du fertig bist… Wenn du fertig mit diesem Exam bist, zeige dein Resultat einem Coach. Nach dem Okay des Coaches kannst du mit JavaScript beginnen.\n","categories":"","description":"Erstelle dein eigenes Zeiterfassungs-Dashboard - zumindest das Layout dafür ;).\n","excerpt":"Erstelle dein eigenes Zeiterfassungs-Dashboard - zumindest das Layout …","ref":"/exams/web/html_css/01_exam_html_css_rtm/","tags":"","title":"Exam zu den HTML- und CSS-Basics"},{"body":"Exam Typscript TODO: Exam zu Typescript erstellen.\nZurück zur Theorie Hier gelangst du zurück zur Theorie.\n","categories":"","description":"Einfache Aufgaben zu den Basics von TypeScript.\n","excerpt":"Einfache Aufgaben zu den Basics von TypeScript.\n","ref":"/exams/web/angular/01_1_typescript_exam/","tags":"","title":"Exam zu den TypeScript-Basics"},{"body":"java.util.ArrayList java.util.ArrayList erbt von der abstrakten Klasse java.util.AbstractList und liefert eine konkrete Implementierung für das Interface java.util.List. Die ArrayList Klasse implementiert alle Methoden des Interface java.util.List. Der Implementierung der ArrayList Klasse liegen Arrays zugrunde, weshalb diese konkrete Klasse auch ArrayList heisst. Die Klasse ArrayList enthält also ein normales Array. Wenn ein Element hinzugefügt wird, wird es in dieses Array eingefügt. Wenn das Array nicht gross genug ist, wird ein neues, grösseres Array erstellt, um das alte zu ersetzen, d.h. die Kapazität des Arrays wird fortlaufend angepasst.\nMethodenübersicht 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  /* * Konstruktor: Erstellt eine initial leere Liste */ public ArrayList\u003cE\u003e() /* * Appends the specified element to the end of this list. */ public boolean add(E e) /* * Fügt das angegebene Element an der angegebenen Position in diese Liste ein. */ public void add(int index,E element) /* * Entfernt alle Elemente aus dieser Liste. */ public void clear() /* * Entfernt das Element an der angegebenen Position in dieser Liste. */ public E remove(int index) /* * Gibt das Element an der angegebenen Position in dieser Liste zurück. */ public E get(int index) /* * Gibt den Index des ersten Auftretens des angegebenen Elements in dieser Liste zurück, * oder -1, wenn diese Liste das Element nicht enthält. */ public int indexOf(Object o) /* * Gibt die Anzahl der Elemente in dieser Liste zurück. */ public int size() /* * Gibt true zurück, wenn diese Liste keine Elemente enthält. */ public boolean isEmpty() /* * Gibt true zurück, wenn diese Liste das angegebene Element enthält. */ public boolean contains(Object o)     Beispiel    IndexOutOfBoundsException Eine der häufigsten Exceptions, die im Zusammenhang mit Listen auftritt, ist folgende: Es wird versucht, auf ein Element mit einem Index zuzugreifen, wobei der Index grösser als (oder gleich wie) die Länge der Liste ist. Dann wird die IndexOutOfBoundsException geworfen:\n1 2 3 4 5 6  List\u003cString\u003e list = new ArrayList\u003c\u003e(); list.add(\"uno\"); list.add(\"dos\"); list.add(\"tres\"); System.out.println(list.get(3));   Hier wird dann diese Meldung angezeigt:\n1  \"java.lang.IndexOutOfBoundsException: Index 3 out of bounds for length 3\"   Der Fehler war hier, dass die Liste 3 Elemente enthielt, und versucht wird, auf das 4. Element (also Index 3) zuzugreifen. Weil das 4. Element in dieser Liste nicht existiert, wird eine Exception geworfen.\nGanz generell wird die IndexOutOfBoundException geworfen, wenn versucht wird, auf einen ungültigen Index innerhalb einer Collection zuzugreifen. Hat eine Liste die Grösse x:\n dann sind die gültigen Indizes, um auf Elemente zuzugreifen 0, 1, 2, …, x-1 und die Indizes x, x+1, x+2, … wären ungültig.  Diese Exception kann bei den folgenden Methoden von oben geworfen werden: (Diese Liste hier ist genau so nicht vollständig, wie die oben.)\n public void add(int index, E element) (beachte das Argument index.) public E remove(int index) public E get(int index)  Beispiel Beispiel 1 - ArrayList Im folgenden Beispiel erstellen wir zunächst eine leere ArrayList mit Elementen vom Typ String und wenden einige einfache ArrayList Methoden an und sehen, wie diese funktionieren (Das Hinzufügen von Elementen, das Entfernen von Elementen, …),\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  import java.util.ArrayList; import java.util.List; public class Pets { public static void main(String[] args) { // Creating an ArrayList of String  List\u003cString\u003e pets = new ArrayList\u003c\u003e(); System.out.println(pets); // Output: []  // Adding new elements to the ArrayList  pets.add(\"Cat\"); pets.add(\"Hamster\"); pets.add(\"Dog\"); pets.add(\"Goldfish\"); System.out.println(pets); // Output: [Cat, Hamster, Dog, Goldfish]  // Adding an element at a particular index in an ArrayList  pets.add(2, \"Guinea pigs\"); System.out.println(pets); // Output: [Cat, Hamster, Guinea pigs, Dog, Goldfish]  pets.remove(2); System.out.println(pets); // Output: [Cat, Hamster, Dog, Goldfish]  pets.remove(\"Dog\"); System.out.println(pets); // Output: [Cat, Hamster, Goldfish]  pets.clear(); System.out.println(pets); // Output: []  } }   Beispiel 2 - for-Schleife Dieses Beispiel zeigt auf wie mit einer for-Schleife über die Elemente einer Liste iteriert werden kann.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  import java.util.ArrayList; class ListSum { public static void main(String[] args) { ArrayList\u003cInteger\u003e numbers = new ArrayList\u003c\u003e(); numbers.add(1000); numbers.add(2500); numbers.add(3750); numbers.add(625); int listSum = 0; for (Integer e : numbers) { listSum += e; } System.out.println(\"Die Summe der Elemente beträgt \" + listSum); } }   Output:\n1 2  Die Summe der Elemente beträgt 7875   Beispiel 3 - while-Schleife Dieses Beispiel zeigt auf wie mit einer while-Schleife über die Elemente einer Liste iteriert werden kann.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  import java.util.Arrays; import java.util.List; public class WhileLoopExample { public static void main(String[] args) { String[] namesArray = { \"Anna\", \"Simon\", \"Jan\", \"Nicole\"}; // convert array to list  List\u003cString\u003e namesArrayList = Arrays.asList(namesArray); int i = 0; while (i \u003c namesArrayList.size()) { System.out.println(namesArrayList.get(i)); i++; } } }   Output:\n1 2 3 4 5  Anna Simon Jan Nicole     Aufgaben    Aufgaben Aufgaben zu Modul #J7 - Java Collections - List\n","categories":"","description":"Eine konkrete Umsetzung einer List: Die ArrayList.\n","excerpt":"Eine konkrete Umsetzung einer List: Die ArrayList.\n","ref":"/docs/java/java-collections/02_array-list/","tags":"","title":"ArrayList"},{"body":"Schreibe eine Anwendung, welche eine Bibliothek modelliert. In der Bibliothek findet man unterschiedliche Exemplare. z.B: Bücher, Zeitschriften, CDs, DVDs.\nEin Item\n hat einen Titel  Folgende Arten von Items können sich in der Bibliothek befinden:\n Buch  hat einen Autor hat ein Genre   Zeitschrift  hat einen Herausgeber hat ein Datum   CD  hat den Namen des Interpreten hat eine Anzahl von Songs   DVD  hat den Namen des Regisseurs hat ein Genre    Die Anwendung soll  ein Inventar von unterschiedlichen Items verwalten (also Bücher, DVDs usw.) es ermöglichen ein Item auszuleihen, wenn es noch nicht ausgeliehen worden ist es ermöglichen ein Item zurückzugeben Auskunft zu den vorhandenen Items im Inventar geben  Verwende Generics überall wo es Sinn macht!\n","categories":"","description":"Aufgabe zu Modul #J3 - OOD - Bibliothek\n","excerpt":"Aufgabe zu Modul #J3 - OOD - Bibliothek\n","ref":"/labs/java/java-ood/02_bibliothek/","tags":"","title":"Bibliothek"},{"body":"Aufgabe 1 - Header-Navigation Erstelle nachfolgende Seite.\nDer Schwerpunkt ist die Navigation im Header: Das Bild und die Links auf der rechten Seite.\nAufgabe 2 - relative Positionierung In Aufgabe 1 hast du eine Seite mit Header und Navigation erstellt.\nAdjustiere dort das Bild oben links.\nAufgabe 3 - Info-Box Erstelle eine HTML-Seite (oder erweitere eine andere so, dass) die ganz unten eine Meldung anzeigt mit einem “OK”-Button.\nInspiriere dich an den nervigen Cookie-Meldungen von anderen Seiten.\nDu kannst die Meldung ganz unten oder in der Mitte des Bildschirms anzeigen.\nWenn du willst, kannst du über alles andere ein “Overlay” schmeissen mit einem Transparenzwert von 50 - 90%, damit der User sich automatisch auf die Meldung fokussiert.\nWenn du willst, kannst du alles andere auch verschwommen darstellen. Hierfür könnte das CSS-Property backdrop-filter interessant sein, siehe https://www.w3schools.com/cssref/css3_pr_backdrop-filter.php.\nErstelle nun eine Cookie-Meldung wie diese (der weisse Teil mit dem roten Button ist die Meldung, der Rest gehört zum Hintergrund):\nAufgabe 4 - Bootstrap Nachfolgend ist eine Beispiel-Seite. Setze diese mit Bootstrap um:\nSchaue dir diese Seite auf auf kleineren Bildschirmen an - also verändere die Fenster-Breite deines Browsers. Du wirst sehen, dass z.B. die einzelnen Abos untereinander erscheinen, wenn die Breite kleiner wird. Berücksichtige dies auch in deinem Code.\n Hinweis Solltest du nicht weiterkommen, dann schaue in den Entwickler-Tools ([F12]-Taste) im DOM nach. Da diese Seite auch mit Bootstrap umgesetzt wurde, kannst du nachschauen, welche Bootstrap-Klassen sie verwendet haben.\n Aufgabe 5 - Transitionen Erstelle einen Fliesstext. Dort drin soll es bestimmte Elemente haben wie z.B. Links. Diese Elemente befinden sich zwingend im Fliesstext.\nLasse diese Elemente (z.B. Links) vergrössern und gib' ihnen z.B. einen Border, wenn sich die Maus darüber befindet. Zusätzlich sollen noch weitere Informationen zum Element angezeigt werden.\nBeispiel: Auf Wikipedia erscheint eine kleine Ansicht, die eine Kurzbeschreibung beinhaltet, wenn du mit der Maus über einen Wikipedia-Link darüberfährst.\nAufgabe 6 - Animationen Hier hattest du ein Beispiel für einen Ladebalken: https://www.w3schools.com/howto/howto_css_loader.asp\nSicherlich kennst du den Ladebalken von Apple. Sieh dir den Cupertino Loading Indicator als GIF hier an: https://flutterawesome.com/a-collection-of-high-fidelity-loading-animations-in-gif-format-with-flutter/\nImplementiere diesen Loading Indicator. Du darfst gerne ein (aber nicht mehrere) Bild benutzen, welches du dann entsprechend animierst.\n","categories":"","description":"Aufgaben zu Modul #F3 - CSS\n","excerpt":"Aufgaben zu Modul #F3 - CSS\n","ref":"/labs/web/html_css/02_css/","tags":"","title":"CSS - Aufgaben"},{"body":"Ziele  Ich weiss, wie ich eine HTML-Seite erstellen kann. Ich weiss, wie ich meine erstellte HTML-Seite im Browser anschauen kann.  Eine HTML-Seite mit formatiertem Text erstellen Wir beginnen ganz unkompliziert. Erstellen wir zuerst eine Text-Datei. Dafür erstellen wir zuerst ein Ordner, in dem wir später unsere Projekt-Dateien speichern. Anschliessend kannst du diesen Ordner mit der IDE (Entwicklungsumgebung) deiner Wahl öffnen (hier VS Code). Erstelle nun eine neue HTML-Datei im soeben erstellten Ordner. In VS Code kannst du das z.B. wie folgt machen:\nFülle diese Datei nun mit irgendeinem Text. Speichere diese Datei. Kopiere nun den Pfad zu dieser Datei. In VS Code kannst du den Pfad mit einem Rechtsklick auf die Datei kopieren:\nGib diesen Pfad nun im Browser deiner Wahl ein. Du solltest nun einen unformatierten Text im Browser sehen:\nAbwohl du vorher evtl. Zeilenumbrüche und mehrer Leerschläge hattest, verschwinden diese im Browser nun. Dies kannst du umgehen, indem den Text mit Hilfe von HTML-Tags formatierst. Den HTML-Code könnte z.B. dann so aussehen:\n1 2 3 4 5 6  \u003ch1\u003eKleiner Witz\u003c/h1\u003e \u003cp\u003eWie viele Softwareentwickler braucht man, um eine Glühbirne auszuwechseln?\u003c/p\u003e \u003cp\u003eKeinen, das ist ein Hardware-Problem!\u003c/p\u003e   Nun hast du eine Seite mit formatiertem Text:\nWas haben wir hier genau gemacht? Das erfährst du auf der nächsten Seite.\n","categories":"","description":"Modul #F3 - HTML und CSS - Erste HTML Seite erstellen\n","excerpt":"Modul #F3 - HTML und CSS - Erste HTML Seite erstellen\n","ref":"/docs/web/html_css/02_html_first_code/","tags":"","title":"Erste Seite erstellen"},{"body":"Gegeben Gegegeben ist der folgende String:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59  String endOfTheWorld = \"That's great, it starts with an earthquake \" + \"Birds and snakes, and aeroplanes \" + \"And Lenny Bruce is not afraid \" + \"Eye of a hurricane, listen to yourself churn \" + \"World serves its own needs \" + \"Don't mis-serve your own needs \" + \"Speed it up a notch, speed, grunt, no, strength \" + \"The ladder starts to clatter \" + \"With a fear of height, down, height \" + \"Wire in a fire, represent the seven games \" + \"And a government for hire and a combat site \" + \"Left her, wasn't coming in a hurry \" + \"With the Furies breathing down your neck \" + \"Team by team, reporters baffled, trumped, tethered, cropped \" + \"Look at that low plane, fine, then \" + \"Uh oh, overflow, population, common group \" + \"But it'll do, save yourself, serve yourself \" + \"World serves its own needs, listen to your heart bleed \" + \"Tell me with the Rapture and the reverent in the right, right \" + \"You vitriolic, patriotic, slam fight, bright light \" + \"Feeling pretty psyched \" + \"It's the end of the world as we know it \" + \"It's the end of the world as we know it \" + \"It's the end of the world as we know it and I feel fine \" + \"Six o'clock, T.V. hour, don't get caught in foreign tower \" + \"Slash and burn, return, listen to yourself churn \" + \"Lock him in uniform, book burning, bloodletting \" + \"Every motive escalate, automotive incinerate \" + \"Light a candle, light a motive, step down, step down \" + \"Watch your heel crush, crush, uh oh \" + \"This means no fear, cavalier, renegade and steering clear \" + \"A tournament, a tournament, a tournament of lies \" + \"Offer me solutions, offer me alternatives and I decline \" + \"It's the end of the world as we know it (I had some time alone) \" + \"It's the end of the world as we know it (I had some time alone) \" + \"It's the end of the world as we know it and I feel fine (time I had some time alone) \" + \"I feel fine (I feel fine) \" + \"It's the end of the world as we know it (time I had some time alone) \" + \"It's the end of the world as we know it (time I had some time alone) \" + \"It's the end of the world as we know it and I feel fine (time I had some time alone) \" + \"The other night I drifted nice continental drift divide \" + \"Mountains sit in a line, Leonard Bernstein \" + \"Leonid Brezhnev, Lenny Bruce and Lester Bangs \" + \"Birthday party, cheesecake, jellybean, boom \" + \"You symbiotic, patriotic, slam but neck, right, right \" + \"It's the end of the world as we know it (time I had some time alone) \" + \"It's the end of the world as we know it (time I had some time alone) \" + \"It's the end of the world as we know it and I feel fine (time I had some time alone) \" + \"It's the end of the world as we know it \" + \"It's the end of the world as we know it \" + \"It's the end of the world as we know it and I feel fine (time I had some time alone) \" + \"It's the end of the world as we know it (time I had some time alone) \" + \"It's the end of the world as we know it (time I had some time alone) \" + \"It's the end of the world as we know it and I feel fine (time I had some time alone) \" + \"It's the end of the world as we know it (time I had some time alone) \" + \"It's the end of the world as we know it (time I had some time alone) \" + \"It's the end of the world as we know it and I feel fine (time I had some time alone)\"; // Copyright R.E.M.   Aufgabe 1 Schreibe eine Methode, welche die Anzahl Wörter zählt, welche mindestens zweimal im Text vorkommen. Entferne zu diesem Zweck zuerst die Sonderzeichen. Die Methode liefert die Anzahl dieser Wörter zurück.\nAufgabe 2 Schreibe eine Methode, welche die Wörter aus dem Text oben alphabetisch sortiert. Entferne zu diesem Zweck zuerst die Sonderzeichen. Die Methode liefert ein Array mit den sortierten Wörtern zurück.\nDie Verwendung von Arrays.sort() ist nicht erlaubt.\nAufgabe 3 Schreibe eine Methode, welche die durchschnittliche Wortlänge berechnet. Entferne zu diesem Zweck zuerst die Sonderzeichen. Die Methode liefert die durchschnittliche Wortlänge als Gleitkommazahl zurück.\nAufgabe 4 Schreibe eine Methode, welche die Wörter aus dem Text nach ihrer Länge sortiert. Kurze Wörter kommen dabei zuerst. Entferne zu diesem Zweck zuerst die Sonderzeichen. Die Methode liefert ein Array mit den sortierten Wörtern zurück.\nAufgabe 5 Schreibe eine Methode, welche das Wort zurückliefert, das im Text oben am häufigsten vorkommt. Entferne zu diesem Zweck zuerst die Sonderzeichen. Die Methode liefert das gesuchte Wort zurück.\nAufgabe 6 Schreibe eine Methode, welche die einzelnen Buchstaben des Textes in ein zweidimensionales Array von Strings überführt. In der ersten Reihe sollen alle einzigartigen im Text vorhandenen Buchstaben stehen. Diese sollen in alphabetischer Reihenfolge sortiert sein. Sonderzeichen sollen auch aufgelistet werden. Unter jedem Buchstaben sollen fortlaufend die Positionen(index) im Text dargestellt werden. Sämtliche Buchstaben sollen immer nur als kleingeschriebene Buchstaben behandelt werden.\nBeispiel:\nString text = \"Hallo mein Name ist Claudio\"\n    a c d e h i l m n o s t u     5 1 20 24 7 0 8 2 6 9 4 17 18 23   10 12   14  16 3 13 11 26      15                19                 Der Tabelle kann folgendes entnommen werden: Der Buchstabe a befindet sich an den Positionen 1 und 12 im String Hallo mein Name ist Claudio. Das erste Zeichen in der Tabelle ist ein Leerschlag (whitespace).\n","categories":"","description":"Einfache Aufgaben mit Strings\n","excerpt":"Einfache Aufgaben mit Strings\n","ref":"/exams/java/java-grundlagen/exam2/","tags":"","title":"Exam Java Grundlagen - Strings"},{"body":"Inhalt  Git unter Linux installieren Git unter Windows installieren  Git unter Linux installieren  Ist Git schon installiert? git --version Falls nicht:  Debian basierte Linux (Ubuntu): sudo apt install git Redhat basierte Linux (Fedora, Rocky Linux): sudo dnf install git    Git unter Windows installieren  Navigiere zum Git für Windows Installer und lade die neuste Version herunter. Folge den Installationsanweisungen bis die Installation abgeschlossen ist.  Es wird empfohlen während der Installation Git Bash zu installieren  Es wird empfohlen während der Installation den PATH zu ändern.    Öffne Git Bash Schreibe git version zum Überprüfen, ob Git erfolgreich installiert wurde.  ","categories":"","description":"","excerpt":"Inhalt  Git unter Linux installieren Git unter Windows installieren …","ref":"/docs/git/git-install/","tags":"","title":"Install Git"},{"body":"Ziele  Ich kenne die wichtigsten Funktionen der IntelliJ IDEA Ich kann Projekte innerhalb IntelliJ IDEA neu anlegen, konfigurieren und verwalten Ich kann IntelliJ IDEA zusammen mit einem GIT-Repository verwenden Ich kann Plugins suchen und installieren Ich verstehe das Grundprinzip von Debugging   Einführung in IntelliJ IDEA Besuche die folgenden Links und lies die Informationen durch:\n Navigation und Suche Benutzer Interface  Die Ansicht und/oder das Verhalten kann abhängig von den installierten Plugins, der IntelliJ IDEA Version oder den Benutzereinstellungen variieren.\nDefault Keymap IntelliJ verfügt über diverse Tastenkombinationen, um die Produktivität zu erhöhen. Im unten stehenden PDF findest du die standardmässig eingestellten Tastenkombinationen. IntelliJ IDEA Reference Card\nPersonalisierte Keymap Es kann vorkommen, dass einige Tastenkombinationen nicht ausführbar sind, als Beispiel ist die Kombination Ctrl + / nur ausführbar, wenn die Tastatur über einen Nummernblock verfügt. Um die Tastenkombinationen deinen Bedürfnissen anzupassen, kannst du in den Einstellungen im IntelliJ nach Keymap und der entsprechenden Funktion suchen und diese anpassen. Zusätzlich bietet IntelliJ IDEA diverse Keymaps an, welche sich z.B. an den Tastenkombinationen von Eclipse oder Visual Studio orientieren und die Umstellung erleichtern sollen.\nFalls Du die Tastenkombinationen deinen Bedürfnissen angepasst hast, kannst du dir deine personalisierte Keymap als PDF von IntelliJ IDEA erstellen lassen unter Help → Keymap Reference.\nWichtige Kombinationen für den Anfang    Funktion Shortcut     Einstellungen öffnen Ctrl + Alt + S   Überall suchen 2x Shift   Smart Code Completion Ctr + Alt + Space   Code formatieren Ctrl + Alt + L   Imports optimieren Ctrl + Alt + O   Generiere Code (Constructor, Getter, Setter, etc.) Alt + Insert    Wichtige Kombinationen zur Code-Generierung IntelliJ bietet nicht nur Tastenkombinationen, um die Produktivität zu verbessern, sondern auch vordefinierte Wörter, Kürzel oder Buchstaben, welche automatisch Code generieren. Mit der Tastenkombination Ctrl + J kannst du diese anzeigen lassen.\n   Code Shortcut     eine main()-Methode psvm   eine forEach-Schleife foreach   eine for-Schleife mit “i” als Zähler fori   einen if == null check ifn   eine Iteration (while-Schleife) über einen Iterator itit   eine Iteration (for-Schleife) über eine Liste itli   eine print()-Methode, welche einen Error auf der Konsole ausgibt serr   eine print()-Methode sout   eine formatierte print()-Methode souf    Neues Projekt anlegen Um einen ersten Einblick in die Erstellung eines neuen Projektes zu erhalten kann das folgende Tutorial von IntelliJ IDEA absolviert werden: https://www.jetbrains.com/help/idea/creating-and-running-your-first-java-application.html\nInstallation von Plugins Plugins erweitern die Kernfunktionalität von IntelliJ IDEA.\n Plugins ermöglichen die Integration mit Versionskontrollsystemen, Anwendungsservern und anderen externen Applikationen Plugins fügen Unterstützung bei der Kodierungshilfe für verschiedene Sprachen und Frameworks hinzu Plugins steigern die Produktivität mit Shortcut-Hinweisen, Live-Vorschauen, File Watchers etc. Plugins helfen dir beim Erlernen einer neuen Programmiersprache mit Programmierübungen und Verifizierung  Plugins müssen über den Marktplatz von IntelliJ installiert werden. Dieser ist über die Einstellungen unter Plugins verfügbar. Dort können Plugins gesucht und über einen Klick auf Install einfach und unkompliziert installiert werden.\nHilfreiche Plugins für den Anfang Ein sehr hilfreiches Plugin ist der “Key Promoter X”. Dieses Plugin ermöglicht das Erlernen der IntelliJ IDEA Tastenkombinationen. Jede verfügbare Tastenkombinationen wird dir bei Verwendung eines Menüs oder Kontextmenüs angezeigt.\nCode-Formatierung Um den Code in IntelliJ IDEA zu formatieren, können die integrierten Funktionen für Codeformatierung verwendet werden. So kann der Code formatiert werden:\n  Den Code auswählen, welcher zu formatieren ist. Es kann sich um eine einzelne Zeile, einen Codeblock oder die gesamte Datei handeln.\n  Die entsprechende Tastenkombination basierend auf deinem Betriebssystem drücken:\n  Windows/Linux: Strg + Alt + L macOS: Cmd + Option + L\nAlternativ kann mit der rechten Maustaste auf den ausgewählten Code geklickt und “Code neu formatieren” im Kontextmenü ausgewählt werden.\nIntelliJ IDEA wird den ausgewählten Code automatisch gemäss den konfigurierten Codeformatierungseinstellungen formatieren.  Wenn die Codeformatierungseinstellungen in IntelliJ noch nicht konfiguriert wurden, kann das je nach den entsprechend Vorlieben angepasst werden. So kann man die Codeformatierung konfigurieren:\n  Zu “Datei” \u003e “Einstellungen” (Windows/Linux) oder “IntelliJ IDEA” \u003e “Einstellungen” (macOS) gehen.\n  In dem Einstellungsfenster zu “Editor” \u003e “Code-Stil” navigieren.\n  Die gewünschte Programmiersprache auswählen, für die der Code-Stil konfiguriert werden möchte (z.B. Java, JavaScript usw.).\n  Die Codeformatierungseinstellungen nach den Vorlieben anpassen. Man kann Einrückung, Abstände, Platzierung der Klammern und viele andere Formatierungsoptionen festlegen.\n  Auf “Übernehmen” oder “OK” klicken, um die Änderungen zu speichern.\n  Nachdem der Code-Stil konfiguriert wurde, wird IntelliJ die definierten Formatierungsregeln anwenden, wenn die Tastenkombination für die Codeformatierung verwendet wird oder “Code neu formatieren” im Kontextmenü ausgewählt wird.\nDebugging-Grundlagen Der Debugger wird benutzt, um mithilfe von Breakpoints den Code während der Ausführung anzuhalten, zu analysieren und Fehler im Code zu finden. Mehr Informationen dazu gibt es unter dem folgenden Link: Debug Code\n","categories":"","description":"Modul #O4 - IntelliJ\n","excerpt":"Modul #O4 - IntelliJ\n","ref":"/docs/java/intellij-einrichten/","tags":"","title":"IntelliJ IDEA einrichten"},{"body":"Inhalt Dieser Bereich ermöglicht dir das Erlernen der Java-Programmiersprache von Grund auf. Nach der Einrichtung der Entwicklungsumgebung lernst du die Basics von Java kennen. Die objektorienterte Programmierung bringt dich tiefer in die Möglichkeiten von Java hinein. Das Arbeiten mit Listen und Streams vereinfacht dir die Übungen der objektorientierten Programmierung. Das objektorientierte Design erlaubt dir die reale Welt innerhalb von Java besser abzubilden. Mit Maven lernst du ein mächtiges Build-Management Tool kennen. Das Schreiben von automatisierten Tests erlaubt dir deine Applikationen zu testen.\n","categories":"","description":"Einrichten der Entwicklungsumgebung\u003cbr\u003e IntelliJ IDEA und Plugins\u003cbr\u003e Erlernen der Programmiersprache Java\u003cbr\u003e Maven\u003cbr\u003e Testing mit jUnit und Mockito\n","excerpt":"Einrichten der Entwicklungsumgebung\u003cbr\u003e IntelliJ IDEA und Plugins\u003cbr\u003e …","ref":"/docs/java/","tags":"","title":"Java"},{"body":"","categories":"","description":"Labs zu Java\n","excerpt":"Labs zu Java\n","ref":"/labs/java/","tags":"","title":"Java Labs"},{"body":"","categories":"","description":"Exercises zu Modul #J2 - OOP\n","excerpt":"Exercises zu Modul #J2 - OOP\n","ref":"/labs/java/java-oop/","tags":"","title":"Java Exercises - OOP"},{"body":"Ziele  Ich kann ohne Hilfsmittel die Unterschiede zwischen Listen und Arrays in Java nennen. Ich kann mindestens drei der wichtigsten Merkmale einer Java-Liste auflisten. Ich kann mindestens 5 Methoden einer Liste korrekt und ohne Hilfsmittel nennen. Ich kann erklären, wozu die ArrayList-Klasse verwendet wird, und was sie für Vorteile mitbringt. Ich kann eine neue Liste erstellen und bei ihr Elemente hinzufügen, lesen und entfernen.   Einführung Listen Für die Aufgaben des OOP-Modules #J2 wirst du effizienter arbeiten können, wenn du statt Arrays sogenannte Listen verwendest.\nAus diesem Grund schieben wir einen kleinen Crash-Kurs zu Listen vor den Einstieg ins OOP.\nWas ist eine Liste? Eine Liste ist in Java ein Behälter (Container), der Objekte in einer festen Abfolge enthält.\nIm Gegensatz zu Arrays, deren Elemente im Speicher in fortlaufender Reihenfolge abgelegt werden und deren Grösse aus diesem Grund ohne Neuinitialisierung unveränderbar ist, können Listen flexible Mengen an Objekten enthalten.\nDas List-Interface ist ein Teil des Java-Collections-Frameworks. Dieses Framework stellt einige Klassen zur Verfügung, welche das List-Interface umsetzen (mehr dazu in einem späteren Modul).\nDie wichtigsten Merkmale einer Liste  Eine Liste kann nur Objekte beinhalten (es gibt also keine Liste mit primitiven Datentypen) Eine Liste kann nur Objekte eines Typs beinhalten. Dieser Typ wird zur Zeit der Definition der Liste bestimmt. Die Elemente innerhalb einer Liste haben eine feste Reihenfolge. Dies bedeutet, dass eine Iteration über eine Liste immer zu einem gleichen Ergebnis mit der gleichen Reihenfolge führt. Duplikate innerhalb einer Liste sind erlaubt (dasselbe Objekt darf mehrmals in einer Liste vorkommen) Eine Liste kann auch null-Elemente beinhalten. Die Indizes in einer Liste reichen immer von 0 bis Anzahl Elemente in der Liste minus 1.   Die wichtigsten Methoden einer Liste Das List-Interface stellt mehrere Methoden zur Verfügung, welche dann von Klassen wie ArrayList oder LinkedList umgesetzt werden.\nNachfolgend werden einige Methoden und deren Zweck aufgelistet. Der Rückgabetyp “E” seht hier für einen generischen (universellen) Typ, der stellvertretend für einen spezifischen Objekttyp steht. Dieses Vorgehen wird genauer im Modul “Generics” behandelt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  /* * Returns: the number of elements in this list. */ int size(); /* * Appends the specified element to the end of this list. */ boolean add(E e); /** * Returns the element at the specified position in this list. */ E get(int index); /* * Removes the element at the specified position in this list. */ E remove(int index); /* * Removes the first occurrence of the specified element from * this list, if it is present. */ boolean remove(Object o); /* * Returns: true if this list contains the specified element. */ boolean contains(Object o);    Die Klasse ArrayList ArrayList gehört zu der Liste der Standardsammelklassen und ist im java.util-Packet definiert.\nDie ArrayList ist eine Klasse, die zum Erstellen eines dynamischen Arrays verwendet wird. Dieses Array beinhaltet Objektreferenzen und kann bei Bedarf grösser werden.\nDie ArrayList kombiniert die Vorteile eines Arrays (z.B. schneller Zugriff auf einem bestimmten Element) mit den Vorteilen einer Liste (kann dynamisch wachsen) und ist deswegen sehr nützlich um eine Sammlung von Objekten, derer Grösse nicht bekannt ist, zu bearbeiten. Die ArrayList setzt alle Methoden (obligatorische wie auch optionale) des List-Interfaces um.\nArbeiten mit einer ArrayList - Beispiel Um mit ArrayList arbeiten zu können, muss die Klasse zuerst importiert werden.\n1  import java.util.ArrayList;   Nun kann eine Variable definiert und eine ArrayList erzeugt werden. Die Syntax hier wird in späteren Modulen erklärt, hier reicht es zu wissen, dass innerhalb der spitzen Klammern - auf der linken Seite der Definition - der Typ der Objekte angegeben wird, welche dann in der Liste hinzugefügt werden dürfen.\n1 2 3  // Erstellen einer ArrayList für String-Objekte. // Ein Versuch, Objekte anderer Typ in der Liste hinzuzufügen wird in einem Kompilierfehler resultieren. List\u003cString\u003e words = new ArrayList\u003c\u003e();   Sobald eine Liste erzeugt wurde, können beliebig viel Objekte hinzugefügt oder entfernt werden.\nÜber die Liste kann mit einer Schleife iteriert werden oder auch mit einem Index direkt auf ein Element zugegriffen werden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  // Elemente hinzufügen words.add(\"Hello\"); words.add(\"World\"); words.add(\"!\"); System.out.println(words); // Output: [Hello, World, !] System.out.printf(\"There are %d words in our list\\n\", words.size()); System.out.printf(\"Our list contains \\\"!\\\". True or false? %b\\n\", words.contains(\"!\")); // Output: Our list contains \"!\". True or false? true  System.out.printf(\"The second word is: %s\\n\", words.get(1)); // Output: World  for (String word: words) { System.out.println(word); } words.remove(2); // Entfernt das dritte Element aus der Liste System.out.println(words); // Output: [Hello, World] System.out.printf(\"Our list contains \\\"!\\\". True or false? %b\\n\", words.contains(\"!\")); // Output: Our list contains \"!\". True or false? false     Jetzt bist du dran. Löse bitte die Aufgabe 1 und 2 in den OOP-Labs.\n","categories":"","description":"Modul #J2\n","excerpt":"Modul #J2\n","ref":"/docs/java/j2-oop/01-list-basics/","tags":"","title":"Java Lists Basics"},{"body":"Ziele  Ich weiss, was Markdown ist und welche Vorteile es hat Ich weiss, wie man mit Markdown eine einfache Dokumentation erstellt Ich weiss, wie man verschiedene Titel erstellt Ich weiss, wie man Paragraphen und Zeilenumbrüche erstellt Ich weiss, wie man fett und kursiv schreibt oder die beiden kombiniert Ich weiss, wie man Texte hervorheben kann Ich weiss, wie man Listen erstellt Ich weiss, wie man Code-Blöcke mit entsprechender Syntax erstellt Ich weiss, wie man Bilder und Links einfügen kann Ich weiss, wie man Tabellen erstellt   Einführung Lies den Markdown-Guide zur Einführung Markdown - Getting started durch. Das IntelliJ enthält per Default die Möglichkeit Markdown-Dateien zu bearbeiten und ihr finales Aussehen anzuzeigen. Um eine Markdown-Datei anzusehen gibt es auch die Möglichkeit den Online Markdown Editor Dillinger zu verwenden.\nAndere Markdown-Editoren sind:\n Ghostwriter Markdown Monster  Für Linux und Mac stehen jeweils andere Editoren zur Verfügung.\n Basic Syntax Lies die Dokumentation zur Basic Syntax durch. Dort erfährst du, wie man die wichtigsten Elemente im Markdown anlegen kann, um eine Dokumentation zu erstellen.\n Extended Syntax In der Erweiterung lernst du Tabellen und weitere nützliche Funktionen kennen. Lies das Kapitel durch und mach dich mit den Tabellen und dem Hervorheben von Code vertraut.\n Hacks Wenn du noch mehr wissen willst, bringt dich das Kapitel Hacks noch tiefer in nicht offizielle Funktionen von Markdown hinein.\n Cheat Sheet Das Cheat-Sheet mit den wichtigsten Teilen der Markdown-Syntax findest du hier\n","categories":"","description":"Modul #O4 - Markdown\n","excerpt":"Modul #O4 - Markdown\n","ref":"/docs/tools/markdown/","tags":"","title":"Markdown"},{"body":"Eine Wörterbuch-Anwendung bewahrt die Einträge in einer Datenbank. Die Interaktion mit der Datenbank wird durch ein DictionaryRepository umgesetzt.\nEin DictionaryRepository setzt folgendes Interface um:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  public interface DictionaryRepository { /** * Die Methode erhält ein Wort und die Definition dazu und speichert diese als Eintrag in der Datenbank * * @Param word das Wort, welche in dem Wörterbuch hinzugefügt werden soll * @Param definition die Definition des Wortes * */ void add(String key, String value); /** * Die Methode aktualisiert die Definition des Wortes in der Wörterbuch-Datenbank * * @Param word das Wort, welche in dem Wörterbuch bereits existiert * @Param definition die aktualisierte Definition des Wortes * */ void update(String key, String value); /** * Die Methode liefert die Definition für das gegebene Wort aus der Wörterbuch-Datenbank zurück. * * @Param word das Wort, dessen Definition gesucht wird * @Return die Definition des Wortes aus der Wörterbuch-Datenbank, falls vorhanden, ansonsten null * */ String getDefinition(String word); }   Die Klasse Dictionary beinhaltet die Business-Logik des Wörterbuchs und verwendet ein DictionaryRepository, um die Einträge in der Datenbank zu speichern und zu finden:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  public enum DictionaryStatus { ADDED, UPDATED, INVALID, NOT_FOUND } public class Dictionary { private final DictionaryRepository repository; public Dictionary(DictionaryRepository repository) { this.repository = repository; } /** * Die Methode schreibt eine Definition für ein Wort in der Wörterbuch-Datenbank. * Zuerst wird geschaut, ob das Wort in der Datenbank bereits existiert. * Falls das Wort noch nicht existiert, wird einen neuen Eintrag in der Datenbank erstellt. * Falls das Wort bereits existiert, wird seine Definition aktualisiert. * * @Param word das Wort, welche in dem Wörterbuch hinzugefügt oder aktualisiert werden soll * @Param definition die Definition des Wortes * @Return DictionaryStatus.ADDED falls das Wort neu ist, DictionaryStatus.UPDATED falls das Wort * bereits vorhanden war und DictionaryStatus.INVALID, falls das Wort ein leerer String ist oder Zahlen beinhaltet * */ public DictionaryStatus addOrUpdateWord(String word, String definition) { //TODO gemäss JavaDoc umsetzen  } /** * Die Methode sucht nach der Definition des gegebenen Worts. * Falls das Wort existiert, wird die Definition zurückgeliefert und ansonsten einen * Text, welcher darauf hinweist, dass das Wort nicht vorhanden ist. * * @Param word das Wort, dessen Definition gesucht wird * @Return die Definition des Wortes, falls das Wort im Wörterbuch existiert. Ansonsten folgenden Text: * \"Das Wort xxx konnte im Wörterbuch nicht gefunden werden\" (xxx steht als Platzhalter für das gesuchte Wort) * */ public String getDefinition(String word) { //TODO gemäss JavaDoc umsetzen  } }   Aufgabe Schreibe eine Test-Klasse für Dictionary, welche folgende Tests beinhaltet:\n Tests der Methode addOrUpdateWord:  Das Wort befindet sich noch nicht in der Datenbank Das Wort befindet sich bereits in der Datenbank Das Wort ist ein leerer String Das Wort beinhaltet Zahlen   Tests der Methode getDefinition:  Das gesuchte Wort existiert in der Datenbank Das gesuchte Wort existiert nicht in der Datenbank Das gesuchte Wort is ungültig: leerer String Das gesuchte Wort is ungültig: das Wort beinhaltet Zahlen    Anforderungen\n Schreibe jeweils einen Test und erweitere den Code dann nur soweit bis der Test grün ist. Wiederhole dies für alle Tests (die bestehende Tests müssen weiterhin funktionieren!). Der Interface DictionaryRepository darf nicht umgesetzt werden. Für die Tests wird ein Mock oder ein Spy aus dem Mockito-Framework verwendet. Jede Test-Methode hat folgendes Namensschema: 1 2 3  public void given_when_then() { ... }   Wobei:\n given die Ausgangslage definiert when ist der Name der Methode, welche getestet wird then ist das Ergebnis, welche erwartet wird   Jede Test-Methode prüft, dass alle Methoden eines Mocks/Spy’s welche aufgerufen werden müssen, auch aufgerufen wurden. Jede Test-Methode prüft, dass alle Methoden eines Mocks/Spy’s welche NICHT aufgerufen werden sollen, auch nicht aufgerufen wurden.  ","categories":"","description":"Aufgaben zu Modul #J4 - Testing / Mockito\n","excerpt":"Aufgaben zu Modul #J4 - Testing / Mockito\n","ref":"/labs/java/java-testing/02_mockito/","tags":"","title":"Mockito - Aufgaben"},{"body":"Ziele  Ich kann ohne Hilfsmittel die Bestandteile einer Klasse vollständig auflisten. Ich kann den Unterschied zwischen einer Klasse und einem Objekt mit konkreten Beispielen demonstrieren. Ich implementiere Klassen anhand vorgegebenen Anforderungen und instanziiere (erzeuge) Objekte dazu.   Einführung In der realen Welt können wir viele Objekte wie Autos, Gebäude und Menschen um uns herum finden. Alle diese Objekte haben einen bestimmten Zustand/Merkmale und ein bestimmtes Verhalten.\nWenn wir ein Auto betrachten, so könnte sein Zustand/seine Merkmale\n einen Markennamen, eine bestimmte Geschwindigkeit oder den zu tankenden Kraftstoff enthalten.  Mögliche Verhaltensweisen eines Autos sind normalerweise\n fahren und einparken.  Definitionen Klasse Unter einer Klasse versteht man in der objektorientierten Programmierung ein abstraktes Modell bzw. einen Bauplan für eine Reihe von ähnlichen Objekten. Die Klasse dient als Bauplan für die Abbildung von realen Objekten in Softwareobjekte und beschreibt Attribute (Eigenschaften) und Methoden (Verhaltensweisen) der Objekte.\nObjekt Ein Objekt bezeichnet in der objektorientierten Programmierung ein Exemplar eines bestimmten Datentyps oder einer bestimmter Klasse. Objekte sind konkrete Ausprägungen (=Instanzen) einer Klasse und werden zur Laufzeit erzeugt (Instanziierung).\nDatenfelder Datenfelder (Attribute) enthalten Informationen, die für Objekte dieser Klasse relevant sind. Beispielsweise hat ein Auto eine Höchstgeschwindigkeit, eine bestimmte Anzahl von Sitzen, usw. Das heisst, ein Feld ist eine Variable, in der Daten gespeichert werden können. Es kann einen beliebigen Typ haben, einschliesslich primitiver Typen (int, float, boolean usw.) und Klassen. Eine Klasse kann auch sich selber als Feld enthalten. Eine Klasse kann beliebig viele Felder haben.\nMethoden Methoden dienen dazu, den Zustand eines Objekts zu verändern. Die Methode refuel() (siehe Klassendiagramm unten) füllt beispielsweise den Tank, bis dessen Kapazität erreicht wird.\nZusammenfassung Klassen werden verwendet, um benutzerdefinierte Datentypen darzustellen. Damit werden Attribute und Verhalten, welche zu diesem neuen Datentyp gehören, an einer Stelle im Code zusammengefasst und verwaltet. Diese neuen, benutzerdefinierte Datentypen können dann wie anderen Datentypen (primitive Datentypen oder andere Klassen) verwendet werden.\nBeginnen wir mit einem Beispiel einer Auto-Klasse; hier siehst du das UML-Klassendiagramm der Klasse Car, die wir selber erfunden haben. Die oberen 4 Einträge sind ihre Instanzvariablen und die untersten 3 sind ihre Methoden. Einträge mit einem - sind private, Einträge mit einem + sind öffentlich (public):\n   class Car     - topSpeed: int   - totalSeats: int   - fuelCapacity: int   - manufacturer: String   + refuel(): void   + park(): void   + drive(): void     Klassen und Objekte im Schnelldurchlauf Klassen deklarieren Eine Java Klasse besteht aus zwei Teilen: Dem Klassenkopf und dem Klassenrumpf.\nIm Klassenkopf (auch Klassendeklaration genannt) wird eine neue Klasse mit dem Keyword class gefolgt vom Namen der Klasse deklariert. Per Konvention folgt die Benamsung der Klasse dem PascalCase. Das bedeutet, dass der Klassen-Name und jedes neue Wort darin mit einem Grossbuchstaben beginnt, der Rest besteht aus Kleinbuchstaben.\nWie folgt kannst du eine Klasse mit dem Namen Nothing erstellen:\n1 2 3  public class Nothing { }   Der “Klassenrumpf” besteht aus einer öffnender { und schliessenden geschweiften Klammer }. Diese Klammern bilden die Grenzen der Klasse. Der Klassenrumpf kann Felder, Methoden und Konstruktoren enthalten. Felder speichern Daten, Methoden definieren das Verhalten und Konstruktoren ermöglichen es uns, neue Objekte der Klasse zu erstellen und zu initialisieren. Felder und Methoden gelten als Klassenmitglieder (class members).\nDer Quellcode einer Klasse wird in eine .java-Datei eingefügt. Normalerweise enthält eine Quellcodedatei nur eine Klasse und hat denselben Namen wie diese Klasse. Manchmal kann eine Datei jedoch auch mehrere Klassen enthalten, jedoch darf es nur eine öffentliche (public) Klasse pro Datei geben. Deren Name muss mit dem Dateinamen übereinstimmen.\nNachfolgend die Klasse Patient in der Datei Patient.java:\n1 2 3 4 5 6  public class Patient { String name; // Feld bzw. Instanzvariable vom Datentyp String mit dem Bezeichner 'name'  int age; // Feld bzw. Instanzvariable vom Datentyp int mit dem Bezeichner 'age'  float size; // Feld bzw. Instanzvariable vom Datentyp float mit dem Bezeichner 'size'  String[] complaints; // ein Feld kann auch ein Array sein }   Diese Klasse repräsentiert einen Patienten in einem Krankenhausinformationssystem. Sie verfügt über vier Felder: name, age, size und complaints. Alle Objekte der Klasse Patient haben dieselben Felder, aber ihre Werte können für jedes Objekt unterschiedlich sein.\nObjekte erstellen Wir können ein Objekt (auch “eine Instanz” genannt) der Klasse Patient mit dem Operator new erstellen:\n1  Patient patient = new Patient();   Wenn du ein neues Objekt erstellst, wird jedes Feld mit dem Standardwert des entsprechenden Typs initialisiert (insofern du keinen Konstruktor mit Argumenten verwendest, dazu aber später mehr). Wenn die Instanzvariablen eines Objektes nicht mit einem Zugriffsmodifikator wie private versehen sind (dazu unten mehr), können wir mittels Punkt-Operator auf die Variablen des Objekts zugreifen:\n1 2  System.out.println(patient.name); // es wird null ausgeben System.out.println(patient.age); // es wird 0 ausgeben   Das folgende Programm erstellt zwei Objekte der Klasse Patient und druckt die Informationen der Objekte aus.\nPatient.java\n1 2 3 4 5  class Patient { String name; int age; float height; }   PatientDemo.java\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  public class PatientDemo { public static void main(String[] args) { // Wir erstellen einen neuen Patienten, alle Variablen werden mit ihren Standardwerten initialisiert  Patient john = new Patient(); // Wir greifen über den Punkt-Operator auf die Variablen zu und speichern Werte darin  john.name = \"John\"; john.age = 30; john.height = 180f; System.out.println(john.name + \" \" + john.age + \" \" + john.height); Patient alice = new Patient(); alice.name = \"Alice\"; alice.age = 22; alice.height = 165f; System.out.println(alice.name + \" \" + alice.age + \" \" + alice.height); } }   Im obigen Code haben wir zwei Patienten erstellt, John und Alice, die Werte ihrer Felder definiert und dann die Informationen über sie ausgedruckt. Wir sehen, dass wir mit dem Punkt-Operator auf die Felder des Objekts zugreifen können (john.name = “John”). Allerdings soll hier erwähnt sein, dass das nur geht, wenn die Instanzvariablen nicht private sind (wir behandeln das Thema Zugriffsmodifikatoren später).\nReferenzen teilen Objekte sind Referenztypen. In einer Variable wird also nicht das Objekt selbst, sondern die Speicheradresse hinterlegt, welche auf das Objekt zeigt. Es können sich also mehrere Referenzen auf dasselbe Objekt beziehen.\n1 2 3 4 5 6 7 8  Patient patient = new Patient(); patient.name = \"Mary\"; patient.age = 24; System.out.println(patient.name + \" \" + patient.age); // Mary 24  // Wir weisen der Variablen patient2 die Speicheradresse der Variablen patient zu Patient patient2 = patient; System.out.println(patient2.name + \" \" + patient2.age); // Mary 24   Es ist wichtig zu verstehen, dass sich die zwei Referenzen oben auf das gleiche Objekt im Speicher beziehen und nicht auf zwei unabhängige Kopien. Da unsere Klasse veränderbar ist, können wir das Objekt mit Hilfe beider Referenzen ändern.\n1 2  patient.age = 25; System.out.println(patient2.age); // 25    ","categories":"","description":"Modul #J2\n","excerpt":"Modul #J2\n","ref":"/docs/java/j2-oop/02-oop/","tags":"","title":"Objektorientierte Programmierung"},{"body":"Hogwarts Sorting Hat System Hogwarts ist bekanntlich die beste Schule für Hexerei und Zauberei. Alle Hogwarts Schüler:innen werden vor Beginn des ersten Schuljahres gemäss ihren Charakter-Eigenschaften und Fähigkeiten in einem der vier Hogwarts “Häuser” eingeteilt. Die Einteilung in die Häuser ist die Aufgabe des “sprechenden Hutes” (engl. “Sorting Hat”).\nDer sprechende Hut ist mittlerweile mehr als 1000 Jahre alt und soll in den verdienten Ruhestand gehen. Dazu ist die Digitalisierung auch bei Hogwarts endlich angekommen und der Schulmeister möchte dich beauftragen ein Sorting-Hat System zu bauen, welche die Aufgabe des sprechenden Hutes übernimmt und neue Schüler:innen in eines der vier Hogwarts-Häuser aufgrund von bestimmten Kriterien und Eigenschaften einteilt.\nDie Hogwarts Häuser und ihre Eigenschaften/Merkmale Die vier Hogwarts Häuser - Gryffindor, Hufflepuff, Ravenclaw und Slytherin - haben bestimmte Merkmale und Eigenschaften, welche dem sprechenden Hut dabei helfen, die Schüler:innen in das richtige Haus einzuteilen.\nDie folgende Tabelle listet ein paar wichtige Merkmale für jedes Haus auf:\n   Haus Wichtigste Charakter-Eigenschaften Hausfarben Haustier Element Gründer:in Anzahl Schüler:innen     Gryffindor Tapferkeit, Kühnheit, Courage, Ritterlichkeit, Entschlossenheit Gold, Scharlachrot Löwe Feuer Godric Gryffindor 31   Hufflepuff Fleiss, Hingabe, Geduld, Loyalität, Fairplay Gelb, Schwarz Dachs Erde Helga Hufflepuff 15   Ravenclaw Intelligenz, Wissen, Neugier, Kreativität, geistige Wendigkeit Blau, Bronze Adler Luft Rowena Ravenclaw 33   Slytherin Ehrgeiz, Führerschaft, Selbsterhaltung, List, Einfallsreichtum Smaragdgrün, Silber Schlange Wasser Salazar Slytherin 48    Einteilungsalgorithmus Der sprechende Hut teilt angehende Hogwarts Schüler:innen in eines der vier Hogwarts-Häuser anhand von bestimmten Kriterien ein. Diese Kriterien sind:\n Charakter-Eigenschaften der Person, verglichen mit den Charakter-Eigenschaften, welche dem/der Gründer:in des Hauses wichtig waren Lieblingsfarbe, verglichen mit den Hausfarben Verwandtschaft mit einem ehemaligen Mitglied eines der Häuser Das Wunschhaus der Person, welche eingeteilt werden soll  Der/die Schüler:in wird zu jedem Kriterium befragt (mehrere Antworten sind bei den meisten Kriterien möglich!). Die Antworten zu jedem Kriterium werden bewertet, sodass am Schluss für jedes Haus eine Gesamtbewertung vorliegt. Der/die Schüler:in wird in das Haus mit dem höchsten Wert eingeteilt.\nAber vorsicht, es gelten auch folgende Bestimmungen, welche die Auswertung des gewählten Hauses beeinflussen:\n Nicht alle Kriterien/Werte werden beim Einteilungsentscheid gleich gewichtet (die Gewichtung wird später erläutert). Wenn zwei Häuser die gleiche Bewertung erhalten, wird das Haus mit der niedrigeren Anzahl Schüler:innen ausgewählt. Das Wunschhaus wird bei der Gesamtbeurteilung manchmal berücksichtigt und manchmal nicht (mehr dazu später)  Gewichtung der Kriterien Folgend findest du die Bestimmungen und Gewichtungen, welche bei der Auswertung des passenden Hauses eingehalten werden müssen. Die Gesamtauswertung eines Hauses besteht aus der Summe aller Punkte, welche bei jedem Kriterium für dieses Haus berechnet worden sind.\nCharakter-Eigenschaften Es sind insgesamt 20 Charakter-Eigenschaften möglich (siehe Tabelle der Hogwarts-Häuser hier oben). Der/die Benutzer:in muss mindestens drei Charakter-Eigenschaften auswählen, welche zu ihm/ihr passen.\nPer Haus, hat jede Charakter-Eigenschaft ein Gewicht zwischen 1 und 20. Die wichtigsten Charakter-Eigenschaften eines Hauses erhalten die höchsten Gewichtswerte für dieses Haus. Die anderen Charakter-Eigenschaften bekommen niedrigere Werte. Bei der Auswertung werden für jedes Haus die Gewichtswerte für die eingegebenen Eigenschaften zusammenaddiert.\nFarben In Hogwarts gibt es vier Hausfarben-Paare, also insgesamt acht Hausfarben (siehe Tabelle der Hogwarts-Häuser hier oben). Der/die Benutzer:in gibt seine/ihre Lieblingsfarbe ein. Wenn die Farbe, mit einer Hausfarbe übereinstimmt, erhält dieses Haus zusätzliche 10 Punkte.\nVerwandtschaft Eine Person kann mehrere Verwandte haben, welche in Hogwarts studiert haben und entsprechend einem Haus eingeteilt wurden.\nDie Anzahl Verwandte, welche einem Haus eingeteilt wurden, gibt diesem Haus einen zusätzlichen Wert, welcher der Fakultät dieser Anzahl Verwandten entspricht.\nHinweis: eine Person kann mehrere Verwandte haben, welche in unterschiedliche Häuser eingeteilt worden waren…\nWunschhaus Der/die Benutzer:in kann sein/ihr Wunschhaus eingeben. Das Wunschhaus “schenkt” dem gewählten Haus eine zufällige Anzahl Punkte zwischen 5 und 10 zur Gesamtbeurteilung aber nur wenn der/die Benutzer:in auch eine der Hausfarben dieses Hauses als Lieblingsfarbe ausgewählt hat.\nAnforderungen an das System  Verwende viele verschiedene Klassen, um dein System zu modellieren Erzeuge ein gutes Abbild der Aufgabenstellung Die main Methode soll nur zur Interaktion mit dem/der Benutzer:in dienen. Skizziere dein Modell, sodass du es danach auch erklären kannst Teil der Aufgabe ist es, bestimmte Prinzipien kennenzulernen und zu verstehen. Wende entsprechend bei der Umsetzung folgende Prinzipien an:  Single Responsibility Principle Immutable Objects    Bonus Anforderungen\n Wenn sinnvoll, wende Generics an Verwende, wenn möglich, Streams statt Loops Füge ein Einteilungskriterium hinzu  Wenn du an der Challenge teilnehmen willst, dann musst du die Aufgabe alleine lösen. Die Lösung vom Pult-Nachbar interessiert uns also nicht.\n","categories":"","description":"Challenge zu Modul #J2\n","excerpt":"Challenge zu Modul #J2\n","ref":"/challenges/java/java-oop/01_oop_challenge/","tags":"","title":"Objektorientierte Programmierung Challenge"},{"body":"Für dieses Exam dürfen auch Inhalte der Themen Lists und Generics verwendet werden.\nWeltmeisterschaft - OOP Exam Bei diesem Lab geht es darum, dass du deine Vorgehensweise beim Erstellen eines objektorientierten Modells trainierst.\nZentral bei dieser Aufgabe ist also, wie du das Datenmodell erstellst, welches beschreibt, welche Klassen mit welchen Feldern und Methoden du schreibst.\nZiel ist nicht, dass du dich mit Scannern oder viel Logik herumschlagen musst.\nSachverhalt Bei diesem Lab modellierst du das Turnier von der Fussball-WM 1954 in der Schweiz. Im Prinzip sollst du die Informationen, die in der results.txt-Datei gespeichert sind, abbilden.\nDeine Klassen sollen folgendes abbilden:\n In diesem Turnier (Competition) spielen die Mannschaften (Team) gegeneinander. Jedes Spiel beschreibt entweder eine Vorrunde/Gruppenspiel (GROUP), PLAYOFF, Viertel- (QUARTER_FINAL), Halbfinale (SEMI_FINAL) oder FINAL. Bei jedem Spiel (Game) gibt es immer eine Heim- (home) und Gast-Mannschaft (visiting/away team). Bei jedem Spiel wird festgehalten, wie viele Tore (goals) welche Mannschaft (home oder visiting) geschossen hat. Zudem wird festgehalten, wo (location) das Spiel stattgefunden hat.  Was soll die Anwendung können? Auf Stufe Spiel (Game)\n möchten wir erfahren können, ob eine bestimmte Mannschaft dieses Spiel gespielt hat (didTeamPlayThisGame(team)). Zudem möchten wir schnell ermitteln können, wie viele Punkte eine Mannschaft in diesem Spiel erzielt hat (Sieg: 3, Unentschieden: 1, Niederlage: 0) (getPointsFor(team)).  Auf Stufe Turnier (Competition)\n wollten wir ermitteln können, welche Mannschaft wie viele Punkte während der Gruppenphase erzielt hat (getScoresDuringGroupStageFor(team)). Zudem möchten wir herausfinden, wie viele Tore eine Mannschaft während des ganzen Turniers geschossen hat (getGoalsForTeam(team)). Des Weiteren wollen wir eine Auflistung, welche Spiele alles an einem bestimmten Ort (location) stattgefunden haben (getAllGamesForLocation(location)).  Abgesehen von der main(...)-Methode soll keine weitere Methode statisch sein.\nAufgaben Aufgabe 1 - Entwurf Erstelle einen Entwurf vom Klassenmodell.\n Der Entwurf kann auf Papier oder mit einem Tool (z.B. draw.io, Visio, plantUML) erstellt werden. Plane auch schon die Methoden im Entwurf ein.  Zeige den Entwurf zuerst einem Coach, bevor du weiterfährst.\nAufgabe 2 - Klassen umsetzen Setzte die Klassen im Code um, inkl. Methoden.\nFür den Moment müssen die Methoden noch nichts machen und sollen für den Beginn nur einen Default-Wert zurückgeben - der Einfachheit halber.\nZiel dieser Aufgabe ist, dass du dich nur aufs Klassen-Design im Code konzentrierst, nicht aber um die konkreten Methoden-Umsetzungen.\nAufgabe 3 - Methoden umsetzen Setze nun die Methoden korrekt um.\nVerwende zur Demonstration die Daten aus der results.txt-Datei. Du sollst die Daten nicht automatisiert via Dateisystem laden, sondern du kannst die Informationen aus dieser Datei direkt hartkodiert in eine .java-Datei hinein kopieren und in Java-Code umschreiben, damit es mit deinen Klassen kompatibel ist. Damit ist keine Hexerei erwartet, sondern wenn z.B. folgendes in der results.txt-Datei steht\n1 2  # Gruppe 1\tFrankreich\tJugoslawien\t0:1   dann kannst du das wie folgt direkt in deine Java-Datei schreiben:\n1  new Game(FRANCE, YUGOSLAVIA, 0, 1)   ","categories":"","description":"Exam zu Modul #J2\n","excerpt":"Exam zu Modul #J2\n","ref":"/exams/java/java-oop/oopexam/","tags":"","title":"Objektorientierte Programmierung Exam"},{"body":"Schreibe eine Anwendung, in welcher Patienten einen medizinischen Check-Up durchgehen, um ihre Daten für das Spital zu erfassen.\nEin Patient\n hat einen Namen  Der Checkup nimmt\n die Grösse, das Gewicht, die Temperatur und ob der Patient geimpft ist  Die Anwendung soll  mit einem Patienten einen Check-Up durchführen die Grösse eines Patienten zurückgeben das Gewicht eines Patienten zurückgeben die Temperatur eines Patienten zurückgeben Überprüfen ob der Patient geimpft ist  Es sollen keine Set Methoden für das Einfügen der Werte verwendet werden!\n","categories":"","description":"Aufgabe zu Modul #J2 - OOP - Patienten\n","excerpt":"Aufgabe zu Modul #J2 - OOP - Patienten\n","ref":"/labs/java/java-oop/02_patienten/","tags":"","title":"Patienten"},{"body":"Aufgabe 1 Schreibe ein Programm, welches die Personen von vier Vereine auswertet.\n Pro Verein existiert ein Set mit allen Vereinsmitlieder (siehe Input). Das Programm analysiert die Vereinsmitglieder und schreibt verschiedene Aussagen in die Konsole (siehe Ausgabe). Die Namen der Personen müssen in alphabetischer Reihenfolge angezeigt werden.  Input  4 Sets 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  Set\u003cString\u003e fussballVerein = Set.of( \"Emil\", \"Hans\", \"Felix\", \"Fritz\", \"Patrick\", \"Hanne\", \"Anja\", \"Paula\", \"Petra\", \"Anna\" ); Set\u003cString\u003e schwimmVerein = Set.of( \"Emil\", \"Klaus\", \"Paul\", \"Fritz\", \"Patrick\", \"Hanne\", \"Anina\", \"Nicole\", \"Petra\", \"Gerda\" ); Set\u003cString\u003e musikVerein = Set.of( \"Kari\", \"Hans\", \"Max\", \"Karin\", \"Petra\", \"Anna\" ); Set\u003cString\u003e tanzVerein = Set.of( \"Emil\", \"Hans\", \"Paul\", \"Felix\", \"Max\", \"Lara\", \"Anja\", \"Sabine\", \"Anna\" );    Ausgabe Die Ausgabe muss das folgende Format aufweisen:\n1 2 3 4  - Wie viele Personen machen min. in einem Verein mit: 2: Maria,Xaver - Alle Personen, welche im Fussball und Tanz Verein sind: 2: Maria,Xaver - Alle Personen, welche im Fussball sind und nicht im Tanz oder Schwimm Verein: 2: Maria,Xaver   Ausgabe überprüfen Wie können wir die Ausgabe überprüfen, ohne dass ihr die Lösung kennt? Wir benützen dazu eine kleine Hilfsklasse OutputValidation. Die Klasse erlaubt es eure System.out.println() Anweisungen mit OutputValidation.logAndPrint() zu ersetzten. Am Schluss des Programmes kann man mit OutputValidation.printControlHash() den Hash-Wert der eigenen Ausgabe anzeigen, oder mit OutputValidation.verifyControlHash() einen Hash-Wert zur Überprüfung mit eurer Ausgabe überreichen.\nEin Anwendungsbeispiel seht ihr unter OutputValidationUsage.\nDer Hash für diese Aufgabe ist: -1421274666\nAufgabe 2 Wir programmieren eine eigene Set-Klasse MySet, welche noch kein Hash-Code verwendet.\n Es dürfen keine Klassen aus dem Collection-Framework verwendet werden. Die Klasse muss das Interface MySetInterfaceSimple implementieren. Die Klasse weiss nicht, wie viele Elemente man speichern muss. Sie muss die Grösse des Arrays dynamische anpassen. Die toString() der java.lang.Object Klasse soll von der MySet so überschrieben werden, dass die Elemente kommasepariert ausgegeben werden. Überprüfe deine Implemenation mit dem JUnitTest MySetTest  Input  Inferface MySetInterfaceSimple 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  package com.examples.list; public interface MySetInterfaceSimple\u003cE\u003e { /** * Adds the specified element to this set if it is not already present. * @param element element to be appended to this list * @return true if this set did not already contain the specified element */ boolean add(E element); /** * Removes the specified element from this set if it is present. * @param object object to be removed from this set, if present * @return true if the set contained the specified element */ boolean remove(Object object); /** * Returns true if this set contains the specified element. * @param object element whose presence in this set is to be tested * @return true if this set contains the specified element */ public boolean contains(Object object); /** * Returns the number of elements in this set. * @return the number of elements in this set */ int size(); /** * Returns true if this set contains no elements. * @return true if this set contains no elements */ boolean isEmpty(); /** * Removes all the elements from this set. The set will be empty after this call returns. */ void clear(); }    Aufgabe 3 (Optional) Wir Kopieren unsere MySet Klasse zu der Klasse MyHashSet und erweitern diese, damit sie Hash Funktionalität verwendet:\n Beim Hinzufügen von neuen Elementen wird deren Hash-Code berechnet und ebenfalls abgespeichert. Die Suche nach bestehenden Elementen wird anschliessend über den gespeicherten Hash-Code durchgeführt statt über die Elemente selbst. Du kannst deine Implemenation mit dem gleichen JUnitTest MySetTest überprüfen, da sich die neue Klasse gleich verhalten soll. Erstelle vom Test eine Kopie MyHashSetTest und ändere MySet überall zu MyHahsSet.  ","categories":"","description":"Aufgaben zu [Java Collections - Set](../../../../docs/java/java-collections/03_set)  \n","excerpt":"Aufgaben zu [Java Collections - …","ref":"/labs/java/java-collections/02_set/","tags":"","title":"Set - Aufgaben"},{"body":"Ziele  Du weisst wofür SQL verwendet wird Du kennst die verschiedenen Statements in SQL Du kannst einfache SQL Queries/Statements schreiben  Was ist SQL? SQL oder „Structured Query Language“ ist eine Programmiersprache für die Bearbeitung von Daten und relationalen Datenbanksystemen. Diese Sprache wird hauptsächlich für die Kommunikation mit Datenbanken verwendet, um die darin enthaltenen Daten zu verwalten.\nStatements Was ist ein SQL Statement? Ganz einfach gesagt ist ein Statement ein Befehl, der an die Datenbank geschickt und dort ausgeführt wird. Es gibt viele verschiedene Statements, die teilweise kombiniert werden können, um den gewünschten Effekt auf der Datenbank zu erzielen. Grundsätzlich werden Teile der Syntax (Select, Insert, usw.) gross geschrieben, um eine Unterscheidung zwischen der Syntax und anderen Elementen wie tabellennamen usw. zu erhalten. Jedoch ist diese Regel nicht erzwungen.\nSELECT Das Select Statement wird verwendet, um Daten aus bestimmten Tabellen auszuwählen. Ein SELECT ist grundsätzlich wie folgt aufgebaut:\n1 2 3 4  SELECT * FROM table_name; -- Beispiel mit der Tabelle \"benutzer\" SELECT * from benutzer;   Als Erstes kommt immer das “SELECT” gefolgt von den gewünschten Attribute. In diesem Statement wird ein Stern verwendet, dieser steht für alle Attribute. Dementsprechend werden alle Attribute, die in der Tabelle vorhanden sind, zurückgegeben. Auf die Attribute folgt das FROM, auf dieses folgt jeweils eine Tabelle, von welcher die Werte gewünscht sind. Im Beispiel ist es die Tabelle “benutzer”. Das Resultat dieses Statements würde schlussendlich so aussehen:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in    Wenn wir nur eine Spalte auswählen möchten, können wir das Statement wie folgt anpassen:\n1 2 3 4  SELECT column_name FROM table_name; --Beispiel mit der Tabelle \"benutzer\" SELECT vorname FROM benutzer;   Das Resultat würde dementsprechend so aussehen:\n   vorname     Anja   Fritz   Hans    INSERT Das Insert Statement wird verwendet, um Daten in eine bestimmte Tabelle einzufügen. Ein INSERT ist grundsätzlich wie folgt aufgebaut:\n1  INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);   Als Erstes kommt immer das “INSERT INTO” gefolgt von der betroffenen Tabelle. Schlussendlich wird mit VALUES angegeben, dass ein oder mehrere Tupel eingefügt werden. In den Klammern können respektiv die Spaltennamen (optional) und die Inhalte angegeben werden.\nEin konkretes Beispiel würde mit dieser Tabelle beginnen:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in    Dann wird dieses INSERT Statement ausgeführt:\n1  INSERT INTO benutzer VALUES (\"Max\", \"Mustermann\", 16, \"Maurer/in\");   Nach dem Statement ist der neue Benutzer Max in der Tabelle zu finden:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 16 Maurer/in    Alternativ zum vorherigen Statement können auch nur bestimmte Daten eingefügt werden. In unserem Beispiel könnte ein Benutzer auch Arbeitslos sein, dementsprechend hätte er keinen Beruf. Wenn wir also so einen Benutzer hinzufügen möchten würden wir das wie folgt machen:\n1  INSERT INTO benutzer(vorname, nachname, alter) VALUES (\"Peter\", \"Piccolo\", 37);   In den Klammern nach der Tabelle können wir also die Attribute auswählen, die wir hinzufügen möchten. In der Tabelle würde es so aussehen:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 16 Maurer/in   Peter Piccolo 37 null    Der Beruf wurde automatisch auf null gesetzt und ist dementsprechend leer.\nCREATE Das Create Statement wird verwendet, um Tabellen, Datenbanken, usw. zu erstellen. Ein CREATE Statement ist grundsätzlich wie folgt aufgebaut:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  -- Datenbank erstellen CREATE DATABASE databasename; --Tabelle erstellen CREATE TABLE table_name ( column1 datatype, column2 datatype, column3 datatype, .... ); -- Beispiel: die Tabelle \"benutzer\" erstellen CREATE TABLE benutzer (vorname varchar(255), nachname varchar(255), alter number, beruf varchar(255));   Als Erstes kommt immer das “CREATE” gefolgt dem zu erstellenden Objekt, in diesem Fall eine Tabelle. Schlussendlich wird noch ein Name festgelegt (die neue Tabelle heisst “benutzer”), gefolgt von den gewünschten Attributen der Tabelle und dem entsprechenden Datentyp.\nDas Resultat dieses Statements würde schliesslich so aussehen:\n   vorname nachname alter beruf            WHERE Die WHERE-Klausel ist im Vergleich zu den anderen kein Statement, sondern eine Ergänzung dazu. Mit WHERE kann spezifiziert werden, welche Daten für das Statement verwendet werden sollen. Mehrere Bedingungen können mit den Keywords AND und OR aneinandergereiht werden. Hier ein Beispiel dazu:\nAusgangstabelle:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 16 Maurer/in    Dieses Statement schränkt das Alter zwischen 15 und 30 Jahren ein.\n1  SELECT * FROM benutzer WHERE alter \u003e 15 AND alter \u003c 30;   Das Statement gibt schliesslich alle Werte zurück, die die Bedingung erfüllen:\n   vorname nachname alter beruf     Fritz Fischer 26 Pilot/in   Max Mustermann 16 Maurer/in    Zusätzlich gibt es bei Texten die Möglichkeit eine Teilüberprüfung mit Like zu machen. Damit können beispielsweise Alle Adressen gesucht werden, die mit “Strasse” enden. Dazu muss beim Like angegeben werden, wo sich der Rest des Textes befinden. Das funktioniert mit dem % Zeichen. Wenn der restliche Text vor dem Suchtext ist, wird das % vor diesem platziert. Dasselbe funktioniert natürlich auch umgekehrt. Weiter kann auch auf beiden Seiten ein % verwendet werden, so ist es egal wo sich der Suchtext befinden. Hier ein Beispiel-Query dazu:\nAusgangstabelle:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 16 Maurer/in    1  SELECT * FROM person WHERE nachname like '%mann'   Resultat:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Max Mustermann 16 Maurer/in    UPDATE Das Update Statement wird verwendet, um Inhalte (Tabelle, Datenbank, Constraints, etc.) zu ändern. Ein UPDATE Statement ist grundsätzlich wie folgt aufgebaut:\n1 2 3  UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;   Als Erstes kommt immer das “UPDATE” gefolgt von dem zu aktualisierenden Objekt, in diesem Fall eine Tabelle. Anschliessend wird ein SET durchgeführt, wo die gewünschte Änderung gemacht wird. Dabei können auch mehrere Attribute gleichzeitig geändert werden. Dazu kann hinter dem Wert ein Komma hinzugefügt werden und eine weitere Änderung angegeben werden. Nach dem SET kann optional ein WHERE hinzugefügt werden, wenn die aktualisierung nicht für alle Werte durchgeführt werden soll. Hier ein konkretes Beispiel dazu:\nAusgangstabelle:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 16 Maurer/in    Dieses Statement setzt das Alter aller Benutzer mit dem Vornamen “Max” auf 18 und ändert den Beruf zu “Lehrer/in”\n1 2 3  UPDATE benutzer SET alter = 18, beruf = \"Lehrer/in\" WHERE vorname = \"Max\";   Resultat:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 18 Lehrer/in    DELETE Wie es der Name schon sagt, wird das Delete Statement zum Löschen von Daten verwendet. Ein DELETE Statement ist grundsätzlich wie folgt aufgebaut:\n1  DELETE FROM table_name WHERE condition;   Als Erstes kommt immer das “DELETE” gefolgt von FROM und der betroffenen Tabelle. Ein Delete sollte immer mit einem Where verwendet werden, da sonst alle Daten aus der Tabelle gelöscht werden. Hier ein konkretes Beispiel dazu:\nAusgangstabelle:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 18 Maurer/in    Dieses Statement löscht alle Benutzer mit dem Vornamen “Max”.\n1  DELETE FROM benutzer WHERE vorname = \"Max\";   Resultat:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in    Join Ähnlich wie Where ist Join kein eigenes Statement, sondern eine Erweiterung. Mit dem Join Keyword werden in einem Select mehrere Tabellen miteinander verbunden. Das wird benötigt wenn die gewünschten Daten sich nicht in einer sondern in mehreren Tabellen befinden. Zum Beispiel, wenn die Personalien und die Adresse einer Person in verschiedenen Tabellen gespeichert wird. Ein Join funktioniert eigentlich immer gleich, es gibt jeweils eine Tabelle A die mit der Tabelle B verbunden wird. Dazu wird jeweils eine Id oder zumindest ein Attribut verwendet, welches in beiden Tabellen vertreten ist. So wird dann die Verbindung hergestellt.\nBei Joins gibt es viele verschiedene und teilweise sehr komplexe Varianten, welche auch dementsprechend selten benutzt werden. Wir schauen uns hier die vier wichtigsten an.\nInner Join (join) Der Inner Join ist der wichtigste und am meisten benötigte Join. Der Inner Join verbindet die Tabellen und gibt nur die Schnittmenge zurück. Also alle Werte aus der Tabelle A, die auch ein Gegenstück in der Tabelle B haben. Grafisch dargestellt würde dieser Join so aus sehen:\nQuelle: https://www.geeksforgeeks.org/sql-join-set-1-inner-left-right-and-full-joins/\nDas dazugehörige Statement würde so aussehen:\n1  SELECT * FROM tabelle_a INNER JOIN tabelle_b ON tabelle_a.id = tabelle_b.id;   Right und Left Join Im Vergleich zum Inner Join wird beim Right und Left Join nicht nur die Schnittmenge, sondern auch noch eine äussere Menge zurückgegeben. Grafisch würde das so aussehen:\nRight Join Quelle: https://www.geeksforgeeks.org/sql-join-set-1-inner-left-right-and-full-joins/\nLeft Join Quelle: https://www.geeksforgeeks.org/sql-join-set-1-inner-left-right-and-full-joins/\nDie äussere Menge ist jeweils eine der beiden angegebenen Tabellen. Welche Tabelle das verwendet wird, ist dabei abhängig vom Statement und welches Keyword verwendet wird. Schauen wir uns das in einem Beispiel an.\n1  SELECT * FROM tabelle_a RIGHT JOIN tabelle_b ON tabelle_a.id = tabelle_b.id;   In diesem Query wird das Keyword RIGHT verwendet. Das bedeutet, dass die rechte Tabelle verwendet wird. Was definiert jetzt aber welches die rechte Tabelle ist? In diesem Fall ist tabelle_b die rechte Tabelle, da sie rechts vom JOIN steht. Dieser Logik entsprechend ist im unteren Beispiel tabelle_a die linke Tabelle, die also komplett zurückgegeben wird.\n1  SELECT * FROM tabelle_a LEFT JOIN tabelle_b ON tabelle_a.id = tabelle_b.id;   Was jedoch bei einem Right und Left Join zu beachten ist, dass null Werte entstehen können. Bei allen Werten, die kein Gegenstück haben, werden die Attribute dieser Tabelle null sein. So würde das Resultat eines Left Joins aussehen:\nPerson:\n   vorname nachname alter beruf_id     Rolf Ringer 30 1   Loris Liechti 21 40    Beruf:\n   beruf_id berufsbezeichnung     1 Lehrer/in   2 Informatiker/in    Statement:\n1  SELECT * FROM person LEFT JOIN beruf ON person.beruf_id = beruf.beruf_id;   Resultat:\n   vorname nachname alter beruf_id beruf_id berufsbezeichnung     Rolf Ringer 30 1 1 Lehrer/in   Loris Liechti 21 40 null null     beruf_id ist doppelt, da es in beiden Tabellen ein Attribut mit diesem Namen gibt. Könnte mit der Auswahl im Select auch ausgeblendet werden.\n Umgekehrt würde das ganze so aussehen:\nStatement:\n1  SELECT * FROM person RIGHT JOIN beruf ON person.beruf_id = beruf.beruf_id;   Resultat:\n   vorname nachname alter beruf_id beruf_id berufsbezeichnung     Rolf Ringer 30 1 1 Lehrer/in   null null null null 2 Informatiker/in     beruf_id ist doppelt, da es in beiden Tabellen ein Attribut mit diesem Namen gibt. Könnte mit der Auswahl im Select auch ausgeblendet werden.\n Full Join Der Full Join ist sehr eng mit dem Left und Right Join verwandt. Jetzt werden jedoch alle Werte zurückgegeben. Wenn kein Gegenstück zu einem Wert vorhanden ist, werden diese gleich wie beim Left und Right Join mit null angegeben. Grafisch sieht das ganze so aus:\nQuelle: https://www.geeksforgeeks.org/sql-join-set-1-inner-left-right-and-full-joins/\nDas Statement würde schlussendlich so aussehen:\n1  SELECT * FROM tabelle_a FULL JOIN tabelle_b ON tabelle_a.id = tabelle_b.id;   Mit dem vorherigen Beispiel würde das Resultat so aussehen:\nPerson:\n   vorname nachname alter beruf_id     Rolf Ringer 30 1   Loris Liechti 21 40    Beruf:\n   beruf_id berufsbezeichnung     1 Lehrer/in   2 Informatiker/in    Resultat:\n   vorname nachname alter beruf_id beruf_id berufsbezeichnung     Rolf Ringer 30 1 1 Lehrer/in   null null null null 2 Informatiker/in   Loris Liechti 21 40 null null     beruf_id ist doppelt, da es in beiden Tabellen ein Attribut mit diesem Namen gibt. Könnte mit der Auswahl im Select auch ausgeblendet werden.\n Aggregationen \u0026 weiteres In diesem Abschnitt gehen wird auf Aggregationen und weitere wichtige Syntax-Elemente ein. Aggregationen in SQL sind Funktionen, die verwendet werden, um zusammengefasste Informationen aus großen Datenmengen zu erhalten. Dadurch wird es einfacher, die Daten zu analysieren und Muster oder Trends zu erkennen.\nCount Die Aggregation Count zählt wie viele Resultate das beim Query zurückgegeben werden. Count funktioniert bei allen Datentypen gleich und muss nicht angepasst werden. Hier ein Beispiel zu Count:\nAusgangstabelle Person:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 18 Maurer/in   Leo Leonidas 35 null    Statement:\n1  SELECT COUNT(*), COUNT(beruf) FROM person;   Resultat:\n   count(*) count(beruf)     5 4    Aus dem Resultat lässt sich schliessen, dass NULL-Werte im Count nicht beachtet werden.\nMax/Min Die Aggregationen Max und Min sind logischerweise zum Finden des grössten und kleinsten Wertes. Beide funktionieren bei allen Datentypen, jedoch haben sie beispielsweise bei einem String einen anderen Weg das Maximum und Minimum zu finden. Dort wird anhand einer Collation (Sortierungsregel) das Maximum und Minimum bestimmt. Bei normalen Zahlen sieht es so aus:\nAusgangstabelle Person:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 18 Maurer/in   Leo Leonidas 35 null    Statement:\n1  SELECT MAX(alter), MIN(alter) FROM person;   Resultat:\n   max(alter) min(alter)     52 13    Sum Sum summiert die Werte einer Spalte. Im Gegensatz zu den vorherigen Aggregationen funktioniert Sum nur mit Zahlenwerten. Bei Strings oder ähnlichem wird ein Fehler zurückgegeben. Hier ein Beispiel zur Verwendung von Sum:\nAusgangstabelle Person:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 18 Maurer/in   Leo Leonidas 35 null    Statement:\n1  SELECT SUM(alter) FROM person;   Resultat:\n   sum(alter)     144    Avg Um den Durchschnitt von Zahlen zu finden wird die Funktion AVG verwendet. Gleich wie Sum funktioniert Avg nur mit Zahlen. Hier ein Beispiel zu avg:\nAusgangstabelle Person:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 18 Maurer/in   Leo Leonidas 35 null    Statement:\n1  SELECT AVG(alter) FROM person;   Resultat:\n   avg(alter)     28.8    Order By Das Keyword Order By ist zum Sortieren des Resultats sehr nützlich. Zusammen mit ASC (=Ascending, Aufsteigend) und DESC (=Descending, Absteigend) kann das Resultat auf verschiedenste Weisen nach einem oder mehreren Attributen sortiert werden. Standardmässig verwendet Order By ASC, daher kann das ASC im Query auch weggelassen werden. Beispiel zu Order By:\nAusgangstabelle Person:\n   vorname nachname alter beruf     Anja Ackermann 13 Schüler/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 18 Maurer/in   Leo Leonidas 35 null    Statement ASC:\n1  SELECT vorname, alter FROM person ORDER BY alter ASC;   Resultat:\n   vorname alter     Anja 13   Max 18   Fritz 26   Leo 35   Hans 52    Statement DESC:\n1  SELECT vorname, alter FROM person ORDER BY alter DESC;   Resultat:\n   vorname alter     Hans 52   Leo 35   Fritz 26   Max 18   Anja 13    Group By Mit Group By können Tupel mit gleichen Werten bei einem Attribut zusammen geführt werden, um beispielsweise in einem Count gezählt zu werden. Wie bei Order By kann ein Resultat mehrfach gruppiert werden. Hier ein einfaches Beispiel zu Order By:\nAusgangstabelle Person:\n   vorname nachname alter beruf     Anja Ackermann 13 Hochbauzeichner/in   Fritz Fischer 26 Pilot/in   Hans Hansen 52 Hochbauzeichner/in   Max Mustermann 18 Pilot/in   Leo Leonidas 35 Pilot/in    Statement:\n1  SELECT COUNT(*), beruf FROM person GROUP BY beruf;   Resultat:\n   count(*) beruf     2 Hochbauzeichner/in   3 Pilot/in    ","categories":"","description":"","excerpt":"Ziele  Du weisst wofür SQL verwendet wird Du kennst die verschiedenen …","ref":"/docs/database/02_sql-syntax/","tags":"","title":"SQL Syntax"},{"body":"Übung 1 In der ersten Übung sollst du anhand eines Textes ein ERD erstellen. Du sollst für einen Kunden ein ERD für einen Online-Shop erstellen. Der Kunde gibt dir folgende Informationen:\nDer Online-Shop verfügt über Produkte, Kunden und Bestellungen. Ein Kunde kann mehrere Produkte bestellen, und eine Bestellung kann mehrere Produkte enthalten. Die Produkte haben Eigenschaften wie Name, Beschreibung und Preis.\nHier sind einige grundlegende Informationen, die dir helfen sollen, ein ERD für den Online-Shop zu erstellen:\n Produkte:  Jedes Produkt hat eine eindeutige Produkt-ID, einen Namen, eine Beschreibung und einen Preis.   Kunden:  Jeder Kunde hat eine eindeutige Kunden-ID, einen Vornamen, einen Nachnamen, eine Adresse und eine E-Mail-Adresse.   Bestellungen:  Jede Bestellung hat eine eindeutige Bestell-ID, ein Bestelldatum und ist einem bestimmten Kunden zugeordnet.   Bestellpositionen:  Eine Bestellung kann mehrere Positionen enthalten, und jede Position ist einem bestimmten Produkt zugeordnet. Eine Position enthält Informationen wie die Produktmenge.    Erstelle das ERD mithilfe von Draw.io so, dass die 3NF erreicht wird. Schaue anschliessend das fertige ERD mit einem Coach an, um Feedback dazu zu erhalten.\nÜbung 2 Erstelle anhand dieses ERDs eine Datenbank. Verwende hierbei die deiner Meinung nach richtigen Datentypen. Die Datenbank soll die 3NF erreichen. Achtung! das ERD ist nicht in der 3NF. Schau deine fertige Datenbank mit einem Coach an.\nÜbung 3 In dieser Übung geht es darum, mit deinen SQL-Kenntnissen einen Mord zu lösen. Ziel ist es, dass du alle Rätsel löst und das letzte Query mit einem Coach anschaust. Beim Lösen empfiehlt es sich Zwischenschritte aufzuschreiben, um die Übersicht zu behalten. Falls du diese Zwischenschritte auch mit einem Coach anschauen möchtest, ist dies auch möglich. SQL Murder Mystery\n","categories":"","description":"","excerpt":"Übung 1 In der ersten Übung sollst du anhand eines Textes ein ERD …","ref":"/labs/database/01_sql_syntax/","tags":"","title":"SQL Syntax"},{"body":"Ziele  Ich weiss, was Variablen sind. Ich kann eine Variable deklarieren und initialisieren.  Variablen Auf der letzten Seite hast du ein kleines “Hello World” geschrieben, welches den Text “Hello, world!” in der Konsole ausschreibt. Stelle sicher, dass dieses Programm bei dir auch läuft.\nÄndere dann den Code leicht ab in diesen und führe ihn aus:\n1 2 3 4 5 6 7  public class HelloWorld { public static void main(String[] args) { var nachricht = \"Hello, world!\"; System.out.println(nachricht); } }   In diesem Beispiel haben wir den Text, den wir ausgeben wollen (“Hello, world!\"), in eine sogenannte “Variable” mit dem Namen nachricht ausgelagert:\n1  var nachricht = \"Hello, world!\";   Aber was macht dieser Code?\n Mit dem Keyword var teilen wir mit, dass wir eine neue Variable definieren. Mit var nachricht deklarieren wir eine neue Variable mit dem Namen nachricht. Mit dem =-Operator teilen wir mit, dass wir der Variable den Wert von der rechten Seite zuweisen möchten. Die Variable nachricht wird dann also den Wert \"Hello, world!\" enthalten. Mit dem Semikolon (\";\") teilen wir mit, dass diese Anweisung (also die Zuweisung der Variable) abgeschlossen ist.  Aber was genau bringt mir das jetzt?\n Variablen werden dazu verwendet, um Werte zu speichern und später ein- oder mehrmals darauf zuzugreifen.   Möchtest du beispielsweise diesen Text 5 mal ausgeben, dann könntest du das wie folgt tun:\n1 2 3 4 5 6 7 8 9 10 11  public class HelloWorld { public static void main(String[] args) { var nachricht = \"Hello, world!\"; System.out.println(nachricht); System.out.println(nachricht); System.out.println(nachricht); System.out.println(nachricht); System.out.println(nachricht); } }   Deklaration Bevor eine Variable verwendet werden kann, muss das Programm diese Variable kennen. Dies tust du, indem du sie “deklarierst”. Unter der Deklaration einer Variable versteht man das erste “Erwähnen” einer Variable. In Java bedeutet dies, dass der Typ der Variable festgelegt wird.\nFormal gilt:\n1  \u003cTyp-der-Variable\u003e \u003cVariablen-Name\u003e;   Wir geben also den Datentyp und den Namen der Variable an.\nIm vorherigen Beispiel hatten wir eine Variable so definiert:\n1  var nachricht = \"Hello, world!\";   Das Keyword var ist ein neueres Feature von Java, das den Typ erratet. Normalerweise gibt man stattdessen den Typ der Variable an:\n1  String nachricht;   Bei der Variable nachricht ist also String der Typ. String bedeutet, dass es sich hierbei um einen Text - also eine “Zeichenkette” - handelt.\nDer Wert selbst muss bei der Deklaration nicht zwingend festgelegt werden. Zur Laufzeit (also wenn das Programm läuft) wird dann für die Variable einen Bereich im Arbeitsspeicher (RAM) reserviert. Hier werden später die Werte, die der Variablen zugewiesen werden, gespeichert. Die Grösse des Speicherbereichs hängt vom Typ der Variable ab.\nInitialisierung Unter dem Begriff Initialisierung wird die direkte Zuweisen eines Wertes bei der Deklaration einer Variablen verstanden. Lokale Variablen (Variablen, die lediglich innerhalb einer Methode gültig sind) müssen initialisiert werden, bevor sie verwendet werden können.\nFormal wird wie folgt eine Variable initialisiert (inkl. Deklaration):\n1  \u003cTyp-der-Variable\u003e \u003cVariablen-Name\u003e = \u003cWert-der-Variable\u003e;   Hier ein kleines Beispiel, in welchem der Variable number den Wert 3 zuweisen und ausgeben:\n1 2 3 4  public static void main(String[] args) { int number = 3; System.out.println(number); }   Nachfolgend ein Beispiel, in welchem versucht wird, zwei Zahlen zu addieren. Der erste Summand firstSummand hat den Wert 1, beim zweiten Summand secondSummand wird kein Wert zugewiesen:\n1 2 3 4 5 6  public static void main(String[] args) { int firstSummand = 1; int secondSummand; int sum = firstSummand + secondSummand; System.out.println(sum); }   Weil die Variable secondSummand nicht initialisiert wurde, kann die Zuweisung int sum = firstSummand + secondSummand folglich nicht funktionieren. Deswegen führt dieser Code zu dieser Fehlermeldung:\n1  error: variable secondSummand might not have been initialized.   Um dieses Problem zu lösen, muss die Variable secondSummand initialisiert (also einen Wert zugewiesen) werden:\n1 2 3 4 5 6  public static void main(String[] args) { int firstSummand = 1; int secondSummand = 2; int sum = firstSummand + secondSummand; System.out.println(sum); }   Deklaration mit Initialisierung Wir können eine Variable nacheinander deklarieren und dann initialisieren oder beides zusammen:\n1 2 3 4  int number; // 1. Deklaration number = 2; // 2. Initialisierung  int number = 2; // beides in einer Zeile   Namensgebung Variablen dienen dazu, Werte zu speichern. Zur Benennung von Variablen gibt es vier Regeln:\n Variablennamen beginnen mit einem Kleinbuchstaben. Ein Variablenname darf die Buchstaben A-Z und a-z enthalten. Ein Variablenname darf beliebige Zahlen von 0-9 enthalten, nicht aber am Anfang. Ein Variablenname darf die Sonderzeichen $ und _ enthalten.  Der Name einer Variable sollte so gewählt werden, dass klar ist, welcher Wert darin gespeichert wird. Als Beispiel wählen wir den Namen sum für eine Variable, welche das Resultat einer Addition enthält.\nLernvideo Wenn du dir die Erklärung noch mit einem Video genauer anschauen möchtest, empfiehlt dir das Coaching-Team dieses Video. Relevant sind nur die Themen bis 4:25.\n","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/02_variables/","tags":"","title":"Variablen in Java"},{"body":"","categories":"","description":"Labs zu Typescript\n","excerpt":"Labs zu Typescript\n","ref":"/labs/web/typescript/","tags":"","title":"Typescript Labs"},{"body":"Konfigurationsdatei für TypeScript-Projekte Die tsconfig.json-Datei ist eine Konfigurationsdatei für TypeScript-Projekte. Sie wird verwendet, um verschiedene Einstellungen für den TypeScript-Compiler festzulegen. Wenn sich die tsconfig.json-Datei im Stammverzeichnis eines Projekts befindet, werden diese Einstellungen automatisch von jeder TypeScript-Datei im Projekt übernommen.\nHier sind einige der wichtigsten Einstellungen, die in der tsconfig.json-Datei vorgenommen werden können:\n compilerOptions: Dieser Abschnitt enthält die Compiler-Optionen, die den Verhalten des TypeScript-Compilers steuern. Einstellungen wie die ECMAScript-Version (target), das Modulsystem (module), den Pfad zum Ausgabeverzeichnis (outDir), den Typen-Check-Modus (strict) und viele andere Optionen können hier konfigurieren werden. include und exclude: Mit diesen Optionen gibt man an, welche Dateien vom Compiler einbezogen bzw. ausgeschlossen werden sollen. Es können Muster (z.B. src/**/*.ts für alles .ts Dateien) verwendet werden, um Dateien zu filtern. extends: Diese Option ermöglicht es, eine andere tsconfig.json-Datei als Basis zu verwenden und ihre Einstellungen zu erweitern. Dies ist nützlich, wenn eine gemeinsame Konfiguration für mehrere Projekte vorhanden ist und nur spezifische Einstellungen in der aktuellen Datei ändern möchten. files: Diese Option ermöglicht es, explizit eine Liste von Dateien anzugeben, die vom Compiler verarbeitet werden sollen. Dies wird normalerweise verwendet, wenn die include-Option nicht verwendet werden soll und nur bestimmte Dateien im Projekt berücksichtigt werden sollen. references: Mit dieser Option können Referenzen zu anderen Projekten angegeben werden, um die Abhängigkeiten zwischen den Projekten zu definieren. Dies ist nützlich, wenn mehrere TypeScript-Projekte existieren und diese miteinander verknüpfen werden sollen.  Eine der wichtigsten compilerOptions ist die strict-Option. Diese ist eine Sammlung von Compiler-Optionen, welche aktiviert werden können, um die strenge Überprüfung von Typen und Codequalität sicherzustellen. Wenn die strict-Option auf true gesetzt wird, werden mehrere einzelne Compiler-Optionen aktiviert, um die Typsicherheit zu verbessern und potenziell unsichere Codepraktiken zu verhindern.\nHier sind einige der wichtigsten Compiler-Optionen, die von der strict-Option in der tsconfig.json-Datei aktiviert werden:\n strictNullChecks: Stellt sicher, dass null und undefined nur auf Nullable-Typen zugewiesen werden können. Dadurch werden potenzielle Fehler vermieden, wenn auf Eigenschaften oder Methoden von Null- oder Undefined-Werten zugegriffen wird. noImplicitAny: Verhindert, dass Variablen implizit den any-Typ annehmen. Dadurch wird man dazu gezwungen, explizite Typen für Variablen zu definieren und den any-Typ so weit wie möglich zu vermeiden. strictFunctionTypes: Erzwingt die Kompatibilität von Funktionstypen, einschliesslich der Rückgabetypen von Funktionen. Dadurch werden Fehler vermieden, wenn Funktionen mit inkompatiblen Typen zugewiesen oder aufgerufen werden. strictPropertyInitialization: Stellt sicher, dass alle Eigenschaften von Klassen explizit initialisiert werden, entweder in ihrem Deklarationsabschnitt oder im Konstruktor. Dadurch wird verhindert, dass unbeabsichtigt auf nicht initialisierte Eigenschaften zugegriffen wird. strictBindCallApply: Überprüft die Verwendung von bind, call und apply auf Funktionen und stellt sicher, dass die Parameter und Rückgabewerte korrekt typisiert sind. noImplicitThis: Stellt sicher, dass this in Funktionen explizit typisiert wird, um Fehler bei der Verwendung zu vermeiden.  ","categories":"","description":"Modul #F5 - TypeScript - TsConfig\n","excerpt":"Modul #F5 - TypeScript - TsConfig\n","ref":"/docs/web/typescript/03_ts_config/","tags":"","title":"tsconfig Datei"},{"body":"Aufgaben Aufgabe 1 Als Beispiel zur Verwendung von NgRx, setzen wir ein neues Angular-projekt auf und schreiben eine Anwendung mit einem Counter, der Inkrementier, Dekrementiert und Resettet werden kann.\nEinrichten Als Erstes muss man ein neues Angular Projekt aufsetzen.\nDanach NgRx installieren.\nNun erstellt man der Übersicht halber noch zwei Ordner names actions und reducers. Darin werden dann alle Actions und Reducer erstellt.\nActions erstellen Als Erstes werden die Actions definiert, welche man alle für dieses Projekt benötigt. Wie bei der Einleitung erwähnt sind das Inkrementieren, Dekrementieren und Resetten. Dazu erstellt man nun ein neues Typescript File namens counter.actions.ts. Lagere die Action Types in ein Enum aus.\nVersuche selbständig auf eine Lösung zu kommen, bevor du dir die Lösung anschaust.\n Lösung (click to expand) 1 2 3 4 5  export enum ActionTypes { INCREMENT = '[Counter Component] Increment', DECREMENT = '[Counter Component] Decrement', RESET= '[Counter Component] Reset' }   1 2 3 4 5  import { createAction } from '@ngrx/store'; export const increment = createAction(ActionTypes.INCREMENT); export const decrement = createAction(ActionTypes.DECREMENT); export const reset = createAction(ActionTypes.RESET);    Reducer erstellen Nun muss man eine Reducer-Funktion definieren, um Änderungen im Zählerwert basierend auf den bereitgestellten Aktionen zu verarbeiten. Erstelle dazu ein neues Typescript File namens counter.reducer.ts und setze die Funktion darin um.\nVersuche selbständig auf eine Lösung zu kommen, bevor du dir die Lösung anschaust.\n Lösung (click to expand) 1 2 3 4 5 6 7 8 9 10 11  import { createReducer, on } from '@ngrx/store'; import { increment, decrement, reset } from './counter.actions'; export const initialState = 0; export const counterReducer = createReducer( initialState, on(increment, (state) =\u003e state + 1), on(decrement, (state) =\u003e state - 1), on(reset, (state) =\u003e 0) );    Component erstellen Erstelle mittels ng-Befehl einen neuen Component namens my-counter innerhalb des app-Ordners. Das HTML soll einen Titel besitzen, drei Buttons für jede Actions und eine Anzeige für den aktuellen Counter. Im Typescript soll für jeden Button eine Methode erstellt werden, zudem ein Observable welches den aktuellen Count beinhaltet. Das Observable soll mit dem Wert des Stores verbunden sein.\nVersuche selbständig auf eine Lösung zu kommen, bevor du dir die Lösung anschaust.\n Lösung (click to expand) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  import { Component } from '@angular/core'; import { Store } from '@ngrx/store'; import { Observable } from 'rxjs'; import { increment, decrement, reset } from '../counter.actions'; @Component({ selector: 'app-my-counter', templateUrl: './my-counter.component.html', }) export class MyCounterComponent { count$: Observable\u003cnumber\u003e; constructor(private store: Store\u003c{ count: number }\u003e) { this.count$ = store.select('count'); } increment() { this.store.dispatch(increment()); } decrement() { this.store.dispatch(decrement()); } reset() { this.store.dispatch(reset()); } }   1 2 3 4 5 6 7 8  \u003cbutton (click)=\"increment()\"\u003eIncrement\u003c/button\u003e \u003cdiv\u003eCurrent Count: {{ count$ | async }}\u003c/div\u003e \u003cbutton (click)=\"decrement()\"\u003eDecrement\u003c/button\u003e \u003cbutton (click)=\"reset()\"\u003eReset Counter\u003c/button\u003e    AppModule anpassen Das app.module.ts muss nun noch mit dem Store und Reducer ergänzt werden.\nVersuche selbständig auf eine Lösung zu kommen, bevor du dir die Lösung anschaust.\n Lösung (click to expand) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import { BrowserModule } from '@angular/platform-browser'; import { NgModule } from '@angular/core'; import { AppComponent } from './app.component'; import { StoreModule } from '@ngrx/store'; import { counterReducer } from './counter.reducer'; import { MyCounterComponent } from './my-counter/my-counter.component'; @NgModule({ declarations: [AppComponent, MyCounterComponent], imports: [BrowserModule, StoreModule.forRoot({ count: counterReducer })], providers: [], bootstrap: [AppComponent], }) export class AppModule {}    Im AppComponent anzeigen Der neue Component soll nun mit dem app.component.html verknüpft werden, sodass der Inhalt des Components sichtbar wird.\nVersuche selbständig auf eine Lösung zu kommen, bevor du dir die Lösung anschaust.\n Lösung (click to expand) 1 2 3  \u003ch1\u003eNgRx Tutorial\u003c/h1\u003e \u003capp-my-counter\u003e\u003c/app-my-counter\u003e    Aufgabe 2 Entwickle eine Angular-Anwendung für einen Online-Shop mit den folgenden Funktionen und Components: Produktübersicht und Warenkorb. Die Produktdaten sollen als Mockdaten in einem Service gespeichert werden. Implementiere Routing, um zwischen den verschiedenen Ansichten zu navigieren.\nProdukt Attribute  Name Preis  Produktübersicht  Erstelle eine Seite für die Produktübersicht, auf der alle Produkte angezeigt werden. Rufe die Produktdaten aus einem Mock-Datenservice ab und zeige sie an. Implementiere zu jedem Produkt einen Button für das Hinzufügen von Produkten in den Warenkorb.  Warenkorb:  Erstelle eine Seite, auf der die Produkte im Warenkorb angezeigt werden. Verwende NgRx, um den Warenkorbzustand zu verwalten. Definiere Aktionen zum Hinzufügen und Entfernen von Produkten in den Warenkorb. (Verwende Selektoren, um den Zugriff auf den NgRx-Store zu erleichtern.)) Zeige eine Liste der ausgewählten Produkte im Warenkorb an, inklusive Name und Preis. Implementiere einen Button für das Löschen von Produkten aus dem Warenkorb. Füge eine Bestellfunktion hinzu, um den Kaufprozess abzuschliessen (kann eine einfache Bestätigungsnachricht sein).  Aufgabe 3 Erstelle eine Angular-Anwendung für eine TODO-Liste, die das NgRx-Modul verwendet, um den Zustand der Aufgaben zu verwalten. Die Anwendung sollte die folgenden Funktionen enthalten:\nTask Attribute  ID Name Completed  Übersicht  Erstelle eine Seite, auf der die offene (Completed = false) Task (einfach der Name) angezeigt werden. (Verwende Selektoren, um den Zugriff auf die Tasks im NgRx-Store zu erleichtern.) Verwende NgRx, um den Taskzustand zu verwalten. Definiere Aktionen zum Hinzufügen, Entfernen und Complete von Tasks. Implementiere zu jedem Task einen Button für das Complete und Entfernen von Tasks.  Taskerstellungs-Seite  Erstelle auf der Seite eine Unterseite, auf der neue Task erfasst werden können. (Für die Id zu erstellen am einfachsten new Date().getTime() nehmen) Der Name des Tasks soll mittels Reactive Forms eingetragen werden. completed ist immer auf false bei 2einem neuen Task.  ","categories":"","description":"Ein paar zusätzliche/optionale Aufgaben zu NgRx.\n","excerpt":"Ein paar zusätzliche/optionale Aufgaben zu NgRx.\n","ref":"/labs/web/angular_ngrx/01_ngrx/","tags":"","title":"(Zusatz) NgRx Labs"},{"body":"Ziele  Du kennst, die grundlegende Struktur von Angular und kannst diese erläutern.  Grundlegende Struktur einer Angular-Anwendung In Angular gibt es eine definierte Struktur, die von Entwicklern empfohlen wird, um eine konsistente und leicht verständliche Anwendungsentwicklung sicherzustellen.\nDie grundlegende Struktur einer Angular-Anwendung besteht aus folgenden Files:\n  Module: Ein Angular-Modul ist eine Sammlung von Components, Services, Directives und anderen Funktionen, die für eine bestimmte Funktionalität oder einen bestimmten Zweck zusammengefasst werden. Ein Modul wird in der Regel in einer separaten File deklariert und exportiert.\n  Component: Eine Angular-Component ist eine Klasse, die das Verhalten und das Aussehen einer Benutzeroberflächeneinheit definiert. Eine Component besteht aus TypeScript-Fie und einer Vorlage, die das HTML definiert, das die Benutzeroberfläche darstellt. Eine Component kann andere Component enthalten oder sich selbst in andere Component einbetten.\n  Services: Ein Angular-Service ist eine Klasse, die Funktionen und Daten bereitstellt, die von anderen Teilen der Anwendung verwendet werden können. Ein Services kann z.B. eine Datenbankabfrage durchführen, eine REST-API aufrufen oder Benutzerinformationen verwalten.\n  Directives: Eine Angular-Directives ist eine Anweisung, die auf ein HTML-Element angewendet wird, um sein Verhalten oder Aussehen zu ändern. Eine Directives kann z.B. ein Attribut oder eine Struktur sein, die das Verhalten eines HTML-Elements steuert oder ein Template-Element sein, das dynamisch in die Benutzeroberfläche eingefügt wird.\n  Template: Ein Template ist die HTML-Datei, die eine Component darstellt. Es kann auch spezielle Angular-Directives und -Syntax verwenden, um die Interaktivität und Funktionalität der Anwendung zu verbessern.\n  Ordnerstruktur Die Ordnerstruktur in Angular kann nach persönlichen Präferenzen gewählt werden. Jedoch ist die unten folgenden Struktur die gängigste Best-Practices Variante und sollte daher auch immer so angewendet werden. Die Struktur bietet eine klare Trennung der verschiedenen Artefakte einer Angular-Anwendung und fördert die Modularität, Wiederverwendbarkeit und Testbarkeit des Codes.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97  ├── e2e │ └── ... ├── src │ ├── app │ │ ├── components │ │ │ ├── component1 │ │ │ │ ├── component1.component.ts │ │ │ │ ├── component1.component.html │ │ │ │ ├── component1.component.scss │ │ │ │ └── component1.component.spec.ts │ │ │ ├── component2 │ │ │ │ ├── component2.component.ts │ │ │ │ ├── component2.component.html │ │ │ │ ├── component2.component.scss │ │ │ │ └── component2.component.spec.ts │ │ │ └── ... │ │ ├── services │ │ │ ├── service1 │ │ │ │ ├── service1.service.ts │ │ │ │ └── service1.service.spec.ts │ │ │ ├── service2 │ │ │ │ ├── service2.service.ts │ │ │ │ └── service2.service.spec.ts │ │ │ └── ... │ │ ├── directives │ │ │ ├── directive1 │ │ │ │ ├── directive1.directive.ts │ │ │ │ └── directive1.directive.spec.ts │ │ │ ├── directive2 │ │ │ │ ├── directive2.directive.ts │ │ │ │ └── directive2.directive.spec.ts │ │ │ └── ... │ │ ├── shared │ │ │ ├── shared1 │ │ │ ├── shared2 │ │ │ └── ... │ │ ├── models │ │ │ ├── model1.ts │ │ │ ├── model2.ts │ │ │ └── ... │ │ ├── pipes │ │ │ ├── pipe1 │ │ │ │ ├── pipe1.pipe.ts │ │ │ │ └── pipe1.pipe.spec.ts │ │ │ ├── pipe2 │ │ │ │ ├── pipe2.pipe.ts │ │ │ │ └── pipe2.pipe.spec.ts │ │ │ └── ... │ │ ├── guards │ │ │ ├── guard1 │ │ │ │ ├── guard1.guard.ts │ │ │ │ └── guard1.guard.spec.ts │ │ │ ├── guard2 │ │ │ │ ├── guard2.guard.ts │ │ │ │ └── guard2.guard.spec.ts │ │ │ └── ... │ │ ├── modules │ │ │ ├── module1 │ │ │ │ ├── module1.module.ts │ │ │ │ └── module1.module.spec.ts │ │ │ ├── module2 │ │ │ │ ├── module2.module.ts │ │ │ │ └── module2.module.spec.ts │ │ │ └── ... │ │ ├── utilities │ │ │ ├── utility1.ts │ │ │ ├── utility2.ts │ │ │ └── ... │ │ ├── app.component.ts │ │ ├── app.component.html │ │ ├── app.component.scss │ │ ├── app.component.spec.ts │ │ ├── app.module.ts │ │ └── app.routing.module.ts │ ├── assets │ │ ├── images │ │ ├── fonts │ │ └── ... │ ├── styles │ │ ├── _variables.scss │ │ ├── _mixins.scss │ │ ├── main.scss │ │ └── ... │ ├── environments │ │ ├── environment.prod.ts │ │ └── environment.ts │ ├── index.html │ ├── main.ts │ ├── polyfills.ts │ ├── styles.scss │ └── ... ├── angular.json ├── package.json ├── tsconfig.json ├── tslint.json └── ...   ","categories":"","description":"Modul #F6 - Angular - Angular Strukturen\n","excerpt":"Modul #F6 - Angular - Angular Strukturen\n","ref":"/docs/web/angular/02_2_angular_strukturen/","tags":"","title":"Angular Strukturen"},{"body":"Exam - Zeiterfassungs-Dashboard mit JavaScript ergänzen - Einzelarbeit\nBei diesem Exam geht es darum, dass du das Dashboard, welches du im HTML-CSS-Exam geschrieben hast, mit JavaScript-Logik ergänzt.\nDie Seite sollte ungefähr so aussehen:\nZeitangaben aktualisieren Oben links im Zeiterfassungstool ist die aktuelle Zeit zu finden.\nSchreibe ein JavaScript auf dieser Seite, das die aktuelle Zeit oben links anzeigt.  Hinweis:\nUm auf die aktuelle Uhrzeit und auf das Datum zuzugreifen, wirst du sicher auf die Klasse Date zugreifen müssen. Hier findest du mehr Informationen darüber: https://www.w3schools.com/jsref/jsref_obj_date.asp\nDie Kalenderwoche (KW) hinzuzufügen, ist ein bisschen tricky und deswegen optional. Wenn du diese trotzdem hinzufügen möchtest, dann informiere dich bitte zuerst darüber, was genau eine Kalenderwoche ist. Soweit ich weiss, gibt es keine eingebaute Methode, mit der du die Kalenderwoche bekommst, aber du kannst sie berechnen.\nNavigation zuklappen Auf der linken Seite hast du eine Navigation. Das Element für “Abfragen” hat wiederum Elemente untergeordnet. Diese Unterelemente sollten beim Klick auf den Pfeil gegen oben (^) verschwinden/zugeklappt werden.\nSchreibe ein JavaScript, das dem User erlaubt, das \"Abfragen\"-Element zuzuklappen und wenn es zugeklappt ist, wieder aufzuklappen.   Animationen Wenn du möchtest, kannst du dem Ganzen Animationen verleihen:\n der Pfleil dreht sich, jenachdem ob das Element zu- oder aufgeklappt ist das “Berichte”-Element geht langsam nach oben (bzw. der Container mit den Unterelementen wird immer kleiner)  Animationen (bzw. transitions) können sehr einfach mit CSS umgesetzt werden, siehe https://www.w3schools.com/css/css3_transitions.asp.\nDamit du weniger Schwierigkeiten damit hast, hier ein kleiner Tipp: Gib allen CSS-Properties einen Default-Wert. Wenn du z.B. einen Wert ändern möchtest, füge dem Element eine genauere CSS-Klasse mit JavaScript hinzu, welche die entsprechenden Regeln überschreibt. Du kannst einem Element eine Klasse hinzufügen bzw. entfernen mit .classList.toggle(className, show?) (Beispiel: document.getElementById('abfragen').classList.toggle('show-child-elements', true)).\n Dashboard-Daten dynamisch laden Im HTML-CSS-Exam hast du den Text für die Kacheln hartcodiert. Das soll sich nun ändern.\nSchreibe nun ein JavaScript, dass den Inhalt der Kacheln dynamisch befüllt. Dein Script soll die Daten von hier laden: https://raw.githubusercontent.com/it-ninjas/labs/master/static/files/json/dashboard.json  Personen für den Chat dynamisch laden Auf der rechten Seite hast du eine Liste mit Personen für einen Chat. Nun geht es darum, auch diese Liste anhand eines JSONs zu generieren.\nErgänze dein JavaScript so, dass die Namen für die Chat-Liste von hier geladen werden: https://raw.githubusercontent.com/it-ninjas/labs/master/static/files/json/chat.json Zeige die Personen dann zeitlich versetzt an: Füge zuerst die erste Person ein, warte dann ca. 0.3 Sekunden, zeige dann die zweite Person an usw.  Suchfunktion Oben rechts hast du eine “Suche”.\nImplementiere eine Suchfunktion, die nur noch diejenigen Chat-Kontakte anzeigt, wenn der Suchbegriff in deren Namen vorkommt. Implementiere die Suche so, dass die Liste beim Tippen aktualisiert wird.  Refresh-Button Oben rechts gibt es einen Refresh-Button.\nVerändere dein HTML und JavaScript so, dass die Daten neu geladen werden, wenn der User auf diesen Refresh-Button klickt. Neu geladen werden sollen die Zeitangaben, die Kacheln und der Chat Achte darauf, dass du möglichst keine Code-Duplikation hast.  ","categories":"","description":"Erweitere dein eigenes Zeiterfassungs-Dashboard - mit JavaScript.\n","excerpt":"Erweitere dein eigenes Zeiterfassungs-Dashboard - mit JavaScript.\n","ref":"/exams/web/html_css/02_exam_js/","tags":"","title":"Exam zu JavaScript"},{"body":"Auf DOM-Elemente zugreifen Eines der häufigsten Anwendungszwecke von JavaScript ist es, mit Elementen auf einer Website zu interagieren.\nNehmen wir folgendes Code-schnipsel als Beispiel:\n1 2 3 4  \u003cdiv id=\"message-div\"\u003e\u003c/div\u003e \u003cp\u003eThis page has \u003cspan id=\"likes-count\"\u003e0\u003c/span\u003e likes.\u003c/p\u003e \u003cbutton type=\"button\"\u003e+1\u003c/button\u003e   Mit JavaScript möchten wir, dass sich die Zahl im \u003cspan\u003e erhöht. In einem ersten Schritt versuchen wir, auf das \u003cspan\u003e-Element zuzugreifen und eine andere Zahl reinzuschreiben. Das probieren wir direkt in der Konsole des Browsers aus:\n1 2  let span = document.getElementById('likes-count'); span.textContent = 999;   Du wirst sehen, dass sich die Zahl im \u003cspan\u003e tatsächlich verändert hat. Probieren wir aber zuerst, den Code zu verstehen!\n Erläuterung (click to expand)  document ist ein Objekt, das uns im Browser zur Verfügung steht. Dieses Objekt repräsentiert das DOM. Mit diesem document-Objekt können wir auf die Elemente im Browser zugreifen. getElementById(...) ist eine Methode auf diesem document-Objekt. Diese Methode sucht auf der aktuellen Seite ein Element, das die übergebene id besitzt. Das gefundene Element möchten wir in einer Variablen namens span zwischenspeichern. textContent ist ein Feld (= ein Attribut) auf diesem Element, das den Inhalt des Elements (als Text) repräsentiert. Diesen Wert können wir einfach so kopieren.   Mit diesem Code konnten wir die Anzahl Likes auf eine andere Zahl setzen. Nun möchten wir aber, dass sich diese Anzahl um genau 1 erhöht. Dafür benötigen wir noch zwei Zwischenschritte:\n Die aktuelle Zahl auslesen Diese Zahl von einem String in eine Nummer konvertieren Und die erhöhte Zahl ins \u003cspan\u003e schreiben.  Versuche dies zu implementieren, bevor du dir die Lösung ansiehst.\n Lösung (click to expand) Das könnte ungefähr so aussehen: 1 2 3 4  let span = document.getElementById('likes-count'); let likes = parseInt(span.textContent); likes++; span.textContent = likes;   Neu dazugekommen ist\n der Aufruf von parseInt(...). Diese Methode ist standartmässig Global verfügbar und kann somit ohne imports verwendet werden. Diese Methode versucht, den übergeben Wert in eine Ganzzahl (Integer) zu konvertieren. likes++ bedeutet gleich viel wie likes = likes + 1. Damit erhöhen wir die likes-Variable also um 1. Mit span.textContent = likes setzen wir den Text des spans neu. Eine Umwandlung in String ist nicht notwendig.  Versuche das ganze nun mal ohne die parseInt Methode. Du wirst sehen, dass es trotzdem funktioniert. Das liegt daran, dass JS keine “starke” typen (strong types) kennt. Sprich der JS-Interpreter versucht auch einen String als Zahl zu verwenden und wenn es sich wirklich um eine Zahl handelt, funktioniert das auch:\n1 2 3 4 5 6  function onLikeClick() { let span = document.getElementById('likes-count'); let likes = span.textContent; likes++; span.textContent = likes; }   Dies ist aber sehr fragil, daher ist es good practice, die Variablen trotzdem in die korrekten typen umzuwandeln. Gut zu wissen, ist das sich JavaScript teilweise etwas unerwartet verhält.\n Manipulation beim Button-Klick ausführen lassen Nun wollen wir noch, dass das, was wir vorher programmiert haben, dann passiert, wenn der User auf den Button klickt. Ändere die HTML-Seite wie folgt ab:\n1 2 3 4 5 6 7 8 9 10 11 12  ... \u003cbutton type=\"button\" onclick=\"onLikeClick()\"\u003e+1\u003c/button\u003e \u003cscript\u003e function onLikeClick() { let span = document.getElementById('likes-count'); let likes = parseInt(span.textContent); likes++; span.textContent = likes; } \u003c/script\u003e ...   Ein neues Element hinzufügen Manchmal möchtest du ein neues Element auf der Website generieren lassen.\nIm kommenden Beispiel möchten wir so viele Bilder von “Thumbs Ups” (also 👍) wie Likes anzeigen.\nUm das zu erzielen, kannst du die onLikeClick-Funktion wie folgt erweitern:\n1 2 3 4 5 6 7 8  // draw a thumb up for every like: const imgHtml = '\u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/c/ce/Emoji_u1f44d.svg\" alt=\"like\" height=\"25\"\u003e'; let insertHtml = ''; for (let i = 0; i \u003c likes; i++) { insertHtml += imgHtml; } const messageDiv = document.querySelector('div#message-div'); messageDiv.innerHTML = insertHtml;   Dieser Code macht folgendes:\n für jedes Like, wird im \u003cdiv id=\"message-div\"\u003e folgendes Element/Bild hinzugefügt: \u003cimg src=\"https://upload.wikimedia.org/wikipedia/commons/c/ce/Emoji_u1f44d.svg\" alt=\"like\" height=\"25\"\u003e Das HTML für dieses Bild haben wir zuerst in einer Konstante (const) gespeichert. const ist das Gleiche wie let mit dem Unterschied, dass sich dieser Wert nie verändern darf innerhalb dieser Methode. Wenn sich eine Variable nie im definierten Block verändert, so wird empfohlen, const statt let zu verwenden. Die String-Variable insertHtml brauchen wir als Zwischenspeicher, in welcher wir den HTML-String zusammensetzen, welche wir später im HTML/DOM haben möchten. Die for-Schlaufe wird so oft durchlaufen, wie es Likes gab. Das bedeutet, dass pro Like ein Bild ins insertHtml kopiert wird. Anschliessend holen wir uns das \u003cdiv id=\"message-div\"\u003e via JavaScript. Wir hätten hier auch document.getElementById('message-div') verwenden können. Aber querySelector funktioniert hier auch. Die querySelector-Methode akzeptiert ein CSS-Selektor und gibt dann das Element zurück, das damit angesprochen wird. In diesem Beispiel war div#message-div ein möglicher CSS-Selektor (wie #message-div eigentlich auch), der das \u003cdiv id=\"message-div\" anspricht. Als letztes verändern wir das HTML dieses \u003cdiv\u003es, indem wir das innerHTML-Feld neu setzen.  Element können jedoch nicht nur mit querySelector hinzugefügt werden, sondern auh mit document.createElement(). Mit der document.createElement()-Methode kann man neue HTML-Elemente dynamisch erstellen und diese im DOM hinzufügen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eJavaScript Create Element\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eJavaScript Create Element\u003c/h1\u003e \u003cdiv id=\"container\"\u003e \u003c!-- Hier werden die neuen Elemente hinzugefügt --\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e   1 2 3 4 5 6 7  var container = document.getElementById(\"container\"); // Erstelle ein neues \u003cp\u003e-Element var paragraph = document.createElement(\"p\"); paragraph.textContent = \"Dies ist ein neuer Absatz.\"; // Füge das \u003cp\u003e-Element dem \u003cdiv\u003e-Element hinzu container.appendChild(paragraph);   Super, nun hast du schon ein paar Dinge auf deiner Seite mit JavaScript dynamisch verändert.\nBitte denke daran, dass das Verwenden von .innerHTML als eine Art “Holzfäller-Methode” angesehen wird. JavaScript bietet hierfür bereits eine elegantere Möglichkeit, die aber oft viel zu umständlich ist. Bitte schaue dir diese trotzdem kurz an: https://www.w3schools.com/js/js_htmldom_nodes.asp\n","categories":"","description":"Modul #F4 - JavaScript - Website mit Hilfe von JavaScript verändern.\n","excerpt":"Modul #F4 - JavaScript - Website mit Hilfe von JavaScript verändern.\n","ref":"/docs/web/javascript/03_js_dom_manipulation/","tags":"","title":"Mit JavaScript das DOM verändern"},{"body":"Einführung Javascript ist eine interpretierte (nicht kompilierte) “cross-platform” Sprache. Sie kann Client- wie auch Server-seitig eingesetzt werden.\n","categories":"","description":"Die Programmiersprache jedes Browsers kennenlernen.\n","excerpt":"Die Programmiersprache jedes Browsers kennenlernen.\n","ref":"/docs/web/javascript/","tags":"","title":"JavaScript"},{"body":"Exam 2 - Angular - Einzelarbeit\nAusgangslage In deinem Unternehmen werden die Arbeitszeiten immer noch im Excel erfasst. Dein Linienvorgesetzter ist mit diesem Excel-File nicht mehr so zufrieden. Er verlangt von dir, dass du ein Angular-Projekt realisieren sollst, welches das aktuelle Excel-File ablöst. Designtechnisch ist alles dir überlassen. Du kannst entweder mit einem lokalen Projekt arbeiten oder eine Backendschnittstelle basteln.\nAnforderungen Funktionale Anforderungen Dein Linienvorgesetzter gibt dir folgende funktionale Anforderungen für das Arbeitszeitprogramm:\n Die Mittagszeit von 30 Minuten muss gemacht werden. Sofern über 9h gearbeitet wird, muss mindestens 1h Mittagspause gemacht werden. Man kann entweder von Hand oder mit Hilfe eines QR-Codes ein- und ausstempeln. Es gibt drei Rollen: Admin, Vorgesetzter und Mitarbeiter.\nDer Admin kann neue Mitglieder (Admin, Vorgesetzter, Mitarbeiter) hinzufügen und den Vorgesetzten zuweisen. Sieht aber keine Zeitaufschreibung ausser die eigene. Der Vorgesetzte sieht die eigene Zeit, wieauch die Zeit seiner Mitarbeiter. Der Mitarbeiter sieht nur seine eigene Zeit. Der Admin kann neue Auftragszeiten (Projekt X, Projekt Y, Daily Business, etc.) hinzufügen, welche von allen Mitarbeitern gewählt werden können. Jedes Mitglied muss bei der Zeitaufschreibung ein Auftrag wählen, wo er gerade arbeitet. Diese Projekte können favorisiert werden, damit man sie nicht jedes Mal wählen muss. Jedes Mitglied kann zudem diverse Zeitcodes anwenden, welche vom Admin hinzugefügt werden. Das sind beispielsweise: Krank, Kompensation, Berufsschule, Ferien,etc. Man kann die Zeiten im späteren Verlauf noch ändern. Hierzu werden aber alle geänderten Zeiten (Datum bearbeitung, etc.) angezeigt. Jedes Mitglied kann sein Passwort (und Profilbild) ändern. Der Admin kann die Daten jedes Mitglieds ändern(Nachname, Vorname, Abteilung, etc.) oder löschen.  Nicht-funktionale Anforderungen  Das System muss innerhalb von 100ms die Daten liefern. IT-Sicherheit: Das System bockiert nach drei Fehlrversuchen die Anmeldung. Abfragen können nur mit einem JWT ausgeführt werden.  Daten Mitglieder-Daten Die Mitglieder bestehen aus folgenden Werten:\n Nachname Vorname Passwort(muss bei der ersten Anmeldung geändert werden) Abteilung Arbeitszeit(bspw. 100% oder 8h) Rolle (nicht zwingend Profilbild)  Zeit-Daten Die Zeit besteht aus folgenden Werten:\n Von Bis Datum  Auftragszeit-Daten Die Auftragszeit besteht aus folgenden Werten:\n Auftragsnummer Text  Zeitcodes-Daten Die Zeitcodes besteht aus folgenden Werten:\n Nummer Beschreibung  - Hinweis:\nBeziehungen zwischen Daten nicht vergessen.\nBei Fragen ungeniert melden.\n","categories":"","description":"Einfache Aufgaben zu den Basics von Angular.\n","excerpt":"Einfache Aufgaben zu den Basics von Angular.\n","ref":"/exams/web/angular/01_2_angular_exam/","tags":"","title":"Exam zu den Angular-Basics"},{"body":"Schreibe ein Programm, welches ein Adressbuch implementiert. Die Anwendung soll die einzelnen Kontakte der Personen in ein Adressbuch eintragen, wenn die entsprechende Methode aufgerufen wurde.\nEine Person besitzt\n einen Namen eine Email-Adresse eine Telefonnummer  Das Adressbuch soll\n die Anzahl der Kontakte im Adressbuch zurückliefern können einen neuen Kontakt in das Adressbuch einfügen einen Kontakt im Adressbuch durch den Namen finden einen Kontakt aus dem Adressbuch über die E-Mail-Adresse entfernen  Generell gilt die Regel, dass jede E-Mail-Adresse einzigartig sein muss\n","categories":"","description":"Aufgabe zu Modul #J2 - OOP - Adressbuch\n","excerpt":"Aufgabe zu Modul #J2 - OOP - Adressbuch\n","ref":"/labs/java/java-oop/03_adressbuch/","tags":"","title":"Adressbuch"},{"body":"Ziele  Ich kenne die HTML-Tags \u003ch1\u003e und \u003cp\u003e und weiss, was ihre Aufgaben sind. Ich kenne die allgemeine Struktur von HTML-Tags.  Erklärung zum vorherigen Beispiel Im vorherigen Beispiel hatten wir diesen Code:\n1 2 3 4 5 6  \u003ch1\u003eKleiner Witz\u003c/h1\u003e \u003cp\u003eWie viele Softwareentwickler braucht man, um eine Glühbirne auszuwechseln?\u003c/p\u003e \u003cp\u003eKeinen, das ist ein Hardware-Problem!\u003c/p\u003e   Du hast gesehen, dass das zwischen \u003ch1\u003e und \u003c/h1\u003e wie ein Titel formatiert wurde, und dass der Text zwischen \u003cp\u003e und \u003c/p\u003e in eigenen Abschnitten dargestellt wurde.\nHTML Tags Du hast schon die ersten “HTML Tags” kennengelernt: \u003ch1\u003e und \u003cp\u003e. \u003ch1\u003e wird für Titel und \u003cp\u003e wird für Paragrafen verwendet.\nHTML Tags sind wie Keywords (Schlüsselbegriffe), die beschreiben, wie der Browser deren Inhalt (Content) formatiert bzw. darstellt.\nDie Tags inklusiv deren Inhalt nennen wir “Element”. Das Element ist wie folgt aufgebaut:\nJedes Element beginnt mit einem “Opening Tag”. Zwischen diesem und dem Closing Tag befindet sich der Content, der auf Grundlage des Tags formatiert wird. Der Content wird oft “InnerText” oder “InnerHtml” genannt. Das Closing Tag hat immer vor dem Tag-Namen ein “/”, das symbolisiert, dass es sich um ein Closing Tag handelt.\nIm Opening Tag können Attribute vorkommen, die den Tag “konfigurieren”. Eine solche Konfiguration beinhaltet in den meisten Fällen ein Attribut-Key und -Value, welche mit einem Gleichzeichen verbunden werden. Der Attribut-Value (Wert) beginnt und endet IN JEDEM FALL mit einem Anführungs- bzw. Schlusszeichen, auch wenn der Wert eine Zahl oder true bzw. false ist.\n","categories":"","description":"Modul #F3 - HTML und CSS - Der Aufbau eines HTML-Tags\n","excerpt":"Modul #F3 - HTML und CSS - Der Aufbau eines HTML-Tags\n","ref":"/docs/web/html_css/03_html_basics/","tags":"","title":"Basics zu HTML"},{"body":"Ziele  Du weisst wofür Constraints verwendet werden Du kennst die wichtigsten Constraints Du kannst ein Constraint erstellen  Was ist ein Constraint? Ein Constraint in SQL ist dazu da den Inhalt eines Attributs weiter zu beschränken. Theoretisch ist die Angabe des Datentyps bereits eine Art Constraint, da bestimmt wird was für ein Wertebereich eingefügt werden darf. Ein Constraint kann entweder beim Erstellen der Tabelle oder mit einem ALTER-Statement hinzugefügt werden. Constraints können sich auf eine Tabelle oder eine einzelne Spalte beziehen. Ebenso können mehrere Constraints, sowohl bei Tabellen als auch bei Spalten, gleichzeitig angewendet werden.\nNot Null Das Not Null Constraint legt fest, dass ein Attribut nicht Null, spricht nicht leer sein darf. Das kann beispielsweise bei einer Id, die zum Verbinden von Tabellen verwendet wird, eingesetzt werden, damit es immer einen Wert gibt. Hier ein Beispiel wie ein Not Null Constraint erstellt wird:\n1  CREATE TABLE person(personen_id number NOT NULL, vorname varchar(255), nachname varchar(255));   1 2 3 4 5 6 7 8  -- Funktioniert nicht, da die Id nicht null sein darf. INSERT INTO person VALUES (null, null, null); -- Funktioniert nicht, da keine Id hinzugefügt wird. INSERT INTO person(vorname, nachname) VALUES (\"Peter\", \"Fischer\"); -- Funktioniert, da die Id angegeben wird und die anderen Attribute null sein dürfen. INSERT INTO person VALUES (1, null, null);   Unique Das Unique Constraint bedingt, dass jeder eingefügte Wert einzigartig, also noch nicht in der Spalte oder in der Tabelle, vorhanden. So können beispielsweise duplikationen von Ids verhindert werden. Hier ein Beispiel zum Unique Constraint:\n1  CREATE TABLE person(personen_id number UNIQUE, vorname varchar(255), nachname varchar(255));   Beispieldaten Person:\n   personen_id vorname nachname     1 Hans Peterson   2 Peter Fritschi   3 Fritz Hansen    1 2 3 4 5  -- Funktioniert nicht, da bereits eine Person mit der personen_id 2 besteht. INSERT INTO person VALUES (2, \"Ueli\", \"Mueli\"); -- Funktioniert, da keine Person mit der personen_id 4 besteht. INSERT INTO person VALUES (4, \"Karl\", \"Karlsen\");   Primary Key Das Primary Key Constraint kombiniert prinzipiell die Constraints Unique und Not Null zu einem. Gerade für Ids ist dieses Constraint praktisch, da in eigentlich jedem Fall eine Id bestehen sollte und sie auch eindeutig sein sollte. Hier ein beispiel zum Primary Key:\n1  CREATE TABLE person(personen_id number PRIMARY KEY, vorname varchar(255), nachname varchar(255));   Beispieldaten Person:\n   personen_id vorname nachname     1 Hans Peterson   2 Peter Fritschi   3 Fritz Hansen    1 2 3 4 5 6 7 8  -- Funktioniert nicht, da keine personen_id angegeben wurde. INSERT INTO person VALUES (null, \"Philippe\", \"Pfister\"); -- Funktioniert nicht, da bereits eine Person mit der personen_id 2 besteht. INSERT INTO person VALUES (2, \"Ueli\", \"Mueli\"); -- Funktioniert, da keine Person mit der personen_id 4 besteht. INSERT INTO person VALUES (4, \"Karl\", \"Karlsen\");   Foreign Key Das Foreign Key Constraint stellt sicher, dass der Wert in einer Spalte einer Tabelle auf einen existierenden Wert in einer anderen Tabelle verweist. Das bedeutet, dass die Beziehungen zwischen den Tabellen beibehalten werden und Datenkonsistenz gewährleistet wird. Ein Fremdschlüssel wird durch das Verknüpfen von Spalten in verschiedenen Tabellen erstellt. Dazu wird im CREATE das Keyword REFERENCES verwendet. Dort wird angegeben, auf welche Spalte der Fremdschlüssel verweist. Hier ein Beispiel dazu:\n1 2 3 4  CREATE TABLE adresse(id number PRIMARY KEY, strasse varchar(255), hausnummer number, plz number, ort varchar(255)); CREATE TABLE person(id number PRIMARY KEY, vorname varchar(255), nachname varchar(255), alter number, adresse_id number FOREIGN KEY REFERENCES adresse(id));    Info: Die Benennung des Fremdschlüssels wurde in diesem Beispiel der Einfachheit halber nicht korrekt gemacht. Je nach Naming Convention im Projekt muss der Fremdschüssel anders benannt werden. Hier ein Link mit weiteren Infos: Naming Conventions SQL Server\n Beispiel Daten Person:\n   id vorname nachname alter adresse_id     1 Christoph Spycher 45 1   2 Sepp Blatter 87 2   3 Gianni Infantion 53 2   4 Nilo Nashorn 2 3    Beispiel Daten Adresse:\n   id strasse hausnummer plz ort     1 Papeiermuehlestrasse 71 3014 Bern   2 Seestrasse 27 8002 Zuerich   3 Binningerstrasse 30 3054 Basel    1 2 3 4 5 6 7 8  -- Funktioniert nicht, da in der Tabelle Adresse keine Adresse mit der Id 27 besteht. INSERT INTO person VALUES (5, \"Boris\", \"Biberratte\", 4, 27); -- Funktioniert, da die Id 3 in der Tabelle Adresse vergeben ist. INSERT INTO person VALUES (5, \"Hans\", \"Hecht\", 4, 3); -- Funktioniert, da der Foreign Key auch null sein darf. INSERT INTO person VALUES (5, \"Silvia\", \"Stachelschwein\", 4, null);   ","categories":"","description":"","excerpt":"Ziele  Du weisst wofür Constraints verwendet werden Du kennst die …","ref":"/docs/database/03_constraints/","tags":"","title":"Constraints"},{"body":"Inhalt In diesem Kapitel lernst du, wofür eine Datenbank ist und wie du sie benutzen kannst. Dir werden die Datentypen und verschiedenen Statements näher gebracht, um diese später selbstständig verwenden zu können. Ziel ist auch, dass du Datenbankdiagramme verstehen und erstellen kannst.\n","categories":"","description":"Grundlagen für die Verwendung von Datenbanken   \n","excerpt":"Grundlagen für die Verwendung von Datenbanken   \n","ref":"/docs/database/","tags":"","title":"Datenbanken"},{"body":"Ziele  Du kannst anhand von Text ein ERD erstellen. Du kannst anhand eines ERDs eine Datenbank erstellen. Du kannst die grundlegenden Statements von SQL anwenden.  ","categories":"","description":"Grundlagen für die Verwendung von Datenbanken   \n","excerpt":"Grundlagen für die Verwendung von Datenbanken   \n","ref":"/labs/database/","tags":"","title":"Datenbanken"},{"body":"Ziele  Ich weiss, was Datentypen sind.  Datentypen In Java sind Variablen stark typisiert. Das heisst, dass alle Variablen bei ihrer Erstellung mit einem Datentyp versehen werden müssen.\nUm z.B. eine Zahl wie 3 vom Typ int in eine Variable sum zu speichern, tun wir folgendes:\n1  int sum = 3;   Seit Java 10 gibt es Typinferenz für lokale Variablen, das heisst, eine lokale Variable kann deklariert und initialisiert werden (muss gleichzeitig geschehen), ohne dass ein Datentyp angegeben werden muss - anstelle des Datentyps kann var verwendet werden:\n1  var sum = 20;   Es gibt zwei Arten von Datentypen:\n Primitive Datentypen und Referenztypen.  Der grundlegende Unterschied besteht darin, dass eine primitive Variable den tatsächlichen Wert speichert, während eine Referenzvariable die Adresse des Objekts speichert, auf welches sie sich bezieht.\nDies hat mit dem Java Memory Modell zu tun. Das nachfolgende Bild zeigt das Java Memory Modell als einfache Darstellung:\nEs besteht grundsätzlich aus dem Stack Memory und dem Heap Space. Primitive Datentypen werden nur auf dem Stack angelegt. Objekte, wie das im Bild gezeigte Auto (Car), sind im Heap abgelegt. Die Referenz auf das Objekt wird auf dem Stack angelegt. Die Referenz “zeigt” also auf das Objekt im Heap.\nDieser fundamentale Unterschied ist relevant beim Vergleich von Werten und Referenzen. Später wirst du lernen, dass der Vergleichs-Operator == stets die Werte auf dem Stack miteinander vergleicht. Bei Referenzen wird dort also überprüft, ob sie auf dasselbe Objekt zeigen. Wenn der Inhalt von Objekten verglichen werden soll, so muss dies mit der Methode equals() gemacht werden.\n","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/03_data_types/","tags":"","title":"Datentypen"},{"body":"Schritt 1: Initialisiere das Git-Repository  Öffne dein Terminal oder die Kommandozeile. Erstelle ein neues Verzeichnis und navigiere in dieses. Initialisiere ein neues Git-Repository.  Schritt 2: Erstelle eine konfliktverursachende Datei  Erstelle eine neue Datei mit dem Namen index.txt und füge einen Satz hinzu. Speichere die Datei und committe die initiale Version.  Schritt 3: Erstelle einen neuen Branch und mache Änderungen  Erstelle einen neuen Branch mit dem Namen feature_branch. Öffne die index.txt Datei und ändere den Inhalt. Speichere die Datei.  Schritt 4: Stashe die Änderungen im Feature-Branch  Bevor du den Feature-Branch in den Master-Branch mergst, stashe zuerst die Änderungen.  Schritt 5: konfliktverursachende Änderungen auf Master  Wechsle zurück zum master-Branch. Öffne die index.txt Datei und ändere den Inhalt. Speichere die Datei und committe die Änderungen.  Schritt 6: Cherry-Picke den Feature-Branch  Cherry-Picke jetzt die Änderungen aus dem Feature-Branch in den Master-Branch.  Schritt 7: Merge den Feature-Branch und löse den Konflikt  Du wirst einen Konflikt in der index.txt Datei erhalten. Öffne die Datei und löse den Konflikt. Speichere die Datei und committe den gelösten Konflikt.  Schritt 8: Wende den Stash an  Jetzt können wir den Stash auf den Master-Branch anwenden, um die zuvor gestashten Änderungen wiederherzustellen. Du wirst wieder einen Konflikt in der index.txt Datei erhalten. Öffne die Datei und löse den Konflikt. Speichere die Datei und committe den gelösten Konflikt.  ","categories":"","description":"Hands On Aufgabe für Git\n","excerpt":"Hands On Aufgabe für Git\n","ref":"/labs/git/01_git/","tags":"","title":"Git Hands On Aufgabe"},{"body":"Git kann auf unterschiedliche Arten eingesetzt werden, es gibt graphische Oberflächen und die meisten Git-Server Software bieten Weboberflächen, welche das interagieren mit Git Repositories kinderleicht gestalten. Da diese Oberflächen meist sehr Produktspezifisch sind und oft auch nicht alle Funktionen beinhaltet werden hier nur die Kommandozeilen Befehle angeschaut. Ausserdem empfiehlt es sich mit git auf der Kommandozeile zu starten da es so viel verständlicher ist.\nInhalt  Konfiguration von Git Hilfe Ein Git Repository anlegen Änderungen verfolgen und im Repository speichern Anzeigen der Commit Historie Änderungen rückgängig machen Mit Remotes arbeiten  Konfiguration von Git Git kann, wie die viele Software unter Linux, auf unterschiedlichen Level konfiguriert werden:\n /etc/gitconfig enthält die Werte, welche für alle Benutzer auf dem System gelten. Die Datei kann mit git config --system gelesen oder editiert werden. Man braucht Administrator- oder Superuser-Rechte um die Datei zu editieren. ~/.gitconfig oder ~/.config/git/config enthält die Werte, welche für den aktuellen Benutzer konfiguriert sind. Mit git config --global können Werte gesetzt oder ausgelesen werden. Die Datei config im .git Verzeichnis innerhalb eines Repositories enthält die Konfiguration, welche nur für dieses Repository zählt. Das Flag für git config ist in diesem Fall --local, ist jedoch in der Regel die Standardoption und kann weggelassen werden.  Jede dieser Konfiguration wird von der nächsten überschrieben, sodass die Repository bezogene Konfiguration den höchsten Wert hat. Um zu die aktuelle Konfiguration und ihren Ursprung anzusehen kann folgender Befehl ausgeführt werden:\n1 2 3 4 5 6 7 8 9 10 11 12 13  $ git config --list --show-origin file:/home/lehrling/.gitconfig user.email=lehrling@puzzle.ch file:/home/lehrling/.gitconfig user.name=Lehrling Puzzle file:/home/lehrling/.gitconfig push.default=simple file:/home/lehrling/.gitconfig merge.tool=meld file:.git/config core.repositoryformatversion=0 file:.git/config core.filemode=true file:.git/config core.bare=false file:.git/config core.logallrefupdates=true file:.git/config remote.origin.url=git@github.com:puzzle-bbt/training-sbb-puzzle.git file:.git/config remote.origin.fetch=+refs/heads/*:refs/remotes/origin/* file:.git/config branch.master.remote=origin file:.git/config branch.master.merge=refs/heads/master   Konfigurationsbeispiele Nach der Installation von Git sollte als erstes der Name und die Email Adresse konfiguriert werden, da diese beiden Angaben bei jedem Commit benötigt werden:\n1 2  $ git config --global user.name \"John Doe\" $ git config --global user.email johndoe@example.com   Wie wir bereits gelernt haben, schreiben wir mit dem --global Flag in die Konfiguration in unserem home Verzeichnis und sie gilt somit für alle Repositories, welche wir mit unserem User bearbeiten. Wollen wir dies fur ein bestimmtes Repo übersteuern, haben wir immer noch die Möglichkeit dies mit --local zu machen.\nEine weitere Konfiguration die evtl. hilfreich sein kann ist core.editor mit welcher, der Texteditor definiert werden kann. Git benutzt, falls hier nichts definiert ist, den standard Editor des Systems.\nHilfe Git bietet mehrere Möglichkeit, wie man an Hilfe gelangt, wenn mal einmal nicht weiter weiss:\n1 2 3 4 5  $ git help \u003cverb\u003e $ git \u003cverb\u003e --help $ man git-\u003cverb\u003e # Kurzversion: $ git \u003cverb\u003e -h   Wenn man also nicht mehr genau weiss, wie dies mit der Konfiguration von Git funktioniert kann man sich folgendermassen weiterhelfen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  $ git help config #ruft die Manpage auf [..] $ git config -h usage: git config [\u003coptions\u003e] Config file location --global use global config file --system use system config file --local use repository config file --worktree use per-worktree config file -f, --file \u003cfile\u003e use given config file --blob \u003cblob-id\u003e read config from given blob object Action --get get value: name [value-regex] --get-all get all values: key [value-regex] --get-regexp get values for regexp: name-regex [value-regex] --get-urlmatch get value specific for the URL: section[.var] URL --replace-all replace all matching variables: name value [value_regex] --add add a new variable: name value --unset remove a variable: name [value-regex] --unset-all remove all matches: name [value-regex] --rename-section rename section: old-name new-name --remove-section remove a section: name -l, --list list all -e, --edit open an editor --get-color find the color configured: slot [default] --get-colorbool find the color setting: slot [stdout-is-tty] Type -t, --type \u003c\u003e value is given this type --bool value is \"true\" or \"false\" --int value is decimal number --bool-or-int value is --bool or --int --path value is a path (file or directory name) --expiry-date value is an expiry date Other -z, --null terminate values with NUL byte --name-only show variable names only --includes respect include directives on lookup --show-origin show origin of config (file, standard input, blob, command line) --show-scope show scope of config (worktree, local, global, system, command) --default \u003cvalue\u003e with --get, use default value when missing entry   Ein Git Repository anlegen Um lokal ein neues Git Repository anzulegen gibt es zwei Varianten:\n Umwandeln eines Verzeichnis, welches (noch) nicht mit Git verwaltet wird zu einem Git Repository Klonen eines existierenden Repositories von einem anderen Ort  Ein Verzeichnis zu einem Git Repository verwandeln Um aus einem Ordner ein Git Repository zu erstellen, muss man zuerst in den Ordner wechseln und anschliessend das Repository initialisieren:\n1 2  $ cd ~/path/to/folder $ git init   Der zweite Befehl erzeugt ein .git Unterverzeichnis, welches die Repository Daten beinhaltet. Im Moment werden noch keine Dateien von Git verwaltet, sondern die müssen zuerst hinzugefügt (git add) werden und committed werden (git commit). Wenn wir von einem leeren Ordner aus gehen, müssen die Dateien natürlich zuerst noch erstellt werden:\n1 2 3  $ vim README.md $ git add README.md $ git commit -m 'Initial Commit'   Ein bestehendes Repository klonen Um ein Repository zu klonen wird der Befehl git clone verwendet:\n1 2 3  $ git clone https://github.com/libgit2/libgit2 $ ls libgit2   Git legt dann automatisch ein Verzeichnis libgit2 an mit allen Dateien und initialisiert das Repository mit einem .git Verzeichnis im Hauptverzeichnis. Wird hinter der URL noch etwas angegeben, wird dies als Name des Zielverzeichnisses interpretiert:\n1 2 3  $ git clone https://github.com/libgit2/libgit2 mylibgit $ ls mylibgit   Änderungen verfolgen und im Repository speichern Zur Erinnerung, eine Datei in einem Git Folder kann vier Zustände haben:\n Untracked: Die Datei liegt im Ordner, wird aber nicht von Git versioniert Unmodified: Die Datei wird von Git versioniert, sie ist seit dem letzten Commit unverändert. Modified: Die Datei wurde seit dem letzten Commit verändert Staged: eine neue oder editierte Datei wurde für den nächsten Commit vorgemerkt.  Der Befehl zum überprüfen, ob man Dateien in einem anderen Zustand als unmodified hat ist git status:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  $ git status On branch feature/git-basics Your branch is up to date with 'origin/feature/git-basics'. Changes to be committed: (use \"git restore --staged \u003cfile\u003e...\" to unstage) modified: content/en/docs/02.0/02.md Changes not staged for commit: (use \"git add \u003cfile\u003e...\" to update what will be committed) (use \"git restore \u003cfile\u003e...\" to discard changes in working directory) modified: content/en/docs/02.0/02.md Untracked files: (use \"git add \u003cfile\u003e...\" to include in what will be committed) .gitignore   Wollen wir nun die Änderungen der Datei content/en/docs/02.0/02.md (oder die Datei .gitignore) zum nächsten Commit hinzufügen können wir dies mit git add \u003cpfad/zur/datei\u003e. Im Beispiel oben sehen wir, dass die Datei content/en/docs/02.0/02.md bereits gestaged ist. Ändern wir diese Datei erneut, wird die Datei sowohl bei Changes to be committed: wie auch bei Changes not staged for commit: auftauchen. Einmal mit den Änderungen, welche wir bereits gestaged haben und einmal mit den Änderungen, welche wir nach dem Stagen (git add) gemacht haben. Wollen wir beide Änderungen im gleichen Commit, können wir die Datei einfach wieder mit git add stagen und anschliessend commiten, wollen wir die Änderungen in separaten Commit, commiten wir zuerst die gestagten Änderungen und stagen anschliessend die zweite Änderungen und commiten erneut.\n.gitignore Bevor wir lernen, wie man seine Änderungen commited wollen wir noch kurz die spezielle Datei .gitignore anschauen. In dieser Datei können Dateien erfasst werden, welche Git nicht als untracked aufzählen soll, respektive ignorieren soll. Die Datei wird ganz normal wie jede andere auch ins Repo eingecheckt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  $ cat .gitignore # ignore all .a files *.a # but do track lib.a, even though you're ignoring .a files above !lib.a # only ignore the TODO file in the current directory, not subdir/TODO /TODO # ignore all files in any directory named build build/ # ignore doc/notes.txt, but not doc/server/arch.txt doc/*.txt # ignore all .pdf files in the doc/ directory and any of its subdirectories doc/**/*.pdf   Weitere Informationen bekommt man mit man gitignore oder unter https://github.com/github/gitignore findet man nützliche Beispiele.\nÜberprüfen der Änderungen Bevor man seine Änderungen commited, empfiehlt es sich diese nochmals zu überprüfen. Mit git status sieht man, welche Dateien geändert wurden, jedoch nicht, was sich geändert hat. Dafür gibt es den Befehl git diff:\n1 2 3 4 5 6 7 8 9 10  diff --git a/content/en/docs/02.0/02.md b/content/en/docs/02.0/02.md index 1e6db46..dd7161b 100644 --- a/content/en/docs/02.0/02.md +++ b/content/en/docs/02.0/02.md @@ -145,3 +145,60 @@ mylibgit  ## Änderungen verfolgen und im Repository speichern +Zur Erinnerung, eine Datei in einem Git Folder kann vier Zustände haben: -Zur Erinnerung, eine Datei in einem Git Folder kann vier Zustaende haben   git diff vergleicht die Änderungen welche noch nicht gestaged wurden, will man bereits gestagte Änderungen überprüfen braucht es zusätzlich das Flag --staged oder --cached (die beiden Flags sind Synonyme).\nAnders als git diff funktioniert git diff-tool mit einem externen Tool, welches dir die Änderungen anzeigt. Beispiele dafür sind ‘P4Merge’ oder auch ‘Beyond Compare’. Sie versuchen die Bearbeitungen besser zu visualisieren und es dem Benutzer einfacher zu machen, diese in einer Datei / im Code einzusehen. Jetzt bleibt die Frage: Wann brauchen wir was? Grundsätzlich wird git diff bei folgenden Situationen gebraucht:\n Wenn wir kein GUI haben und nur mit dem Output des Terminals arbeiten Falls wir gar kein externes Tool zur Verfügung haben Wenn du keine ‘schweren’ externen Tools starten möchtest, sondern so schnell wie möglich zum Ergebnis kommen willst.  git diff-tool kann man dann überall dort einsetzen, bei denen die oben erwähnten Situationen nicht zutreffen. Zu Beachten ist aber, dass es noch viele weitere Situationen gibt, in welchen man auf git diff-tool verzichten kann. Zur genaueren Einsicht ist Google immer eine gute Anlaufstelle.\nCommiten Ist man sicher, dass man nur die Änderungen gestaged hat, welche man auch commiten will, kann man dies mit dem Befehl git commit bewerkstelligen. Dadurch wird ein Editor geöffnet und man wird gebeten eine Beschreibung für die Änderungen anzugeben. Wie solche Beschreibungen gestaltet werden sollen und was alles in eine “Commit Message” gehört, darüber gibt es ganz unterschiedliche Meinungen. Idealerweise probiert man sich vorzustellen, was man an Zusätzlichen Informationen braucht, wenn man die Änderungen in zwei Jahren wieder anschaut, um zu verstehen, was und warum das geändert wurde.\nOft gibt es pro Projekt Konventionen wie eine Commit Message aussehen soll. Falls dies nicht existiert gibt es ein paar wenige Punkte welche die Messages einiges lesbarer und verständlicher machen:\n Sprache: Englisch Kurze und prägnante Message, idealerweise unter 50 Zeichen Details Mit Grossbuchstaben beginnen Details Kein Punkt am Schluss Details Den imperative mood (Befehlsform) verwenden, also «Fix bug with X» statt «Fixed bug with X» oder «More fixes for broken stuff» Details Wenn vorhanden das Ticket referenzieren:  Bei Gitlab/Github Issues: «Add X #12345»    (Puzzle Docs)\nWeitere Quellen dazu:\n https://chris.beams.io/posts/git-commit/ https://www.conventionalcommits.org/en/v1.0.0/  Ein paar hilfreiche Flags zu git commit:\n -m um eine Message gleich anzugeben und nicht den Editor zu öffnen (kann je nach Commit Message Guideline hinderlich sein, da es keine Multiline Kommentare erlaubt):  1 2 3 4  git commit -m \"Story 182: added important Information to Readme\" [master 463dc4f] Story 182: added important Information to Readme 2 files changed, 2 insertions(+) create mode 100644 README     -a um alle editierten Dateien gleich mitzustagen. (Kurzform von git add --all \u0026\u0026 git commit) !ACHTUNG! kann gefährlich sein da so schnell Änderungen in einen Commit rutschen die nicht rein gehören!\n  -v um ein git diff --staged im Editor angezeigt zu bekommen. So muss man sich nicht merken, was man eigentlich geändert hat und bekommt es beim schreiben der Commit Message noch einmal präsentiert.\n  WICHTIG: Es ist einiges einfacher Fehler vor dem Commiten als nach dem Commiten zu beheben, ein zweites mal über die Änderungen schauen ist sehr empfehlenswert!\nDateien löschen Um eine Datei zu löschen muss diese zuerst entfernt und dann gestaged werden, damit dies in der Git Datenbank ankommt. Um nicht zuerst rm foo und dann git add foo eingeben zu müssen, gibt es den Befehl git rm foo. Will man eine bereits gestagte Datei aus der Versionsverwaltung jedoch nicht vom Filesystem löschen, weil man diese zum Beispiel im .gitignore ergänzen möchte, dann kann man dies mit git rm --cached foo erledigen.\nWICHTIG: Jede Datei die irgendwann mal commited wurde ist für immer in der Git Geschichte und kann nur durch neu schreiben der selbigen wieder entfernt werden. Wer also zum Beispiel sein Passwort commited weil dies in einer secret.yml Datei steht, der sollte sich sofort bei einem 10x-Git-Profi-Engineer Hilfe holen.\nDateien Verschieben Genauso wie löschen, muss auch beim Verschieben die Änderung Git mitgeteilt werden: mv README.md README \u0026\u0026 git rm README.md \u0026\u0026 git add README oder in kurz und hübsch: git mv README.md README.\nAnzeigen der Commit Historie Um die Geschichte eines Git Repositories anzuzeigen gibt es den Befehl git log. Ohne Argumente zeigt git log die Commits in umgekehrter chronologischer Reihenfolge, sprich jüngster Commit zuoberst. Pro Commit wird jeweils der Commit-Hash, der Name und Email Adresse des Authors, das Datum und die Commit-Message angezeigt. Um die effektiven Änderungen anzuzeigen gibt es das -p oder --patch Flag verwendet werden. Da der Output schnell gross wird und man wahrscheinlich auch nicht bis an den Ursprung der Geschichte zurück will empfiehlt es sich die Anzahl Commits anzugeben, will man zum Beispiel die letzten drei Commits anschauen macht man dies mit -3. Oder man schränkt die Änderungen basierend auf die Zeit ein mit --since= und --until= ein (es werden die unterschiedlichsten Zeitangaben akzeptiert, am besten probiert man etwas aus. Bsp: --since=2.weeks oder --until=\"2020-06-03\"). Auch mit --grep oder --author kann man die Resultate einschränken. Weitere Information liefert die Manpage man git log und die Hilfefunktion git log -h.\nÄnderungen rückgängig machen Wo gehobelt wird fallen Späne. Die meisten Schnitzer kann man jedoch selber wieder ausglätten. Am häufigsten committed man wohl zu schnell, hat eine Datei vergessen dazuzufügen oder hat sich bei der Commit Message vertan. Hier kann man ganz einfach die Änderungen noch vornehmen und an den letzten Commit berichtigen mit git commit --amend (Wichtig, man editiert nicht den letzten Commit, sondern man löscht ihn und erstellt eine korrigierte neue Version davon. Dies kann dazuführen, dass ein Remote den Commit nicht mehr annimmt, da die History nicht mehr übereinstimmt. Aber mehr dazu später.)\nUm eine gestagte Datei wieder zu modified (aber eben nicht gestaged) zu verschieben kann man git reset HEAD \u003cfile\u003e verwenden. Um die Änderungen einer Datei rückgängig zu machen (also modified zu unmodified) kann sie neu ausgecheckt werden mit git checkout -- \u003cfile\u003e. Achtung Alle Änderungen seit dem letzte Commit gehen damit verloren!!! Wenn man sich an die beiden Befehle gerade mal nicht erinnern kann, dann kann man einfach ein git status eingeben und den Hilfetext studieren 😉.\nMit Remotes arbeiten Um mit anderen an einem Git-Projekt mitarbeiten zu können, braucht es Remotes, sprich eine Version des Projekts im Netzwerk, wo alle Beteiligten ihre Änderungen hin pushen und die Änderungen der Anderen pullen können.\nNachdem man ein Repo gecloned hat sieht man ein Remote, man kann jedoch auch weitere definieren:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  $ git clone git@github.com:puzzle-bbt/training-sbb-puzzle.git Cloning into 'training-sbb-puzzle'... remote: Enumerating objects: 8485, done. remote: Counting objects: 100% (8485/8485), done. remote: Compressing objects: 100% (5276/5276), done. remote: Total 8485 (delta 3095), reused 8456 (delta 3079), pack-reused 0 Receiving objects: 100% (8485/8485), 17.06 MiB | 5.11 MiB/s, done. Resolving deltas: 100% (3095/3095), done. $ cd training-sbb-puzzle $ git remote origin $ git remote -v origin\tgit@github.com:puzzle-bbt/training-sbb-puzzle.git (fetch) origin\tgit@github.com:puzzle-bbt/training-sbb-puzzle.git (push) $ git remote add private git remote add private git@github.com:Lehrling/training-sbb-puzzle.git $ git remote -v origin\tgit@github.com:puzzle-bbt/training-sbb-puzzle.git (fetch) origin\tgit@github.com:puzzle-bbt/training-sbb-puzzle.git (push) private\tgit@github.com:Lehrling/training-sbb-puzzle.git (fetch) private\tgit@github.com:Lehrling/training-sbb-puzzle.git (push)   Wollen wir nun alle Information holen, welches der Lehrling hat, jedoch noch nicht im Repo sind kann man dies mit git fetch private ausführen.\nFetching und Pulling Es gibt zwei Arten, wie man Daten von einem Remote abholen kann, nach dem man das Repo gecloned hat.\n  git fetch \u003cremote\u003e: holt alle Änderungen vom Remote seit dem letzten abholen und speichert die lokal. Wichtig zu beachten ist, dass git fetch die Änderungen nicht mit den lokalen Änderungen zusammenfügt, sondern dies manuell ausgeführt werden muss.\n  git pull: Wenn der lokale Branch mit einem remote Branch verknüpft ist, holt git pull die Änderungen dieses remotes und fügt sie gleich mit den Änderungen im lokalen Branch zusammen (merge). Was Branches sind und wie ein Merge funktioniert schauen wir uns in kürze an, nur soviel, wird ein Repo gecloned, wird der lokale sogenannte master Branch mit dem master Branch des origin Remotes verknüpft.\n  Pushen Wenn man seine Änderungen soweit hat, dass man sie mit dem Rest vom Team teilen will, dann kann man diese mit git push \u003cremote\u003e \u003cbranch\u003e auf den Server laden. Dies funktioniert jedoch nur, wenn man auf dem Server auch Schreibrechte hat und niemand anderes vor einem gepusht hat.\n","categories":"","description":"","excerpt":"Git kann auf unterschiedliche Arten eingesetzt werden, es gibt …","ref":"/docs/git/git-basics/","tags":"","title":"Git Basics"},{"body":"java.util.Set Eine Set verwendet man, um eine Menge von Elemente zu speichern. Dabei werden keine Duplikate gespeichert. Die java.util.HashSet ist die gebräuchlichste Implementierung eines Sets. Man könnte zum Beispiel in einem Set alle Wörter eines Texts speichern. Tritt ein Wort mehrmals auf, so wird dieses Wort nur bei ersten Male gespeichert. Im Set sind so alle auftretenden Wörter gespeichert und die size() Methode liefert die Anzahl unterschiedlicher Wörter zurück.\nEin Set hat keine Duplikate!  Dabei ist der Schlüssel immer eindeutig. Speichert man zwei Zuweisungen mit dem gleichen Schlüssel, so wird die erste Zuweisung überschrieben.\nDie Benennung eines Sets sollte der Inhalt beschreiben.\nZum Beispiel:\n nameSet –\u003e ein Set mit Namen names –\u003e mehrere Namen  Methodenübersicht 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  Set\u003cString\u003e nameSet = new HashSet\u003c\u003e(); nameSet.add(\"Peter\"); nameSet.add(\"Anna\"); nameSet.add(\"Kurt\"); nameSet.add(\"Anna\"); nameSet.add(\"Petra\"); System.out.println(nameSet.size()); // Output: 4 System.out.println(nameSet.contains(\"Peter\")); // Output: true System.out.println(nameSet.remove(\"Emil\")); // Output: false System.out.println(nameSet.remove(\"Anna\")); // Output: true System.out.println(nameSet.size()); // Output: 3 nameSet.clear(); System.out.println(nameSet.isEmpty()); // Output: true    Die Elemente eines Set kann man mit den Collection Methoden abrufen:\n iterator(): Ein Iterator über die Elemente stream(): Ein sequentieller Stream über die Elemente forEach(): Führt eine bestimmte Aktion über alle Elemente aus  Die Reihenfolge der Elemente ist nicht garantiert. Es existieren Implementierung wie das SortedSet, welche eine bestimmte Reihenfolge sicherstellt.\n Beispiel    Beispiel Für die Beispiele verwenden wir die folgende initialisierte HashMap:\n1 2 3 4 5 6 7  Set\u003cString\u003e nameSet = new HashSet\u003c\u003e(); nameSet.add(\"Peter\"); nameSet.add(\"Anna\"); nameSet.add(\"Kurt\"); nameSet.add(\"Anna\"); nameSet.add(\"Petra\");   Beispiel 1 - Set erstellen 1 2 3 4 5 6 7 8 9  // mit Konstruktor Set\u003cString\u003e nameSet = new HashSet\u003c\u003e(); nameSet.add(\"Peter\"); nameSet.add(\"Emil\"); // mit statischer of() Methode Set\u003cString\u003e nameSet = Set.of(\"Peter\", \"Emil\"); // of() liefert ein unmodifizierbares Set zurück. Kein HashSet!    Beispiel 2 - Auslesen der Elemente 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  // Abfrage der Elemente mit einem Iterator: Iterator\u003cString\u003e iterator = nameSet.iterator(); while(iterator.hasNext()) { System.out.println(iterator.next()); } // Abfrage der Elemente mit einer for Schleife: for (String name : nameSet){ System.out.println(name); } // Abfrage der Elemente mit einem Stream: nameSet.stream().forEach(name -\u003e System.out.println(name)); // Abfrage der Elemente mit einem forEach: nameSet.forEach(name -\u003e System.out.println(name));     Aufgaben    Aufgaben Aufgaben zu Modul #J7 - Java Collections - Set\n","categories":"","description":"Die gebräuchlichste Umsetzung eines Set: HashSet.\n","excerpt":"Die gebräuchlichste Umsetzung eines Set: HashSet.\n","ref":"/docs/java/java-collections/03_set/","tags":"","title":"HashSet"},{"body":"Hiermit beginnt deine Reise mit Java!\nIn dem Modul #J1 mit dem Namen “Java Grundlagen” lernst du die Basics der Programmierung mit Java.\nNach diesem Modul kannst du Java-Programme schreiben, die\n Text ausgeben User nach einer Eingabe fragen und diese auswerten mathematische Operationen durchführen und bestimmte Dinge nur unter bestimmten Bedingungen ausführen.  Es wird also spannend; also bleib unbedingt dran, hier im Ausbildungsprogramm!\nTerminologie Nachfolgend sind ein paar Begriffe aufgelistet, die du in diesem Kapitel immer wieder antreffen wirst. Diese Tabelle ist dafür da, dass du die Begriffe später einfacher nachschauen gehen kannst. Bis jetzt musst du diese noch nicht verstehen.\n   Begriff Beschreibung     Programm Eine Folge von Anweisungen (engl. “statement”), welche nacheinander ausgeführt werden (von oben nach unten)   Anweisung (statement) Eine einzelne Aktion, wie zum Beispiel das Ausgeben eines Satzes auf der Konsole. Ein Statement wird mit einem Semikolon abgeschlossen   Block Eine Gruppe von keiner, einer oder mehreren Anweisungen, die von geschweiften Klammern {…} umgeben ist   Methode Was in anderen Programmiersprachen als «Funktion» bezeichnet wird, heisst in Java «Methode». Eine Methode ist eine Folge von Anweisungen, welche eine bestimmte Aufgabe ausführt (auch bekannt als Unterprogramm oder Prozedur)   Syntax Eine Reihe von Regeln, die definieren wie ein Programm geschrieben werden muss, um gültig zu sein. Es handelt sich um eine Art Grammatik   Keyword Ein Wort, welches in der Programmiersprache eine besondere Bedeutung hat (public, class und viele andere). Diese Wörter können nicht als Variablennamen verwendet werden   Bezeichner (identifier) oder Name Ein Wort, das sich auf etwas in einem Programm bezieht (z. B. eine Variable oder einen Methodennamen)   Kommentar Eine Erklärung dazu, was eine bestimmte Anweisung oder Methode macht. Einzeilige Java-Kommentare beginnen mit // und mehrzeilige sind von den Zeichen /* */ umgeben   Whitespace Tabulator- oder Leerzeichen dienen lediglich der Lesbarkeit, vom Compiler werden sie ignoriert    ","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/","tags":"","title":"Java Grundlagen"},{"body":"Aufgabe 1 Postleitzahlen einlesen und verarbeiten:\n Schreibe ein Programm, welches Postleitzahlen aus einer CSV-Datei herausliest und in einer HashMap speichert. Nach dem Speichern schreibt das Programm verschiedene Informationen zu den Daten in die Konsole (siehe Ausgabe). Verwendet wieder die kleine Hilfsklasse OutputValidation zum Verifizieren von eurem Konsole-Output.  Input  PLZ (UTF8 Format) PLZ (ISO-8859-1 Format)  Ausgabe Die Ausgabe muss das folgende Format aufweisen. Beachte, dass die Aufzählungen der Ortschaften sortiert sind.\n1 2 3 4 5 6 7 8 9 10 11  - Anzahl PLZ: 42 - Kleinste PLZ der Gemeinde Bern: 4444 Bern - Grösste PLZ der Gemeinde Bern: 4444 Bern - Anzahl Gemeinden mit mehr als 10 Buchstaben: 42 - Anzahl Gemeinden mit 7 Buchstaben: 42 - Anzahl Gemeinden mit der Buchstabenfolge 'ent': 42 - Gemeinden mit 3 Buchstaben: Abc, Def, Xzz - Anzahl Buchstaben der kleinsten Gemeinden: 2 - Kleinsten Gemeinden: di, ri, ru - Anzahl Buchstaben der grössten Gemeinden: 5 - Grössten Gemeinden: diwil, riwil, ruwil    Ausgabe überprüfen\nDer Konsole-Output Hash für diese Aufgabe ist: 1768988137\n Aufgabe 2 (Optional) Wir programmieren eine eigene Map-Klasse MyMap, welche noch keinen Hash-Code verwendet:\n Es dürfen keine Klassen aus dem Collection-Framework verwendet werden. Die Klasse muss das Interface MyMapInterface implementieren. Die Klasse weiss nicht, wie viele Elemente man speichert. Sie muss die Grösse internen Datenstruktur dynamische anpassen. Die toString() der java.lang.Object Klasse soll von der MyMap so überschrieben werden, dass die Elemente kommasepariert ausgegeben werden.   Inferface MyMapInterface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61  package com.examples.list; public interface MyMapInterface\u003cK, V\u003e { /** * Associates the specified value with the specified key in this map. * @param key key with which the specified value is to be associated * @param value value to be associated with the specified key * @return the previous value associated with {@code key}, or * {@code null} if there was no mapping for {@code key}. */ V put(K key, V value); /** * Returns the value to which the specified key is mapped, * or {@code null} if this map contains no mapping for the key. * @param key the key whose associated value is to be returned * @return the value to which the specified key is mapped, or * {@code null} if this map contains no mapping for the key */ V get(Object key); /** * Returns the number of key-value mappings in this map. * @return the number of key-value mappings in this map */ int size(); /** * Removes all the mappings from this map. * The map will be empty after this call returns. */ void clear(); /** * Removes the mapping for a key from this map if it is present. * @param key key whose mapping is to be removed from the map * @return the previous value associated with {@code key}, or * {@code null} if there was no mapping for {@code key}. */ V remove(Object key); /** * Returns {@code true} if this map contains a mapping for the specified * key. * @param key key whose presence in this map is to be tested * @return {@code true} if this map contains a mapping for the specified * key */ boolean containsKey(Object key); /** * Returns {@code true} if this map maps one or more keys to the * specified value. * @param value value whose presence in this map is to be tested * @return {@code true} if this map maps one or more keys to the * specified value */ boolean containsValue(Object value); }    Aufgabe 3 (Optional) Wir Kopieren unsere MyMap Klasse zu der Klasse MyHashMap und erweitern diese, damit sie Hash Funktionalität verwendet:\n Beim Hinzufügen von Zuweisungen wird der Hash-Code vom Schlüssel berechnet und ebenfalls abgespeichert. Die Schlüsselsuche wird anschliessend über die gespeicherten Hash-Code der Schlüssel durchgeführt statt über die Schlüssel selbst.  ","categories":"","description":"Aufgaben zu [Java Collections - Map](../../../../docs/java/java-collections/04_map)\n","excerpt":"Aufgaben zu [Java Collections - …","ref":"/labs/java/java-collections/03_map/","tags":"","title":"Map - Aufgaben"},{"body":"Ziele  Ich weiss, wie man mit Microsoft Word eine einfache Dokumentation erstellt Ich weiss, wie man ein Deckblatt einfügt Ich weiss, wie man eine Kopf- und Fusszeile einfügt und bearbeitet Ich weiss, wie man Bilder einfügt und bearbeitet Ich weiss, wie man die Formatvorlagen benutzt Ich weiss, wie man ein Inhaltsverzeichnis generieren und aktualisieren kann   Deckblatt einfügen Um einen guten Einstieg in eine Dokumentation zu erhalten, kann man ein Deckblatt einfügen. Dies geht ganz simpel über das Register Einfügen und dann die Option Deckblatt auswählen. Dort gibt es einige Vorlagen, welche man aber auch anpassen kann. Es dient als gute Vorlage um wichtige Informationen wie den Autor oder den Titel des Dokuments darzustellen.\n Kopf- und Fusszeile In den Kopf- und Fusszeilen werden Texte eingegeben (oder auch Bilder eingefügt), die im gesamten Dokument oder einem gewissen Bereich des Dokuments am oberen oder unteren Seitenrand dargestellt werden. Typische Anwendungen sind zum Beispiel ein Firmenlogo in der Kopfzeile und die Seitenzahl oder der Dateiname in der Fusszeile.\nUm für das Dokument Kopf- und Fusszeile zu erstellen kann man in der Menüleiste auf das Register Einfügen wechseln. Im Abschnitt Kopfzeile oder Fusszeile können wir nun diese einfügen. Word hat schon einige Vorlagen, die wir benutzen können, aber es ist auch möglich eigene Formatvorlagen zu erstellen. Sobald man eine Kopf- oder Fusszeile erstellt hat, wechselt Word automatisch das Register. Nun können wir einige Einstellungen anpassen.\nDie wichtigsten Anpassungen sind folgende:\nSeitenzahl\nUm die Seitenzahl automatisch generieren zu lassen, kann man diese direkt einfügen lassen. Auch dort ist uns Word sehr behilflich und bietet uns einige Vorlagen an.\nOptionen\nIn den meisten Fällen ist die erste Seite eines Dokuments ein Titelblatt. Dort werden die Kopf- und Fusszeilen nicht dargestellt. Um das einzustellen, kann man unter Optionen den Punkt Erste Seite anders auswählen. Damit bekommt die erste Seite eine eigene Kopf- und Fusszeile.\n Bilder einfügen Um ein Bild einzufügen, kann man entweder über das Register Einfügen ein Bild über einen Dateipfad einfügen oder man kann das Bild auch direkt in das Dokument kopieren. Das Bild können wir nun bearbeiten. Zum Beispiel können wir es zuschneiden, die Grösse anpassen, eine Formatvorlage hinzufügen oder verschiedene Effekte hinzufügen.\nDamit man in einer Dokumentation die Bilder zusammen mit Text darstellen kann, gibt es für die Bilder Layoutoptionen. Mit diesen Optionen kann man den Textumbruch verändern und somit das Bild in den Text integrieren.\n Formatvorlagen Formatvorlagen vereinheitlichen das Dokument und lassen es professioneller wirken. Diese sind direkt im Register Start zu finden. Die verschiedenen Formatvorlagen kann man anpassen oder auch selbst neue Formatvorlagen erstellen. Um eine Vorlage zu bearbeiten, macht man einfach einen Rechtsklick auf die Vorlage und wählt dort Ändern aus. Nun kann man alle Optionen individuell anpassen.\n Inhaltsverzeichnis Um eine Übersicht über das Dokument zu erhalten, kann man ein Inhaltsverzeichnis generieren lassen. Dafür ist unter dem Register Referenzen die Option Inhaltsverzeichnis. Dort finden wir Vorlagen für integrierte Inhaltsverzeichnisse, die von Word selber bearbeitet werden. Wenn wir mit Inhaltsverzeichnissen arbeiten, müssen wir auch mit dem Formatvorlagen für die Titel arbeiten. So können Titel und Untertitel im Inhaltsverzeichnis erkannt und abgebildet werden. Zum Beispiel die Formatvorlage Überschrift 2 wird im Inhaltsverzeichnis eingerückt, da sie als Untertitel verwendet wird.\nNimmt man nach dem Einfügen vom Inhaltsverzeichnis noch weitere Änderungen am Dokument vor, muss man das Verzeichnis aktualisieren. Dafür klickt man einfach auf das Inhaltsverzeichnis im Dokument und kann dann oberhalb vom Verzeichnis auf Inhaltsverzeichnis aktualisieren klicken. Damit werden die Titel und Seitenzahlen aktualisiert.\n","categories":"","description":"Modul #O4 - Microsoft Word\n","excerpt":"Modul #O4 - Microsoft Word\n","ref":"/docs/tools/ms-word/","tags":"","title":"Microsoft Word"},{"body":"Ziele  Ich kann ohne Hilfsmittel mindestens zwei Vorteile für das Verwenden von Packages nennen. Ich kann ohne Hilfsmittel die Namenkonvention für Java-Packages beschreiben. Ich zeige auf, wie mehrere Klassen vom gleichen Packet mit einem import-Statement importiert werden. Ich kann korrekt und ohne Hilfsmittel erklären, was ein statischer Import ist und wozu er verwendet wird. Ich kann erläutern, warum es keine gute Idee ist, Klassen ohne Package-Anweisung zu schreiben.  Packages Bevor wir uns intensiver mit den Bestandteilen einer Klasse auseinandersetzen, schauen wir uns Packages an. Ein Package dient der Gruppierung und Organisation von Klassen, Schnittstellen und anderen Packages. Es wird zwischen zwei Arten von Packages unterschieden:\n implizit importierte Packages explizit zu importierende Packages  Wenn wir beispielsweise die Klasse Scanner benötigen, müssen wir dies durch ein import Statement machen.\n1  import java.util.Scanner   Die Klasse Scanner befindet sich also im Package java und darin im Package util. Ein Package kann beliebig viele andere Packages enthalten. Ein Package wird auf dem Dateisystem als Verzeichnis behandelt.\nVorteile  Code-Organisation. Klassen von gleicher Natur (wie beispielsweise Modelle oder Services) befinden sich im gleichen Package Auffindbarkeit. Klassen sind durch die Organisation einfacher zu finden Vermeiden von Namenskonflikten. Zwei Klassen dürfen den gleichen Namen haben, solange sie in unterschiedlichen Packages liegen Zugriffsteuerung. Bestimmte Zugriffsmodifikatoren erlauben den Zugriff auf Klassen im gleichen Package  Namenskonventionen Gemäss der Namenskonvention werden Package-Namen immer in Kleinbuchstaben geschrieben. Die Trennung der verschiedenen Packages erfolgt beim Import-Statement durch einen Punkt.\nOrdnerstruktur Programmcode muss organisiert sein. Obwohl die Ordnerstruktur nicht vorgegeben ist, hat sich die folgende Konvention in Java-Projekten (vor allem solche, welche Maven im Einsatz haben - dazu mehr im Maven-Modul) etabliert.\nGrundsätzlich legen wir Quellcode im einem Verzeichnis ab, das src genannt wird. Innerhalb dieses Verzeichnisses legen wir ein Verzeichnis main und darin wiederum ein Verzeichnis java an. Innerhalb des Java-Verzeichnisses können wir beliebig viele eigene Packages anlegen, um unseren Programmcode zu organisieren.\nKlassen mit gleichem Namen Es kann passieren, dass wir zwei Klassen haben, die den gleichen Namen haben. Beispiel: Wir arbeiten mit der externen Bibliothek Abstract Window Toolkit (AWT). Darin gibt es eine Klasse mit dem Namen Rectangle. Es ist natürlich erlaubt eine eigene Klasse mit diesem Namen anzulegen, solang sie sich nicht in einem Package mit dem gleichen Namen befindet.\n1 2 3 4 5 6 7 8 9 10 11 12 13  package ch.sbb.main; import ch.sbb.rectangle.Rectangle; public class Main { public static void main(String[] args) { // Deklaration und Initialisierung eines AWT-Rectangles:  java.awt.Rectangle rectAWT = new java.awt.Rectangle() // Deklaration und Initialisierung eines Rectangles aus dem Package ch.sbb.rectangle:  Rectangle myRect = new Rectangle(); } }    Wir importieren die eigene Rectangle-Klasse mit der Import-Anweisung Wir deklarieren und initialisieren ein AWT-Rectangle, indem wir den vollständigen Namen (Package und Klassennamen) angeben  Import * Wenn sich zwei Klassen im selben Paket befinden und eine Klasse in der anderen verwendet wird, muss die Klasse nicht importiert werden. Es ist auch möglich, alle Klassen aus dem Paket zu importieren. Dazu müssen wir einen * anstelle eines bestimmten Klassennamens in das Import-Statement schreiben.\n1  import java.awt.*;   Package java.lang Obwohl wir die meisten Pakete importieren müssen, gibt es ein Java-Paket, das immer automatisch importiert wird. Es ist java.lang. Dieses Paket enthält viele weit verbreitete Klassen wie String, System, Long, Integer, NullPointerException und andere.\nStatischer Import Wir können auch statische Elemente (wie z.B. Konstanten oder auch statische Methoden) einer Klasse in eine andere Klasse importieren. Wenn wir * in die import-Anweisung schreiben, müssen wir den importierten Klassennamen nicht angeben, bevor wir statische Methoden aufrufen oder statische Felder lesen. Hier ist ein Beispiel für den statischen Import der Klasse Arrays, die viele nützliche Methoden zur Verarbeitung von Arrays enthält:\n1 2 3 4 5 6 7 8 9 10 11  package org.hyperskill.java.packages.theory; import static java.util.Arrays.*; public class Main { public static void main(String[] args) { int[] numbers = { 10, 4, 5, 47, 5, 12 }; // an array  sort(numbers); // instead of writing Arrays.sort(...)  int[] copy = copyOf(numbers, numbers.length); // instead of writing Arrays.copyOf(...)  } }   Wenn wir bei der Implementation von Klassen keine Package-Anweisung schreiben, wird die Klasse ins Default-Package eingefügt. Dies sollte vermieden werden, da Klassen aus dem Default-Package nicht in andere Klasse importiert werden können, welche sich nicht auch im Default-Package befinden.\n ","categories":"","description":"Modul #J2\n","excerpt":"Modul #J2\n","ref":"/docs/java/j2-oop/03-packages/","tags":"","title":"Packages"},{"body":"In dieser Aufgabe wird ein Fantasy-Rollenspiel mit Vererbung modelliert. Lies zuerst die Einführung und arbeite dann die untenstehenden Aufgaben ab.\nEinführung Spielfiguren  Es gibt verschiedene Spielfiguren:  Menschen Zwerge Elfen Orks Goblins Trolle   Jede Spielfigur hat einen Namen und besitzt eine bestimmte Anzahl an Lebenspunkten. Diese Lebenspunkte werden später im Kampf mit anderen Spielfiguren verringert Jede Spielfigur hat eine gewisse Tragkraft um Gegenstände und Ausrüstung mit sich herumtragen zu können (siehe weiter unten) Elfen können zaubern und haben einen Zauberwert Alle Spielfigur-Klassen sollen in einem entsprechenden Package angelegt werden  Waffen  Es gibt verschiedene Waffenarten  Nahkampfwaffen (Schwert und Keule) Fernkampfwaffen (Bogen und Wurfmesser)   Alle Waffen haben einen Angriffswert Nahkampfwaffen haben zusätzlich zu ihrem Angriffswert noch einen Verteidigungswert Alle Waffen haben ein Gewicht Alle Waffen-Klassen sollen in einem entsprechenden Package angelegt werden  Gegenstände  Es gibt verschiedene Gegenstände  Tränke (Heiltrank und Stärketrank)  Ein Heiltrank kann bei einer Spielfigur eine bestimmte Anzahl an Lebenspunkten wiederherstellen Ein Stärketrank erhöht den Angriffswert einer Spielfigur dauerhaft um einen bestimmten Wert   Zauberringe (Kraftring, Schutzring)  Ein Kraftring erhöht die Tragkraft einer Spielfigur dauerhaft um einen bestimmten Wert Ein Schutzring verringert dauerhaft den erlittenen Schaden     Jeder Gegenstand hat eine Bezeichnung und ein Gewicht Alle Gegenstand-Klassen sollen in einem entsprechenden Package angelegt werden   Aufgabe 1 Implementation\n der Packages der Klassen der Instanzvariablen in den Klassen der Beziehungen zwischen den einzelnen Klassen  Vergiss nicht, dass es Generalisierungen und Spezalisierungen gibt. Achte auf eine gute Namensgebung bei Klassen und Variablen.\n Aufgabe 2 Ergänze die Applikation mit den folgenden Möglichkeiten:\nSpielfigur  Jede Spielfigur braucht einen Namen um instanziiert werden zu können Zu Beginn hat eine Spielfigur keine Waffe Jede Spielfigur hat eine Methode, die ihren Kampfwert zurückgibt  Der Kampfwert der Spielfigur setzt sich aus dem Kampfwert der akitven Waffe und der Multiplikation mit einer Zufallszahl zusammen. Die Zufallszahl liegt zwischen 0.9 und 1.1 Wenn eine Spielfigur keine Waffe besitzt, so ist ihr Kampfwert 1    Elfen\n Um einen Elfen instanziieren zu können, muss zusätzlich zum Namen der Zauberwert des Elfen angegeben werden Einem Elfen wird die Hälfte seines Zauberwerts zum Kampfwert addiert Elfen sind gute Bogenschützen, ihr Kampfwert erhöht sich um 50%, wenn sie einen Bogen als aktive Waffe benutzen  Goblins\n Goblins sind gute Bogenschützen, ihr Kampfwert erhöht sich um 50%, wenn sie einen Bogen als aktive Waffe benutzen  Trolle\n Trolle verdoppeln ihren Kampfwert wenn sie eine Keule verwenden  Orks\n Orks können in einen Kampfrausch verfallen, wenn ihre Lebenspunkte unter 25% fallen. Sie erhalten dann den dreifachen Kampfwert und erleiden nur den halben Schaden  Waffen  Jede Spielfigur kann mit einer Waffe ausgerüstet werden  Wird eine Waffe aufgenommen, wird die Tragkraft entsprechend reduziert Ist die Waffe zu schwer für die verbleibende Tragkraft, so kann die Spielfigur die Waffe nicht aufnehmen Eine Spielfigur kann mehrere Waffen mit sich rumtragen, aber jeweils nur eine Waffe aktiv verwenden   Spielfiguren können Waffen ablegen, um die verbleibende Tragkraft zu erhöhen Alle Keulen haben den Angriffswert 5 und den Verteidigungswert 5. Die beiden Werte sind also konstant Jede Waffe hat einen Kampfwert  Waffen geben als Kampfwert ihren Angriffswert zurück Bei Nahkampfwaffen wird zum Angriffswert der halbe Verteidigungswert hinzuaddiert    Gegenstände  Jede Spielfigur kann Gegenstände bis zur maximalen Tragkraft aufnehmen  Wird ein Gegenstand aufgenommen, wird die Tragkraft entsprechend reduziert Ist der Gegenstand zu schwer für die verbleibende Tragkraft, so kann die Spielfigur den Gegenstand nicht aufnehmen Eine Spielfigur kann mehrere Gegenstände mit sich rumtragen und diese Gegenstände später im Kampf aktiv einsetzen    Kampf  Jede Spielfigur kann gegen eine andere Spielfigur kämpfen  Der Kampf findet in Runden statt Es wird solange gekämpft, bis eine oder beide Spielfiguren keine Lebenspunkte mehr haben Steht nach 20 Runden noch kein Sieger fest, wird der Kampf abgebrochen Bei jeder Runde wird der Kampfwert der einen Spielfigur den Lebenspunkten des Gegners abgezogen und umgekehrt Diejenige Spielfigur mit den meisten verbliebenen Lebenspunkten gewinnt Jede Spielfigur kann in einem Kampf von ihren Gegenständen Gebrauch machen     Aufgabe 3  Definiere nun eigene Regeln für deine Spielfiguren, damit das Spiel ein wenig ausgeglichener wird Die Regeln können beliebig geändert werden Es dürfen natürlich auch neue Waffen und Gegenstände eingeführt werden Dein Entwurf soll mindestens eine neue Spielfigur, eine neue Waffe, einen neuen Gegenstand und eine neue Spezialität für eine Spielfigur enthalten   Aufgabe 4  Die Kämpfe können sehr unausgeglichen sein Das Spiel soll so gestaltet werden, dass nicht immer die gleichen Spielfiguren gewinnen   Aufgabe 5  Das Spiel soll für alle Aktionen einen übersichtlichen Log generieren Eine Ausgabe für die Kommandozeile genügt, wenn sie sauber formatiert ist   Aufgabe 6 Die Applikation hat nun aufgrund der vielen Klassen und Möglichkeiten eine gewisse Grösse erreicht und damit auch an Übersichtlichkeit verloren. Die Logik der Applikation ist nun, je nach Implementation, in sehr vielen unterschiedlichen Klassen vorhanden. In bestimmten Fällen, wie der Spezalisierung einer bestimmten Klasse, ist dies in Ordnung.\nWir arbeiten aber wenn immer möglich nach dem Single-Responsibility-Principle. Dieses Prinzip besagt, dass jeder Teil (bspw. Klasse, Methode) einer Applikation nur für genau eine Aufgabe innerhalb dieser Applikation zuständig und verantwortlich ist. Kurz gesagt: eine Methode macht beispielsweise niemals zwei verschiedene Dinge gleichzeitig.\n Erstelle eine Klasse, welche den Kampf zwischen zwei Spielfiguren verwaltet. Diese Klasse enthält diverse Methoden und ist verantwortlich für:  das Starten eines neuen Kampfes zwischen zwei Spielfiguren das Zählen der Kampfrunden das Verrechnen von Schaden das Ermitteln des Gewinners   Stelle sicher, dass die spezalisierten Modell-Klassen (Elf, Heiltrank) nur die Logik enthalten, die für eine Spezalisierung gerechtfertigt ist  Beispiel 1: die Berechnung des Kampfwerts eines Elfen gehört in die Elf-Klasse, die diese die Spezialisierung für einen Elfen enthält Beispiel 2: der Kampf zwischen zwei Spielfiguren gehört NICHT in die Spielfigur-Klasse, da diese generell gültige Informationen zu einer Spielfigur enthält und das eigentliche “Spiel” mit dem Kampf zweier Spielfiguren nicht die Aufgabe dieser Klasse ist     Aufgabe 7  Das Spiel soll erweitert werden, dass eine Spielfigur eine Rüstung tragen kann Es gibt leichte und schwere Rüstungen  Elfen und Goblins dürfen nur leichte Rüstungen tragen Menschen, Zwerge und Orks dürfen schwere Rüstungen tragen Trolle können aufgrund ihrer Grösse keine Rüstung tragen Eine Spielfigur, welche eine schwere Rüstung tragen kann, kann selbstverständlich auch eine leichte Rüstung anziehen   Eine Spielfigur muss nicht zwingend eine Rüstung tragen Jede Rüstung hat ein Gewicht, welches die Tragkraft der Spielfigur entsprechend verringert Eine Spielfigur kann eine Rüstung anziehen oder sie ablegen Mit dem Tragen einer Rüstung ist es einer Spielfigur möglich im Kampf pro Runde den Schaden komplett zu verhindern. Die schwere Rüstung ist dabei erfolgreicher. Das Verhindern von Schaden passiert zufällig   Aufgabe 8  Verhindere die Instanziierung von Klassen, die keinen Sinn ergeben (Beispiel Waffe, Spielfigur, …)   Aufgabe 9  Jede Spielfigur erhält einen Initiative-Wert Je höher der Wert, desto früher darf die Spielfigur im Kampf zuschlagen Tiefere Werte verteilen also ihren Schaden später als höhere Werte Eine Spielfigur mit tiefem Initiative-Wert kann nicht mehr zurückschlagen wenn sie getötet wird Das Tragen von schweren Rüstungen verringert den Initiative-Wert  ","categories":"","description":"Exam zu Modul #J3 - OOD - Rollenspiel\n","excerpt":"Exam zu Modul #J3 - OOD - Rollenspiel\n","ref":"/exams/java/java-ood/rollenspiel/","tags":"","title":"Rollenspiel"},{"body":"Entwirf ein Fahrzeugverwaltungssystem für ein Autohaus.\nDas Fahrzeugverwaltungssystem soll die Verwaltung von verschiedenen Fahrzeugtypen wie Autos, Lastwagen, Motorrädern. ermöglichen. Jedes Fahrzeug soll eine eindeutige Fahrzeugidentifikationsnummer (VIN) haben.\nJedes Fahrzeug verfügt über folgende Eigenschaften:\n Fahrzeugtyp (Auto, Lastwagen, Motorrad) Marke Modell Farbe Baujahr Preis Verfügbarkeit (ob das Fahrzeug zum Verkauf steht oder nicht)  Das Auto hat zudem:\n Type (Familienauto, Sportauto etc.) Anzahl Sitze Stauraum im Kofferraum in m^2  Der Lastwagen hat zudem:\n mit Anhänger Ladefläche  Das Motorrad hat zudem:\n Fahrzeugklasse (Sportmotorrad, Cruiser, Touring)  Das Fahrzeugverwaltungssystem soll die folgenden Funktionen unterstützen:\n Hinzufügen eines neuen Fahrzeugs zum Inventar des Autohauses. Aktualisieren der Details eines vorhandenen Fahrzeugs (z. B. Preisänderung, Verfügbarkeitsstatus, Ausstattungsmerkmale hinzufügen/entfernen). Entfernen eines Fahrzeugs aus dem Inventar, wenn es verkauft wurde oder nicht mehr verfügbar ist. Anzeigen einer Liste aller verfügbaren Fahrzeuge zum Verkauf. Reservierung eines Fahrzeugs für einen Kunden, bevor der endgültige Kauf abgeschlossen ist. Verkauf eines reservierten Fahrzeugs und Aktualisierung des Bestands.  ","categories":"","description":"Aufgabe zu Modul #J3 - OOD - Vehicles\n","excerpt":"Aufgabe zu Modul #J3 - OOD - Vehicles\n","ref":"/labs/java/java-ood/03_vehicles/","tags":"","title":"Vehicles"},{"body":"","categories":"","description":"Entwickungsumgebung aufsetzen für das Arbeiten mit Angular.\n","excerpt":"Entwickungsumgebung aufsetzen für das Arbeiten mit Angular.\n","ref":"/docs/web/ide_advanced/","tags":"","title":"Frontend IDE Advanced"},{"body":"Hello World Da Node.js bereits installiert wurde, kann nun anhand des Node Package Manager mühelos typescript installiert werden. Dazu öffnet man eine Konsole und gibt den folgenden Befehl ein:\n1  npm install -g typescript   Sobald die Installation abgeschlossen ist, erstellt man eine Datei und nennt diese hello-world.ts. Nun die Datei mit einer IDE öffnen und die folgende Codezeile reinschreiben:\n1  console.log(\"Hello World\");   Somit wurde das erste Typescript “Projekt” erstellt. Um dieses auszuführen, muss der Quellcode zu JS transpilieren. Dazu eine Konsole öffnen und sich in das Verzeichnis, indem sich die Datei befindet, begeben.\nDanach folgenden Befehl in der Konsole eingeben:\n1  tsc hello-world.ts   Wie nun zu sehen ist, befindet sich im Verzeichnis eine gleichnamige JS Datei.\nDiese kann nun mit Node ausgeführt werden:\n1  node hello-world.js   Falls alles funktioniert hat, gibt die Konsole Hello World aus.\n","categories":"","description":"Modul #F5 - TypeScript - TypeScript in Projekten\n","excerpt":"Modul #F5 - TypeScript - TypeScript in Projekten\n","ref":"/docs/web/typescript/04_ts_projekt_aufsetzen/","tags":"","title":"Projekt aufsetzen in TypeScript"},{"body":"Ziele  Du weisst, was ein Angular Component ist. Du weisst, welche vier Dateien zu einem Component gehören. Du kannst, einen Component ins Template einbinden.  Ein Angular Component setzt sich aus 4 Dateien zusammen:\n Template Unit Test File Stylesheet Component (Class)  Components Components sind wie Grundbausteine in einer Angular-Applikation. Components werden mit dem @Component Decorator definiert.\nComponents sind TypeScript Klassen, die die Daten und Kontrollstrukturen zum Verhalten der Templates beinhalten. Metadaten teilen Angular mit, wie die Components verarbeitet werden sollen (selector, template, style), dies kann bei dem Component Decorator genauer nachgelesen werden. Ein Component hat einen von Angular verwalteten Lifecycle. Angular erstellt und rendert Components zusammen mit ihren Children, überprüft, wann sich ihre Properties ändern, und zerstört sie, bevor sie aus dem DOM entfernt werden. Angular bietet sogenannte Lifecycle-Hooks an, mit denen wir handeln können, sobald sie auftreten.\nComponents im Template aufrufen In Angular kann man Components im Template aufrufen, indem man ihren Selektor verwenden.\nDurch das Aufrufen von Components im Template kann man wiederverwendbare Teile der Benutzeroberfläche erstellen und sie in verschiedenen Teilen der Anwendung verwenden, um Code-Duplikation zu vermeiden aber auch die Lesbarkeit und Wartbarkeit des Codes zu verbessern.\nAls erstes muss man den Component erstellen, die sollte mit dem CLI Command ng generate component greeting oder kürzer  ng g c greeting:\n1 2 3 4 5 6 7 8 9 10  import { Component } from '@angular/core'; @Component({ selector: 'app-greeting', templateUrl: './app-greeting.html', styleUrls: ['./app-greeting.scss'] }) export class GreetingComponent { name: string = 'Dragon Warrior'; }   1 2  \u003c!--app-greeting.html--\u003e \u003ch1\u003eHello, {{ name }}!\u003c/h1\u003e   Nachdem man den Component erstellt hat, kann man ihn im Template eines anderen Components aufrufen, dazu kann man den Selektor verwenden.\n1 2 3  \u003cdiv\u003e \u003capp-greeting\u003e\u003c/app-greeting\u003e \u003c/div\u003e   Das Ergebnis ist, dass die \u003capp-greeting\u003e\u003c/app-greeting\u003e Tags durch das gerenderte Template des GreetingComponent ersetzt werden. In diesem Fall wird eine Überschrift “Hello, John!” angezeigt, weil name im Typescript auf “John” gesetzt ist.\n","categories":"","description":"Modul #F6 - Angular - Components\n","excerpt":"Modul #F6 - Angular - Components\n","ref":"/docs/web/angular/02_3_angular_components/","tags":"","title":"Components"},{"body":"Übung macht den Meister Bevor wir mit fortgeschrittenen JavaScript-Technologien weiterfahren, sollst du die Basics von JavaScript verstanden haben.\nHierfür empfehlen wir dir folgenden Online-Kurs: https://www.codecademy.com/learn/introduction-to-javascript\nDieser Kurs ist grundlegend. Da JavaScript und Java in der Syntax sehr ähnlich sind sollte ein grosser Teil für dich Repetition von Java-Teil sein.\nMöchtest du z.B. zur nächsten Aufgabe ohne die aktuelle lösen zu müssen, dann kannst du 2x auf “Run” klicken, dann auf “View Solution” und anschliessend auf “Replace with Solution”.\nEine Übersicht über die Themen erhältst du via Klick oben links auf “Course Menu”.\nSchaue, dass du mindestens folgendes verstanden hast und anwenden kannst:\n   Kaptiel Das musst du anwenden können Bemerkungen     Introduction Variablen definieren, Unterschied zwischen var, let und const, mathematische Operationen, typeof-Operator, String-Methoden wie trim, startsWith, … Prüfe zudem dein Wissen mit dem “Introduction to JavaScript”-Quiz   Conditionals if/else/switch statements, Vergleichsoperatoren, du kennst truthy und falsy Werte Löse auch ein paar Aufgaben und den Test “Conditional Statements” solltest du fehlerfrei abschliessen können.   Functions Funktions-Definition, -Aufruf, Default-Parameter, Arrow Functions, Function Expressions, Globaler und Block-Scope Die Tests sind leider nicht mehr in der kostenlosen Version inbegriffen.   Arrays Arrays/Listen erstellen, updaten, Länge bestimmen, durch Array durch iterieren    Loops Du kannst for-, while- und do while-Schlaufen benutzen und mit break kontrolliert abbrechen.    Iterators Functions as Data and Parameters, Iteratoren wie .forEach, .map, .filter, .reduce anwenden können    Objects Objekte erstellen mit Properties und Methoden, Pass By Reference verstehen, durch Objekte durchiterieren, Advanced Objects mit dem this-Keyword, Getter und Setter     ","categories":"","description":"Modul #F4 - JavaScript - Trainiere deine Fähigkeiten mit JavaScript.\n","excerpt":"Modul #F4 - JavaScript - Trainiere deine Fähigkeiten mit JavaScript.\n","ref":"/docs/web/javascript/04_js_training/","tags":"","title":"JavaScript trainieren"},{"body":"","categories":"","description":"Labs zu Angular\n","excerpt":"Labs zu Angular\n","ref":"/labs/web/angular/","tags":"","title":"Angular Labs"},{"body":"","categories":"","description":"Labs zu Web\n","excerpt":"Labs zu Web\n","ref":"/labs/web/","tags":"","title":"Web Labs"},{"body":"Hallo Ninja! 🥷\nEs freut uns das du git kennen lernen willst!\nWir haben hier ein Lab für dich zusammengestellt damit du in dieses Thema eintauchen kannst. Finde für dich heraus warum git eine Zeitmaschine ist und was es mit den Paralleluniversen auf sich hat.\nZiele Du kannst …\n git konfigurieren Repositories auschecken Branches erstellen und auschecken Commits erstellen und Commit Messages nach gegebenen Richtlinien formulieren Änderungen vom Server pullen Merge-/Pullrequests erstellen (z.B. auf Github, Bitbucket, Gitlab) Änderungen anhand der Git History nachvollziehen Branches mergen und rebasen  Vielleicht sogar …\n Commits squashen Tags erstellen und pushen Aliasse einrichten Blame anwenden  Schwerpunkte Dieses Lab unterteilt sich in folgende Themenbereiche:\n Was ist dieses Git? Git installieren Git Basics Git Branches GitHub Git Erweitert  Let’s play! Meisterst du diese Challenges?\n oh my git! learn git branching git immersion  Voraussetzungen  git installiert  ","categories":"","description":"Verteilte Versionsverwaltung mit Git","excerpt":"Verteilte Versionsverwaltung mit Git","ref":"/docs/git/","tags":"","title":"Git"},{"body":"Ziele  Du weisst was Normalisierung ist und wieso sie wichtig ist Du kannst die ersten drei Normalformen in eigenen Worten erklären Du kennst den Unterschied zwischen den Begriffen ERM und ERD Du kennst die verschiedenen Beziehungstypen im Bereich der Kardinalität  Normalisierung Die Normalisierung in SQL ist ein Prozess, bei dem Datenbanktabellen in bestimmte Normalformen gebracht werden, um die Datenintegrität und -konsistenz sicherzustellen und die Redundanz zu minimieren. Ziel ist es, die Daten effizient und konsistent zu speichern, zu verwalten und zu abzufragen.\nEs gibt verschiedene Ausmasse, in denen ein Datenbankschema gegen Anomalien (wie z.B Inkonsistenz) geschützt werden kann. Diese unterschiedliche Ausmasse werden in diesem Zusammenhang Normalformen genannt. In den nächsten Abschnitten, wirst du die erste, zweite und dritte Normalformen kennenlernen.\nErste Normalform (1NF) Die Erste Normalform (1NF) ist das grundlegende Konzept in der Datenbankentwicklung, das sicherstellt, dass eine Tabelle atomare Werte enthält und keine wiederholten Gruppen von Attributen zulässt. Das Ziel der 1NF ist es, die Daten in ihre einfachsten, nicht weiter unterteilbaren Bestandteile zu zerlegen.\nIn der ersten Normalform sollte jede Zelle in einer Tabelle nur einen einzigen Wert enthalten. Mehrwertige Attribute oder Attribute, die wiederholte Gruppen von Werten enthalten, sind nicht erlaubt. Wenn mehrere Werte zu einem Attribut gehören, müssen sie in separate Spalten oder sogar in separate Tabellen ausgelagert werden.\nNun können wir ein Beispiel betrachten:\nAngenommen, wir haben eine Tabelle mit Kundendaten, die den Namen, die Adresse und die Telefonnummer enthält. Diese Tabelle könnte folgendermassen aussehen:\n   Kundennummer Kundename Adresse Telefonnummer     1 Max Hauptstr. 1, 123 123456789   2 Lisa Nebenstr. 5, 987 987654321    Nach der Normalisierung in der 1NF würde die Tabelle dann so aussehen:\n   Kundennummer Kundenname Strasse Hausnummer PLZ Ort Telefonnummer     1 Max Hauptstr. 1 123 Musterort 123456789   2 Lisa Nebenstr. 5 987 Beispielort 987654321    Zusammenfassend kann man sagen, dass die erste Normalform (1NF) darauf abzielt, Daten in ihre einfachsten atomaren Werte zu zerlegen und keine wiederholten Gruppen von Attributen zuzulassen. Dadurch werden die Daten besser strukturiert, die Redundanz minimiert und die Datenintegrität verbessert.\nZweite Normalform (2NF) Die Zweite Normalform (2NF) zielt darauf ab, Daten so zu strukturieren, dass keine wiederholten Informationen in einer Tabelle vorhanden sind. Stattdessen werden die Daten aufgeteilt und in separate Tabellen organisiert, die über einen gemeinsamen Schlüssel verknüpft sind. Dadurch werden Daten effizienter gespeichert und logische Konsistenz gewährleistet.\nAngenommen, wir haben eine Tabelle mit Kundendaten, die Name und Telefonnummer enthält. Zusätzlich speichern wir für jeden Kunden die bestellten Produkte und die jeweilige Menge in derselben Tabelle. Die Tabelle könnte also folgendermassen aussehen:\n   Kundennummer Kundenname Telefonnummer Produkt Menge     1 Max 123456789 Schuhe 2   1 Max 123456789 Hemd 1   2 Lisa 987654321 Hose 3   2 Lisa 987654321 Jacke 2    In diesem Fall haben wir eine Mischung aus Kundendaten und Bestelldaten in einer einzigen Tabelle. Das Problem dabei ist, dass die Kundendaten für jedes Produkt und jede Menge wiederholt werden müssen. Wenn Max zum Beispiel 3 verschiedene Produkte bestellt, würden seine Kundendaten dreimal wiederholt werden.\nUm dieses Problem zu lösen und die Zweite Normalform (2NF) zu erreichen, müssen wir die Daten aufteilen und in separate Tabellen organisieren. Eine Tabelle enthält die Kundendaten und eine andere Tabelle enthält die Bestelldaten. Beide Tabellen werden durch einen gemeinsamen Schlüssel (Kunde) verknüpft.\nKundentabelle:\n   Kundennummer Kundenname Telefonnummer     1 Max 123456789   2 Lisa 987654321    Bestellungstabelle:\n   Kundennummer Produkt Menge     1 Schuhe 2   1 Hemd 1   2 Hose 3   2 Jacke 2    Dadurch erreichen wir eine klare Trennung der Daten. Die Kundendaten müssen nur einmal gespeichert werden und werden über den Schlüssel (Kunde) mit den entsprechenden Bestellungen verknüpft. Das reduziert die Redundanz und sorgt für eine bessere Organisation der Daten.\nDritte Normalform (3NF) Die 3NF baut auf der zweiten Normalform (2NF) auf, indem sie weitergehende Anforderungen an die Strukturierung der Daten stellt.\nDas Ziel der Dritten Normalform ist es, sicherzustellen, dass es in einer Datenbanktabelle keine Abhängigkeiten zwischen Nicht-Schlüsselattributen gibt, die nicht durch den Primärschlüssel erklärt werden können. Mit anderen Worten sollen alle Nicht-Schlüsselattribute funktional von einem vollständigen Teil des Primärschlüssels abhängig sein und keine funktionalen Abhängigkeiten untereinander aufweisen.\nUm die 3NF zu erreichen, müssen die Daten in mehrere Tabellen aufgeteilt werden, wobei jede Tabelle einen spezifischen Informationsaspekt repräsentiert. Diese Tabellen werden dann über gemeinsame Schlüssel (also über sog. Fremdschlüssel) verknüpft, um Beziehungen zwischen den Daten herzustellen.\nNun können wir ein Beispiel betrachten:\nWir haben eine Ausgangstabelle, die alle Informationen eines Online-Shops beinhaltet. Aktuell ist diese Tabelle noch nicht normalisiert:\nAusgangstabelle:\n   Kundenummer Name Telefonnummer ProduktId Produktname Bestellmenge Gesamtpreis     1 Max 123456789 101 Schuhe 2 50.00   1 Max 123456789 102 Hemd 1 30.00   2 Lisa 987654321 103 Hose 4 80.00   2 Lisa 987654321 104 Jacke 3 75.00    Um die 3NF zu erreichen, müssen wir die Daten weiter aufteilen und in separate Tabellen organisieren.\nDie Aufteilung erfolgt in drei Tabellen: “Kundentabelle”, “Produkttabelle” und “Bestellungstabelle”. Die Spalten der Tabellen könnten wie folgt aussehen:\nKundentabelle:\n   Kundenummer Name Telefonnummer     1 Max 123456789   2 Lisa 987654321    Produkttabelle:\n   ProduktId Produktname Produktpreis     101 Schuhe 25.00   102 Hemd 30.00   103 Hose 20.00   104 Jacke 25.00    Bestellungstabelle:\n   Kundenummer ProduktId Bestellmenge Gesamtpreis     1 101 2 50.00   1 102 1 30.00   2 103 4 80.00   2 104 3 75.00    Nach dieser Aufteilung ist bereits die zweite Normalform erreicht. Um die dritte Normalform also zu erreichen müssen wir alle Spalten entfernen, die abhängig von Nichtschlüssel-Attributen sind. In unserem Beispiel wäre dies der Gesamtpreis in der Bestellungstabelle. Dieser Preis kann anhand der Bestellmenge und dem Produktpreis berechnet werden und ist deshalb nicht nötig. Je nach Schema kann die dritte Normalform auch negative Auswirkungen auf die Performance haben, da keine berechneten Werte gespeichert werden dürfen. Wenn wir die Änderung in unserem Beispiel vornehmen würde die Tabelle schlussendlich so aussehen:\nBestellungstabelle:\n   Kundenummer ProduktId Bestellmenge     1 101 2   1 102 1   2 103 4   2 104 3    Durch diese Änderung erfüllt unsere Beispiel-Datenbank die ersten drei Normalformen.\nWeiter gibt es auch höhere Normalformen wie die Boyce-Codd-Normalform (BCNF) und die Vierte Normalform (4NF), aber diese sind für den Anfang weniger relevant und komplexer zu erklären.\nDatenbankdesign In diesem Teil schauen wird uns hauptsächlich die beiden Begriffe ERM (Entity-Relationship-Modell) und ERD (Entity-Relationship-Diagramm) an. Wichtig ist den Unterschied der beiden zu kennen. Ein ERM ist eine Modellierungstechnik, die zur Abbildung der Beziehungen zwischen verschiedenen Entitäten in einem System verwendet wird. Mit Text wird versucht die Datenbank so einfach und klar wie möglich zu beschreiben, um später ein ERD dazu erstellen zu können. Es werden jeweils die Entitäten (Tabellen) und Beziehungen aufgefasst. Hier ein Beispiel eines einfachen ERMs:\nEntitäten:\n   Entität-Name Beschreibung     Student Jeder Student hat eine eindeutige ID, einen Namen, ein Geburtsdatum und Kontaktdaten.   Kurs Jeder Kurs hat eine eindeutige ID, einen Titel, eine Anzahl von Kreditpunkten und einen zugeordneten Dozenten.    Beziehungen:\n   Beziehungs-Name Beschreibung     Einschreibung Diese Beziehung zeigt die Verbindung zwischen Studenten und Kursen an. Jede Einschreibung hat eine eindeutige ID und ist mit einem bestimmten Studenten und einem bestimmten Kurs verknüpft.    Ein ERD ist eine grafische Darstellung eines ERM, die verwendet wird, um die Beziehungen zwischen Entitäten und Attributen darzustellen. Es besteht aus Entitäten, Attributen und Beziehungen und bietet eine formale Möglichkeit, die Struktur und das Verhalten eines Systems darzustellen. In diesem Schritt wird hauptsächlich angeschaut, was in der Datenbank benötigt wird und so eine klare Struktur gefunden. Diese Struktur kann dann später in einem ERD dargestellt werden.\nEs gibt viele verschiedene Zeichen-Softwares für das Erstellen von ERDs. Zu empfehlen ist draw.io, da es sich dabei um eine Web-Applikation handelt, welche keinen Download benötigt. Auch das spätere Diagramm wurde mit draw.io erstellt. Wichtig beim Erstellen sind auch die Kardinalitäten, die für die Beziehungen benötigt werden. Schauen wir uns diese also an.\nKardinalität Die Kardinalität in einem Entity-Relationship-Modell (ERM) beschreibt die Beziehung zwischen zwei Entitäten und gibt an, wie viele Instanzen einer Entität mit einer oder mehreren Instanzen einer anderen Entität verbunden sein können. Es gibt verschiedene Methode, um die Kardinalität einer Beziehung zu beschreiben. Wir verwenden hauptsächlich die Chen-Notation. Alternativ kann auch die Martin-Notation verwendet werden. So funktioniert die Chen-Notation:\n1:1 (1 zu 1)\n Jede Entität der ersten Entitätsmenge steht mit genau einer Entität der zweiten Entitätsmenge in Beziehung, und umgekehrt.  1:c (1 zu [0 oder 1])\n Jede Entität der ersten Entitätsmenge kann mit höchstens einer Entität der zweiten Entitätsmenge in Beziehung stehen. Jede Entität der zweiten Entitätsmenge steht mit genau einer Entität der ersten Entitätsmenge in Beziehung.  1:m (1 zu [mindestens 1])\n Jede Entität der ersten Entitätsmenge steht mit mindestens einer Entität der zweiten Entitätsmenge in Beziehung. Jede Entität der zweiten Entitätsmenge steht mit genau einer Entität der ersten Entitätsmenge in Beziehung.  1:mc (1 zu [beliebig vielen])\n Jede Entität der ersten Entitätsmenge kann mit beliebig vielen Entitäten der zweiten Entitätsmenge in Beziehung stehen. Jede Entität der zweiten Entitätsmenge steht mit genau einer Entität der ersten Entitätsmenge in Beziehung.  c:c ([1 oder 0] zu [0 oder 1])\n Jede Entität der ersten Entitätsmenge kann mit höchstens einer Entität der zweiten Entitätsmenge in Beziehung stehen, und umgekehrt.  c:m ([0 oder 1] zu [mindestens 1])\n Jede Entität der ersten Entitätsmenge steht mit mindestens einer Entität der zweiten Entitätsmenge in Beziehung. Jede Entität der zweiten Entitätsmenge kann mit höchstens einer Entität der ersten Entitätsmenge in Beziehung stehen.  c:mc ([0 oder 1] zu [beliebig vielen])\n Jede Entität der ersten Entitätsmenge kann mit beliebig vielen Entitäten der zweiten Entitätsmenge in Beziehung stehen. Jede Entität der zweiten Entitätsmenge kann mit höchstens einer Entität der ersten Entitätsmenge in Beziehung stehen.  m:m ([mindestens 1] zu [mindestens 1])\n Jede Entität der ersten Entitätsmenge steht mit mindestens einer Entität der zweiten Entitätsmenge in Beziehung, und umgekehrt.  m:mc ([mindestens 1] zu [beliebig vielen])\n Jede Entität der ersten Entitätsmenge kann mit beliebig vielen Entitäten der zweiten Entitätsmenge in Beziehung stehen. Jede Entität der zweiten Entitätsmenge steht mit mindestens einer Entität der ersten Entitätsmenge in Beziehung.  mc:mc ([beliebig viele] zu [beliebig vielen])\n Jede Entität der ersten Entitätsmenge kann mit beliebig vielen Entitäten der zweiten Entitätsmenge in Beziehung stehen, und umgekehrt.  Wenn wir also unser Wissen in einem ERM aufzeichnen, würde das ungefähr wie in diesem Diagramm aussehen:\nHier wurde eine Buchdatenbank dargestellt, die Bücher und Autoren hat.\n Hinweis: mehrere zu mehrere (m:m, mc:m, …) benötigen normalerweise eine Zwischentabelle, da sonst keine eindeutige Verbindung zwischen den Tabellen hergestellt werden kann.\n ","categories":"","description":"","excerpt":"Ziele  Du weisst was Normalisierung ist und wieso sie wichtig ist Du …","ref":"/docs/database/04_datenbank-design/","tags":"","title":"Datenbank Design"},{"body":"Nachdem du die Basics von git gelernt hast, ist es Zeit dich weiter zu vertiefen.\nInhalt  Stash Cherry Pick Tag Alias  Stash Was ist stash? Mit git stash ist es möglich Änderungen zwischenzuspeichern und diese später abzurufen. Nach dem Stash-Vorgang kannst du an anderen Dateien arbeiten, bis du die zwischengespeicherten Daten wieder abrufen kannst.\nWie funktioniert stash? Um Dateien zu stashen wird der folgende Befehl verwendet:\n1  git stash   Um Dateien im Anschluss abzurufen wird der folgende Befehl verwendet:\n1  git stash pop   Mit git stash pop werden alle Änderungen des Stashes gelöscht und der ursprünglichen Datei hinzugefügt.\nDie Alternative dazu ist:\n1  git stash apply   Mit git stash apply werden die Änderungen ebenfalls übernommen, der Unterschied zu git stash pop liegt darin das stash apply die Dateien nicht aus dem Stash löscht, dies kann nützlich sein, wenn dieselbe Änderung mehreren Branches hinzugefügt werden soll.\nSquash Was ist Squash squash in Git meint mehrere Commits zu vereinen. Squash wird meistens benutzt, wenn Branches gemerged werden. An dieser Stelle ist es jedoch wichtig zu erwähnen das es keinen git squash Befehl gibt.\nWie funktioniert squash? Es gibt verschiedene Wege um Commits zu squashen. Zum Beispiel gibt es die Methode des manuellen Squashens, dazu wird das Interactive Rebase Feature von Git genutzt. Um die Interactive Rebase Session zu starten wird der folgende Befehl verwendet:\n1  git rebase -i HEAD~3   Danach öffnet sich ein Editor, der die letzten n Commits anzeigt, n wird durch die Zahl nach dem “~” definiert. Um jetzt die Commits zu squashen muss das Pick zu Beginn der Zeile mit squash ersetzt werden. Jetzt werden alle Commits mit dem squash Schlüsselwort an den obersten Commit hinzugefügt.\nWieso sollte man Squashen: Angenommen du beendest die Arbeit an einem Feature-Branch und willst diese in den Main-Branch mergen. Der Feature-Branch enthält aber viele Commits, die nicht zwingend im Main-Branch aufgeführt werden sollen, in diesem Fall eignet sich das squashen, um diese Commits zusammenzufassen.\nMerge/Pull Requests Was ist der Unterschied zwischen einer Merge Request und einer Pull Request? Beide Begriffe meinen dasselbe, werden jedoch mit einer anderen Plattform assoziiert. Der Begriff Merge Request wird im Zusammenhang mit GitLab verwendet. Im Zusammenhang mit GitHub wird jedoch der Begriff Pull Request verwendet. Der Einfachheit halber wird im folgenden Text nur von Pull Request gesprochen.\nWas ist ein Pull Request bzw. ein Merge Request? In ihrer einfachsten Form sind Pull-Requests eine Funktion für Entwickler die andere Teammitglieder darüber informiert, dass ein Feature fertiggestellt wurde. Dies lässt alle Beteiligten wissen, dass der Code bereit für eine Überprüfung ist und danach in einen anderen Zweig gemerged werden kann.\nWie kann ein Pull Request erstellt werden (IntelliJ) Um einen Pull Request direkt aus IntelliJ zu erstellen, muss zuerst sichergestellt werden das man selbst berechtigt ist einen Pull Request zu erstellen. Sind diese Berechtigungen vorhanden, kann der Pull Request in wenigen Schritten erstellt werden. Oben Links in IntelliJ befindet sich einen Button der mit Pull Request beschriftet ist. Danach öffnet sich ein Fenster in dem ausgewählt werden kann, welchen der lokalen Branches in das Ziel Repo gemerged werden soll. Danach muss noch ein Titel festgelegt werden. Es besteht ebenfalls die Möglichkeit eine Beschreibung hinzuzufügen, dies ist jedoch nur optional. Im Anschluss besteht die Möglichkeit einen Reviewer hinzuzufügen. Jetzt kann der Pull Request erstellt werden.\nWie kann eine Pull Request erstellt werden (Github) Um einen Pull Request direkt von GitHub aus zu erstellen, muss zuerst der Reiter Pull Request ausgewählt werden, Jetzt stehen verschiedene Möglichkeiten zu Auswahl, in unserem Fall wollen wir aber nur einen neuen Pull Request erstellen. Im Anschluss erscheint ein neues Panel, das Wichtigste dabei ist die Wahl der richtigen Source und Target Branches. Danach kann noch ein Name und eine Beschreibung für den Pull Request gesetzt werden. Wie in IntelliJ besteht auch hier die Möglichkeit einen Reviewer hinzuzufügen, der Button dazu befindet sich mittig auf der linken Seite. Da nun alle Einstellungen vorgenommen wurden, kann der Pull Request erstellt werden.\nCherry Pick Was ist Cherry-Pick ? git cherry-pick ist ein Befehl welcher es ermöglicht beliebige Git-Commits per Referenz anzusprechen und diese an den momentanen Arbeitskopf (HEAD) anzuheften. git cherry-pick kann sehr nützlich sein, um Änderungen rückgängig zu machen.\nZum Beispiel: Ein Commit wurde aus Versehen im falschen Branch durchgeführt. Nun kannst du zum korrekten Branch wechseln und git cherry-pick nutzen, um den Commit am richtigen Ort zu befestigen.\nWie funktioniert Cherry-Pick ? Um Cherry Pick anzuwenden gibt man folgenden Befehl ein:\n1  git cherry-pick \u003ccommit-hash\u003e   Der  muss natürlich noch mit dem korrekten Hash des Commits ersetzt werden, welchen man verschieben will. Anschliessend wird der Commit an den Branch angeheftet, auf dem man sich gerade befindet. Darum Achtung!: Immer zuerst kontrollieren ob man derzeit auch wirklich auf dem korrekten Branch ist.\nTag Was sind Tags ? Tags sind Referenzen, welche an einen bestimmten Punkt der History zeigen. Tagging wird üblicherweise benutzt um wichtige Ereignisse wie z.B. den Release einer Applikation festzuhalten. Ein Tag ist etwas ähnliches wie ein Branch, nur das ein Tag sich nicht verändert. Anders als ein Branch, kann ein Tag nach dem Erstellen keine weiteren Commits beinhalten.\nWie funktionieren Tags ? Um ein Tag zu erstellen wird folgender Befehl benötigt:\n1  git tag \u003ctagname\u003e   Wobei der  auch wieder durch den gewünschten String ersetzt werden muss. Will man zusätzlich zum Tag eine Beschriftung hinzufügen, macht man das mit:\n1  git tag \u003ctagname\u003e -a   Damit wird ein Annotated Tag erstellt. Diese Tags werden im Gegensatz zu normalen Tags für einen Release verwendet.\nAuch wichtig anzumerken: Wenn du normal auf den Branch pushst, werden die Tags nicht standardmässig mitgepusht. Dazu brauchst du dann:\n1  git push origin --tags   Willst du nur ein einzelnes Tag pushen, brauche:\n1  git push origin \u003ctag\u003e   Alias Was sind Aliasse ? Ein Git-Alias ist zu vergleichen mit einem Shortcut. Aliase werden z.b. auch beim Arbeiten mit der Bash-Konsole eingesetzt. Aliase werden gebraucht um kürzere Befehle zu realisieren. Sie ermöglichen effizienteres Programmieren.\nNehmen wir zum Beispiel den git-checkout Befehl. Dieser Befehl wird häufig verwendet und muss immer wieder neu eingetippt werden. Mit den Git-Aliassen jedoch kann man git-checkout z.B. in git.co verwandeln. Dies spart enorme Schreibarbeit über längere Zeit und verliert dennoch nicht an Wirksamkeit.\nWie funktionieren Aliasse? Um Aliasse festzulegen, müssen wir diese in der gitconfig-Datei definieren. Dort erstellen wir das Stichwort [alias]. Das könnte in etwa so aussehen:\n1 2 3  [alias] st = status ci = commit -v   Die Aliasse können beliebig definiert werden, Ziel davon soll nur sein, die Schreibarbeit zu minimieren und das eigene Programmieren praktischer zu machen.\nGitg Was ist Gitg Gitg ist eine grafische Benutzeroberfläche für git. Es zielt darauf ab, ein kleines, schnelles und bequemes Werkzeug zu sein, um Git-Repositories zu visualisieren. Neben der Visualisierung bietet Gitg auch einfache Möglichkeiten zur Verwaltung eines Repository. Jedoch bietet IntelliJ standardmässig die dieselben Möglichkeiten, sollte man jedoch eine IDE ohne Git integration verwenden ist gitg ein praktisches Tool.\nInstallationsanleitung Unter Linux kann gitg mit folgendem Befehl installieren: sudo apt install gitg\nLeider ist gitg unter Windows nicht verfügbar. Eine empfehlenswerte Alternative dazu ist der offizielle GitHub Client.\nGithub Client Was ist der GitHub Client Der GitHub Client ist ein Windows Programm für die Verwaltung von Git Repositories. Der GitHub Client funktioniert am besten mit GitHub Repositories, das bedeutet aber nicht das dieser keine Repositories von anderen Quellen unterstützt. Es ist lediglich ein wenig aufwändiger Repositories aus anderen Quellen einzubinden.\nInstallationsanleitung Unter Windows kann der GitHub Client auf der folgenden Seite heruntergeladen werden: https://desktop.github.com/\nUnter Linux der Client mithilfe des folgenden Scripts heruntergeladen werden: https://gist.github.com/berkorbay/6feda478a00b0432d13f1fc0a50467f1\nGit Blame Was ist Git-Blame? Ist ein Befehl, welcher dazu dient den Author der letzten Änderung anzuzeigen. Deswegen auch git “blame”. Man “blamed” den Verfasser der letzten Änderung für seinen Fehler (falls er einen gemacht hat).\nWie funktioniert Git-Blame? Um git blame anzuwenden brauchen wir den folgenden Befehl:\n1  git blame \u003cfilename\u003e   Und schon haben wir den Verantwortlichen für die letzte Änderung an einer Datei ausfindig gemacht. Jedoch bietet git blame auch andere Anwendungsmöglichkeiten:\n1  git blame -L 1,5 \u003cfilename\u003e   Hier zum Beispiel definieren wir eine Range von der Zeile 1 bis zur Zeile 5. Oder hier, noch eine weitere Variante:\n1  git blame -e \u003cfilename\u003e   Die Option -e zeigt uns anstatt des Benutzernamen des Authors, direkt die E-mail Adresse von ihm, so dass wir gerade Kontakt aufnehmen können.\nZum Schluss haben wir noch die -w Option\n1  git blame -w \u003cfilename\u003e   Dieser Befehl ignoriert wenn ein Author nur Leerschläge geändert hat. Das hat den Vorteil, dass wir nur die Authoren bekommen, welche auch wirklich etwas am Code selbst geändert und ihn nicht nur formatiert haben.\nBlobs und Trees Was sind Blobs und Trees show? Zuerst zu den Blobs: Blobs werden benutzt, um die Inhalte einzelner Dateien zu speichern. Trees wiederum beinhalten Referenzen zu anderen Blobs oder Unterbäumen.\nWozu braucht es sie? Wenn man eine Datei staged wird eine Blob-Datei erstellt. Dieser Blob hat den Inhalt der Datei und hat den Typ “blob”. Ein Blob eigentlich der Inhalt der Datei an einer bestimmten Instanz. Die verschiedenen Blobs fallen danach unter einen Tree.\nNun bildet sich hier eine Kette: Das Commit-Objekt greift auf die Tree-Objekte zu. Diese wiederum geben uns die Blob-Objekte zurück. Deshalb brauchen wir diese Konstellation also. Ohne die Trees und Blobs hätten wir keinen Zugriff auf die Inhalte unserer Dateien mehr.\nIm Diagramm kann die Abhängigkeit dementsprechend besichtigt werden. ","categories":"","description":"","excerpt":"Nachdem du die Basics von git gelernt hast, ist es Zeit dich weiter zu …","ref":"/docs/git/git-extended/","tags":"","title":"Git Erweitert"},{"body":"java.util.HashMap Eine Map verwendet man, um Zuweisungen zu speichern. Die java.util.HashMap ist die gebräuchlichste Map. Man könnte zum Beispiel ein Register mit Postleitzahlen (PLZ) und den dazugehörigen Orten speichern. Die PLZ ist der Schlüssel und der Ort ist der zugewiesene Wert.\nEine Zuweisung besteht aus einem Schlüssel (Key) und einem Wert (Value).  Dabei ist der Schlüssel immer eindeutig. Speichert man zwei Zuweisungen mit dem gleichen Schlüssel, so wird die erste Zuweisung überschrieben.\nBei der Benennung eine Map versucht man die Zuweisung zu beschreiben:\nplzToCityMap –\u003e PLZ zu City Zuweisung\nMethodenübersicht 1 2 3 4 5 6 7 8 9 10 11 12 13  Map\u003cInteger, String\u003e plzToCityMap = new HashMap\u003c\u003e(); plzToCityMap.put(3000, \"Zürich\"); plzToCityMap.put(3000, \"Bern\"); plzToCityMap.put(3011, \"Bern\"); plzToCityMap.put(1234, \"Vessy\"); plzToCityMap.put(3920, \"Zermatt\"); System.out.println(plzToCityMap.size()); // Output: 4 System.out.println(plzToCityMap.get(3000)); // Output: Bern System.out.println(plzToCityMap.containsKey(1234)); // Output: true System.out.println(plzToCityMap.containsValue(\"Zürich\")); // Output: false System.out.println(plzToCityMap.containsValue(\"Zermatt\")); // Output: true    Die Map offeriert drei Collection Ansichten auf den gespeicherten Inhalt:\n keySet(): Set auf alle Schlüssel values(): Collection auf alle Werte entrySet(): Set auf alle Schlüssel-Werte Zuweisungen forEach(): Führt eine bestimmte Aktion über alle Elemente aus  Die Reihenfolge des Inhalts hängt von der Implementierung der Iteratoren ab, welche eine konkrete Map Klasse für die einzelnen Collection-Ansichten verwendet. Manche Implementation wie die TreeMap garantiert eine bestimmte Reihenfolge, andere wie die HashMap keine.\n Beispiel    Beispiel Für die Beispiele verwenden wir folgende HashMap:\n1 2 3 4 5 6 7  Map\u003cInteger, String\u003e plzToCityMap = new HashMap\u003c\u003e(); plzToCityMap.put(3000, \"Zürich\"); plzToCityMap.put(3000, \"Bern\"); plzToCityMap.put(3011, \"Bern\"); plzToCityMap.put(1234, \"Vessy\"); plzToCityMap.put(3920, \"Zermatt\");   Beispiel 1 - Auslesen der Schlüssel, Werte und Zuweisungen Mit der Methode keySet() kann man alle Schlüssel einer Map abfragen. Der Rückgabewert ist ein Set, welches wir bestens kennen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  // Abfrage der Schlüssel mit einem Iterator: Iterator\u003cInteger\u003e plzIterator = plzToCityMap.keySet().iterator(); while(plzIterator.hasNext()) { System.out.println(plzIterator.next()); } // Abfrage der Schlüssel mit einer FOR Schleife: for (Integer plz : plzToCityMap.keySet()) { System.out.println(plz); } // Abfrage der Schlüssel mit einem Stream: plzToCityMap.keySet().stream() .forEach(plz -\u003e System.out.println(plz)); }   Ebenso kann man die Werte der Zuweisungen mit der Methode values() abfragen. Als Resultat erhält man eine Collection.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  // Abfrage der Werte mit einem Iterator: Iterator\u003cString\u003e nameIterator = plzToCityMap.values().iterator(); while(nameIterator.hasNext()) { System.out.println(nameIterator.next()); } // Abfrage der Werte mit einer FOR Schleife: for (String name : plzToCityMap.values()){ System.out.println(name); } // Abfrage der Werte mit einem Stream: plzToCityMap.values().stream() .forEach(name -\u003e System.out.println(name)); } // Abfrage der Werte mit einem forEach: plzToCityMap.values().forEach(name -\u003e System.out.println(name))   Es besteht auch die Möglichkeit mit der Methode entrySet() die Zuweisungen mit Schlüssel und Wert abzufragen. Man erhält wieder ein Set.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  // Abfrage der Zuweisungen mit einem Iterator: Iterator\u003cMap.Entry\u003cInteger, String\u003e\u003e plzCityIterator = plzToCityMap.entrySet().iterator(); while(plzCityIterator.hasNext()) { Map.Entry\u003cInteger, String\u003e entry = plzCityIterator.next(); System.out.println(entry.getKey() + \" : \" + entry.getValue()); } // Abfrage der Zuweisungen mit einer FOR Schleife: for (Map.Entry entry : plzToCityMap.entrySet()) { System.out.println(entry.getKey() + \" : \" + entry.getValue()); } // Abfrage der Zuweisungen mit einem Stream: plzToCityMap.entrySet().stream() .forEach(plzCity -\u003e System.out.println(plzCity.getKey() + \" : \" + plzCity.getValue())); // Abfrage der Zuweisungen mit einem forEach: plzToCityMap.forEach((plz, city) -\u003e System.out.println(plz + \" : \" + city));     Aufgaben    Aufgaben Aufgaben zu Modul #J7 - Java Collections - Map\n","categories":"","description":"Die gebräuchlichste Umsetzung einer Map: HashMap.\n","excerpt":"Die gebräuchlichste Umsetzung einer Map: HashMap.\n","ref":"/docs/java/java-collections/04_map/","tags":"","title":"HashMap"},{"body":"","categories":"","description":"Exercises zu Modul #J2 - Generics I\n","excerpt":"Exercises zu Modul #J2 - Generics I\n","ref":"/labs/java/java-generics/","tags":"","title":"Java Exercises - Generics I"},{"body":"","categories":"","description":"Modul #J2\n","excerpt":"Modul #J2\n","ref":"/docs/java/j2-oop/","tags":"","title":"Objektorientierte Programmierung in Java"},{"body":"Ziele  Ich kenne die primitiven Datentypen in Java: boolean, byte, short, int, long, double, float, char.  Primitive Datentypen Bei Variablen primitiver Datentypen werden die Werte der Variable direkt in der Variable (auf dem Stack) gespeichert. Aus diesem Grund wird dann der Wert der Variable auch dann gelöscht, wenn die Variable gelöscht wird.\nDie wichtigsten primitiven Datentypen sind die folgenden:\n byte (Ganzzahl) short (Ganzzahl) int (Ganzzahl) long (Ganzzahl) float (Kommazahl) double (Kommazahl) boolean (entweder true oder false) char (ein Zeichen wie ein Buchstabe)  Integraler Datentyp Integrale Datentypen sind ganze Zahlen, sie besitzen also keine Nachkommastellen. Die folgenden Datentypen speichern ganzzahlige Werte, sie unterscheiden sich nur in ihrer Grösse:\n   Datentyp Speicherbedarf Bereich     byte 8 Bit -128 … 127   short 16 Bit -32768 … 32767   int 32 Bit -2 147 483 648 … 2 147 483 647 (-2^31 … 2^31-1)   long 64 Bit -2^63 … 2^63-1    Ausserdem sind in den Werten von integralen Datentypen Underscores erlaubt, um die Lesbarkeit zu erhöhen (1_000_000).\nBeispiele:\n1 2  int count = 0; int million = 1_000_000;   Gleitkomma-Datentyp Gleitkomma-Datentypen speichern wie der Name bereits sagt, Zahlen mit Nachkommastellen. Diese Zahlen besitzen nur eine bestimmte Genauigkeit, sie dürfen also nicht als unendlich genau betrachtet werden.\nDie folgenden Datentypen speichern Zahlen mit Nachkommastellen, sie unterscheiden sich in ihrer Grösse und der Art und Weise wie sie innerhalb von Java abgelegt werden:\n   Datentyp Speicherbedarf Bereich Interne Ablage     float 32 Bit +/-1,4E-45 … +/-3,4E+38 Dezimalbruch   double 64 Bit +/-4,9E-324 … +/-1,7E+308 Gleitkommazahl    Wie folgt können Gleitkommazahlen initialisiert werden:\n1 2 3  float radius = 8.5f; double area = 16.48739d; double pi = 3.141592653589793;   Beachte, dass bei float-Zahlen ein f folgt, weil es sonst als double betrachtet wird.\nTrotz Nachkommastellen dürfen Fliesskommzahlen des Typs float niemals zur Berechnung von Währungen verwendet werden. Innerhalb von Java wird ein float stets als Dezimalbruch geführt und die Ungenauigkeit ist der Grund, warum der Datentyp float NICHT für Währungsrechnungen verwendet werden soll.\nZeichen-Datentyp Ein char ist ein Datentyp, der ein einzelnes Zeichen darstellt.\nEin einzelnes Zeichen kann eine Ziffer, einen Buchstaben oder ein anderes Symbol sein. Um ein Zeichen zu schreiben, verwenden wir einfache Anführungszeichen wie folgt:\n1  'A', 'B', 'C', 'x', 'y', 'z', '0', '1', '2', '9'   Zeichenliterale können Symbole eines Alphabets, Ziffern von ‘0’ bis ‘9’, Whitespaces (' ‘) oder andere Zeichen oder Symbole ('$') darstellen. Verwechsle nicht die Zeichen, die Zahlen (‘9’) darstellen mit den Zahlen selbst (9). Ein Zeichen kann nicht zwei und mehr Ziffern oder Buchstaben enthalten, da es nur ein einziges Symbol darstellt.\nWir können Zeichen auf verschiedene Arten initialisieren:\n   Beschreibung Code     Einfache Anführungszeichen char A = 'A';   Wir können ein Char-Literal als Integral-Literal angeben, das den Unicode-Wert des Zeichens darstellt, und Integral-Literale können entweder in Dezimal-, Oktal- oder Hexadezimalform angegeben werden. Der zulässige Bereich liegt zwischen 0 und 65535. char A = 65;   In der Unicode-Darstellung '\\\\uxxxx' können Zeichenliterale angegeben werden. Hier steht xxxx für 4 Hexadezimalzahlen. char A = '\\u0041';    Beispiele:\n1 2 3  char letter = 'a'; char point = '.'; letter++; // 'b'   Don’t get confused:  123 ist ein Integer, “123” ist ein String; ‘A’ ein Zeichen (char), “A” ist ein String; ‘1’ ist ein Zeichen (char), 1 ist ein Integer;  Logischer Datentyp Ein boolean kann nur zwei verschiedene Werte haben:\n true wie wahr (bzw. zutreffend) false wie falsch/unwahr (bzw. nicht zutreffend)  Ein boolean wird oft verwendet, um zu speichern, ob etwas zutrifft bzw. etwas aktiv ist. Dieser Wert wird dann oft in Bedingungen (folgen später) verwendet.\n1 2  boolean done = false; boolean isBigger = true;   Eine mögliche Verwendung von booleans sind Bedingungen, wenn bestimmter Code nur ausgeführt werden soll, wenn z.B. ein boolean den Wert true aufweist:\n1 2 3 4  boolean done = false; if (done) System.out.println(\"You're done\");   Damit etwas ausgegeben werden würde, müsste die Variable done den Wert true haben.\nLernvideo Wenn du dir die Erklärung noch mit einem Video genauer anschauen möchtest, empfiehlt dir das Coaching-Team dieses Video.\n","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/04_primitive_types/","tags":"","title":"Primitive Datentypen"},{"body":"Erstelle ein System für ein Online-Handelshaus, das Produkte aus verschiedenen Kategorien verkauft. Das System soll die Verwaltung von Produkten, Kunden und Bestellungen ermöglichen.\nProdukt:\n eindeutige Produkt-ID Namen Preis Kategorie Verfügbarkeitsstatus.  Produkte können verschiedenen Kategorien angehören, z.B. Elektronik, Kleidung, Bücher usw. Das System sollte in der Lage sein, verschiedene Arten von Produkten zu verwalten, z.B. Elektronikprodukte (Handys, Laptops), Kleidungsstücke (T-Shirts, Hosen), Bücher (Romane, Fachbücher) usw.\nKunde:\n eindeutige Kunden-ID Namen E-Mail-Adresse Lieferadresse.  Kunden können Produkte kaufen, indem sie Bestellungen aufgeben.\nBestellung:\n eindeutige Bestellnummer die Produkte, welche gekauft wurden Gesamtpreis Kunden, welcher die Bestellung aufgegeben hat Bestellstatus.  Kunden können mehrere Produkte in einer Bestellung kaufen.\nDas System sollte folgende Funktionen unterstützen:\n Hinzufügen, Aktualisieren und Entfernen von Produkten. Anzeigen aller Produkte in einer bestimmten Kategorie. Hinzufügen, Aktualisieren und Entfernen von Kunden. Anzeigen aller Bestellungen eines bestimmten Kunden. Aufgeben einer neuen Bestellung für einen Kunden. Aktualisieren des Bestellstatus für eine Bestellung.  ","categories":"","description":"Aufgabe zu Modul #J3 - OOD - Shop\n","excerpt":"Aufgabe zu Modul #J3 - OOD - Shop\n","ref":"/labs/java/java-ood/04_shop/","tags":"","title":"Shop"},{"body":"Aufgabe 1 (Optional) Versuche eine eigene Stack-Klasse (MyStack\u003cE\u003e) zu implementieren mithilfe von Arrays und verwende dabei keine anderen Collections-Klassen.\nDie MyStack Klasse sollte eine dynamische Grösse haben, d.h. sie der Stack sollte beliebig wachsen können. Da der Stack mithilfe von Arrays implementiert werden soll, muss also in deiner Klasse die Kapazität des Stacks sichergestellt werden.\nImplementiere die folgenden Methoden:\n public E push(E item) public E pop( ) (soll EmptyStackException werfen) public E peek()  (soll EmptyStackException werfen) int size() public boolean empty()  Beachte, dass du die toString() Methode anpasst, sodass die MyStack-Stacks beim printen übersichtlich dargestellt werden, wie im Beispiel oben: [blue, yellow, green, orange]\nAufgabe 2 (Optional) Erweitere deine MyStack Klasse. Implementiere zusätzlich die folgende Methode:\n public int search(Object o)  ","categories":"","description":"Aufgaben zu [Java Collections - Stack](../../../../docs/java/java-collections/05_stack)\n","excerpt":"Aufgaben zu [Java Collections - …","ref":"/labs/java/java-collections/04_stack/","tags":"","title":"Stack - Aufgaben"},{"body":"Schreibe ein Programm, welches einen Streaming Dienst nachstellt. Die Anwendung soll die Filme und Serien in einem Streaming Dienst abspeichern, wenn die entsprechende Methode aufgerufen wurde. Der Streaming Dienst hat auch eine Liste an Personen, welche ein Abonnement bei dem Streaming Dienst gelöst haben.\nEine Person besitzt\n einen Namen eine Email-Adresse eine Kreditkarte  Ein Film\n einen Namen eine Dauer ein Genre einen Produzenten  Eine Person kann\n einen Film als gesehen markieren (View) seine Kreditkarte ändern zwischen der Zahlungsart Monatlich oder Jährlich entscheiden  Der Streaming Dienst kann\n die Anzahl der Personen zurückliefern, welche ein Abonnement gelöst haben eine neue Person registrieren eine Person löschen nach einem Film über den Namen suchen nach Filmen eines bestimmten Genres suchen die anzahl Views auf einem Film wiedergeben alle Kreditkarten der Kunden ausgeben (println) die das Abonnemente per Monatlichen Zahlung bezahlen  Generell gilt die Regel, dass jede E-Mail-Adresse und jeder Film-Name einzigartig sein muss\nZusatzaufgabe (muss nicht gelöst werden): Dies ist eine Liste aller europäischen Sprachen: BULGARIAN,CROATIAN,CZECH,DANISH,DUTCH,ENGLISH,ESTONIAN,FINNISH,FRENCH,GERMAN,GREEK,HUNGARIAN,IRISH,ITALIAN,SLOVENIA,LATVIAN,LITHUANIAN,MALTESE,POLISH,PORTUGUESE,ROMANIAN,SLOVAK,SLOVENE,SPANISH,SWEDISH\nEin Film soll um den Wert Sprachen erweitert werden. Darin wird gepseichert, in welchen Sprachen der Film verfügbar ist. Speichert die Sprache nicht in Form eines Strings!!!\n","categories":"","description":"Aufgabe zu Modul #J2 - OOP - Streaming Dienst\n","excerpt":"Aufgabe zu Modul #J2 - OOP - Streaming Dienst\n","ref":"/labs/java/java-oop/04_streaming_dienst/","tags":"","title":"Streaming Dienst"},{"body":"Ziele  Ich weiss, wie ich HTML-Dokumente strukturieren kann. Ich weiss, wie ich mit HTML Texte formatieren kann. Ich weiss, wie ich Links und Bilder in einer Webseite hinzufügen kann. Ich weiss, wie ich geordnete/sortierte Listen erstellen kann. Ich weiss, wie ich ungeordnete/unsortierte Listen erstellen kann. Ich weiss, was Definitionslisten sind und wie und wozu ich sie einsetzen kann.  Titel (Heading) Du hast bereits erfahren, dass du mit \u003ch1\u003e für Titel verwenden kannst. Oft hast du aber einen Titel für die Seite und dann Titel, die diesem Titel untergeordnet sind. Wie in einem Word-Dokument kannst du auch in HTML Titel hierarchisch verschachteln. Das geht so:\n1 2 3 4 5 6 7 8  \u003ch1\u003eHeading 1\u003c/h1\u003e \u003cp\u003eHello\u003c/p\u003e \u003ch2\u003eHeading 2\u003c/h2\u003e \u003ch3\u003eHeading 3\u003c/h3\u003e \u003ch4\u003eHeading 4\u003c/h4\u003e \u003ch5\u003eHeading 5\u003c/h5\u003e \u003ch6\u003eHeading 6\u003c/h6\u003e \u003cp\u003eHello\u003c/p\u003e   Dies führt zu folgendem Ergebnis:\nEs gibt also Tags für Titel erster bis sechste Stufe. Grundsätzlich gilt, je kleiner die Zahl der Stufe, je grösser wird der Titel dargestellt. Das obrige Ergebnis zeigt, wie Titel per Default gestylt werden. Du kannst das Styling dieser Titel selbstverständlich anpassen (kommt im CSS-Teil).\nParagrafen Du hast bereits erfahren, dass Zeilenumbrüche in HTML keine Wirkung haben. Möchtest du eine neue Zeile einfügen, könnte dir das \u003cbr/\u003e-Tag weiterhelfen. Besser ist aber, wenn du den Text, der zusammengehört, auch entsprechend markierst: Das kannst du mit dem \u003cp\u003e-Tag erreichen. Der Text, der innerhalb dieses Tags steht, wird in einem gleichen Abschnitt dargestellt. Ausserdem trennt es diesen Inhalt mit Leerschlag zum nächsten Element. Das wird im folgenden Beispiel verdeutlicht:\n1 2 3 4 5  \u003ch2\u003eTitle\u003c/h2\u003e This is one line. This the second one. \u003cbr/\u003e And the third one. \u003cp\u003eAnd this is inside a paragraph.\u003c/p\u003e \u003cp\u003eThis too.\u003c/p\u003e   Title  This is one line. This the second one.  And the third one.\nAnd this is inside a paragraph.\nThis too.\n Beachte hier, dass \u003cp\u003e-Tags mehr Leerraum erzeugen als \u003cbr/\u003e.\nText formatieren Du wirst in die Situation kommen, wo du einen bestimmten Teil eines Textes z.B. fett oder kursiv formatieren musst.\nDas kannst du mit HTML sehr einfach erreichen, denn dafür gibt es spezielle Tags:\n1 2 3 4 5 6 7 8 9 10  \u003cp\u003e \u003cstrong\u003eHeared\u003c/strong\u003e about the new restaurant called \u003cem\u003eKarma?\u003c/em\u003e \u003c/p\u003e \u003cp\u003e There's \u003cb\u003eno menu\u003c/b\u003e: You get what you \u003ci\u003edeserve\u003c/i\u003e. \u003c/p\u003e   Um also einen bestimmten Text fett darzustellen, kannst du es in ein \u003cstrong\u003e- oder \u003cb\u003e-Element schmeissen. Beide Tags BEZWECKEN im Prinzip genau das Gleiche, MEINEN aber nicht zwingend das Gleiche: \u003cb\u003e-Elemente sind einfach fett-gedruckt, während \u003cstrong\u003e-Elemente betont sein sollen. \u003cstrong\u003e soll dem fett-gedruckten Wort also mehr Ausdruck verleihen. Mit einem eigenen Styling (kommt im CSS-Teil) könntest du \u003cstrong\u003e-Elemente z.B. auch grösser oder rot darstellen. Mit einem \u003cb\u003e-Element sagt man im Prinzip nur, dass der Text fett-gedruckt sein soll.\nEinen Text kursiv darstellen kannst du mit \u003ci\u003e bzw. \u003cem\u003e. Das Pendant zu \u003cb\u003e ist \u003ci\u003e (italic), und dasjenige zu \u003cstrong\u003e das \u003cem\u003e (emphasis = Betonung).\nDas obige Beispiel wird so gerendert:\n Heared about the new restaurant called Karma?  There's no menu: You get what you deserve.  Bitte beachte: Text zu formatieren ist Styling. Styling wiederum ist normalerweise die Aufgabe von CSS und nicht von HTML.\nLinks und Bilder Eines der wichtigsten Elemente in HTML sind Links auf andere Seiten. Links werden mit a-Elementen (anchor) realisiert. Einen Link kann wie folgt erstellt werden:\n1  \u003ca href=\"https://labs.it-ninjas.ch/\"\u003eHome\u003c/a\u003e   Probiere das einmal aus.\nDu wirst einen blauen und unterstrichenen Text “Home” sehen. \u003ca\u003e ist der Tag, der generell für Hyperlinks verwendet wird. href ist ein Attribut des a-Tags, mit dem die URL des Links spezifiziert wird. In unserem Fall ist https://labs.it-ninjas.ch/ die URL, die beim Klick aufgerufen wird. Home ist der Text, der dem User angezeigt wird.\nZiemlich ähnlich kannst du auch ein Bild aus dem Internet einbinden:\n1 2 3  \u003cimg src=\"https://it-ninjas.ch/img/png/Ninja%20Elements_ninja_phone.png\" alt=\"IT Ninjas\" width=\"300\" /\u003e   Ganz offensichtlich wird das \u003cimg/\u003e-Tag (Image) für Bilder verwendet. Das \u003cimg/\u003e-Tag ist ein Tag, welches keinen Inhalt zwischen Opening- und Closing-Tag hat. Mit dem / im Opening-Tag kann man symbolisieren, dass das Tag ohne Closing-Tag geschlossen wird.\nDas wichtigste Attribut im img-Tag ist src (source = Quelle). Als src wird eine URL zu einem Bild erwartet. Vergiss nicht, bei absoluten Pfaden das Protokoll (also https://) anzugeben. Nicht zwingend aber erwartet wird das alt-Attribut (alternative). Dieser Text wird angezeigt, wenn das Bild nicht geladen werden konnte. Völlig optional sind hingegen Attribute wie width oder height, welche die Breite und Höhe des Bildes festlegen. Diese Grössen werden aber besser mit CSS spezifiziert, da CSS genauere Spezifikationen zulässt (also nicht nur in ‘Pixel’ sondern auch anderen Einheiten).\nWenn du willst, dass man beim Klick auf ein Bild weitergeleitet wird, kannst du dein Bild in ein \u003ca\u003e-Element schmeissen:\n1 2 3  \u003ca href=\"https://it-ninjas.ch/\"\u003e \u003cimg src=\"https://it-ninjas.ch/img/png/Ninja%20Elements_ninja_phone.png\" alt=\"IT Ninjas\" /\u003e \u003c/a\u003e   Listen In HTML gibt es verschiedene Arten, um Aufzählungen darzustellen. Wir schauen uns Bullet-Point-Listen, Nummerierte-Listen und Definitions-Listen an.\nEine Bullet-Point-Liste kann man mit einer unsortierten Liste (unordered list) kreieren:\n1 2 3 4 5 6  \u003ch4\u003eWhat do you do in case of emergency?\u003c/h4\u003e \u003cul\u003e \u003cli\u003egit commit -m \"message\"\u003c/li\u003e \u003cli\u003egit push\u003c/li\u003e \u003cli\u003eLeave the building.\u003c/li\u003e \u003c/ul\u003e   Möchtest du hingegen eine Nummerierung, dann verwende eine sortierte Liste (ordered list):\n1 2 3 4 5 6 7 8  \u003ch4\u003eMost Difficult Programming Languages\u003c/h4\u003e \u003col\u003e \u003cli\u003eBrainf*ck\u003c/li\u003e \u003cli\u003eCow\u003c/li\u003e \u003cli\u003eIntercal\u003c/li\u003e \u003cli\u003eMalbolge\u003c/li\u003e \u003cli\u003eWhitespace\u003c/li\u003e \u003c/ol\u003e   Das Ganze sieht dann ungefähr so aus:\nWhat do you do in case of emergency?  git commit -m “message” git push Leave the building  Most Difficult Programming Languages  Brainf*ck Cow Intercal Malbolge Whitespace   Eine 3. Art von Listen sind Definitionslisten. Diese Art von Liste wird zwar nicht oft verwendet, kann aber hilfreich für ein Glossar oder Ähnliches sein. Schaue dir hierfür folgendes Beispiel an:\n1 2 3 4 5 6 7 8 9  \u003ch2\u003eGlossary\u003c/h4\u003e \u003cdl\u003e \u003cdt\u003ebuffoonish\u003c/dt\u003e \u003cdd\u003elike a clown \u003c/dd\u003e \u003cdt\u003eheyday\u003c/dt\u003e \u003cdd\u003ethe period of greatest prosperity or productivity\u003c/dd\u003e \u003c/dl\u003e   Glossary  buffoonish like a clown  heyday the period of greatest prosperity or productivity   ","categories":"","description":"Modul #F3 - HTML und CSS - Nützliche HTML Tags\n","excerpt":"Modul #F3 - HTML und CSS - Nützliche HTML Tags\n","ref":"/docs/web/html_css/04_weitere_tags/","tags":"","title":"Weitere HTML-Tags"},{"body":"Ziele  Ich kann ohne Hilfsmittel alle Zugriffsmodifikatoren beschreiben. Ich kann die Auswirkungen von allen Zugriffsmodifikatoren auf Klassen-, Felder- und Methoden-Ebene beschreiben. Ich kann erklären, warum Felder (Instanzvariablen) immer mit dem Schlüsselwort private deklariert werden sollten.  Zugriffsmodifikatoren In Java können wir Klassen, Feldern und Methoden Zugriffsbeschränkungen auferlegen. Diese Einschränkungen werden durch Zugriffsmodifikatoren festgelegt. Zugriffsmodifikatoren bestimmen die Sichtbarkeit von Klassen, Feldern und Methoden und damit deren Verwendbarkeit aus anderen Programmteilen. Es gibt vier Zugriffsmodifikatoren.\nPrivate Auf eine private Instanzvariable oder -methode kann von ausserhalb der Klasse nicht zugegriffen werden. Es ist eine gängige Praxis, Instanzvariablen privat zu halten. Wir möchten schliesslich nicht, dass jemand unsere Daten direkt manipuliert. Dieses Prinzip nennt man auch Kapselung.\nKlassen, welche als private deklariert werden sind immer sog. innere oder nested Klassen. Auf diese Klassen kann nur innerhalb der umhüllende Klasse zugegriffen werden.\n1 2 3  class Person { private String name; }   UML-Symbol: -\nPublic Auf Klassen, Felder und Methoden, die mit dem Schlüsselwort public deklariert sind, kann von einem beliebigen Ort des Programms zugegriffen werden. Sie sind also öffentlich.\n1 2 3 4 5 6 7  public class Person { private String name; public String getName() { return name; } }   Auf öffentliche Methoden und Felder kann ein Objekt über den Punkt-Operator zugreifen.\n1 2  Person p = new Person(); p.getName();   UML-Symbol: +\nProtected Wenn eine Klasse, ein Feld oder eine Methode mit protected deklariert ist, dann kann nur vom gleichen Package oder von Unterklassen darauf zugegriffen werden (Unterklassen folgen später im Modul «Objektorientiertes Design»). UML-Symbol: #.\nPackage-Private Wenn eine Klasse, ein Feld oder eine Methode keinen Zugriffsmodifikator hat, so besitzt sie trotzdem einen. Dieser wird Package-Private genannt. Die Sichtbarkeit ist grundsätzlich private, wird aber auf Klasse im gleichen Package ausgeweitet. Das bedeutet, dass andere Klassen innerhalb derselben Package, Zugriff auf diese Klasse, Felder und Methoden haben.\nZusammenfassung    Modifikator Eigene Klasse Klasse im gleichen Package / innere-Klassen Unterklassen Sonstige Klassen     private ja nein nein nein   public ja ja ja ja   protected ja ja ja nein   Keinen (package-private) ja ja nein nein     ","categories":"","description":"Modul #J2\n","excerpt":"Modul #J2\n","ref":"/docs/java/j2-oop/04-access-modifier/","tags":"","title":"Zugriffsmodifikatoren"},{"body":"Standalone Components Seit Angular 16 gibt es eine neue Art von Components, die erstellt und eingesetzt werden kann. Diese Standalone Components unterscheiden sich beim Grundaufbau nur gering von den traditionellen Components, die du bereits kennengelernt hat. Jedoch verbirgt sich dahinter ein neuer Weg wie du deine Applikation Strukturieren kannst.\nWas bedeutet Standalone Standalone Components sind anders als traditionelle Components Module unabhängig. Das bedeutet, dass sie ersten nicht in einem Module definiert werden müssen und zweitens, dass sie keine Imports aus einem Module erhalten. Durch diesen Aufbau können Standalone Components in jedem Kontext verwendet werden, ohne sie noch speziell deklarieren zu müssen.\nStandalone vs. Regular Reguläre Komponenten Im Gegensatz zu Standalone-Komponenten sind reguläre Komponenten modulabhängig. Sie müssen in einem Modul definiert und deklariert werden, um verwendet werden zu können. Sie können auch Imports aus ihrem Modul erhalten, was ihre Verwendung in bestimmten Kontexten einschränken kann.\nVergleich  Modulabhängigkeit: Während reguläre Komponenten in einem Modul definiert werden müssen, sind Standalone-Komponenten modulunabhängig. Dies gibt Standalone-Komponenten mehr Flexibilität, da sie in jedem Kontext verwendet werden können. Imports: Reguläre Komponenten können Imports aus ihrem Modul erhalten, während Standalone-Komponenten dies nicht tun. Dies kann die Wiederverwendbarkeit von Standalone-Komponenten erhöhen. Verwendung: Seit Angular 17 sind Standalone-Komponenten per Default aktiviert und eingesetzt, was ihre Verwendung fördert. Reguläre Komponenten hingegen erfordern eine spezifische Deklaration in ihrem Modul, um verwendet werden zu können. Insgesamt bieten Standalone-Komponenten eine größere Flexibilität und Wiederverwendbarkeit im Vergleich zu regulären Komponenten, was sie zu einer attraktiven Option für die Strukturierung von Angular-Anwendungen macht.  appConfig Seit Angular 17 git es das AppModule nicht mehr, da nun die Components default mässig Standalone sind. Jedoch wird trotzdem noch eine Datei benötigt um externe Abhängigkeiten anzugeben. Die ist dann die Datei app.config.ts, dort werden zum Beispiel die Abhängigkeiten wie die Angular Routes angegeben. Diese kann man einrichten, indem man provideRouter(routes) im providers-Array aufruft.\n1 2 3 4 5 6 7 8  import { ApplicationConfig } from '@angular/core'; import { provideRouter } from '@angular/router'; import { routes } from './app.routes'; export const appConfig: ApplicationConfig = { providers: [provideRouter(routes)] };   ","categories":"","description":"Modul #F6 - Angular - Was sind Standalone Components?\n","excerpt":"Modul #F6 - Angular - Was sind Standalone Components?\n","ref":"/docs/web/angular/02_4_angular_standalone_components/","tags":"","title":"Standalone Components"},{"body":"","categories":"","description":"Typisierte Webprogrammierung.\n","excerpt":"Typisierte Webprogrammierung.\n","ref":"/docs/web/typescript/","tags":"","title":"TypeScript"},{"body":"Ziele  Du weisst, welche verschiedenen Conditionals es gibt. Du kennst die Vorteile von einem Switch-Statement und weisst es angewandt wird. Du weisst, was truthy und falsy Werte sind.  Conditionals Conditional Statements oder auch Bedingungsanweisungen sind ein grundlegendes Konzept in JavaScript und anderen Programmiersprachen. Sie ermöglichen es dem Programm, verschiedene Aktionen basierend auf Bedingungen auszuführen. In JavaScript gibt es zwei Hauptarten von Conditionals: if/else-Statements und switch-Statements.\nif/else-Statement If-Statements überprüfen, ob eine Bedingung. Ist diese true, wird der darauf folgende Codeblock ausgeführt.\n1 2 3 4 5  const condition = true; if (condition) { // condition ist true }   Wenn man nun jedoch einen anderen Codeblock ausführen möchte, falls die Bedingung false ist, kann man das else-Statement verwenden.\n1 2 3 4 5 6 7  const condition = false; if (condition) { // condition ist true } else { // condition ist false }   Man kann jedoch auch auf mehrere Bedingungen prüfen, indem if else-Statement vor dem else-Statement geschrieben werden.\n1 2 3 4 5 6 7 8 9 10 11  const condition1 = false; const condition2 = true; if (condition1) { // condition1 ist true } else if (condition2) { // condition2 ist true } else { // keine der condition ist true }   In einem If-Statement kann man komplexere Bedingungen schreiben. Hier prüfen wir, ob eine Variable einen bestimmten Wert hat:\n1 2 3 4 5 6 7  const variable = 1; if (variable == 1) { // condition ist true, da die variable den Wert 1 hat. } else { // condition ist false }   Das Gleiche funktioniert natürlich auch für Strings:\n1 2 3 4 5 6 7  const variable = 'js'; if (variable == 'js') { // condition ist true, da die variable den Wert 'js' hat. } else { // condition ist false }   switch-Statement switch-Statements in JavaScript ermöglichen es, verschiedene Codeblöcke basierend auf verschiedenen Bedingungen auszuführen. Das ist besser, als mehrere else if zu verwenden.\nEin switch-Statement besitzt auch immer ein default Case, in diesen Codeblock wir der Code festgehalten der ausgeführt werden soll, wenn keine der Bedingungen zutrifft.\n1 2 3 4 5 6 7 8 9 10 11 12 13  const expression = 'Auto'; switch (expression) { case 'Bus': // Code, der ausgeführt wird, wenn Ausdruck gleich 'Bus' ist  break; case 'Auto': // Code, der ausgeführt wird, wenn Ausdruck gleich 'Auto' ist  break; default: // Code, der ausgeführt wird, wenn keine der Bedingungen zutrifft  break; }   Die break in den Cases sind dazu da, das switch-Statement abzubrechen, wenn der Case zutraf und der Codeblock ausgeführt wurde.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  const expression = 'Auto'; switch (expression) { case 'Bus': // Code, der ausgeführt wird, wenn Ausdruck gleich 'Bus' ist  break; case 'Auto': // Code, der ausgeführt wird, wenn Ausdruck gleich 'Auto' ist  // break; das break wurde nicht gesetzt oder auskommentiert  default: // Code, der ausgeführt wird, wenn keine der Bedingungen zutrifft  // oder Auto zutrifft (da im case Auto das break fehlt.).  break; }   Switch Expressions Oft kommt es vor, dass du mithilfe eines Switch-Statements z.B. eine Variable zuweisen möchtest. In Java 14 und anderen modernen Programmiersprachen könntest du das wie folgt tun:\n1 2 3 4 5  int variable = switch (expression) { case \"Bus\" -\u003e 1; case \"Auto\" -\u003e 2; default -\u003e 0; };   Wenn die Variable expression hier den Wert “Bus” hätte, dann hätte die Variable variable den Wert 1, bei “Auto” 2, und sonst 0.\nIn JavaScript kannst du das Gleiche erreichen, aber mit einem kleinen Trick:\n1 2 3 4  const variable = { \"Bus\": 1, \"Auto\": 2 }[expression];   und wenn wir den default-Wert berücksichtigen möchten, können wir diesen mit dem ??-Operator ergänzen. Das ist keine offizielle Syntax, funktioniert aber:\n1 2 3 4  const variable = { \"Bus\": 1, \"Auto\": 2 }[expression] ?? 0;   Ohne den ??-Operator würden wir für den default-Wert undefined erhalten. Der ??-Operator tauscht den Wert mit dem Wert rechts rechts davon aus, falls der Wert undefined oder null wäre. Du wirst den Operator weiter unten und JavaScript-Objekte in einem anderen Kapitel genauer kennenlernen.\ntruthy und falsy In JavaScript gibt es Konzepte von truthy und falsy Werten. Truthy bezieht sich auf einen Wert, der im booleschen Kontext als wahr interpretiert wird, während falsy sich auf einen Wert bezieht, der als falsch interpretiert wird.\nEs gibt sechs falsy Werte:\n false null undefined 0 Not a Number NaN leeren String ('')  Alle anderen Werte sind truthy.\nBeispiel:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  const conditionFalse = false const conditionNull = null const conditionUndefined = undefined const conditionZero = 0 const conditionNaN = NaN const conditionEmptyString = '' if ( conditionFalse || conditionNull || conditionUndefined || conditionZero || conditionNaN || conditionEmptyString ) { // Codeblock wird nicht ausgeführt } else { // Codeblock wird ausgeführt }   ","categories":"","description":"Modul #F4 - JavaScript - Basics und nützliche Eigenschaften von Bedingungen.\n","excerpt":"Modul #F4 - JavaScript - Basics und nützliche Eigenschaften von …","ref":"/docs/web/javascript/05_js_conditionals/","tags":"","title":"Conditionals"},{"body":"","categories":"","description":"Labs zu Angular NgRx (Optional)\n","excerpt":"Labs zu Angular NgRx (Optional)\n","ref":"/labs/web/angular_ngrx/","tags":"","title":"Angular NgRx Labs (Optional)"},{"body":"1: Introduction TODO: Beschreibung zu diesem Kapitel\n","categories":"","description":"Web Technologie lernen\n","excerpt":"Web Technologie lernen\n","ref":"/docs/web/","tags":"","title":"Web"},{"body":"Ziele  Ich kann ohne Hilfsmittel die 3 verschiedenen Arten von Variablen auflisten (in welchem Kontext werden die Variablen wie genannt?). Ich schreibe eine Definition eines statische Feldes selbstständig und korrekt. Ich kann in eigenen Worten erklären, wozu statische Felder benutzt werden. Ich kann in eigenen Worten den Unterschied zwischen statischen und nicht-statischen Feldern erklären.  Felder Wir haben bereits verschiedene Arten von Variablen kennengelernt:\n Variablen in einer Methode oder einem Codeblock - diese werden als lokale Variablen bezeichnet Variablen in Methodendeklarationen oder Konstruktoren - diese werden als Parameter bezeichnet Mitgliedsvariablen (member variables) in einer Klasse - diese werden als Felder oder Instanzvariablen bezeichnet  Wir werden uns nun den Feldern widmen. Felder sind Variablen, die innerhalb einer Klasse, aber ausserhalb aller Methoden deklariert werden. Wir definieren sie üblicherweise am Anfang einer Klasse (vor den Methoden). Es gibt zwei verschiedene Typen von Feldern, statische und nicht-statische.\nStatische Felder - Klassenvariablen / Konstanten Manchmal brauchen wir eine Variable, die allen Objekten einer Klasse gemeinsam ist. Dann verwenden wir eine Variable, die mit dem Schlüsselwort static deklariert ist. Diese Variable bezeichnen wir als statisches Feld oder Klassenvariable. Ein statisches Feld ist der Klasse selbst zugeordnet und nicht den Instanzen (=Objekten) dieser Klasse. Denn jede Instanz (= jedes Objekt) der Klasse teilt sich diese Klassenvariable, die sich an einem festen Ort im Speicher befindet. Egal wie viele Objekte dieser Klasse existieren, der Wert des statischen Feldes ist für alle exakt gleich. Jedes Objekt kann den Wert einer Klassenvariablen lesen und verändern.\n1 2 3 4 5 6 7 8 9 10 11  public class Counter { private static int count = 0; public static void main(String[] args) { Counter counter = new Counter(); counter.count++; // Erhöhen der Klassenvariable count über ein Objekt  System.out.println(count); // Output: 1  Counter.count++; // Erhöhen des statischen Feldes count über den Klassennamen (ohne Objekt!)  System.out.println(count); // Output: 2  } }   Angenommen, wir möchten eine Reihe von Bicycle-Objekten erstellen und jedem eine Seriennummer zuweisen, beginnend mit 1 für das erste Objekt. Diese ID-Nummer ist für jedes Objekt eindeutig und daher eine Instanzvariable (was Instanzvariablen sind, dazu kommen wir gleich). Um das zu realisieren, benötigen wir eine Variable, die die Anzahl Fahrräder (Anzahl erzeugter Bicycle-Instanzen) zählt. Vorsicht, diese Art von Implementation ist für mehrere Threads nicht geeignet. Da wir noch nichts von Multithreading wissen, genügt es zu wissen, dass diese Art der Implementation nicht thread-sicher ist (Man spricht von Multithreading bei einem Programm, wenn es mehrere Dinge gleichzeitig parallel ausführt, je nach dem sogar auf mehreren Prozessoren gleichzeitig).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  public class Bicycle { private int cadence; private int gear; private int speed; private int id; private static int numberOfBicycles = 0; // Klassenvariable, die zählt, wieviele Objekte erzeugt werden  // Diese spezielle Methode, Konstruktor genannt, wird benötigt, um Objekte zu instanzieren --\u003e siehe Kapitel Konstruktoren  public Bicycle(int startCadence, int startSpeed, int startGear) { this.gear = startGear; // (aktueller Gang)  this.cadence = startCadence; // (Umdrehungen / min bei den Pedalen)  this.speed = startSpeed; // (km/h)  this.id = ++numberOfBicycles; // inkrementiere die Anzahl Fahrräder und weise den Wert der Instanzvariablen id zu  } }   Manchmal verwenden wir statische Felder, um Konstanten zu definieren. Eine Konstante ist eine Variable, deren Wert nicht mehr verändert werden kann, sobald man ihr einmal einen Wert zugewiesen hat. Um eine Variable als Konstante zu kennzeichnen, verwenden wir zusätzlich das Keyword final. Der Name der Konstante wird zudem per Konvention immer in Grossbuchstaben geschrieben. Um mehrere Wörter abzutrennen verwenden wir Underscores _. Zum Beispiel definiert die folgende Variablendeklaration eine Konstante mit dem Namen PI:\n1  static final double PI = 3.141592653589793;   Nicht-statische Felder - Instanzvariablen Unter einer Instanzvariablen versteht man eine Variable, die einer Instanz einer Klasse, also einem Objekt, zugeordnet ist. Wenn eine neue Instanz erzeugt wird, werden Kopien der Instanzvariablen angelegt. Im Fall der Bicycle-Klasse sind die Instanzvariablen cadence, gear, speed und id. Jedes Bicycle-Objekt hat seine eigenen Werte für diese Variablen, d.h. sie werden an unterschiedlichen Orten gespeichert.\n ","categories":"","description":"Modul #J2\n","excerpt":"Modul #J2\n","ref":"/docs/java/j2-oop/05-fields/","tags":"","title":"Felder"},{"body":"Inhalt  Beispiel für Branching, Merging und Rebasing Einfache Mergekonflikte  Im vorherigen Kapitel haben wir gelernt, dass man nur dann seine Änderungen pushen kann, wenn einem niemand anders zuvorkam. Um diesem Problem aus dem Weg zu gehen, kann ein Branch (engl. für Ast/Zweig) verwendet werden, welcher zu einem späteren Zeitpunkt wieder auf den Hauptpfad gemerged wird.\nIm ersten Kapitel haben wir gelernt, dass Git mit jedem Commit ein Snapshot der Daten und eine Referenz auf den vorgehenden Commit speichert. Ein Branch ist nichts anderes als ein Zeiger auf einen spezifischen Snapshot.\nErzeugen wir mit git branch testing einen neuen Branch namens “testing” so wird ein Zeiger erstellt, welcher auf den selben Commit zeigt auf dem man sich im Moment befindet. Damit Git weiss, wo man sich im Moment gerade befindet gibt es einen speziellen Zeiger namens HEAD:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  +----------+ | HEAD | +----+-----+ | v +----+-----+ | master | +----+-----+ | v +----------+ +----------+ +----+-----+ | Commit 1 +\u003c-------+ Commit 2 +\u003c-------+ Commit 3 | +----------+ +----------+ +----+-----+ ^ | +----+-----+ | testing | +----------+   Wie man auf der Skizze erkennen kann, wurde der neue Branch “testing” erstellt, wir befinden uns aber immer noch auf dem “master” Branch (HEAD). Um nun auf den neuen Branch zu wechseln können wir den Befehl git checkout testing verwenden. Protipp: Um einen neuen Branch zu erstellen und gleich auf diesen zu wechseln, kann der Befehl git checkout -b \u003cbranchname\u003e verwendet werden.\nErstellen wir nun einen Commit auf dem “testing” Branch, dann zeigt sich folgendes Bild:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  +----+-----+ | master | +----+-----+ | v +----------+ +----------+ +----------+ +----------+ | Commit 1 +\u003c-------+ Commit 2 +\u003c-------+ Commit 3 |\u003c-------+ Commit 4 | +----------+ +----------+ +----------+ +----------+ ^ | +----------+ | testing | +----+-----+ ^ | +----------+ | HEAD | +----+-----+   Beispiel für Branching, Merging und Rebasing In diesem Abschnitt wird davon ausgegangen, dass es einen Fehler im aktuellen master-Branch gibt, der unter testing nicht behoben wurde, da er zur Entwicklung neuer Funktionen verwendet wird. Um den Fehler zu beheben, wird ein neuer Branch mit dem Namen bugfix erstellt, der mit der gleichen Revision wie master beginnt.\n1 2 3 4  $ git checkout master Switched to branch 'master' $ git checkout -b bugfix Switched to a new branch 'bugfix'   git commit Nachdem der Branch bugfix erstellt und ausgecheckt wurde, wird die Korrektur entwickelt und übertragen.\n1 2 3 4 5 6 7 8 9 10 11  $ git diff diff --git a/first-file.txt b/first-file.txt index 4c5fd91..aa24abd 100644 --- a/first-file.txt +++ b/first-file.txt @@ -1 +1 @@ -First file +First file with bugfix $ git commit -a -m \"Bugfix for first file\" [bugfix a27a927] Bugfix for first file 1 file changed, 1 insertion(+), 1 deletion(-)    Die erste Zeile in first-file.txt wurde geändert, indem with bugfix zur ersten Zeile hinzugefügt wurde.  Mit der neuen Übergabe an bugfix fangen die Branches an, auseinanderzulaufen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  +----------+ | testing | +----------+ +----+-----+ | master | | +----+-----+ v | +----+-----+ v + Commit 4 | +----------+ +----------+ +----+-----+\u003c-------+----------+ | Commit 1 +\u003c-------| Commit 2 +\u003c-------+ Commit 3 + +----------+ +----------+ +----------+\u003c-------+----------+ + commit 5 | +----+-----+ ^ | +----+-----+ | bugfix | +----+-----+ ^ | +----+-----+ | HEAD | +----+-----+   Mergen der Branches Nach der Fehlerbehebung ist es nun an der Zeit, sie wieder in den Master-Branch einzubinden, damit andere Benutzer sie ebenfalls verwenden können.\ngit merge Merge ist eine Wiederholung der Änderungen eines benannten Commits (auch Branch genannt) in einen anderen Branch, da diese voneinander abwichen. Damit dies funktioniert, ändert man zuerst den Zielbranch. In diesem Fall ist das bugfix. Die Änderungen sollen nach master zurückgespielt werden. Da das Ziel master ist, ist der erste Schritt, zu diesem Branch zu wechseln.\n1 2 3 4 5 6 7 8 9 10 11  $ git checkout master Switched to branch 'master' $ git branch * master testing bugfix $ git merge bugfix Updating e303af7..a27a927 Fast-forward first-file.txt | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-)     Wechseln Sie zum Zielbranch (master).\n  Bestätigen Sie, dass Sie sich im Zielbranch befinden. Dieser Schritt ist optional.\n  Wiederholen Sie die Änderungen von bugfix in master.\n  Nach der Zusammenführung zeigen bugfix und master auf dieselbe Revision.!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  +----+-----+ | HEAD | +----+-----+ +----------+ | | testing | v +----+-----+ +----------+ | | master | v +----+-----+ +----+-----+ | + Commit 4 | v +----------+ +----------+ +----+-----+\u003c-------+----------+ +----+-----+ | Commit 1 +\u003c-------| Commit 2 +\u003c-------+ Commit 3 +\u003c--------------------------+ commit 5 | +----------+ +----------+ +----------+ +----+-----+ ^ | +----+-----+ | bugfix | +----+-----+   git branch -d Es gibt keinen Grund mehr, den bugfix-Branch beizubehalten, da die Änderungen nun in master eingearbeitet wurden. Mit dem Befehl branch -d \u003cbranchname\u003e wird der Branch gelöscht.\n1 2 3 4 5 6 7 8  $ git branch bugfix * master testing $ git branch -d bugfix Deleted branch bugfix (was a27a927). $ git log --oneline -n 1 a27a927 (HEAD -\u003e master) Bugfix for first file     Der Branch kann beim Auschecken nicht gelöscht werden. Der aktive Branch ist master, der für die Löschung von bugfix funktioniert.\n  Der Branch wird gelöscht und die Ausgabe enthält den kurzen SHA1-Hash.\n  Die Überprüfung mit git log bestätigt, dass master auf denselben Hash zeigt wie bugfix.\n  Nachdem der Branch bugfix gelöscht wurde, bleiben nur noch master und testing übrig.\nRebasing Branches Nachdem die Fehlerkorrektur in den Branch master eingebracht wurde, ist der nächste logische Schritt, die Änderungen in den Branch testing einzubringen, um sicherzustellen, dass der nächste Release die korrigierte Version enthält. Wenn man mit mehreren Branches arbeitet, ist diese Operation notwendig, um nicht zu weit in den master zurückzufallen und viele Merge-Konflikte zu vermeiden.\ngit rebase Rebase bedeutet, dass der übergeordnete Commit der ersten Änderung im Branch verschoben und an den aktuellen Zeiger des Branches oder Commits angehängt wird, der in der Befehlszeile als Argument angegeben wird. Im folgenden Beispiel wechseln wir als erstes in den Branch, der rebase werden soll, und geben dann den Befehl rebase gegen master aus.\n1 2 3 4 5 6 7  $ git branch * master testing $ git checkout testing Switched to branch 'testing' $ git rebase master Successfully rebased and updated refs/heads/testing.     Derzeit auf dem Branch master, muss vor dem rebase auf testing wechseln.\n  Wechseln Sie zum Branch testing, der mit master rebased wird.\n  Erteilen Sie den Befehl rebase mit dem Argument master, dem Branch oder Zeiger, der für den rebase verwendet wird.\n  Die Meldung ist knapp und bezieht sich auf die git-interne Dateistruktur unter dem Verzeichnis .git.\n   Hinweis\nDie Durchführung eines rebase zwischen zwei Branches erfordert einen gemeinsamen Vorfahren im Tree.\n Nach dem Rebase sind “Master” und “Testing” wieder synchronisiert.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  +----+-----+ | master | +----+-----+ | v +----------+ +----------+ +----------+ +----------+ +----------+ | Commit 1 +\u003c-------| Commit 2 +\u003c-------+ Commit 3 +\u003c-------+ Commit 5 |\u003c-------+ Commit 4 | +----------+ +----------+ +----------+ +----------+ +----------+ ^ | +----------+ | testing | +----+-----+ ^ | +----------+ | HEAD | +----+-----+   Einfache Mergekonflikte Im oben erwähnten Beispiel ist alles automatisch gegangen beim Mergen, es gibt jedoch Fälle, bei denen Git nicht mehr in der Lage ist automatisch die Dateien Zusammenzuführen, wenn zum Beispiel eine Änderung an der gleichen Stelle einer Datei in beiden Branches vorgenommen wird. Gehen wir vom Beispiel oben aus, die Story die man da umsetzt macht auch etwas mit dem Dashboard welches wir kurzum anpassen mussten:\n1 2 3 4  $ git merge bugfix Auto-merging first-file.txt CONFLICT (content): Merge conflict in first-file.txt Automatic merge failed; fix conflicts and then commit the result.   Git konnte nicht automatisch mergen und hat somit keinen commit erstellt, wir müssen den Mergekonflikt von Hand lösen, bevor wir weiter arbeiten können. Weitere Infos liefert git status:\n1 2 3 4 5 6 7 8 9 10 11  $ git status On branch master You have unmerged paths. (fix conflicts and run \"git commit\") (use \"git merge --abort\" to abort the merge) Unmerged paths: (use \"git add \u003cfile\u003e...\" to mark resolution) both modified: first-file.txt no changes added to commit (use \"git add\" and/or \"git commit -a\")   Git fügt automatisch eine Markierung in die Dateien ein, welche gmerged werden müssen:\n1 2 3 4 5  \u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD first line from master ======= first line from testing \u003e\u003e\u003e\u003e\u003e\u003e\u003e testing   Das bedeutet, dass der HEAD (also der Masterbranch, weil auf den haben wir vor dem Mergen gewechselt) den oberen Teil (also immer alles auf Grün) und unsere neuen Änderungen den unteren Teil auf dieser Zeile hatten. Man kann den Konflikt nun lösen, indem man den ganzen Block, mit der gewünschten Änderung ersetzt. Ist der Konflikt gelöst, können wir die Datei ganz normal stagen und commiten. Gerade bei grösseren Mergekonflikten kann es praktisch sein mit tools zu Arbeiten, welche einem die Unterschiede zwischen den beiden Branches Grafisch darstellen, dafür gibt es den Befehl git mergetool.\nIn der Regel können viele Merge-Konflikte verhindert oder minimiert werden, indem:\n  Regelmässige Kommunikation von Änderungen zwischen Teammitgliedern.\n  Regelmässige Rebases mit dem Merge-Zielbranch.\n  Erstellen kleiner und atomarer Commits.\n  Hands On https://learngitbranching.js.org/\n","categories":"","description":"","excerpt":"Inhalt  Beispiel für Branching, Merging und Rebasing Einfache …","ref":"/docs/git/git-branches/","tags":"","title":"Git Branches"},{"body":"Ziele  Ich weiss, wozu HTML-Formulare benutzt werden. Ich kenne die folgenden HTML-Formular-Elemente und weiss wie ich sie benutzen kann:\ninput, label, button, checkbox, date, email, file, hidden, number, password und radio Ich kann ein HTML-Formular erstellen und die Werte aus dem Formulare an einem Backend verschicken.  Wieso HTML-Formulare? Die Benutzer deiner Webseite möchten oder sollen Daten eingeben können, z.B. für ein Kontakt-Formular oder eine Login-Seite. HTML-Formulare ermöglichen genau das, auch ohne JavaScript.\nHTML-Input-Element Bevor wir uns HTML-Formulare genauer anschauen, wollen wir zuerst einen Blick auf Input-Elemente werfen, die das Eingeben von Daten überhaupt ermöglichen.\nBeginnen wir mit einer einfachen TextBox:\n1 2  Was ist dein Vorname? \u003cinput type=\"text\" name=\"firstname\"/\u003e   Probiere alle Beispiele immer selbst aus. Der obige Code reicht bereits aus, um eine einfache TextBox in HTML einzubinden.\nDas type-Attribut definiert, um was für eine Art von Input-Element es sich handelt. text steht für eine gewöhnliche TextBox. Das zweite Attribut kannst du im Moment noch ignorieren.\nLabel für Input-Elemente Vor einem Input-Element steht meistens ein Text, der beschreibt, was im \u003cinput/\u003e-Element eingegeben werden soll (“Was ist dein Vorname”). Dieser Text wird auch “Label” genannt. Bei einer guten Webseite wird zudem die TextBox ausgewählt, wenn der User auf das Label klickt (nicht nur beim Klick auf die TextBox). Diese Funktionalität wollen wir hinzufügen:\n1  \u003clabel\u003eWas ist dein Vorname?\u003cinput type=\"text\" name=\"firstname\" /\u003e\u003c/label\u003e   Die gewünschte Funktionalität haben wir so hinzufügen können. Aber was genau haben wir hier gemacht?\nWir haben das Label als Label definiert (da im label-Element). Wenn wir ein Input-Element in einem Label hinzufügen, dann wird bei einem Klick auf dieses Label automatisch dieses Input-Element fokussiert.\nNun sieht das noch ein bisschen unübersichtlich aus. Das können wir besser! Zum Beispiel so:\n1 2  \u003clabel for=\"firstname\"\u003eWas ist dein Vorname?\u003c/label\u003e \u003cinput id=\"firstname\" type=\"text\" name=\"firstname\" /\u003e   Abgesehen davon, dass das Input-Element nicht mehr im Label ist, ist der grosse Unterschied:\n dass das Input-Element nun ein id-Attribut hat und dass der Label mit dem for-Attribut darauf referenziert.  Fassen wir zusammen, weshalb wir das label-Element verwenden:\n Beim Klick auf das Label wird das entsprechende Input-Element ausgewählt. Beim Klick in das entsprechende Input-Element würde ein Screen-Reader den Namen des Labels laut vorlesen, (falls verwendet). Und ausserdem können die Labels auf diese Weise einfacher gestylt werden.  Weitere Input-Elemente In HTML gibt es sehr viele weitere Input-Elemente. Eine grössere Liste findest du hier: https://www.w3schools.com/html/html_form_input_types.asp\nKennen solltest du sicher die folgenden:\n button checkbox date email tel file hidden number password radio  Bitte schaue dir diese Elemente auf der obengenannten Seite rasch an. Du solltest wissen, wie diese Elemente aussehen und dass es sie gibt.\nFormulare Nun solltest du im Stande sein, UI-Elemente (UI = User Interface -\u003e Benutzerschnittstelle) mit HTML auf einer Seite anzuzeigen. Jetzt wäre es schön, wenn diese Daten auch irgendwie verwendet werden könnten.\nTheoretisch könntest du mit der Programmiersprache JavaScript direkt darauf zugreifen. Im Moment wollen wir aber bei HTML bleiben. Was wir mit HTML machen können, ist, die Werte an ein Backend (=Server) zu schicken.\nAls Backend verwenden wir die folgende URL: https://www.w3schools.com/action_page.php. Das ist eine spezielle Seite: sie zeigt die Daten an, die wir ihr schicken.\nFolgender Code zeigt ein Formular, das eine E-Mail und ein Boolean beim Klick auf “Übermitteln” an das Backend schickt\n1 2 3 4 5 6 7 8  \u003cform action=\"https://www.w3schools.com/action_page.php\" method=\"get\"\u003e \u003clabel for=\"email\"\u003eEmail:\u003c/label\u003e\u003cinput type=\"email\" name=\"email\" id=\"email\" required /\u003e \u003cbr /\u003e \u003cinput type=\"checkbox\" name=\"interested\" id=\"interested\" /\u003e \u003clabel for=\"interested\"\u003eNewsletter abonnieren\u003c/label\u003e \u003cbr /\u003e \u003cinput type=\"submit\" value=\"Übermitteln\" /\u003e \u003c/form\u003e   Entscheidend ist hier das \u003cform\u003e-Tag. Das action-Attribut legt fest, wo die Daten hingeschickt werden. Die method legt fest, welche HTTP Request Method verwendet wird (GET oder POST). Bist du dir bei den Methoden nicht mehr so sicher, dann schaue bitte das “REST”-Kapitel hier noch einmal an: https://labs.it-ninjas.ch/docs/java/spring_introduction/#625-rest\nBei Formularen verwendet man meistens entweder GET oder POST. Der grosse Unterschied zwischen beiden Methoden ist, dass bei GET die Daten in der URL mitgegeben wird, wobei bei POST die Daten ein bisschen besser versteckt im HTTP Request Body mitgeschickt werden. Verschickst du ein Passwort, solltest du lieber POST verwenden, weil sonst das Passwort womöglich im Browser in der URL-Box einsehbar sein könnte. Die zu verwendende Methode wird meistens vom Backend festgelegt. Unser Backend unterstützt beide Methoden.\nWichtig für das Formular ist, dass es einen submit-Button besitzt. Dieser Submit-Button löst das Senden der Daten an die angegebene Url (action) mit der entsprechenden HTTP Request Method (method) aus. Probiere dieses Formular einmal aus. Du wirst sehen, dass etwas wie Folgendes an den Server übermittelt wird:\n1  email=hello@world.com\u0026interested=on   Die Daten werden also als Text übermittelt. Die einzelnen Felder werden jeweils mit\n1  key=value   übermittelt und mit einem “\u0026” miteinander kombiniert. Der key stammt jeweils vom name-Attribut der Input-Elemente.\nIm oben gezeigten Beispiel haben wir bereits eine kleine Validierung (Überprüfung der Eingaben) integriert:\n Einerseits haben wir mit dem required-Attribut festgelegt, dass die E-Mail-Box nicht leer sein darf beim Übermitteln. Anderseits verbietet type=\"email\" das Senden, wenn etwas anderes als eine E-Mail-Adresse eingegeben wird. Aus diesem Grund verwenden wir lieber type=\"email\" als type=\"text\" für E-Mail-Adressen, type=\"tel\" für Telefonnummern und type=\"date\" für ein Datum.  Ein komplexeres Beispiel Um zu zeigen, wie einfach Input-Elemente verwendet werden könnten, kannst du folgendes Beispiel ausprobieren:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u003ch2\u003eLogin\u003c/h2\u003e \u003cform action=\"https://www.w3schools.com/action_page.php\" method=\"get\"\u003e \u003clabel\u003eemail: \u003cinput type=\"email\" name=\"your-email\" /\u003e\u003c/label\u003e \u003cbr /\u003e \u003clabel for=\"pw\"\u003epassword:\u003c/label\u003e \u003cinput type=\"password\" name=\"your-password\" id=\"pw\" /\u003e \u003cbr /\u003e \u003clabel\u003e\u003cinput type=\"checkbox\" name=\"stay\" value=\"yes\" /\u003eStay logged in.\u003c/label\u003e \u003ch4\u003eFavorite Language?\u003c/h4\u003e \u003cp\u003e \u003cinput type=\"radio\" id=\"html\" name=\"fav_language\" value=\"HTML\"\u003e \u003clabel for=\"html\"\u003eHTML\u003c/label\u003e\u003cbr\u003e \u003cinput type=\"radio\" id=\"css\" name=\"fav_language\" value=\"CSS\"\u003e \u003clabel for=\"css\"\u003eCSS\u003c/label\u003e\u003cbr\u003e \u003c/p\u003e \u003cinput type=\"submit\" /\u003e \u003c/form\u003e   Jetzt bist du dran. Löse bitte die Aufgabe 1 in den Labs.\n","categories":"","description":"Modul #F3 - HTML und CSS - Formular-Daten mit HTML verschicken.\n","excerpt":"Modul #F3 - HTML und CSS - Formular-Daten mit HTML verschicken.\n","ref":"/docs/web/html_css/05_forms/","tags":"","title":"HTML Formulare"},{"body":"Ziele  Ich kann Namen für Objekte in einem Text identifizieren Ich kann gute Namen für Attribute und Methoden wählen Ich kann Objekte erstellen und ihnen entsprechende Eigenschaften geben Ich kann Objekte untereinander verknüpfen  Immobilienfirma In dieser Aufgabe soll eine Immobilienfirma mit Objekten abgebildet werden. Eine solche Firma besitzt beliebige Immobilien und hat einen Firmensitz an einer bestimmten Adresse. Die Firma hat diverse Angestellte und einen Namen. Eine Immobilie kann aus diversen Wohnungen bestehen, welche vermietet werden. Eine Immobilie hat eine bestimmte Adresse und ein Angestellter der Firma ist der Immobilie als Abwart zugeteilt. Ein Angestellter der Firma ist zudem der Verwalter einer solchen Immobilie. Eine Wohnung befindet sich in einem bestimmten Stockwerk, besitzt eine Wohnungsnummer und eine Beschreibung. Wenn ein Mieter in eine Wohnung einzieht, so gibt es zwischen Firma und Mieter einen Vertrag für eine bestimmte Wohnung. Jeder Vertrag hat ein Start- und ein End-Datum, zudem regelt der Vertrag den monatlichen Preis für eine Wohnung. Die Standardangaben für eine Person werden durch ein Geburtsdatum und ein Geschlecht ergänzt.\nTeil 1 Ermittle aus dem Text oben die verschiedenen Objekte und ihre Eigenschaften. Verknüpfe dann die Objekte miteinander, zum Beispiel hat eine Immobilienfirma eine Adresse als Firmensitz.\nTeil 2 Erstelle für deine Firma mindestens zwei Immobilien mit unterschiedlichen Wohnungen. Definiere Angestellte und Abwarte. Erstelle Mieter und Verträge.\nTeil 3 Erstelle für die Firma die folgenden Funktionen:\n Ermittle die total Anzahl an Wohnungen von allen Immobilien Ermittle den Abwart für eine bestimmte Wohnung Ermittle die Verträge für eine bestimmte Immobilie Ermittle die leeren Wohnungen für eine bestimmte Immobilie Ermittle die Verträge, die im nächsten Monat ablaufen Ermittle alle Verträge sortiert nach Personen (eine Person kann mehrere Wohnungen mieten) Ermittle das monatliche Einkommen pro Immobilie Ermittle das jährliche Einkommen der Firma (ein Vertrag kann während dem Jahr ablaufen)  ","categories":"","description":"Aufgabe zu Modul #J2 - OOP - Immobilienfirma\n","excerpt":"Aufgabe zu Modul #J2 - OOP - Immobilienfirma\n","ref":"/labs/java/java-oop/05_immofirma/","tags":"","title":"Immobilienfirma"},{"body":"","categories":"","description":"Exercises zu Modul #J3 - OOD\n","excerpt":"Exercises zu Modul #J3 - OOD\n","ref":"/labs/java/java-ood/","tags":"","title":"Java Exercises - OOD"},{"body":"Ziele  Ich weiss, was eine bedingte Anweisung ist und kann sie korrekt anwenden. Ich kann eine Schleife programmieren: for, foreach, while und do-while. Ich kenne die switch-Anweisung.  Kontrollstrukturen Kontrollstrukturen dienen dazu, den Ablauf eines Programms zu steuern. Damit bietet eine Kontrollstruktur die Möglichkeit, Programmteile nur unter gewissen Bedingungen ( → bedingte Anweisungen) auszuführen oder Programmteile zu wiederholen ( → Schleifen).\nBedingte Anweisungen Eine bedingte Anweisung ist eine Konstruktion, mit der ein Programm abhängig vom Wert eines boolschen Ausdrucks (true oder false) unterschiedliche Wege geht.\nIf-Statement Die einfachste Form der bedingten Anweisung besteht aus dem Schlüsselwort if, einem boolschen Ausdruck und einem Block.\n1 2 3  if (expression) { }   Wenn der Ausdruck true ist, werden die Anweisungen im Codeblock ausgeführt. Andernfalls werden sie übersprungen.\nIf-Else Statement Der obige if-Fall kann mit dem Schlüsselwort else erweitert werden, um alternative Aktionen auszuführen, wenn der Ausdruck false ist.\n1 2 3 4 5  if (expression) { // do something } else { // do something else }   Im folgenden Beispiel gibt das Programm je nach Wert von num (gerade oder ungerade) unterschiedlichen Text aus.\n1 2 3 4 5 6  int num = ...; // the num is initialized by some value if (num % 2 == 0) { System.out.println(\"It's an even number\"); } else { System.out.println(\"It's an odd number\"); }   Da eine Zahl nur gerade oder ungerade sein kann, wird nur eine der beiden Ausgaben gemacht.\nElse-If-Statements Ein Else-Statement kann durch ein If-Statement erweitert werden.\n1 2 3 4 5 6 7 8 9  if (expression0) { // do something } else if (expression1) { // do something else 1 } else if (expressionN) { // do something else N } else { // in all other cases: do this… }   Wenn also der erste Ausdruck false ist, wird der zweite Ausdruck überprüft, usw.\nBeispiel:\n1 2 3 4 5 6 7 8 9 10  long dollars = ...; // your budget if (dollars \u003c 1000) { System.out.println(\"Buy a laptop\"); } else if (dollars \u003c 2000) { System.out.println(\"Buy a personal computer\"); } else if (dollars \u003c 100_000) { System.out.println(\"Buy a server\"); } else { System.out.println(\"Buy a data center or a quantum computer\"); }   Lernvideo Wenn du dir die Erklärung noch mit einem Video genauer anschauen möchtest, empfiehlt dir das Coaching-Team dieses Video.\n Jetzt bist du dran. Löse bitte die Aufgabe 2a zu den if-else-Bedingungen in den Labs.\n Switch-Statement Die Switch-Anweisung bietet eine Möglichkeit, basierend auf dem Wert einer einzelnen Variablen (kein Ausdruck!) zwischen mehreren Fällen zu wählen. Die Variable kann eine Ganzzahl, ein Zeichen, eine Zeichenfolge oder eine Aufzählung sein.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  switch (variable) { case value1: // do something here  break; case value2: // do something here  break; //... other cases  case valueN: // do something here  break; default: // do something by default  break; // it can be omitted }   Die Schlüsselwörter switch und case werden hier immer benötigt. Die Schlüsselwörter break und default sind optional. Das Schlüsselwort break verlässt die Switch-Anweisung. Wenn ein Fall nicht über das Keyword break verfügt, wird auch der darauffolgende Fall ausgewertet. Dies ist spannend, um die einzelnen Auswertungen verketten zu können. Der Default-Fall wird ausgewertet, wenn kein Fall mit dem Variablenwert übereinstimmt.\nSeit Java 12 kann das switch-Statement kürzer geschrieben werden, indem statt einem Doppelpunkt der Pfeil-Operator -\u003e verwendet wird und dadurch die break-Zeile entfällt:\n1 2 3 4 5 6 7 8  String mood = \"happy\"; switch (mood) { case \"happy\" -\u003e System.out.println(\"Keep smiling.\"); case \"sad\" -\u003e System.out.println(\"Don't be sad!\"); case \"angry\" -\u003e System.out.println(\"Take a deep breath!\"); default -\u003e System.out.println(\"I'm sorry, I don't recognize that mood.\"); }   Ausserdem ist es nun direkt möglich, eine Variable direkt mittels switch-Assignment zuzuweisen:\n1 2 3 4 5 6 7 8 9 10  int place = 1; String suffix = switch (place) { case 1 -\u003e \"st\"; case 2 -\u003e \"nd\"; case 3 -\u003e \"rd\"; default -\u003e \"th\"; }; System.out.println(\"You're on the \" + place + suffix + \" place.\");    Jetzt bist du dran. Löse bitte die Aufgabe 2b zum Switch-Statement in den Labs.\n Schleifen (Loops) Manchmal müssen wir einen Codeblock für eine bestimmte Anzahl wiederholen. Zu diesem Zweck stellt Java die Schleife bereit. Diese Schleife wird häufig verwendet, um über einen Wertebereich oder durch ein Array zu iterieren. For-Loops arbeiten mit einem Schleifenzähler, welcher sehr gut für Indizes von Arrays verwendet werden kann. Bei allen Schleifen ist Vorsicht geboten, da es rasch zu einer unendlichen Anzahl von Ausführungen kommen kann.\nWhile-Loop Die while- Schleife besteht aus einem Codeblock und einer Bedingung (einem booleschen Ausdruck). Wenn die Bedingung erfüllt ist, wird der Code innerhalb des Blocks ausgeführt. Dieser Code wird solange wiederholt, bis die Bedingung nicht mehr erfüllt ist.\n1 2 3  while (condition) { // body: do something  }   Innerhalb des Schleifenkörpers kann das Programm wiederum alle möglichen Java-Anweisungen ausführen. Es kann sogar andere Schleifen enthalten.\nBeispiel: Die folgende Schleife gibt Ganzzahlen aus, während eine Variable kleiner als 5 ist.\n1 2 3 4 5 6 7  int i = 0; while (i \u003c 5) { System.out.print(i + \" \"); i++; } // Output: 0 1 2 3 4   Do-While Loop Die Do-While-Schleife besteht aus einem Codeblock und einer Bedingung (einem boolschen Ausdruck) am Ende. Im Gegensatz zur While-Schleife wird die Do-While-Schleife mindestens einmal ausgeführt, da die Bedingung am Ende steht.\n1 2 3  do { // body: do something } while (condition);   Lernvideo Wenn du dir die Erklärung noch mit einem Video genauer anschauen möchtest, empfiehlt dir das Coaching-Team dieses Video.\nFor-Loop 1 2 3  for (initialization; condition; modification) { // do something }    Bevor die Schleife beginnt, wird einmal die Initialisierungsanweisung (initialization) ausgeführt. Wir bezeichnen diese Variable als Schleifenvariable. Es sind mehrere Schleifenvariablen erlaubt, sie können durch Kommas getrennt werden. Die Bedingung (condition) ist ein boolscher Ausdruck, der die Notwendigkeit der nächsten Iteration bestimmt. Wenn die Auswertung der Bedingung false ist, wird die Schleife beendet – ansonsten folgt eine weitere Iteration Die Modifikation ist eine Anweisung, die den Wert der Schleifenvariablen verändert. Sie wird nach jeder Iteration aufgerufen. Normalerweise wird der Wert der Variable inkrementiert oder dekrementiert.  Beispiel:\n1 2 3 4 5  int n = 9; for (int i = 0; i \u003c= n; i++) { System.out.print(i + \" \"); } // Output: 0 1 2 3 4 5 6 7 8 9   Innerhalb des Schleifenkörpers kann das Programm wiederum alle möglichen Java-Anweisungen ausführen. Es kann sogar andere Schleifen enthalten. Wie bei allen Blöcken sind die Schleifenvariablen nur innerhalb des Schleifenkörpers sichtbar. Die Schleifenvariable wird meistens mit einfachen Variablennamen wie i, j, k oder index benannt.\nHier ist ein weiteres Beispiel. Berechnen wir die Summe der Ganzzahlen von 1 bis 10 mit der for-Schleife.\n1 2 3 4 5 6 7 8 9  int startIncl = 1; int endExcl = 11; int sum = 0; for (int i = startIncl; i \u003c endExcl; i++) { sum += i; } System.out.println(sum); // Output: 55   For-Each Loop Der For-Each-Loop durchläuft alle Elemente eines Arrays oder einer Collection. Die Angaben aus dem For-Loop werden durch eine Schleifenvariable und ein Doppelpunkt ersetzt. (Arrays lernst du später im Kapitel “Arrays” kennen. Daher ist dieses Beispiel hier nur zur Vollständigkeit aufgelistet - du musst dieses Beispiel hier noch nicht verstehen.)\n1 2 3 4 5  int[] numbers = { 125, 381, 98, 12, 235 }; for (int number: numbers) { System.out.print(number + \" \"); } // Output: 125 381 98 12 235   Der gezeigte Loop wird also fünfmal ausgeführt und der Wert der Variable number nimmt bei jedem Durchlauf den jeweils nächsten Wert aus dem Array an.\nLernvideo Wenn du dir die Erklärung noch mit einem Video genauer anschauen möchtest, empfiehlt dir das Coaching-Team dieses Video.\n Jetzt bist du dran. Löse bitte die Aufgabe 3 in den Labs.\n","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/05_control_structures/","tags":"","title":"Kontrollstrukturen"},{"body":"Ziele  Ich kenne die Grundlagen von Maven Ich kann Maven lokal konfigurieren Ich kann im Artifactory Abhängigkeiten suchen und diese verwenden Ich kenne die Grundlagen von Project Object Models (pom) Ich kenne die wichtigsten Maven Befehle und kann diese auf der Kommandozeile anwenden Ich kann die Abhängigkeiten meiner Applikationen mit Maven verwalten Ich kann Maven Plugins konfigurieren und damit meinen Maven-Build steuern Ich kann den Begriff Continuous Integration erklären Ich kenne die Komponenten der Deployment-Pipeline und deren Aufgaben  Maven Allgemeine Informationen Apache Maven ist ein Build-Management Tool. Von einer einzelnen Datei aus, kann Maven den Build eines Projektes steuern. Diese zentrale Datei ist das Project Object Model, kurz auch POM genannt. Der Build eines Projektes kann dabei von einfacher Kompilierung bis zur Auslieferung einer Anwendung auf eine bestimmte Plattform reichen.\nDamit Maven funktionieren kann, benötigt ein Projekt die folgenden Dinge:\n Eine Maven-Installation, entweder separat oder Built-In wie beispielsweise mit IntelliJ Eine POM-Datei pro Projekt oder Modul (es handelt sich um eine XML-Datei) Ein zentrales Maven-Repository Ein lokales Maven-Repository Eine Konfigurationsdatei mit dem Namen settings.xml   Installation Die Installation von Apache Maven wurde idealerweise bereits durchgeführt. Falls nicht, kann Maven hier heruntergeladen werden: https://maven.apache.org/download.cgi, beim Herunterladen das Binary auswählen (nicht die Source).\n pom.xml Der Aufbau eines POM kann grob in folgende Abschnitte unterteilt werden, hier erklärt an einem umfangreichen Beispiel. Die einzelnen Teile werden gleich im Anschluss näher erläutert. Bitte beachte, dass dieses POM nicht alle Inhalte erklären kann, es dient nur als erstes Beispiel.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141  \u003c!-- (1) Header --\u003e \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\u003e \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e \u003c!-- (2) Angaben zum Artefakt --\u003e \u003cgroupId\u003ech.sbb.interviewtool\u003c/groupId\u003e \u003cartifactId\u003einterviewtool-backend\u003c/artifactId\u003e \u003cversion\u003e0.0.1-SNAPSHOT\u003c/version\u003e \u003cpackaging\u003ejar\u003c/packaging\u003e \u003c!-- (3) Angaben zum Parent-Projekt --\u003e \u003cparent\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-parent\u003c/artifactId\u003e \u003cversion\u003e2.2.4.RELEASE\u003c/version\u003e \u003crelativePath/\u003e \u003c/parent\u003e \u003c!-- (4) Properties --\u003e \u003cproperties\u003e \u003cproject.build.sourceEncoding\u003eUTF-8\u003c/project.build.sourceEncoding\u003e \u003cjava.version\u003e1.8\u003c/java.version\u003e \u003cmaven.build.timestamp.format\u003eyyyy-MM-dd HH:mm\u003c/maven.build.timestamp.format\u003e \u003ctimestamp\u003e${maven.build.timestamp}\u003c/timestamp\u003e \u003c/properties\u003e \u003c!-- (5) Abhängigkeiten --\u003e \u003cdependencies\u003e \u003c!-- Spring Boot --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-web\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-web-services\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-security\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-data-jpa\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-actuator\u003c/artifactId\u003e \u003c/dependency\u003e \u003c!-- Spring --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-webmvc\u003c/artifactId\u003e \u003c/dependency\u003e \u003c!-- Lombok --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.projectlombok\u003c/groupId\u003e \u003cartifactId\u003elombok\u003c/artifactId\u003e \u003cversion\u003e1.18.6\u003c/version\u003e \u003c/dependency\u003e \u003c!-- Datenbank --\u003e \u003cdependency\u003e \u003cgroupId\u003emysql\u003c/groupId\u003e \u003cartifactId\u003emysql-connector-java\u003c/artifactId\u003e \u003cversion\u003e8.0.20\u003c/version\u003e \u003c/dependency\u003e \u003c!-- Unit- und Integrationstests --\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.h2database\u003c/groupId\u003e \u003cartifactId\u003eh2\u003c/artifactId\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-test\u003c/artifactId\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-engine\u003c/artifactId\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.springframework\u003c/groupId\u003e \u003cartifactId\u003espring-test\u003c/artifactId\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e \u003c!-- (6) Build-Informationen --\u003e \u003cbuild\u003e \u003cplugins\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-maven-plugin\u003c/artifactId\u003e \u003c/plugin\u003e \u003cplugin\u003e \u003cgroupId\u003eorg.apache.maven.plugins\u003c/groupId\u003e \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003ccompilerVersion\u003e1.8\u003c/compilerVersion\u003e \u003csource\u003e1.8\u003c/source\u003e \u003ctarget\u003e1.8\u003c/target\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003c/plugins\u003e \u003c/build\u003e \u003c!-- (7) Auslieferung --\u003e \u003cdistributionManagement\u003e \u003crepository\u003e \u003cid\u003emvn\u003c/id\u003e \u003curl\u003ehttps://bin.sbb.ch/artifactory/cca.mvn/\u003c/url\u003e \u003c/repository\u003e \u003csnapshotRepository\u003e \u003cid\u003emvn\u003c/id\u003e \u003curl\u003ehttps://bin.sbb.ch/artifactory/cca.mvn/\u003c/url\u003e \u003c/snapshotRepository\u003e \u003c/distributionManagement\u003e \u003c!-- (8) Entwickler-Informationen --\u003e \u003cdevelopers\u003e \u003cdeveloper\u003e \u003cid\u003eU000000\u003c/id\u003e \u003cname\u003eVorname Name\u003c/name\u003e \u003cemail\u003evorname.name@sbb.ch\u003c/email\u003e \u003corganization\u003eSBB\u003c/organization\u003e \u003corganizationUrl\u003ehttps://www.sbb.ch\u003c/organizationUrl\u003e \u003croles\u003e \u003crole\u003eSoftware Architect\u003c/role\u003e \u003crole\u003eLead Developer\u003c/role\u003e \u003c/roles\u003e \u003c/developer\u003e \u003c/developers\u003e \u003c/project\u003e   Abschnitt 1 Der Header einer POM-Datei bleibt grundsätzlich so wie dargestellt. Die Angaben zum Schema sind dabei optional. Falls andere Schemas verwendet werden, so sind diese hier zu deklarieren.\nAbschnitt 2 Die Angaben zum Artefakt enthalten die folgenden Informationen:\n Gruppen-ID: Normalerweise eine umgekehrte URL, also beispielsweise ch.sbb.interviewtool. Darin sollte der Projektname enthalten sein Artefakt-ID: Der Name des Projekts oder der Komponente Version: Die momentane Version des Projekts, diese wird später durch Releases verändert Paketierung: Angabe, in welcher Form das Artefakt geliefert wird. Der Default ist Java Archive (JAR)  Bei der Versionierung nutzt Maven die folgenden Standards:\n Major-Version Minor-Version Incremental-Version Build-Number Qualifier  Dazu ein paar Beispiele:\n   Typ Beispiel     Major-Version 1.2.1   Minor-Version 2.0   Incremental-Version 1.2-SNAPSHOT   Patch 1.2.1   Build-Number 1.4.2-12   Qualifier 1.2-beta-2    Alle Versionen mit Qualifier sind dabei älter als die gleiche Version ohne Qualifier. Beispielsweise ist die Version 1.2-beta-2 älter als die Version 1.2. Gleiche Versionen mit unterschiedlichen Qualifiern werden durch den Vergleich dieser als String verglichen. So ist die Version 1.2-beta-2 neuer als die Version 1.2-alpha-6.\nDer SNAPSHOT Qualifier wird verwendet, wenn eine Version noch nicht ausgeliefert wurde. So wird die Version 0.1.2-SNAPSHOT sehr wahrscheinlich als Version 0.1.2 ausgeliefert werden.\nAbschnitt 3 Falls das Projekt Bestandteil eines anderen Projektes ist, müssen hier die Artefakt-Angaben des sogenannten Parent-Projekts hinterlegt werden. Dies ist vorallem bei Spring-Boot Projekten wichtig.\nAbschnitt 4 Die Einstellungen in Maven sind beliebig wählbare Tags. So kann beispielsweise eine bestimmte Einstellung oder eine Version definiert werden.\nBeispiel:\n1  \u003cspecial.setting\u003eValue\u003c/special.setting\u003e   Innerhalb der POM-Datei kann dann mit\n1  ${special.setting}   auf die Einstellung (Tag) und damit auf deren Wert (Value) zugegriffen werden.\nAbschnitt 5 Abhängigkeiten zu Fremdbibliotheken. Diese sollten stets Gruppen-ID, Artefakt-ID und Version enthalten. Der Typ der Abhängigkeit gibt an, um welche Art von Bibliothek es sich handelt. Nicht alle Java-Bibliotheken werden als JAR ausgeliefert. Mögliche Typen sind hier zu finden: https://maven.apache.org/ref/3.6.3/maven-core/artifact-handlers.html Vielfach wird auch noch der Scope verwendet, er gibt an in welchem Umfang die Fremdbibliothek miteinbezogen wird. Mögliche Scopes sind:\n compile - Das ist der Default-Scope. Bibliotheken sind in allen Klassenpfaden verfügbar (Classpath) provided - Gleich wie compile, ausser das die Bibliothek zur Laufzeit von einem Container (wie dem JDK) erwartet und bereitgestellt wird runtime - Zeigt an, dass die Bibliothek zur Kompilierung nicht verwendet wird. Zur Laufzeit steht sie dann zur Verfügung test - Die Bibliothek steht nur für Tests zur Verfügung system - Gleich wie provided, mit der Ausnahme, dass die Bibliothek explizit auf dem System zur Verfügung stehen muss  Abschnitt 6 Die Build-Informationen konfigurieren den Ablauf des Maven-Builds. Mit Plugins kann der Build selbst durch spezifische Erweiterungen beliebig angepasst werden. Es ist auch möglich eigene Maven-Plugins zu entwickeln. Es stehen sehr viele Plugins für Maven zur Verfügung, eine Übersicht gibt es hier.\nAbschnitt 7 Die Auslieferungs-Sektion bestimmt, wo die Artefakte nach dem Build abgelegt werden sollen.\nAbschnitt 8 Die Entwickler-Informationen dienen dazu, an der Entwicklung beteiligte Personen zu identifizieren.\n IntelliJ IDEA einrichten Im IntelliJ findet man in den allgemeinen Einstellungen auch die Einstellungen für Maven. Die wichtigsten Einstellungen sind:\n   Einstellung Beschreibung     Maven home directory Zeigt auf das Verzeichnis einer Maven-Installation. Das IntelliJ verfügt bereits über eine Maven-Installation, diese wird als “Bundled” bezeichnet   User settings file Die XML-Datei, welche weiter oben angelegt wurde   Local repository Der Ablageort für das lokale Repository, dieser ist normalerweise unter C:\\Users\\\u003cPersonalnummer\u003e\\.m2.\\repository zu finden    Bei diesen Einstellungen muss überprüft werden, dass die Pfad-Angaben für die XML-Datei und das lokale Repository korrekt sind.\n Umgebungsvariable aufsetzen Damit Maven auch auf der Command-Line funktioniert, muss eine Umgebungsvariable gesetzt werden. Im Windows muss also der Pfad zur Built-In Version des IntelliJ hinterlegt werden. Die folgenden Schritte sind dazu notwendig:\n   # Beschreibung     1 Anwendung “Systemumgebungsvariablen bearbeiten” aus der Systemsteuerung starten   2 Unten rechts auf den Button “Umgebungsvariablen” klicken   3 Im unteren Teil “Systemvariablen” die Variable “Path” suchen und anklicken   4 Auf den Button “Bearbeiten…” klicken   5 Oben rechts auf den Button “Neu” klicken, es erscheint eine neue Zeile ganz unten   6 Den Pfad zum Built-In Maven einfügen. Dieser ist normalerweise “\u003cInstallationsort IntelliJ IDEA\u003e\\plugins\\maven\\lib\\maven3\\bin”   7 Alle offenen Windows-Fenster mit “OK” schliessen     Commands Maven lässt sich auf der Kommandozeile oder im IntelliJ-Terminal ausführen. Damit wir sehen, ob das wirklich klappt könnt ihr das Terminal öffnen und den folgenden Befehl eingeben:\n1  mvn -version   Das sollte nun in etwa so aussehen:\nBevor wir die einzelnen Befehle kurz anschauen werfen wir einen Blick auf die einzelnen Phasen des Maven-Lebenszyklus.\nJeder der in der Grafik genannten Befehle wird zusätzlich die vorangehenden Befehle ausführen. Die Ausführung von “mvn package” wird also die Phasen validate, compile, test und package ausführen.\nhelp 1  mvn -help   Das Ergebnis dürfte klar sein. Maven listet alle möglichen Befehle auf.\ndependency:tree 1  mvn dependency:tree   Dieser Befehl listet alle Abhängigkeiten zu Fremdbibliotheken als Baum auf. Das ist grundsätzlich sehr praktisch wenn man doppelte Abhängigkeiten erkennen/vermeiden will.\nclean 1  mvn clean   Dieser Befehl löscht alle vorherigen lokale Maven-Build-Artefakte, indem er das Verzeichnis “target” löscht.\ncompile 1  mvn compile   Kompiliert den Sourcecode je nach Abhängigkeit von Plugins. Wenn also beispielsweise ein Maven-Compiler-Plugin verwendet wird, so wird dieses als Regelwerk für die Kompilierung herangezogen.\ntest 1  mvn test   Führt alle Tests aus. In einem Java-Projekt sind dies beispielsweise alle Unit-Tests mit jUnit.\npackage 1  mvn package   Führt einen lokalen Maven-Build aus, startet alle Tests und paketiert die Anwendung (normalerweise als JAR) in das Verzeichnis “target”.\nverify 1  mvn verify   Prüft die Testergebnisse aller ausgeführten Integrationstests, normalerweise wird das Maven-Failsafe-Plugin für diesen Maven-Befehl vorausgesetzt.\ninstall 1  mvn install   “Installiert” den Artefakt im lokalen Maven-Repository.\ndeploy 1  mvn deploy   “Installiert” den Artefakt im Remote-Repository (Artifactory).\nDie Maven-Befehle lassen sich kombinieren. Sehr nützlich ist zum Beispiel:\n1  mvn clean install   Selbstverständlich gibt es sehr viele zusätzliche Optionen für die einzelnen Maven-Befehle.\n ","categories":"","description":"Modul #S2\n","excerpt":"Modul #S2\n","ref":"/docs/java/maven/","tags":"","title":"Maven und Continuous Integration"},{"body":"Aufgabe 1 (Optional) Wir implementieren eine einfache Job-Verarbeitung. Zwei InputWorker erstellen neue Job’s, welche parallel von einem OutputWorker abgearbeitet werden.\nJeder InputWorker erstellt eine definierte Anzahl Jobs und stoppt anschliessend. Die Anzahl könnt ihr in der Start-Klasse anpassen: Start.INPUTWORKER_NUMBER_OF_JOBS.\nNach jedem Arbeitsschritt (Job erstellen oder verarbeiten) machen die Workers eine kleine Pause. Ihr könnt die maximale zufällige Dauer über die statischen Variablen Start.INPUTWORKER_MAX_RELAX_TIME_MS und Start.OUTPUTWORKER_MAX_RELAX_TIME_MS steuern. Auch die maximal zufällige Dauer zum Abarbeiten eines Jobs kann definiert werden: Start.OUTPUTWORKER_MAX_PROCESS_TIME_MS.\nDer OutputWorker stoppt, sobald er während einer Anzahl Durchgänge (Start.OUTPUTWORKER_STOP_AFTER_EMPTY_CYCLES) keine Jobs zum Verarbeiten erhält.\nDie Worker sind mit dem ProcessingInterface entkoppelt, welches das Hinzufügen und Abholen der Jobs zur Verfügung stellt:\n Inferface ProcessingInterface 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  package ch.itninjas.labs.j7.queue; public interface ProcessingInterface { /** * Add a job to the system. * @return true if the job is added. */ public boolean addJob(Job job); /** * Get the next job for processing. */ public Job getNextJob(); /** * Put the unprocessed job back to the system. */ public void getJobBack(Job job); /** * Get the number of jobs in the system. */ public int getJobs(); /** * Has jobs in the system for processing? */ public boolean hasJobs(); }    In der Konsole seht ihr die Arbeit der Workers:\n Mögliche Konsole-Ausgabe 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  [InputWorker-1] stared successfully [InputWorker-2] stared successfully -\u003e [InputWorker-1] add job: Job{id=1, message='[InputWorker-1]: (14:52:41) It is a very hard job!', jobState=NEW} -\u003e [InputWorker-2] add job: Job{id=2, message='[InputWorker-2]: (14:52:41) It is a very hard job!', jobState=NEW} -\u003e [InputWorker-2] add job: Job{id=3, message='[InputWorker-2]: (14:52:43) It is a very hard job!', jobState=NEW} -\u003e [InputWorker-1] add job: Job{id=4, message='[InputWorker-1]: (14:52:43) It is a very hard job!', jobState=NEW} [OutputWorker-1] stared successfully \u003c- [OutputWorker-1] process job: Job{id=1, message='It is a really hard job!', jobState=IN_PROGRESS} == [OutputWorker-1] finish job: Job{id=1, message='It job is finish!', jobState=FINISH} -\u003e [InputWorker-2] add job: Job{id=5, message='[InputWorker-2]: (14:52:43) It is a very hard job!', jobState=NEW} \u003c- [OutputWorker-1] process job: Job{id=2, message='It is a really hard job!', jobState=IN_PROGRESS} -\u003e [InputWorker-1] add job: Job{id=6, message='[InputWorker-1]: (14:52:44) It is a very hard job!', jobState=NEW} == [OutputWorker-1] finish job: Job{id=2, message='It job is finish!', jobState=FINISH} \u003c- [OutputWorker-1] process job: Job{id=3, message='It is a really hard job!', jobState=IN_PROGRESS} -\u003e [InputWorker-1] add job: Job{id=7, message='[InputWorker-1]: (14:52:44) It is a very hard job!', jobState=NEW} == [OutputWorker-1] finish job: Job{id=3, message='It job is finish!', jobState=FINISH} -\u003e [InputWorker-2] add job: Job{id=8, message='[InputWorker-2]: (14:52:45) It is a very hard job!', jobState=NEW} \u003c- [OutputWorker-1] process job: Job{id=4, message='It is a really hard job!', jobState=IN_PROGRESS} == [OutputWorker-1] finish job: Job{id=4, message='It job is finish!', jobState=FINISH} \u003c- [OutputWorker-1] process job: Job{id=5, message='It is a really hard job!', jobState=IN_PROGRESS} == [OutputWorker-1] finish job: Job{id=5, message='It job is finish!', jobState=FINISH} -\u003e [InputWorker-1] add job: Job{id=9, message='[InputWorker-1]: (14:52:46) It is a very hard job!', jobState=NEW} \u003c- [OutputWorker-1] process job: Job{id=6, message='It is a really hard job!', jobState=IN_PROGRESS} -\u003e [InputWorker-2] add job: Job{id=10, message='[InputWorker-2]: (14:52:47) It is a very hard job!', jobState=NEW} == [OutputWorker-1] finish job: Job{id=6, message='It job is finish!', jobState=FINISH} \u003c- [OutputWorker-1] process job: Job{id=7, message='It is a really hard job!', jobState=IN_PROGRESS} == [OutputWorker-1] finish job: Job{id=7, message='It job is finish!', jobState=FINISH} \u003c- [OutputWorker-1] process job: Job{id=8, message='It is a really hard job!', jobState=IN_PROGRESS} == [OutputWorker-1] finish job: Job{id=8, message='It job is finish!', jobState=FINISH} \u003c- [OutputWorker-1] process job: Job{id=9, message='It is a really hard job!', jobState=IN_PROGRESS} == [OutputWorker-1] finish job: Job{id=9, message='It job is finish!', jobState=FINISH} \u003c- [OutputWorker-1] process job: Job{id=10, message='It is a really hard job!', jobState=IN_PROGRESS} == [OutputWorker-1] finish job: Job{id=10, message='It job is finish!', jobState=FINISH} ?? [OutputWorker-1] Nothing to do, I stop.    Mit der Start-Klasse wird das gesamte System gestartet. Leider fehlt ein zentraler Teil des Systems: Ihr müsst das Interface ProcessingInterface implementieren.\n Ihr findet den Programmcode im work Repo:\nhttps://github.com/it-ninjas/work/tree/main/labs/src/main/java/ch/itninjas/labs/j7/queue/lab1\n Aufgabe 1.1 (Optional)  Implementiert das ProcessingInterface mit einer Queue, damit die Jobs im FIFO-Prinzip (First-In-First-Out) verarbeitet werden. Kontrolliert die Konsole-Ausgabe:  Ob alle Jobs verarbeitet wurden. Ob die Jobs in der gewünschten Reihenfolge verarbeitet wurden.   Verändert die Pausen und Verarbeitungszeit der Worker und schaut euch der Einfluss in der Konsole an.  Aufgabe 1.2 (Optional)  Implementiert das ProcessingInterface mit einer Queue, damit die Jobs im LIFO-Prinzip (Last-In-First-Out) verarbeitet werden. Kontrolliert die Konsole-Ausgabe:  Ob alle Jobs verarbeitet wurden. Ob die Jobs in der gewünschten Reihenfolge (Last-In-First-Out) verarbeitet wurden.   Verändert die Pausen und Verarbeitungszeit der Worker und schaut euch der Einfluss in der Konsole an.  Aufgabe 2 (Optional) Erweitert den OutputWorker so, dass er vor der Verarbeitung eines Jobs die Anzahl offener Jobs anzeigt.\nAufgabe 3 (Optional) Erweitert den OutputWorker so, dass er zufällig einzelne Jobs nicht erfolgreich bearbeiten kann und diese mit der Methode ProcessingInterface.getJobBack(Job job) zurück in die Queue stellt.\nAufgabe 4 (Optional) Erstellt ein JUnit-Test (JUnit Version 5), welcher die Schnittstelle ProcessingInterface der Klasse Processing ausführlich testet.\n","categories":"","description":"Aufgaben zu [Java Collections - Queue + Deque](../../../../docs/java/java-collections/06_queue)\n","excerpt":"Aufgaben zu [Java Collections - Queue + …","ref":"/labs/java/java-collections/05_queue/","tags":"","title":"Queue + Deque - Aufgaben"},{"body":"java.util.Stack java.util.Stack ist eine weitere Datenstruktur, bei der Elemente eingefügt und wieder entfernt werden können, wobei bei Stacks immer nur auf dasjenige Element zugegriffen werden kann, das zuletzt eingefügt wurde (Last-In-First-Out = LIFO). Auf Deutsch könnte man Stack als “Stapel” übersetzen.\nEin Stack kann leer sein oder kann beliebig wachsen. Mit der Methode push(E item) legt man das Element item auf den Stack, d.h. man fügt es zu oberst hinzu. pop() entfernt das oberste Element vom Stack und gibt es zurück.\nDie Methode peek() gibt das Element zu oberst auf dem Stack zurück, ohne den Stack zu verändern.\nFalls der Stack leer ist und man die Methode pop() oder peek() aufruft, wird die Exception EmptyStackException geworfen.\nMit der Methode search(Object o) kann man ein Element im Stack suchen, wobei die Position des Elements zurückgegeben wird. Bei den Stacks hat das oberste Element des Stacks die Position 1 und das Element darunter die Position 2, das Element darunter die Position 3, ect. Das heisst anders als bei den ArrayLists fangen wir nicht bei 0 an die Elemente zu indexieren, sondern bei 1.\nAlle Methoden der Klasse java.util.Stack 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34  /* * Konstruktor: Erstellt einen leeren Stack */ public Stack() /* * Fügt ein Element an die oberste Stelle dieses Stacks hinzu. */ public E push(E item) /* * Entfernt das Element an der obersten Stellen und gibt dieses Element * als Wert dieser Funktion zurück. */ public E pop() /* * Gibt das Element an der obersten Stelle des Stacks zurück, * ohne es vom Stack zu entfernen. */ public E peek() /* * Gibt true zurück, wenn der Stack keine Elemente enthält. */ public boolean empty() /* * Gibt die 1-basierte Position vom oberen Ende des Stapels zurück, * an der sich das Objekt befindet; der Rückgabewert -1 bedeutet, * dass sich das Objekt nicht auf dem Stapel befindet. */ public int search(Object o)   Beispiel Beispiel 1 Im folgenden Beispiel erstellen wir zunächst ein leeres Stack mit Elementen vom Typ String und wenden die Methoden der Stack-Klasse an und sehen, wie diese funktionieren.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  import java.util.Stack; public class StackExample { public static void main(String[] args) { Stack\u003cString\u003e colors = new Stack\u003c\u003e(); colors.push(\"blue\"); colors.push(\"yellow\"); colors.push(\"green\"); colors.push(\"orange\"); System.out.println(colors); // Output: [blue, yellow, green, orange]  System.out.println(\"Color on top: \" + colors.peek()); // Output: Color on top: orange  System.out.println(colors); // Output: [blue, yellow, green, orange]  System.out.println(\"Color on top: \" + colors.pop()); // Output: Color on top: orange  System.out.println(colors); // Output: [blue, yellow, green]  System.out.println(\"Is stack empty? \" + colors.empty()); // Output: Is stack empty? false  System.out.println(\"Size of stack: \" + colors.size()); // Output: Size of stack: 3  System.out.println(\"Position of element blue: \" + colors.search(\"blue\")); // Output: Position of element blue: 3  System.out.println(\"Position of element yellow: \" + colors.search(\"yellow\")); // Output: Position of element yellow: 2  System.out.println(\"Position of element green: \" + colors.search(\"green\")); // Output: Position of element green: 1  } }   Output:\n1 2 3 4 5 6 7 8 9 10 11  [blue, yellow, green, orange] Color on top: orange [blue, yellow, green, orange] Color on top: orange [blue, yellow, green] Is stack empty? false Size of stack: 3 Position of element blue: 3 Position of element yellow: 2 Position of element green: 1   Im oberen Beispiel verwenden wir die Methode size(). Diese Methode ist nicht in der java.util.Stack-Klasse implementiert, wird jedoch von der Vector-Mutterklasse geerbt. Diese Vector-Klasse implementiert zusätzlich weitere Methoden des List-Interfaces, weshalb diese auch für Stacks verwendet werden können. Ein Stack bzw. die Datenstruktur des Stacks wird jedoch durch die oben aufgeführten Methoden ausgemacht.\nBeispiel 2 (EmptyStackException) In diesem Beispiel rufen wir die pop()-Methode auf einem leeren Stack auf:\n1 2 3 4 5 6 7 8  import java.util.Stack; public class StackExampleEmptyStackExceptionA { public static void main(String[] args) { Stack\u003cString\u003e colors = new Stack\u003c\u003e(); colors.pop(); // Throws: Exception in thread \"main\" java.util.EmptyStackException  } }   Dies führt zu folgendem Output:\n1 2 3 4 5  Exception in thread \"main\" java.util.EmptyStackException at java.base/java.util.Stack.peek(Stack.java:102) at java.base/java.util.Stack.pop(Stack.java:84) at ch.puzzle.stack.StackExampleEmptyStackExceptionA.main(StackExampleEmptyStackExceptionA.java:8)   Das gleiche Verhalten lässt sich auch bei der peek()-Methode feststellen:\n1 2 3 4 5 6 7 8  import java.util.Stack; public class StackExampleEmptyStackExceptionB { public static void main(String[] args) { Stack\u003cString\u003e colors = new Stack\u003c\u003e(); colors.peek(); // Throws: Exception in thread \"main\" java.util.EmptyStackException  } }   Wie erwartet, kriegen wir folgenden Output:\n1 2 3 4  Exception in thread \"main\" java.util.EmptyStackException at java.base/java.util.Stack.peek(Stack.java:102) at ch.puzzle.stack.StackExampleEmptyStackExceptionB.main(StackExampleEmptyStackExceptionB.java:8)     Aufgaben    Aufgaben Aufgaben zu Modul #J7 - Java Collections - Stack\n","categories":"","description":"Die Datenstruktur \"Stapel\".\n","excerpt":"Die Datenstruktur \"Stapel\".\n","ref":"/docs/java/java-collections/05_stack/","tags":"","title":"Stack"},{"body":"Ziele  Du weisst, was ein Template ist. Du weisst, für was ng-container und ng-template sind und kannst diese anwenden.  Was ist ein Template? In Angular ist das Template der Teil eines Components, der die Benutzeroberfläche definiert. Es ist im Wesentlichen das HTML, das vom Component angezeigt wird und mit der Benutzer interagieren kann.\nDas Template kann jedoch mehr als nur HTML enthalten. Es kann auch Angularspezifische Syntax wie Template Styling, Directives, Pipes, Interpolationen und Bindings enthalten, die die Funktionalität und das Verhalten des Components bestimmen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u003cdiv\u003e \u003ch1\u003eHello, {{ name }}!\u003c/h1\u003e \u003cdiv *ngIf=\"name === 'Dragon Warrior'; else otherName\"\u003e \u003cp\u003eWelcome to the battle against the enemy Angular!\u003c/p\u003e \u003cp\u003eMay your path be filled with glory and triumph!\u003c/p\u003e \u003c/div\u003e \u003cng-template #otherName\u003e \u003cp\u003eYou are not the true Dragon Warrior. You are not worthy of this battle.\u003c/p\u003e \u003c/ng-template\u003e \u003cp\u003eAdditional content specific to all warriors...\u003c/p\u003e \u003cp\u003eFace your fears and embrace the challenges!\u003c/p\u003e \u003c/div\u003e   Was ist das DOM Das Document Object Model (DOM) ist eine Programmierschnittstelle, die eine strukturierte Darstellung des HTML zur Verfügung stellt. Es stellt eine Baumstruktur dar, in der jedes Element im HTML als Knoten (Node) repräsentiert wird.\nDurch die Verwendung des DOMs können Entwickler dynamische Webseiten erstellen, auf Benutzerinteraktionen reagieren, Inhalte ändern und vieles mehr. Es ermöglicht die Trennung von Inhalt (HTML), Präsentation (CSS) und Verhalten (JavaScript), was eine flexible und interaktive Webentwicklung ermöglicht.\nng-container \u0026 ng-template Durch die Verwendung von ng-container und ng-template kann der HTML-Code in Components besser strukturiert, lesbarer und wiederverwendbarer gemacht werden. Sie bieten eine flexible Möglichkeit, Inhalte bedingt anzuzeigen, dynamische Templates zu erstellen und den Code effizienter zu gestalten.\nng-container und ng-template erzeugen kein zusätzliches HTML-Element im DOM, das bedeutet das man nur den HTML-Code innerhalb der beiden im DOM sieht und nur von diesen welche aktiv sind. Dies eignet sich gut, wenn man andere Directives wie *ngIf, *ngFor oder *ngSwitch verwenden möchte.\nUm das else-Statement in Kombination mit ngIf zu verwenden, definiert man einen Template-Verweis (Referenz) mit einem #-Präfix und verwendet ihn in einem ng-template. Somit kann man sagen das wenn die Condition nicht zutrifft man ein anderes Template anzeigen möchte.\nWenn man ng-container und ng-template verwendet ist vielfach auch ein *ngTemplateOutlet im Spiel. *ngTemplateOutlet ist auch ein Directive, welche verwendet wird, um ein Template an einer bestimmten Stelle in einem Template eines Components einzusetzen. Es wird verwendet, wenn man nicht mit *ngif arbeiten muss (oder will, weil die Bedingung immer true sein sollte). Es ist wie im else eine Template-Verweis.\n1 2 3 4 5 6 7 8  import { Component } from '@angular/core'; @Component({ // .. }) export class GreetingComponent { name: string = 'Dragon Warrior'; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  \u003cdiv\u003e \u003ch1\u003eHello, {{ name }}!\u003c/h1\u003e \u003cng-container *ngIf=\"name === 'Dragon Warrior'; else otherName\"\u003e \u003cng-container *ngTemplateOutlet=\"dragonWarrior\"\u003e\u003c/ng-container\u003e \u003c/ng-container\u003e \u003cng-template #dragonWarrior\u003e \u003cp\u003eWelcome to the battle against the enemy Angular!\u003c/p\u003e \u003cp\u003eMay your path be filled with glory and triumph!\u003c/p\u003e \u003c/ng-template\u003e \u003cng-template #otherName\u003e \u003cp\u003eYou are not the true Dragon Warrior. You are not worthy of this battle.\u003c/p\u003e \u003c/ng-template\u003e \u003cp\u003eAdditional content specific to all warriors...\u003c/p\u003e \u003cp\u003eFace your fears and embrace the challenges!\u003c/p\u003e \u003c/div\u003e   Wenn der obenstehende Code gerendert wurde, sieht man das im DOM nun nur der div-tag, den h1-tag und die beiden p-tags zusehen sind, das ng-container und ng-template nicht.\n","categories":"","description":"Modul #F6 - Angular - Templates\n","excerpt":"Modul #F6 - Angular - Templates\n","ref":"/docs/web/angular/02_5_angular_templates/","tags":"","title":"Templates"},{"body":"Ziele  Du kennst den Unterschied zwischen Vergleichs-Operatoren und logischen Operatoren. Du kennst spezielle Operatoren wie !!, ??, ??= und kannst diesen anwenden.  Vergleiches und Logische Operatoren Vergleichsoperatoren (comparison operators) Vergleichsoperatoren werden verwendet, um den Wert zweier Variablen oder Ausdrücke miteinander zu vergleichen. Es gibt folgende:\n Gleichheit (==) Ungleichheit (!=) Strikte Gleichheit (===) Strikte Ungleichheit (!==) Grösser als (\u003e) Kleiner als (\u003c) Grösser-Gleich (\u003e=) Kleiner-Gleich (\u003c=)  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  const a = 5; const b = 10; const c = '5'; const d = 10; // Gleichheit console.log(a == b) // false console.log(a == c) // true  // Ungleichheit console.log(a != b) // true  //Strikte Gleichheit console.log(a === b) // false console.log(a === c) // false  // Strikte Ungleichheit console.log(a !== b) // true  // Grösser als console.log(a \u003e b) // false  // Kleiner als console.log(a \u003c b) // true  // Grösser-Gleich console.log(a \u003e= b) // false console.log(b \u003e= d) // true  // Kleiner-Gleich console.log(a \u003c= b) // true console.log(b \u003c= d) // true   Unterschiede von Gleichheit und strikte Gleichheit  Das doppelte Gleichheitszeichen == führt einen schwachen Vergleich durch. Das bedeutet, dass JavaScript bei der Verwendung des doppelten Gleichheitszeichens versucht, den Wert beider Operanden zu vergleichen, indem es sie in einen gemeinsamen Typ konvertiert. Wenn die Operanden unterschiedliche Datentypen haben, führt JavaScript implizite Typumwandlungen durch, um sie zu vergleichen. Das dreifache Gleichheitszeichen === führt einen starken Vergleich durch. Das bedeutet, dass JavaScript bei der Verwendung des dreifachen Gleichheitszeichens nicht nur den Wert der Operanden vergleicht, sondern auch ihren Datentyp berücksichtigt. Wenn die Operanden unterschiedliche Datentypen haben, gibt der dreifachen Gleichheitszeichen immer false zurück.  Hier sind einige Beispiele, die den Unterschied zwischen == und `=== veranschaulichen:\n1 2 3 4 5 6 7 8  console.log(5 == '5'); // true console.log(5 === '5'); // false  console.log(true == 1); // true, weil Binär 0 für false ist und alles über 0 als true console.log(true === 1); // false  console.log(null == undefined); // true console.log(null === undefined); // false   Logische Operatoren (logical operators) Logische Operatoren werden verwendet, um mehrere Bedingungen zu kombinieren und Ausdrücke zu evaluieren. Hier gibt es folgende:\n Bitwise AND (\u0026) AND (\u0026\u0026) Bitwise OR (|) OR (||) NOT (!)  Bitwise AND Der bitweise AND-Operator vergleicht jedes Bit in den beiden Operanden und gibt für jede Bitposition im Ergebnis eine 1 zurück, wenn sowohl der linke als auch der rechte Operand an dieser Bitposition eine 1 haben. Wenn entweder der linke oder der rechte Operand eine 0 an dieser Bitposition hat, gibt der bitweise AND-Operator eine 0 zurück.\nBeispiel:\n1 2 3 4 5  const a = 5; // 00000000000000000000000000000101 const b = 3; // 00000000000000000000000000000011  console.log(a \u0026 b); // 00000000000000000000000000000001 // Expected output: 1   AND (logisches AND) Der Operator wird verwendet, um zu überprüfen, ob alle Operanden, auf die er angewendet wird, wahr sind. Wenn ja, gibt er den Wert “true” zurück, andernfalls gibt er “false” zurück. Der Operator wird häufig in Bedingungen verwendet, um zu überprüfen, ob mehrere Bedingungen erfüllt sind, bevor eine Aktion ausgeführt wird.\nBeispiel:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  const a = 5; const b = 10; if (a \u003e 0 \u0026\u0026 b == 15) { // Wenn beide Bedingungen true sind, wird der folgende Codeblock ausgeführt  console.log('1'); } else if (a \u003e 0 \u0026\u0026 b == 10) { // Wenn beide Bedingungen true sind, wird der folgende Codeblock ausgeführt  console.log('2'); } else { // Wenn beide Bedingungen nicht true sind, wird der folgende Codeblock ausgeführt  console.log('3'); } // Expected output: '2'    Bitwise OR Der bitweise OR-Operator vergleicht jedes Bit in den beiden Operanden und gibt für jede Bitposition im Ergebnis eine 1 zurück, wenn entweder der linke oder der rechte Operand oder beide Operanden an dieser Bitposition eine 1 haben. Wenn sowohl der linke als auch der rechte Operand an dieser Bitposition eine 0 haben, gibt der bitweise OR-Operator eine 0 zurück.\nBeispiel:\n1 2 3 4 5  const a = 5; // 00000000000000000000000000000101 const b = 3 ; // 00000000000000000000000000000011  console.log(a | b); // 00000000000000000000000000000111 // Expected output: 7   OR (logisches OR) Der Operator wird verwendet, um zu überprüfen, ob mindestens einer der Operanden, auf die er angewendet wird, wahr ist. Wenn ja, gibt er den Wert “true” zurück, andernfalls gibt er “false” zurück. Der Operator wird häufig in Bedingungen verwendet, um alternative Bedingungen zu überprüfen und eine Aktion auszuführen, wenn mindestens eine der Bedingungen erfüllt ist.\nBeispiel:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  const a = 5; const b = 10; if (a \u003c 0 || b == 15) { // Wenn eine der Bedingungen true ist, wird der folgende Codeblock ausgeführt  console.log('1'); } else if (a \u003e 0 || b == 15) { // Wenn eine der Bedingungen true ist, wird der folgende Codeblock ausgeführt  console.log('2'); } else { // Wenn beide Bedingungen nicht true sind, wird der folgende Codeblock ausgeführt  console.log('3'); } // Expected output: '2'   NOT (logisches NOT) Der Operator wird verwendet, um einen booleschen Wert umzukehren, dh. aus “true” wird “false” und aus “false” wird “true”. Wenn ein Operand true ist, gibt der Operator false zurück, und wenn der Operand false ist, gibt er true zurück. Der Operator wird häufig in Bedingungen verwendet, um die Aussage einer Bedingung umzukehren.\nBeispiel:\n1 2 3 4 5 6 7 8 9 10 11  const a = 5; const b = 10; if (!(a \u003e 0 \u0026\u0026 b == 10)) { console.log('1'); } else if (!(a \u003e 0 \u0026\u0026 b == 15)) { console.log('2'); } else { console.log('3'); } // Expected output: '2'   Special Operators doppeltes NOT (!!) Der Operator wird verwendet, um einen Wert in einen booleschen Wert umzuwandeln. Die erste Negation kehrt den Wert um und die zweite Negation kehrt ihn wieder zurück, so dass der resultierende Wert immer ein boolescher Wert ist. Wenn der ursprüngliche Wert truthy, wird das Ergebnis true sein, andernfalls false. Der doppelte Negationsoperator wird häufig verwendet, um sicherzustellen, dass ein Wert wirklich einen booleschen Wert hat.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  console.log(0) // 0 console.log(!!0) // false  console.log(1) // 1 console.log(!!1) // true  console.log(-1) // -1 console.log(!!-1) // true  console.log(1/0) // Infinity console.log(!!(1/0)) // true  console.log(parseInt('js')) // NaN console.log(!!parseInt('js')) // false  console.log('') // '' console.log(!!'') // false  console.log('js') // 'js' console.log(!!'js') // true  console.log('false') // 'false' console.log(!!'false') // true auch wenn es einen falsy value hat  console.log(person.name) // undefined console.log(!!person.name) // false  console.log(undefined) // undefined console.log(!!undefined) // false  console.log(null) // null console.log(!!null) // false  console.log({}) // {} console.log(!!{}) // true  console.log([]) // [] console.log(!![]) // true   Logische OR Assignment Operator (||=) Der Operator ||= prüft, ob die linke Seite des Operators falsy ist. Wenn die linke Seite falsy ist, wird der rechte Operand ausgewertet und der Wert diesem zugewiesen. Wenn die linke Seite truthy ist, wird der linke Wert beibehalten und kein weiterer Ausdruck ausgewertet.\nBeispiel:\n1 2 3 4 5 6 7 8  let falsyVariable = ''; let truthyVariable = 'Welt!'; falsyVariable ||= 'Hallo'; truthyVariable ||= 'Mensch'; console.log(falsyVariable); // 'Hallo' console.log(truthyVariable); // 'Welt'   Logische AND Assignment Operator (\u0026\u0026=) Der Operator \u0026\u0026= prüft, ob die linke Seite des Operators truthy ist. Wenn die linke Seite truthy ist, wird der rechte Operand ausgewertet und der Wert diesem zugewiesen. Wenn die linke Seite falsy ist, wird der linke Wert beibehalten und kein weiterer Ausdruck ausgewertet.\nBeispiel:\n1 2 3 4 5 6 7 8  let falsyVariable = ''; let truthyVariable = 'Welt!'; falsyVariable \u0026\u0026= 'Hallo'; truthyVariable \u0026\u0026= 'Mensch'; console.log(falsyVariable); // '' console.log(truthyVariable); // 'Mensch'   nullish coalescing Assignment Operator (??=) Der Operator ??= prüft, ob die linke Seite des Operators null oder undefined ist. Wenn die linke Seite null oder undefined ist, wird der rechte Operand ausgewertet und der Wert diesem zugewiesen. Wenn die linke Seite einen anderen falsy Wert als null oder undefined hat, wird der linke Wert beibehalten und kein weiterer Ausdruck ausgewertet.\nBeispiel:\n1 2 3 4 5 6 7 8  let nullVariable = null; let falsyVariable = ''; nullVariable ??= 'hello'; falsyVariable ??= 'world'; console.log(nullVariable); // 'hello' console.log(falsyVariable); // ''   nullish coalescing Operator (??) Der Operator ?? gibt den linken Ausdruck zurück, wenn er null oder undefined ergibt, andernfalls gibt er den rechten Ausdruck zurück. Im Gegensatz zum logischen OR-Operator (||) behandelt der Nullish Coalescing-Operator nur null und undefined als falsy Werte, und alle anderen Werte werden als truthy behandelt.\nBeispiel:\n1 2 3 4 5 6 7 8 9 10 11  const nullCheck = null ?? 'left is null'; console.log(nullCheck); // 'left is null'  const zeroCheck = 0 ?? 42; console.log(zeroCheck); // 0  const undefinedCheck = undefined ?? 'left is undefined'; console.log(undefinedCheck); // 'left is undefined'  const emptyStringCheck = '' ?? 'empty string'; console.log(emptyStringCheck); // '' weil ein leerer String zwar falsy aber nicht null oder undefined ist   ternary Operator (?:) Der Ternary-Operator (?:) ermöglicht es, eine Zuweisung kombiniert mit einer Bedingung (if/else) auf eine einzige Anweisung zu reduzieren.\nSchauen wir uns hierfür folgendes Beispiel an, das ansonsten mit einem if/else geschrieben wird, an:\n1 2 3 4 5 6 7 8 9 10 11 12  const age = 18; let canVote; if (age \u003e= 18){ canVote = 'yes'; } else { canVote = 'no'; } console.log(canVote); // 'yes'   Hier haben wir 6 Zeilen Code gebraucht, um eine Variable zu setzen. Mit dem ternary-Operator geht das in einer (und wir können direkt const verwenden):\n1 2 3 4 5  const age = 18; const canVote = age \u003e= 18 ? 'yes' : 'no'; console.log(canVote); // 'yes'   Oft wird diese Syntax bei Zuweisungen verwendet, kann aber auch sonst verwendet werden, z.B. für Parameter:\nBeispiel:\n1 2  const oddNumber = 5; console.log(oddNumber % 2 === 0 ? 'even' : 'odd'); // 'odd'   Ganz allgemein lautet die Syntax:\n1  condition ? expression1 : expression2   Zuerst wird die Bedingung (condition) ausgewertet. Wenn diese true ist, wird expression1 ausgeführt und zurückgegeben, andernfalls expression2.\n","categories":"","description":"Modul #F4 - JavaScript - Operatoren.\n","excerpt":"Modul #F4 - JavaScript - Operatoren.\n","ref":"/docs/web/javascript/06_js_operators/","tags":"","title":"Operatoren"},{"body":"","categories":"","description":"Angular lernen\n","excerpt":"Angular lernen\n","ref":"/docs/web/angular/","tags":"","title":"Angular"},{"body":"GitHub ist ein Webservice für das Verwalten von Software Code via Git. Darüber hinaus bietet GitHub viele weitere Funktionen, von Projektmanagement mit Taskverwaltung, über Wikis bis zum Buildserver. GitHub ist die Plattform für Opensource Projekte.\nWeitere Infos:\n Wikipedia GitHub Doku  GitHub Alternativen Natürlich ist GitHub nicht die einzige Plattform, welche diesen Service anbietet. Alle Alternativen haben ihre eigenen Features und Limitierungen, im Kern verwenden aber alle Git.\nAlternativen:\n Gitea: https://gitea.io Gitolite: https://gitolite.com Gitosis: https://github.com/tv42/gitosis GitLab: https://gitlab.com/ Bitbucket: https://bitbucket.org  GitHub Account Falls du noch keinen GitHub-Account hast, wäre jetzt der Moment einen zu erstellen. https://github.com/signup\nGit Protokolle Um auf ein entferntes Git Repository zuzugreifen, gibt es in der Regel zwei Varianten:\n HTTPS SSH  Beide Protokolle bieten standardmässig Verschlüsselung, Authentifizierung und Komprimierung.\nGit über HTTPS Kurze Wiederholung: Um ein Repository über HTTPS zu klonen verwendet man den Befehl:\n1  $ git clone https://github.com/kelseyhightower/nocode.git   Dies ist die einfachste Variante, um Code schnell herunterzuladen und lokal im eigenen Editor zu betrachten.\nVorteile:\n Anonymer Zugriff möglich Zugriff für Systeme, auf denen SSH weniger verbreitet ist HTTPS ist auf vielen Corporate Firewalls standardmässig offen  Nachteile:\n Zwischenspeicherung der Anmeldedaten mit HTTPS weniger benutzerfreundlich als mit SSH Keys Konfiguration des Webservers etwas komplizierter als die von SSH  Git über SSH Um ein Repository mit SSH zu klonen, kommt folgender Befehl zum Einsatz:\n1  $ git clone git@github.com:cajotafer/10xengineers.git   Für die meisten Anwendungsfälle ist dies der bevorzugte Weg, um entfernte Git Repositories zu verwenden.\nVorteile:\n SSH ist auf jedem Linux System bereits vorinstalliert (server- wie clientseitig) SSH Server sind sehr einfach zu konfigurieren Der Zugriff via SSH ist sehr sicher  Nachteile:\n Bietet keinen anonymen Zugriff  GitHub Features    Feature Funktion     Issues Ermöglichen es, Tasks in einem Repo zu erstellen und zu tracken.   Pull Requests Ein Pull Request ermöglicht es, Changes zu Reviewen und zu besprechen, bevor sie in einen Branch gemerged werden.   Forks Eine Fork ist eine Kopie von einem Git-Repo. Die Fork kann dann bearbeitet und angepasst werden, ohne dass das originale Repo davon betroffen ist.   GitHub Pages Basic Webseiten welche auf GitHub gehostet werden   GitHub Actions CI/CD Integration von GitHub    Hands On Für dieses Hands-On werden wir alles via Webinterface von GitHub machen. Ein Grossteil der Tasks können jedoch auch Lokal mit Git im Terminal gemacht werden.\nBranches und Pull Requests  https://guides.github.com/activities/hello-world/  Forks, Pull Requests, Reviews  Fork erstellen vom Repo.  Weitere User auf Fork hinzufügen  Branch auf Fork erstellen hello-world.sh auf dem Master Branch anpassen und committen. 1 2 3  #!/bin/bash  echo 'Hello World Master'    hello-world.sh auf dem neuen Branch anpassen und committen. 1 2 3  #!/bin/bash  echo 'Hello World Feature'    Pull Request erstellen Da auf beiden Branches die gleich Zeile bearbeitet wurde, kann GitHub die Branches nicht automatisch Mergen. Aus diesem Grund müssen zuerst die Konflikte gelöst werden  Teamkollege als Reviewer zuweisen. Review Changes umsetzen. Pull Request mergen. Merge Request auf Original Repo erstellen Ende  ","categories":"","description":"","excerpt":"GitHub ist ein Webservice für das Verwalten von Software Code via Git. …","ref":"/docs/git/git-hub/","tags":"","title":"GitHub"},{"body":"Ziele  Ich weiss, wie ich eine HTML-Seite strukturieren kann. Ich weiss, was das DOM ist. Ich weiss, wie ich das DOM einer Webseite inspizieren kann. Ich weiss, was sog. Meta-Tags sind und wozu sie verwendet werden. Ich weiss, wie ich meine Seite auf Syntax-Fehlern überprüfen kann.  Struktur einer HTML-Seite Vorher haben wir wild und ohne erkennbare Struktur HTML-Elemente hinzugefügt.\nNormalerweise folgt eine HTML-Datei dieser Struktur (ohne h1 und p):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003c!-- Place for external resources and meta tags. --\u003e \u003ctitle\u003eMy Website\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003c!-- Place for your website's content. --\u003e \u003ch1\u003eHello\u003c/h1\u003e \u003cp\u003eThis is my amazing website!\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e   Auf der ersten Zeile definieren wir, dass es sich um ein HTML-Dokument handelt. Diese Zeile ist erforderlich und seit HTML5 praktisch immer gleich.\nAlle weiteren Elemente befinden sich dann im einzigen \u003chtml\u003e-Element. Im \u003chtml\u003e-Tag kann noch die Sprache der Seite mit dem language-Attribut angegeben werden. Auf der nächsten Stufe sind nur \u003chead\u003e und \u003cbody\u003e erlaubt. Im \u003chead\u003e befinden sich Meta-Informationen über die Website wie z.B. der Tab-Titel der Website. Der eigentliche Seiteninhalt befindet sich dann im \u003cbody\u003e.\nDOM (Document Object Model) In der Webentwicklung wird sehr oft vom “DOM” gesprochen. Visualisiert könnte das DOM aus dem obigen Beispiel ungefähr so aussehen:\nWas ist nun aber dieses “Document Object Model”? Ganz vereinfacht gesagt, beschreibt das DOM die Struktur der Website zur Laufzeit (also im Browser). Das DOM enthält also die Information, wie die Seite aufgebaut und verschachtelt ist mit ihren Elementen. Im Gegensatz zum HTML-Dokument kann sich das DOM während des Besuches der Seite verändern (z.B. durch JavaScript). Das DOM enthält also die Information, was aktuell auf der Seite ist.\nWeitere Informationen erhältst du hier:\n https://www.w3schools.com/js/js_htmldom.asp https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction  Wie das DOM auf deiner aktuellen Seite aussieht, kannst du ganz einfach herausfinden:\n Öffne die Entwickler-Tools von deinem Browser (z.B. mit der [F12]-taste) Wechsle zum Reiter “Elemente” Nun siehst du das aktuelle DOM:  Mache dich mit diesen Entwickler-Tools (z.B. auch mit dem Button ganz oben links im Bild) vertraut!!\nDiese Tools sind sehr praktische Hilfsmittel bei der Entwicklung von HTML-Seiten, da du damit den aktuellen Zustand deiner Seite inspizieren kannst.\nDer Head Wichtig für dich zum Wissen ist auch, dass deine HTML-Seite bestimmte Meta-Tags haben sollte, damit sie als “valid” gilt. Nachfolgend ein paar wichtigere \u003cmeta\u003e-Tags:\n1 2 3 4 5 6 7 8 9  \u003chead\u003e \u003c!-- Place for external resources and meta tags. --\u003e \u003ctitle\u003eMy Website\u003c/title\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"description\" content=\"A simple useless website\"\u003e \u003cmeta name=\"keywords\" content=\"HTML, Meta tags\"\u003e \u003cmeta name=\"author\" content=\"Karl Klammer\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1\"\u003e \u003c/head\u003e    Der title ist der Text, der im Tab angezeigt wird. charset beschreibt, welche Zeichensatz im Dokument vorkommt. Damit du alle gängigen Zeichen brauchen kannst, wird “UTF-8” empfohlen. Das Fehlen dieser Zeile führt oft dazu, dass bestimmte Zeichen falsch dargestellt werden. Die description wird zum Beispiel von Suchmaschinen verwendet. Wie z.B. Google solche Tags auswertet, erfährst du hier: https://developers.google.com/search/docs/advanced/crawling/special-tags?hl=de. keywords geht in eine ähnliche Richtung. Die Zeile für den viewport kann praktisch immer 1-zu-1 übernommen werden. Dieser Wert führt dazu, dass die Seite auf mobilen Endgeräten nicht wie eine Desktop-Seite aussieht. Mit diesem Element wird der Text auf Smartphones meistens grösser. Dieses Meta-Tag wird empfohlen, wenn die Seite auf Smartphones gut aussehen soll.  Ist meine Seite valid? Um die Seite auf Syntax-Fehlern und gängige Fehler zu überprüfen, kann es Sinn machen, die Seite von einem Validator überprüfen zu lassen. Ein bekannter ist z.B. dieser: https://validator.w3.org/#validate_by_input\nHier kannst du deinen HTML-Code eingeben und der Validator zeigt dir dann gängige Fehler an, die es in deinem Code entdeckt hat.\nJetzt bist du dran. Löse bitte die Aufgabe 2 in den Labs.\n","categories":"","description":"Modul #F3 - HTML und CSS - HTML-Seite strukturieren\n","excerpt":"Modul #F3 - HTML und CSS - HTML-Seite strukturieren\n","ref":"/docs/web/html_css/06_html_structure/","tags":"","title":"HTML-Struktur"},{"body":"","categories":"","description":"Exercises zu Modul #S2 - Maven\n","excerpt":"Exercises zu Modul #S2 - Maven\n","ref":"/labs/java/maven/","tags":"","title":"Java Exercises - Maven"},{"body":"Ziele  Ich kann die zwei Hauptunterschiede von einem Konstruktor und einer gewöhnlichen Methode nennen. Ich kann in eigenen Worten erklären, was ein Konstruktor ist und wozu er verwendet wird. Ich kann in eigenen Worten erklären, was ein Default-Konstruktor ist, wann er erzeugt wird und wann er entfällt. Ich demonstriere die Anwendung von Konstruktoren anhand eines Beispiels ohne Hilfsmittel.  Konstruktoren Konstruktoren sind spezielle Methoden, die benutzt werden, sobald ein neues Objekt einer Klasse erstellt wird. Ein Konstruktor einer Klasse wird aufgerufen, wenn eine neue Instanz mit dem Schlüsselwort new erstellt wird. Ein Konstruktor unterscheidet sich von anderen Methoden darin, dass:\n er den gleichen Namen haben muss wie die Klasse, die ihn enthält er keinen Rückgabetyp (nicht einmal void) hat  Konstruktoren initialisieren Instanzen (Objekte) der Klasse. Sie können beliebige Parameter enthalten, um beispielsweise Instanzvariablen zu initialisieren.\nKonstruktoren verwenden Im folgenden Beispiel benutzen wir eine Klasse mit dem Namen Patient. Ein Objekt der Klasse hat einen Namen, ein Alter und eine Grösse. Die Klasse verfügt über einen Konstruktor mit drei Parametern, um ein neues Objekt mit bestimmten Werten zu initialisieren.\n1 2 3 4 5 6 7 8 9 10 11  public class Patient { private String name; private int age; private float height; public Patient(String name, int age, float height) { this.name = name; this.age = age; this.height = height; } }   Der Konstruktor akzeptiert drei Parameter. Zum Initialisieren der Felder wird das Schlüsselwort this verwendet. Es ist ein Verweis auf die aktuelle Instanz der Klasse. Dieses Schlüsselwort ist nur erforderlich, wenn die Parameter des Konstruktors denselben Namen wie die Felder der Klasse haben (um sie voneinander unterscheiden zu können). Es ist aber allgemein Best Practices das Schlüsselwort this zu verwenden.\nNun erstellen wir einige Objekte der Klasse Patient:\n1 2  Patient heinrich = new Patient(\"Heinrich\", 40, 182.0f); Patient mary = new Patient(\"Mary\", 33, 171.5f);   Jetzt haben wir zwei Objekte der Klasse Patient. Die beiden Referenzen heinrich und mary besitzen im Objekt die gleichen Felder, aber die Werte dieser Felder sind pro Objekt unterschiedlich.\nEine Klasse kann mehrere Konstruktoren enthalten, solange sich die Deklarationen der Konstruktoren unterscheiden. Zum Beispiel unterschiedliche Anzahl an Argumenten oder unterschiedliche Datentypen der Argumente.\nDefault Konstruktor Der Compiler stellt automatisch einen Standardkonstruktor ohne Argumente für jede Klasse ohne Konstruktor bereit (das heisst, wir können auch Objekte einer Klasse erstellen, deren Klassenkörper leer ist).\n1 2 3 4 5  public class Patient { private String name; private int age; private float height; }   Wir können eine Instanz der Klasse Patient mit dem Standardkonstruktor ohne Argumente erstellen:\n1  Patient patient = new Patient();   In diesem Fall werden alle Felder mit den Standardwerten ihrer Typen befüllt (z.B: für ein int wird 0 als Standardwert definiert). Wenn wir einen bestimmten Konstruktor definieren, wird der Standardkonstruktor nicht mehr automatisch erstellt. Wir können einen Konstruktor auch ohne Argumente definieren, und damit eigene Standardwerte für Felder einer Klasse festlegen (der Standartwert für String ist null). Zum Beispiel können wir das Feld name mit \"Unknown\" initialisieren. Durch eine solche Definition wird der Default-Konstruktor ersetzt.\n1 2 3 4 5 6 7 8 9 10  public class Patient { private String name; private int age; private float height; public Patient() { // Hier wird nur einen Wert für `name` gesetzt, die andere Felder erhalten den Standardwert für ihre respektiven Datentypen.  this.name = \"Unknown\"; } }   Zusammenfassung  Jede Java-Klasse verfügt über mindestens einen Konstruktor zum Initialisieren von Objekten. Ein Konstruktor hat denselben Namen wie die Klasse, die ihn enthält. Ein Konstruktor hat keinen Rückgabewert. Wenn eine Klasse keine expliziten Konstruktoren hat, stellt der Java-Compiler automatisch einen Standardkonstruktor ohne Argumente bereit. Wird ein eigener Konstruktor definiert, so entfällt der Standardkonstruktor.   ","categories":"","description":"Modul #J2\n","excerpt":"Modul #J2\n","ref":"/docs/java/j2-oop/06-constructors/","tags":"","title":"Konstruktoren"},{"body":"Ziele  Ich kann arithmetische Ausdrücke schreiben: Addition, Subtraktion, Multiplikation, Division, Modulo (Rest einer Division). Ich kenne die relationalen Operatoren: ==, \u003e=, \u003c=, \u003e, \u003c, !=. Ich kenne die booleschen Operatoren: \u0026\u0026 (AND), || (OR), ! (NOT), ^(XOR).  Mathematik \u0026 Logik Mathe in Java ist sehr einfach. Beachte, dass mathematische Java-Operationen einer bestimmten Reihenfolge folgen (Punkt-Operationen vor Strich-Operationen)\nArithmetische Operatoren    Symbol Arithmetische Operation Beispiel     + Addition int sum = 2 + 3;   - Subtraktion int difference = 5 – 2;   / Division int quotient = 15 / 5;   * Multiplikation int product = 3 * 4;   % Division mit Rest int remainder = 7 % 3;   ++ Post und Prä-Inkrement (1 addieren) count++; // (count = count + 1)   - - Post und Prä-Dekrement (1 subtrahieren) count--; // (count = count – 1)    Post- und Prä-Inkrement Das Inkrementieren und Dekrementieren von Variablen ist eine sehr häufige Operation. Von diesem Operator gibt es zwei Varianten:\n Er kann vor der Variable stehen, wie in ++i (Präfix-Schreibweise) oder dahinter, wie bei i++ (Postfix-Schreibweise)  Der Präfix-Operator verändert die Variable vor der Auswertung der Programmzeile, und der Postfix-Operator ändert sie nach der Auswertung der Programmzeile. Mit anderen Worten: Nutzen wir einen Präfix-Operator, so wird die Variable erst herauf- bzw. heruntergesetzt und dann der Wert geliefert. Und beim Post-Operator ist es genau umgekehrt.\nPostinkrement 1 2 3  int i = 5; int c = i++; // c = 5 // ab hier ist i = 6   Präinkrement 1 2  int i = 5; int d = ++i; // d = 6   Postdekrement 1 2 3  int i = 5; int e = i--; // e = 5 // ab hier ist i = 4   Prädekrement 1 2  int i = 5; int f = --i; // f = 4    Vegleichsoperatoren Die Ergebnisse dieser Operationen sind stets Boolean-Werte.\n   Symbol Vergleich Beispiel     \u003e grösser als 5 \u003e 4   \u003c kleiner als 4 \u003c 5   \u003e= grösser gleich 3 \u003e= 3   \u003c= kleiner gleich 3 \u003c= 3   == gleich 2 == 2   != ungleich 2 != 4    Boolsche Operatoren Diese Operatoren basieren auf der boolschen Algebra. Daher arbeiten boolsche Operatoren direkt mit boolschen Werten. Es gibt vier Arten von boolschen Operatoren. Schauen wir uns zunächst ihre Symbole und deren Inhalt in der folgenden Tabelle an, bevor wir erläutern, welche Funktionen sie ausführen.\n   Symbol Boolsche Operation Erklärung     \u0026\u0026 Logisches UND (AND) AND gibt nur dann true zurück, wenn die Ausdrücke auf beiden Seiten des Operators true sind (Hinweis: Dieser Ausdruck wird lazy evaluiert. Dies bedeuetet, wenn der erste Ausdruck false ist, wird der zweite Ausdruck nicht mehr ausgewertet   || Logisches ODER (OR) OR gibt true zurück, wenn der Ausdruck auf einer oder beiden Seiten des Operators true ist (Hinweis: Dieser Ausdruck wird lazy evaluiert. Dies bedeuetet, wenn der erste Ausdruck true ist, wird der zweite Ausdruck nicht mehr ausgewertet   ! Logisches NICHT (NOT) NOT kehrt den Wert des darauffolgenden booleschen Ausdrucks um. Aus true wird also false und umgekehrt   ^ Logisches ENTWEDER-ODER (XOR) XOR gibt true zurück, wenn die beiden Ausdrücke unterschiedlich sind   \u0026 Logisches UND (AND) Im Unterschied zum obigen AND wertet dieses immer beide Ausdrücke aus   | Logisches ODER (OR) Im Unterschied zum obigen OR wertet dieses immer beide Ausdrücke aus.    Ternary Operator Mit dem Ternary Operator kann eine bedingte Zuweisung eines Werts durchgeführt werden. Dies kann nützlich sein, wenn es im Code zwei mögliche Werte gibt. Der Ternary Operator wird mit einem ? dargestellt. Der Aufbau ist folgendermassen: bedingung ? wert wenn Bedingung wahr : wert wenn Bedingung falsch\nSchauen wir uns noch ein Beispiel in Java an:\n1 2 3 4 5 6 7 8 9  int alter = 17; String zuJung = \"Du bist zu jung\"; String genugAlt = \"Du bist alt genug :)\"; System.out.println(alter \u003e= 18 ? genugAlt : zuJung); // Ausgabe: \"Du bist zu jung\", da das Alter kleiner als 18 ist.  alter = 26; System.out.println(alter \u003e= 18 ? genugAlt : zuJung); // Ausgabe: \"Du bist alt genug :)\", da das Alter grösser als 18 ist.   Ausserdem können mehrere Ternary hintereinander platziert werden:\n1 2 3 4 5 6 7  int ausbildungsjahre = 5; System.out.println(\"Dein aktueller Rang ist \" + ausbildungsjahre \u003e= 20 ? \"Kage\" : ausbildungsjahre \u003e= 10 ? \"Chunin\" : ausbildungsjahre \u003e= 5 ? \"Akademieschüler\" : \"Anwärter\"); // Ausgabe: \"Dein aktueller Rang ist Akademieschüler\", da Ausbildungs Jahre \u003e= 5    Jetzt bist du dran. Löse bitte die Aufgabe 4 in den Labs.\n","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/06_logic/","tags":"","title":"Mathematik \u0026 Logik"},{"body":"Ziele  Ich kann die Konzepte der Generalisierung und Spezialisierung im Kontext der Vererbung erklären und anwenden Ich weiss, wie ich Unterklassen von einer Oberklasse ableiten kann (extends) Ich kann vererbte Methoden und Attribute einer Klasse von lokalen Methoden und Attributen unterscheiden Ich kann in UML die Vererbungsbeziehung zweier Klassen erkennen Ich weiss, wie ich das Schlüsselwort super nutze, um den Konstruktor der Oberklasse zu verwenden Ich weiss, wie ich das Schlüsselwort super nutze, um eine Methode aus der Oberklasse aufzurufen Ich kann das Konzept des “Überschreibens” (Overriding) von Methoden und Attributen erklären, erkennen und nutzen Ich weiss, was Interfaces sind und wann es angebracht ist ein Interface zu verwenden Ich weiss, welche Methoden und Felder in einem Interface vorhanden sind und wie sie geschrieben werden bzw. über welche Eigenschaften sie verfügen Ich kann eine Klasse schreiben, die ein Interface implementiert   Einführung Beim objektorientierten Design (OOD) handelt es sich um die Modellierung der “echten” Welt in Klassen und Objekten. In dieser Phase der Softwareentwicklung werden Objekte und Klassen definiert, ihre Eigenschaften und Funktionen wie auch die Beziehung untereinander festgelegt.\nWichtige Konzepte/Prinzipien des objektorientierten Designs sind:\n Vererbung ermöglicht in Java die hierarchische Ordnung für Klassen festzulegen und reduziert somit die Menge des redundanten Codes. Polymorphismus ist eine Sprachstruktur, nach der beim Zugriff auf Methoden mit gleicher Signatur diese unterschiedliche Ergebnisse liefern. Abstraktion ist eine Methode, bei der durch Reduzieren oder Entfernen von Merkmalen nur die wesentlichen Eigenschaften erhalten bleiben. Kapselung ermöglicht es den Zugriff auf Methoden und Attributen von Klassen zu kontrollieren.  Das Befolgen dieser Konzepte/Prinzipien führt zu einem guten objektorientierten Design und trägt wesentlich zur Qualität der Software bei.\nVererbung Vererbung ist ein Mechanismus zum Ableiten einer neuen Klasse von einer anderen Klasse. Die neue Klasse erbt alle nicht-privaten Felder und Methoden der Basisklasse. Die Vererbung ist eines der Hauptkonzepte der objektorientierten Programmierung.\nAls Beispiel dient uns die Klasse Auto, welche von der Klasse Fahrzeug abgeleitet ist. Die Beziehung zwischen den Klassen wird als IS-A Beziehung bezeichnet. Wir würden also logischerweise sagen, dass ein Auto ein Fahrzeug ist. Die Klasse Auto wird auch als Spezialisierung der Klasse Fahrzeug bezeichnet. Umgekehrt bezeichnen wir die Klasse Fahrzeug als Generalisierung der Klasse Auto.\nSynonyme für die abgeleitete Klasse sind unter anderem: Unterklasse (Sub Class) oder Subklasse, abgeleitete Klasse (Derived Class), erweiterte Klasse (Extended Class) oder Kind-Klasse (Child Class).\nSynonyme für die Klasse, von welcher abgeleitet wird: Oberklasse (Super Class) oder Superklasse, Basisklasse (Base Class) oder Eltern-Klasse (Parent Class).\nDer Anwendungsfall der Vererbung kommt also dort zum Tragen, wo es eine IS-A Beziehung zwischen zwei Objekten gibt. Dazu ein paar Beispiele:\n Ein Quadrat ist eine geometrische Form Java ist eine Programmiersprache Ein Schwert ist eine Klingenwaffe Eine Klingenwaffe ist eine Waffe     Superklasse Subklasse     Geometrische Form Quadrat   Programmiersprache Java   Klingenwaffe Schwert   Waffe Klingenwaffe    Es gibt einige wichtige Punkte zur Vererbung in Java:\n In Java gibt es keine Mehrfachvererbung. Eine Klasse kann immer nur von maximal einer anderen Klasse erben Eine Klassenhierarchie kann beliebig viele Ebenen haben  Die Klasse Schwert erbt von der Klasse Klingenwaffe und die Klasse Klingenwaffe erbt von der Klasse Waffe   Eine Superklasse kann beliebig viele Subklassen haben  Im UML-Diagramm sind die Basisklassen oberhalb der abgeleiteten Klassen abgebildet. Die Klassen werden mit Pfeilen verbunden, wobei die Pfeilrichtung von der abgeleiteten Klasse in Richtung der Basisklasse verläuft. Der Vererbungspfeil hat eine durchgezogene Linie und ein geschlossenes Dreieck als Pfeilspitze.\nEine Subklasse kann beliebig viele neue Felder und Methoden enthalten. Geerbte und neu hinzugefügte Felder und Methoden werden wie bisher gelernt verwendet.\nDas Schlüsselwort extends In Java wird eine Vererbungsbeziehung implementiert, indem wir das Schlüsselwort extends verwenden.\n1 2 3  public class Fahrzeug { }   1 2 3  public class Auto extends Fahrzeug { }   Bei der Deklaration eines Autos ist es nun aufgrund der Vererbungsbeziehung möglich, dass wir statt eines Autos ein Fahrzeug verwenden. Dies funktioniert, weil ein Auto ja ein Fahrzeug ist (IS-A).\n1 2 3 4 5  public class Main { public static void main(String[] args) { Fahrzeug fahrzeug = new Auto(); } }   Das Schlüsselwort final Wenn eine Klasse mit dem Schlüsselwort final versehen wird, dann kann sie keine Subklassen haben. Wir können die Vererbung also verbieten.\n1 2 3  public final class NonDerivableClass { }   Viele der Standardklassen von Java sind final. Dazu gehören alle Wrapper-Klassen von primitiven Datentypen wie Integer, Long oder Float und die Klasse String.\nDas Schlüsselwort super Das Schlüsselwort super ähnelt dem Schlüsselwort this. Es erlaubt den direkten Zugriff auf Felder, Konstruktoren und Methoden der Superklasse. Bei gleicher Namensgebung von Feldern oder beim Überschreiben von Methoden ist es teilweise sogar zwingend notwendig.\nUmgang mit Konstruktoren Konstruktoren werden nicht an die Subklasse vererbt. Wenn aber ein neues Objekt einer Subklasse erzeugt werden soll, so kann der Konstruktor der Superklasse nicht einfach ignoriert werden. Beim Erzeugen von Objekten einer Subklasse unterscheiden wir zwischen den folgenden Fällen:\n Die Superklasse hat keinen Konstruktor (das heisst, sie besitzt einen Default-Konstruktor) Die Superklasse hat einen anderen Konstruktor als den Default-Konstruktor Die Superklasse hat einen anderen Konstruktor und zusätzlich einen Default-Konstruktor  Beispiel 1 - Die Superklasse hat keinen Konstruktor\n1 2 3  public class Fahrzeug { }   1 2 3  public class Auto extends Fahrzeug { }   1 2 3 4 5  public class Main { public static void main(String[] args) { Fahrzeug auto = new Auto(); } }   Beispiel 2 - Die Superklasse hat einen anderen Konstruktor als den Default-Konstruktor\n1 2 3 4 5 6 7  public class Fahrzeug { private String marke; public Fahrzeug(String marke) { this.marke = marke; } }   1 2 3 4 5 6 7 8 9 10 11  public class Auto extends Fahrzeug { // Möglichkeit 1 - Konstruktor-Weiterleitung  public Auto(String marke) { super(marke); } // Möglichkeit 2 - Fixer Wert  public Auto() { super(\"Unbekannt\"); } }   1 2 3 4 5 6 7 8  public class Main { public static void main(String[] args) { // Möglichkeit 1  Fahrzeug ferrari = new Auto(\"Ferrari\"); // Möglichkeit 2  Fahrzeug any = new Auto(); } }   Für die Erzegung eines Fahrzeugs ist nun eine Marke notwendig. Dies bedeutet automatisch, dass die Erzeugung eines Autos auch einen Wert für diese Marke besitzen muss. Der Wert kann entweder über einen weiteren Konstruktor in der Klasse Auto in das Fahrzeug gelangen oder man wählt wie im Beispiel gezeigt einen fixen Wert. Die Erzeugung eines neuen Autos ohne einen Wert für die Marke ist aber nicht möglich, da die Superklasse einen Wert verlangt.\nBeispiel 3 - Die Superklasse hat einen anderen Konstruktor und zusätzlich einen Default-Konstruktor\n1 2 3 4 5 6 7 8 9 10 11  public class Fahrzeug { private String marke; public Fahrzeug() { this.marke = \"Unbekannt\"; } public Fahrzeug(String marke) { this.marke = marke; } }   1 2 3 4 5 6 7 8 9  public class Auto extends Fahrzeug { public Auto() { super(); } public Auto(String marke) { super(marke); } }   1 2 3 4 5 6  public class Main { public static void main(String[] args) { Fahrzeug ferrari = new Auto(\"Ferrari\"); Fahrzeug any = new Auto(); } }   Hier gelten die gleichen Regeln wie beim Beispiel 2. Der einzige Unterschied besteht nun darin, dass die Klasse Auto ebenfalls beide Konstruktoren besitzen muss.\nDer geübte Entwickler behält also stets die Konstruktoren der Superklasse im Auge. Sie werden immer vor den Konstruktoren der Subklasse aufgerufen. Dies ist auch der Grund, weshalb der Aufruf des Super-Konstruktors immer als erstes Statement in einem Subklassen-Konstruktor aufgeführt werden muss.\nBeziehungen In Java gibt es vier Grundtypen von Beziehungen, welche Objekte miteinander bilden können. Diese sind:\n Generalisierung und Spezialisierung (IS-A Beziehung) Aggregation und Komposition (HAS-A Beziehung) Assoziationen (KNOWS-A Beziehung) Abhängigkeit (USES Beziehung)  Generalisierung und Spezialisierung (IS-A Beziehung) Die IS-A Beziehung beschreibt, wovon sich ein Objekt ableitet. Dies gilt für Basisklassen, abstrakte Klassen und Interfaces. Je genereller eine Funktion oder Beschreibung ist, desto höher stets sie in der Klassenhierarchie. Weiter unten in der Hierarchie sind also die spezialisierten Dinge anzutreffen.\nDarstellung der Generalisierung mit UML: Bei der Implementation eines Interfaces mit UML wird die folgende Darstellung verwendet: Aggregation und Komposition (HAS-A Beziehung) Die HAS-A Beziehung beschreibt, woraus sich ein Objekt zusammensetzt. Ein Objekt kann selbstverständlich beliebig viele andere Objekte aufnehmen. Die aufgenommenen Objekte sind dabei Bestandteile des Hauptobjekts.\nEin einfaches Beispiel wäre, dass ein Auto (normalerweise) einen Motor hat.\n1 2 3  public class Motor { }   1 2 3  public class Auto { private Motor motor; }   Die Umsetzung beider Beziehungen wird durch Instanzvariablen abgebildet, welche die entsprechenden Objekte aufnehmen. Ist bei einer Aggregation das verbundene Objekt nicht vorhanden, so wird der Instanzvariable der Wert null zugewiesen. Wenn die Beziehung zwischen den Objekten mehrfach (1 zu n) vorhanden ist, so kann dafür ein Array oder auch eine Liste verwendet werden.\nBei dieser Beziehung wird zwischen Aggregation und Komposition unterschieden.\nAggregation Die Aggregation ist\n stärker als eine Assoziation (siehe weiter unten), aber schwächer als eine Komposition eine Beziehung der Art “besitzt ein/e” in ihrer Lebensdauer nicht an die Lebensdauer des Ganzen gebunden  Beispiel 1: “Eine Taskforce hat Experten und -innen”. Das bedeutet, dass es die Experten und -innen immer noch gibt wenn die Taskforce aufgelöst wird. Beispiel 2: “Ein Auto hat einen Fahrer oder eine Fahrerin”. Die Existenz des Autos ist nicht an die Existenz des Fahrers / der Fahrerin gebunden.\nDarstellung der Aggregation mit UML: Komposition Die Komposition ist\n eine sehr starke Beziehung eine Beziehung der Art “ist ein Teil von” / “besteht aus” in ihrer Lebensdauer an die Lebensdauer des Ganzen gebunden  Beispiel 1: “Eine Labyrinth hat Wände”. Eine Labyrinth ohne Wände ist kein Labyrinth mehr. Beispiel 2: “Ein Mensch hat ein Herz”. Ein Mensch kann ohne Herz nicht existieren.\nDarstellung der Komposition in UML: Assoziation (KNOWS-A Beziehung) Wir haben bereits zwei Formen von Assoziationen kennengelernt: Aggregation \u0026 Komposition. Wenn von einer Assoziation die Rede ist, so sind damit Objekte gemeint, welche miteinander auf irgendeine Weise in Beziehung stehen. Die Komposition ist die stärkste Form der Assoziation, die Aggregation ist etwas abgeschwächt und die Assoziation selbst ist die schwächste Beziehung. Der Begriff Assoziation ist hier etwas verwirrend, weil er gleichzeitig als Oberbegriff und als Verbindung benutzt wird.\nEine Assoziation ist\n eine Beziehung der Art “benutzt ein/e”, “ist zugeordnet zu”, “hat eine Beziehung zu” auch unter der Bezeichnung KNOWS-A bekannt  Beispiel: “Eine Musikerin spielt ein Instrument”. Sie “kennt” das Instrument, das sie spielt.\nDarstellung der Assoziation in UML: Abhängigkeit (USES Beziehung) Eine Abhängigkeit ist\n eine gerichtete Beziehung zwischen einem abhängigen (Client) und einem unabhängigen Element (Supplier) eine Beziehung, wo die eine Klasse die andere zum Funktionieren braucht schwächer als eine Assoziation möglich, ohne ein Objekt der Abhängigkeit dauerhaft zu speichern  Die abhängige Klasse hat keine Instanzvariable vom Typ der unabhängigen Klasse. Es werden nur Parameter vom Typ der unabhängigen Klasse verwendet. Es ist auch möglich, eine Abhängigkeit ohne Objekte zu erstellen, zum Beispiel mit statischen Methoden.\nDarstellung der Abhängigkeit in UML: Polymorphismus Polymorphie bedeutet “Vielgestaltigkeit”. Die Polymorphie beschreibt ein Konzept der objektorientierten Programmierung, wobei der Aufruf einer Methode mit identischer Signatur unterschiedliche Ergebnisse liefern kann. Dieses Verhalten ist vorallem bei der Vererbung anzutreffen. In Java sind alle Objekte polymorph, da jedes Objekt eine IS-A Beziehung für seinen eigenen Typ und für die Klasse Object besitzt (Everything is an Object).\nEine Referenzvariable kann auf jedes Objekt ihres deklarierten Typs oder auf jeden Subtyp ihres deklarierten Typs verweisen.\nBeispiel:\n1 2 3 4 5  class Animal { public void move() { System.out.println(\"Animals can move\"); } }   1 2 3 4 5  class Dog extends Animal { public void move() { System.out.println(\"Dogs can walk and run\"); } }   1 2 3 4 5 6 7 8 9  public class Main { public static void main(String args[]) { Animal animal = new Animal(); Animal dog = new Dog(); animal.move(); dog.move(); } }   Die Ausgabe ist wie folgt: Animals can move Dogs can walk and run\nIm diesem Beispiel ist erkennbar, dass die Referenz dog (obwohl es sich um ein Animal handelt), die Methode move() der Klasse Dog ausführt. Der Grund dafür ist, dass während der Kompilierung der Referenztyp überprüft wird. Zur Laufzeit ermittelt die JVM jedoch das Objekt und führt die Methode aus, die zu der Klasse dieses Objekts gehört.\nOverriding Beim Überschreiben von Methoden wird eine Methode der Superklasse in einer Subklasse neu definiert. Eine Subklasse kann dadurch das Verhalten einer Methode der Superklasse anders spezifizieren. Das Überschreiben hat den Vorteil, dass ein Verhalten definiert werden kann, das für den Typ der Subklasse spezifisch ist. Die überschreibende Methode muss dieselbe Signatur (Methodenname; Anzahl, Typ und Reihenfolge der Parameter) aufweisen. Die zu überschreibende Methode darf nicht final sein.\nBeispiel: 1 2 3 4 5  public class Shape { public double getArea() { return 0; } }   1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class Rectangle extends Shape { private double width; private double height; public Rectangle(double width, double height) { this.width = width; this.height = height; } @Override public double getArea() { return width * height; } }   1 2 3 4 5 6 7 8 9 10 11 12  public class Circle extends Shape { private double radius; public Circle(double radius) { this.radius = radius; } @Override public double getArea() { return Math.pow(this.radius, 2.0) * Math.PI; } }   1 2 3 4 5 6 7 8 9  public class Main { public static void main(String[] args) { Shape rectangle = new Rectangle(10.0, 5.0); Shape circle = new Circle(4.0); System.out.println(\"Area of the rectangle: \" + rectangle.getArea()); System.out.println(\"Area of the circle \" + circle.getArea()); } }   Die Ausgaben sind nicht verwunderlich. Da es sich um Objekte des Typs Rectangle und Circle handelt, werden jeweils die überschriebenen Methoden aufgerufen. Wenn eine Subklasse ein bestimmte Methode nicht überschreibt, so wird die Methode der nächsthöheren Klasse (in diesem Falle der Klasse Shape) verwendet.\n@Override Die Annotation @Override weist den Compiler an die Signatur der überschreibenden Methode zu überprüfen. Die Annotation ist optional, hilft aber in einfacher Weise Fehler beim Überschreiben zu verhindern. Wenn eine mit @Override gekennzeichnete Methode die Methode der Superklasse nicht korrekt überschreibt, generiert der Compiler einen Fehler.\nAbstraktion In der objektorientierten Programmierung bezieht sich Abstraktion darauf, dem Benutzer Funktionalität bereitzustellen. Die Details der Implementierung werden dabei nicht bereitgestellt. Es ist also bekannt, was ein Objekt tun kann und nicht wie die Funktion umgesetzt ist. In Java wird Abstraktion mit Hilfe von abstrakten Klassen und Schnittstellen (Interfaces) erreicht.\nAbstrakte Klassen Eine Klasse, die das Schlüsselwort abstract in ihrer Deklaration enthält, wird als abstrakte Klasse bezeichnet.\n Abstrakte Klassen können beliebig viele abstrakte Methoden enthalten Eine abstrakte Methode besitzt keinen Block, sie muss in jedem Fall durch eine nicht-abstrakte Methode einer Klasse in der darunterliegenden Hierarchie überschrieben werden Eine abstrakte Klasse kann nicht instanziert werden, es ist also nicht möglich von einer solchen Klasse ein Objekt zu erstellen Abstrakte Klassen eignen sich, um gemeinsame Funktionalitäten von Subklassen aufzunehmen  Beispiel:\n Eine abstrakte Klasse Animal Eine abstrakte Subklasse Carnivore (Fleischfresser) Eine abstrakte Subklasse Herbivore (Pflanzenfresser) Eine Subklasse Dog Eine Subklasse Cat Eine Subklasse Sheep Eine Subklasse Cow  Alle diese Tiere sollen sich bewegen und unterschiedliche Geräusche machen können. Die Methoden move() und sound() bewerkstelligen dies.\n1 2 3 4 5 6 7  public abstract class Animal { public void move() { System.out.println(\"Animal is moving\"); } public abstract void sound(); }   1 2 3  public abstract class Carnivore extends Animal { // some carnivore specific stuff }   1 2 3  public abstract class Herbivore extends Animal { // some herbivore specific stuff }   1 2 3 4 5 6  public class Dog extends Carnivore { @Override public void sound() { System.out.println(\"Woff Woff...\"); } }   1 2 3 4 5 6  public class Cat extends Carnivore { @Override public void sound() { System.out.println(\"Meow Meow...\"); } }   1 2 3 4 5 6  public class Sheep extends Herbivore { @Override public void sound() { System.out.println(\"Baa Baa...\"); } }   1 2 3 4 5 6  public class Cow extends Herbivore { @Override public void sound() { System.out.println(\"Moo Moo...\"); } }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  public class Main { public static void main(String args[]) { Animal dog = new Dog(); Animal cat = new Cat(); Animal sheep = new Sheep(); Animal cow = new Cow(); dog.sound(); dog.move(); cat.sound(); cat.move(); sheep.sound(); sheep.move(); cow.sound(); cow.move(); } }   Zusammenfassung:\n Alle Tiere können sich bewegen. Als ein gemeinsames Merkmal ist dies in der Klasse Animal implementiert Fleischfresser und Pflanzenfresser könnten in den jeweiligen Klassen spezifische Implementationen bereitstellen Alle Tiere machen unterschiedliche Geräusche und aus diesem Grund wird die Methode sound() in der Klasse Animal als abstract deklariert, so dass alle untergeordneten Klassen diese Methode auf ihre eigene Weise implementieren müssen  Eine weitere wichtige Lektion ist die Polymorphie in der Klassenhierarchie. Eine Katze ist gemäss Definition ein Fleischfresser. Das folgende Beispiel soll die mögliche Typenumwandlung erklären.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  public class Main { public static void main(String args[]) { Cat cat = new Cat(); Carnivore carnivoreCat = cat; // Möglich, da eine Katze ein Fleischfresser ist  Animal animalCat1 = cat; // Möglich, da eine Katze ein Tier ist  Animal animalCat2 = carnivoreCat; // Möglich, da ein Fleischfresser ein Tier ist  Animal animalDog = new Dog(); Carnivore carnivoreDog1 = animalDog; // Nicht möglich, da ein Tier kein Fleischfresser ist  Carnivore carnivoreDog2 = (Carnivore)animalDog; // Mit Cast-Operator möglich  Dog dog1 = animalDog; // Nicht möglich, da ein Tier kein Hund ist  Dog dog2 = (Dog)animalDog; // Mit Cast-Operator möglich  Dog dog3 = carnivoreDog2; // Nicht möglich, da ein Fleischfresser kein Hund ist  Dog dog4 = (Dog)carnivoreDog2; // Mit Cast-Operator möglich  } }   Wie wir sehen ist die Umwandlung in einen Typ, welche höher in der Klassenhierarchie liegt stets ohne Cast-Operator möglich. Bei der Umwandlung in einen unterliegenden Typ (Downcasting) muss der Cast-Operator zwingend implementiert werden. Zur Laufzeit kann es beim Downcasting jedoch zu einer ClassCastException kommen, wenn die Referenz kein Objekt des gecasteten Typs ist.\ninstanceOf Operator Durch den Einsatz des Operators instanceOf kann zur Laufzeit die Referenz eines Objektes auf einen bestimmten Typ überprüft werden.\nBeispiel:\n1 2 3 4 5 6 7 8  public class Main { public static void main(String args[]) { Animal dog = new Dog(); if (dog instanceOf Dog) { // ...  } } }   Der Operator überprüft also den Typ einer Instanz und berücksichtigt dabei Subklassen und Interfaces.\nInterfaces Ein Interface dient dem Angebot von Methoden, die durch Klassen zu implementieren sind, welche das Interface “implementieren”. Damit definiert ein Interface einen Satz von bestimmten Funktionen, die allen implementierenden Klassen des Interfaces gleich sind. Ein Interface muss dabei nicht zwingend eine Methode enthalten. Eine Schnittstelle hat im Unterschied zu einer Klasse weder ein Verhalten noch einen Status – wir können ein Interface als einen Vertrag betrachtet, den eine Klasse erfüllen muss. Ein Interface besitzt anstelle der Klassendefinition das Schlüsselwort interface.\nEin Interface kann die folgenden Dinge enthalten:\n Konstanten, also public static final Variablen, wobei die Schlüsselwörter nicht erforderlich sind public abstract Methoden, wobei die Schlüsselwörte nicht erforderlich sind Normale Methoden mit Implementierung (das Schlüsselwort default ist erforderlich) seit Java 8 Statische Methoden mit Implementierung (das Schlüsselwort static ist erforderlich) seit Java 8  Ein Interface darf die folgenden Dinge nicht enthalten:\n Instanzvariablen Konstruktoren Nicht-öffentliche abstrakte Methoden  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  public interface Vehicle { double MILES_PER_KM = 1.60934; String getBrand(); String speedUp(); String slowDown(); static double parseToKmh(double mph) { return mph * MILES_PER_KM; } static double parseToMph(double kmh) { return kmh / MILES_PER_KM; } default String turnAlarmOn() { return \"Turning the vehicle alarm on.\"; } default String turnAlarmOff() { return \"Turning the vehicle alarm off.\"; } }   Eine Klasse verwendet in ihrer Deklaration das Schlüsselwort implements, um eine Schnittstelle zu implementieren. Ein Interface verwendet jedoch das Schlüsselwort extends, um eine andere Schnittstelle zu erweitern.\nBeispiel:\n Eine Basisklasse mit dem Namen Bird Eine Subklasse mit dem Namen Parrot Eine Subklasse mit dem Namen Penguin Ein Interface mit dem Namen CanFly  1 2 3 4 5  public class Bird { public void eat() { System.out.println(getClass().getSimpleName() + \" is eating!\"); } }   1 2 3  public interface Flyable { void fly(); }   1 2 3 4 5 6  public class Parrot extends Bird implements Flyable { @Override public void fly() { System.out.println(\"Parrot is Flying!\"); } }   1 2 3  public class Penguin extends Bird { }   Wie wir sehen ist die Klasse Parrot gezwungen den Vertrag mit dem Interface Flyable zu erfüllen. Der Vorteil dieser Implementation wird erst ersichtlich wenn das Interface beispielsweise als Parameter verwendet wird. Nur Instanzen von Klassen, welche das Interface implementieren können als Parameter verwendet werden.\n1 2 3 4 5  public class Birdhouse { public void arrive(Flyable flyable) { flyable.fly(); } }   1 2 3 4 5 6 7  public class Main { public static void main(String[] args) { Flyable parrot = new Parrot(); Birdhouse birdhouse = new Birdhouse(); birdhouse.arrive(parrot); } }   Im Beispiel sehen wir, dass durch die Verwendung eines Interfaces die Abhängigkeiten zwischen den Klassen Birdhouse und Parrot vollständig aufgehoben wird. Beide Klassen kennen einander nicht, dies wird Entkopplung genannt. Dem Vogelhaus ist es also egal welcher Vogel ankommt, er muss aber fliegen können.\nKapselung Kapselung ist eines der bedeutendsten Konzepte der objektorientierten Programmierung, welches Sicherheit bietet, indem es die sensiblen Daten/Implementierungsdetails einer Klasse vor den Benutzern verbirgt.\nIn Java kann die Kapselung erreicht werden, indem die Klassenattribute/-variablen als Privat deklariert werden. Die Klasse stellt dann öffentliche Methoden zur Verfügung, welche von “aussen” (durch andere Klassen) verwendet werden können, um bestimmte Information zu erhalten oder um bestimmten Operationen, welche auf den Attributen der Klasse basiert sind, ausführen zu können.\nBeispiel\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  public class Student { private final String name; private final String lastName; private final int age; private int index = 0; private final String[] courses = {}; public Student(String name, String lastName, int age) { this.name = name; this.lastName = lastName; this.age = age; } public void enroleCourse(String course) { courses[index++] = course; } @Override public void toString() { System.out.printf(\"Name: %s\\nLastname: %s\\nAge: %d\\n\", name, lastName, age); System.out.println(\"Courses:\"); Arrays.stream(courses).forEach(System.out::println); } }   Die Student Klasse beinhaltet vier private Attribute, worauf der Benutzer dieser Klasse keinen Zugriff hat. Die Klasse stellt neben dem Konstruktor, lediglich zwei öffentliche Methoden zur Verfügung. Die interne Struktur der Student Klasse bleibt vom Benutzer verborgen. So weiss der Benutzer z.B. nicht, dass die Liste der Courses mit einem Array umgesetzt worden war. Dies erlaubt eine Strukturänderung innerhalb der Student Klasse ohne, dass der Benutzer etwas davon merkt oder seinen Code ändern muss (die öffentlichen Methoden ändern sich nicht):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  public class Student { private final String name; private final String lastName; private final int age; private final List\u003cString\u003e courses; // use List instead of Array  public Student(String name, String lastName, int age) { this.name = name; this.lastName = lastName; this.age = age; } public void enroleCourse(String course) { courses.add(course); } @Override public void toString() { System.out.printf(\"Name: %s\\nLastname: %s\\nAge: %d\\n\", name, lastName, age); System.out.println(\"Courses:\"); courses.forEach(System.out::println); } }   Die Student Klasse erlaubt zusätzlich keinen direkten Zugriff auf ihre Attributen (es gibt keine Getter-Methoden). Die Überlegung hier ist, dass die einzelnen Attribute niemanden ausserhalb der Student Klasse interessieren. Von Aussen will man lediglich dem Student ein Kurs zuweisen können und alle Informationen zum Studenten ausgeben.\nDas Befolgen des Kapselung-Prinzips führt zu einem Design, welches folgende Vorteile mit sich bringt:\n Die Attribute und damit der Zustand einer Klasse bzw. eines Objektes sind vor “fremden” Zugriff geschützt (Data-Hiding) Die Klasse hat eine öffentliche API, welche von Benutzer der Klasse verwendet werden können. Somit ist auch klar definiert, was die Aufgabe dieser Klasse ist. Die öffentliche API einer Klasse ermöglicht das Verbergen von Umsetzungsdetails. Somit haben interne Strukturänderungen dieser Klasse keinen Einfluss auf den Code des Benutzers  ","categories":"","description":"Modul #J3\n","excerpt":"Modul #J3\n","ref":"/docs/java/java-ood/","tags":"","title":"Objektorientiertes Design"},{"body":"java.util.Queue Eine Queue ist ähnlich einem Stack ein Behälter, in den Elemente eingefügt und nur in einer bestimmten Reihenfolge wieder entnommen werden können. Bei den Queues gilt das First In First Out (=FIFO) Prinzip: Das Einfügen eines Elements erfolgt an einem Ende und heisst EnQueue. Die Entfernung eines Elements erfolgt dann am anderen Ende und heisst DeQueue. Das heisst also, das erste Elemente, das einer Queue eingefügt wird, ist das Element das zuerst der Queue entnommen werden kann. Queues können in ihrer Grösse beschränkt oder unbeschränkt sein.\nAuf Deutsch könnte man Queues als “Warteschlangen” bezeichnen. Wir kennen Warteschlangen von unserem Alltag: Beispielsweise vom Einkaufen, wo es eine Schlange von Kunden gibt, die an der Kasse auf einen Kassierer warten. Ein Kunde stellt sich zu hinterst an und rückt “in der Warteschlange” vor, wenn vorherigen Kunden bedient wurden.\nAlle Methoden vom Interface java.util.Queue 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  /* * Fügt das angegebene Element in diese Queue ein, * wenn dies möglich ist, ohne Kapazitätsbeschränkungen zu verletzen. * Bei Erfolg wird true zurückgegeben. Eine IllegalStateException wird ausgelöst, wenn derzeit * kein Platz verfügbar ist. */ boolean add(E e); /* * Fügt das angegebene Element in diese Queue ein, * wenn dies möglich ist, ohne Kapazitätsbeschränkungen zu verletzen. * Bei Erfolg wird true zurückgegeben und sonst wird false zurückgegeben. * * Bei der Verwendung einer Queue mit Kapazitätsbeschränkungen ist diese Methode in der Regel add(E e) vorzuziehen, * da bei Verletzung der Kapazitätsbeschränkungen keine Exception geworfen wird, sondern false zurückgegeben wird. * */ boolean offer(E e); /* * Gibt das Element am Anfang des Queues zurück und entfernt es in der Queue. * Falls die Queue leer ist, dann wird null zurückgegeben. */ E poll(); /* * Gibt das Element am Anfang des Queues zurück und entfernt es in der Queue. * Diese Methode unterscheidet sich von poll() nur darin, dass sie eine Exception auslöst, wenn die Queue leer ist. */ E remove(); /* * Gibt das Element am Anfang des Queues zurück, entfernt es aber nicht. * Gibt null zurück, wenn die Queue leer ist. */ E peek(); /* * Gibt das Element am Anfang des Queues zurück, entfernt es aber nicht. * Diese Methode unterscheidet sich von peek() nur darin, dass sie eine Exception auslöst, wenn die Queue leer ist. */ E element();   java.util.Deque Die Deque ist eine Queue mit zwei Enden, und Datenelemente können an beiden Enden hinzugefügt oder entfernt werden. Die Deque in Java wird über die das Interface java.util.Deque implementiert, die ein Subtyp des Interface java.util.Queue ist.\nAlle Methoden vom Interface java.util.Deque 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104  /* * Fügt das angegebene Element an den Anfang dieser Deque ein, * wenn dies möglich ist, ohne Kapazitätsbeschränkungen zu verletzen * und löst eine IllegalStateException aus, wenn derzeit kein Platz verfügbar ist. */ void addFirst(E e); /* * Fügt das angegebene Element an das Ende dieser Deque ein, * wenn dies möglich ist, ohne Kapazitätsbeschränkungen zu verletzen * und löst eine IllegalStateException aus, wenn derzeit kein Platz verfügbar ist. */ void addLast(E e); /* * Fügt das angegebene Element an den Anfang dieser Deque ein, * wenn dies möglich ist, ohne Kapazitätsbeschränkungen zu verletzen. * Bei Erfolg wird true zurückgegeben und sonst wird false zurückgegeben. * * Bei der Verwendung einer Deque mit Kapazitätsbeschränkungen ist diese Methode in der Regel addFirst(E e) vorzuziehen, * da bei Verletzung der Kapazitätsbeschränkungen keine Exception geworfen wird, sondern false zurückgegeben wird. * */ boolean offerFirst(E e); /* * Fügt das angegebene Element an das Ende dieser Deque ein, * wenn dies möglich ist, ohne Kapazitätsbeschränkungen zu verletzen. * Bei Erfolg wird true zurückgegeben und sonst wird false zurückgegeben. * * Bei der Verwendung einer Deque mit Kapazitätsbeschränkungen ist diese Methode in der Regel addLast(E e) vorzuziehen, * da bei Verletzung der Kapazitätsbeschränkungen keine Exception geworfen wird, sondern false zurückgegeben wird. * */ boolean offerLast(E e); /* * Gibt das Element am Anfang des Deques zurück und entfernt es in der Deque. * Falls die Deque leer ist, dann wird null zurückgegeben. */ E pollFirst(); /* * Gibt das Element am Ende des Deques zurück und entfernt es in der Deque. * Falls die Deque leer ist, dann wird null zurückgegeben. */ E pollLast(); /* * Gibt das Element am Anfang des Deques zurück und entfernt es in der Deque. * Diese Methode unterscheidet sich von pollFirst() nur darin, dass sie eine Exception auslöst, wenn die Deque leer ist. */ E removeFirst(); /* * Gibt das Element am Ende des Deques zurück und entfernt es in der Deque. * Diese Methode unterscheidet sich von pollLast() nur darin, dass sie eine Exception auslöst, wenn die Deque leer ist. */ E removeLast(); /* * Gibt das Element am Anfang des Deques zurück, entfernt es aber nicht. * Gibt null zurück, wenn die Deque leer ist. */ E peekFirst(); /* * Gibt das Element am Ende des Deques zurück, entfernt es aber nicht. * Gibt null zurück, wenn die Deque leer ist. */ E peekLast(); /* * Gibt das Element am Anfang des Deques zurück, entfernt es aber nicht. * Diese Methode unterscheidet sich von peekFirst() nur darin, dass sie eine Exception auslöst, wenn die Deque leer ist. */ E getFirst(); /* * Gibt das Element am Ende des Deques zurück, entfernt es aber nicht. * Diese Methode unterscheidet sich von peekLast() nur darin, dass sie eine Exception auslöst, wenn die Deque leer ist. */ E getLast(); /* * Entfernt das erste Vorkommen des angegebenen Elements aus dieser Deque, * sofern es vorhanden ist. Wenn diese Deque das Element nicht enthält, * bleibt sie unverändert. */ boolean removeFirstOccurrence(Object o); /* * Entfernt das letzte Vorkommen des angegebenen Elements aus dieser Deque, * sofern es vorhanden ist. Wenn diese Deque das Element nicht enthält, * bleibt sie unverändert. */ boolean removeLastOccurrence(Object o); // *** Queue methods *** ... // *** Stack methods *** ...   Im Interface java.util.Deque sind Queue und Stack Methoden ebenfalls deklariert. Deques, bei denen Elemente nur an einem Ende eingefügt und am nur anderen Ende entnommen werden, stellen wiederum Queues dar. Deques, bei denen Elemente an einem Ende eingefügt und am gleichen Ende entnommen werden, stellen Stacks dar.\n Aufgaben    Aufgaben Aufgaben zu Modul #J7 - Java Collections - Queue + Deque\n","categories":"","description":"Die Datenstruktur für eine Warteschlange: die Queue.\n","excerpt":"Die Datenstruktur für eine Warteschlange: die Queue.\n","ref":"/docs/java/java-collections/06_queue/","tags":"","title":"Queue + Deque"},{"body":"Schreibe eine Anwendung, welche entscheidet ob ein Damm geöffnet sein muss oder nicht. Die Entscheidung wird anhand der Wassermenge, welche in einen See hineinfliesst, verglichen mit der Wassermenge, welche aus diesem See wieder herausfliesst, gefällt.\nEine Wassermenge\n hat eine Menge hat eine Einheit wie Liter, Hektoliter oder m³  Die Anwendung soll  Auskunft geben, ob die hineinfliessende Wassermenge gleich ist wie die herausfliessende Wassermenge Den Damm nur dann öffnen, wenn die hineinfliessende Wassermenge grösser ist als die herausfliessende Wassermenge.  Es sollen keine Setter-Methoden für das Einfügen der Werte verwendet werden!\nAufgabe 1 Schreibe ein Programm, dass die Anforderungen auf eine objekt-orientierte Art und Weise umsetzt - d.h., dass die Methoden immer noch funktionieren würden, auch wenn es mehrere Dämme geben würde.\nSimuliere einen Damm zu drei verschiedenen Zeitpunkten mit unterschiedlichen hinein- und hinausfliessenden Wassermengen.\nEine Methode status() soll einen Wert zurück geben, der aussagt, ob der Damm zum gegebenen Zeitpunkt offen oder geschlossen ist.\nAufgabe 2 - Zustände speichern (Erst nach dem Kapitel “Veränderbarkeit” lösen.)\nErweitere die status()-Methode so, dass bei jeder Status-Abfrage (also beim Aufruf der Methode) die Mengen in einer Liste gespeichert werden - und zwar als Objekte eurer Klasse für die Wassermenge.\nAm Ende des Programms sollen alle Mengen inkl. Einheiten dann in der Konsole ausgegeben werden.\n","categories":"","description":"Aufgabe zu Modul #J2 - OOP - Wassermenge\n","excerpt":"Aufgabe zu Modul #J2 - OOP - Wassermenge\n","ref":"/labs/java/java-oop/06_wassermenge/","tags":"","title":"Wassermenge"},{"body":"","categories":"","description":"Angular NgRx lernen\n","excerpt":"Angular NgRx lernen\n","ref":"/docs/web/angular_ngrx/","tags":"","title":"Angular NgRx"},{"body":"Ziele  Du weisst, was SCSS ist und kennst dessen Vorteile gegenüber CSS. Du kannst, ein Template anhand von Bedingungen stylen.  Stylesheet Zu jedem Angular Component gehört ein Stylesheet, dieses ist jedoch nur für diesen Component zuständig, sprich für das HTML-File dieses Components. Erstellt man einen neuen Component über die CLI so wird das Stylesheet automatisch erzeugt. Somit wird schon vorgegeben das die Styles ausgelagert werden sollten und nicht inline erfolgen. Man kann jedoch auch ein oder mehrere globale Stylesheets erstellen, diese gelten dann wie der Name schon sagt für das gesamte Projekt.\nDas Prinzip ist das gleiche wie bei normalem HTML und CSS, es werden KLassen und IDs erstellt um diese dann stylen zu können.\nBeim Erstellen eines Angular Projekts kann man sagen, ob CSS, SCSS, SASS oder LESS verwenden möchte. SCSS schauen wir zu einem späteren Zeitpunkt noch an.\nSCSS SCSS (Sassy CSS) ist eine Erweiterung der CSS-Sprache, die zusätzliche Funktionen und Möglichkeiten bietet, um die Entwicklung von Stylesheets zu vereinfachen und effizienter zu gestalten. Die Files erhalten dann nicht mehr den Suffix .css sondern .scss.\nDie wichtigsten Hauptfunktionen von SCSS sind:\nVariablen Mit SCSS kann man Variablen definieren und verwenden, um Werte wie Farben, Schriftarten etc. zu speichern und später im Stylesheet wiederverwenden zu können.\n1 2 3 4 5 6 7  $black: #000000; h1 { color: $black; font-size: 24px; font-weight: bold; }   Verschachtelte Regeln Mit SCSS kann man verschachtelte Regeln schreiben, um die Lesbarkeit und Struktur des Stylesheets zu verbessern. Statt jedes Element separat zu selektieren, kann die Struktur des HTML-Codes reflektiert werden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  $black: #000000; .container { width: 100%; h1 { color: $black; font-size: 24px; font-weight: bold; } p { color: $black; font-size: 16px; } }   Mixins Mixins ermöglichen es, Gruppen von SCSS-Deklarationen zu definieren und sie an verschiedenen Stellen im Stylesheet wiederzuverwenden.\n1 2 3 4 5 6 7 8 9  @mixinborder-radius($radius) { -webkit-border-radius: $radius; -moz-border-radius: $radius; border-radius: $radius; } .button { @includeborder-radius(4px); }   Vererbung SCSS ermöglicht es, Styles von einer Klasse zu einer anderen zu vererben, ähnlich wie bei der Vererbung in der objektorientierten Programmierung. Dies kann dazu beitragen, den Stylesheet-Code zu reduzieren und die Wartbarkeit zu verbessern.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  $black: #000000; .container { width: 100%; .text { color: $black; font-family: Helvetica, sans-serif; } h1 { @extend .text; font-size: 24px; font-weight: bold; } p { @extend .text; font-size: 16px; } }   Partials \u0026 Importieren von Dateien Mit Partials kann man Stylesheet-Dateien in kleinere Teile aufteilen und sie bei Bedarf in andere Stylesheets importieren. Partials werden in der Regel mit einem führenden Unterstrich _ in ihrem Dateinamen gekennzeichnet, z.B. _variables.scss, _mixins.scss etc. Dies hilft, den Code besser zu organisieren denn man kann ihn in logische Module aufzuteilen. Dadurch wird der Code wiederverwendbar. Es ermöglicht, somit nur die benötigten Partials zu importieren.\n1 2 3 4 5 6 7 8  // _variables.scss $black: #000000; $white: #ffffff; $gray: #808080; $blue: #0000ff; $red: #ff0000; $yellow: #ffff00;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  @import '_variables'; .container { width: 100%; .text { color: $black; font-family: Helvetica, sans-serif; } h1 { @extend .text; font-size: 24px; font-weight: bold; } p { @extend .text; font-size: 16px; } }   Template Styling Es gibt zum einen das ngClass Directive, welches verwendet werden kann um CSS/(SCSS)-Klassen dynamisch ins Template einzubinden. Alternative dazu gibt es noch die [class.] Syntax. Man kann diese Syntax verwenden, um eine einzelne CSS/(SCSS)-Klasse basierend auf einer Bedingung hinzuzufügen oder zu entfernen. Ob eine Klasse hinzugefügt oder entfernt werden soll, wird meistens anhand eines Boolean aus dem Typescript geprüft. Ist das Boolean true so wird die Klasse hinzugefügt, ansonsten wird sie ignoriert.\n1 2 3 4 5 6 7 8  import { Component } from '@angular/core'; @Component({ // .. }) export class GreetingComponent { isText: boolean = true; }   1  \u003cdiv [class.text]=\"isText\"\u003eText\u003c/div\u003e   1 2 3 4 5 6  @import '_variables'; .text { color: $black; font-family: Helvetica, sans-serif; }   Alternativ zur prüfung auf ein Boolean kann auch mit einer Bedingung gearbeitet werden, wie zum Beispiel:\n1 2 3 4 5 6 7 8 9  import { Component } from '@angular/core'; @Component({ // .. }) export class GreetingComponent { type: string = 'text'; textLength: number = 10; }   1  \u003cp [class.text]=\"type === 'text' \u0026\u0026 textLength === 10\"\u003eFace your fears and embrace the challenges!\u003c/p\u003e   1 2 3 4 5 6  @import '_variables'; .text { color: $black; font-family: Helvetica, sans-serif; }   Globales Stylesheet Das globale Stylesheet wird automatisch generiert, wenn ein neues Angular-Projekt mit der Angular CLI erstellt wird. Dieses heisst dann im Fall von SCSS styles.scss. Im globalen Stylesheet werden Styles definiert, welche über das ganze Projekt immer gleich sein sollen. Wie zum Beispiel das alle p-tags eine bestimmte Schriftgrösse, Schriftart, Schriftfarbe etc. haben.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  /* Globaler Stil für den Body */ @import '_variables'; body { font-family: Arial, sans-serif; margin: 0; padding: 0; } .text { color: $black; font-family: Helvetica, sans-serif; } h1 { @extend .text; font-size: 24px; font-weight: bold; } p { @extend .text; font-size: 16px; } /* Weitere globale Stilregeln */   ng-deep In SCSS gibt es den sogenannten ::ng-deep Selektor, der verwendet wird, um SCSS-Regeln auf Elemente innerhalb von Components anzuwenden, die von der View-Encapsulation betroffen sind. Die View-Encapsulation ist eine Funktion von Angular, die den CSS-Code in eines Components isoliert, um Kollisionen mit dem globalen Stylesheet zu vermeiden.\nWenn SCSS-Regeln in einem Component auf Elemente innerhalb von einem anderen Component, ng-container und ng-template anwenden möchte, kann dies manchmal zu Problemen führen, da die View-Encapsulation diese Regeln standardmässig nicht zulässt. Hier kommt ::ng-deep ins Spiel.\nIndem ::ng-deep vor SCSS-Regeln innerhalb des Components gestellt werden, können diese Regeln auf die Elemente innerhalb von ng-container und ng-template anwenden, unabhängig von der View-Encapsulation.\nBeachte jedoch, dass ::ng-deep als “deprecated” markiert ist, was bedeutet, dass es in Zukunft möglicherweise entfernt wird. Angular empfiehlt stattdessen, eine bessere Strukturierung der Components und die Verwendung von spezifischen Selektoren zu priorisieren, um spezifische Styles auf Elemente anzuwenden.\n1 2 3 4  ::ng-deep p { /* Stilregel für alle p-Elemente innerhalb des Components, einschliesslich innerhalb von ng-container und ng-template */ }   ","categories":"","description":"Modul #F6 - Angular - Stylesheet\n","excerpt":"Modul #F6 - Angular - Stylesheet\n","ref":"/docs/web/angular/02_6_angular_stylesheet/","tags":"","title":"Stylesheet"},{"body":"Ziele  Du weisst, wie eine Funktions-Definition aussieht sowie deren Aufruf. Du weisst, was Default-Parameter sind und wie man sie verwendet. Du weisst, was Arrow-Functions sind und wie mit dieser Schreibweise Funktionen geschrieben werden. Du kennst den Unterschied von Funktionen und Funktions Expressions. Du weisst, was Globaler-Scope und Block-Scope bedeutet.  Funktions-Definition und Aufruf Eine Funktions-Definition in JavaScript ist eine Möglichkeit, einen Code-Block zu erstellen und diesen zu benennen, der eine bestimmte Aufgabe ausführt.\n1 2 3  function sum(number1, number2) { return number1 + number2; }   Um die Funktion aufzurufen, können wir den Funktionsnamen gefolgt von Runden klammern verwenden und die Argumente innerhalb dieser übergeben:\n1 2  let total = sum(3, 5); console.log(total); // 8   Man kann auch Funktionen ohne Argumente aufrufen, indem man einfach die Klammern leer lässt:\n1 2 3 4 5  function sayHello() { console.log('Hello!'); } sayHello(); // 'Hello!'   Arrow Functions Arrow-Funktionen sind eine kompakte und prägnante Möglichkeit, Funktionen in JavaScript zu definieren. Im Gegensatz zu herkömmlichen Funktionsdefinitionen haben Arrow-Funktionen einen kürzeren und einfacheren Syntax. Dies ist besonders nützlich, um den Code zu vereinfachen und die Lesbarkeit zu erhöhen. Arrow-Funktionen haben auch eine andere this-Binding-Regel im Vergleich zu herkömmlichen Funktionen. In Arrow-Funktionen wird this an das this-Objekt des äußeren Kontexts gebunden, während bei herkömmlichen Funktionen this an das Objekt des Aufrufers gebunden wird.\nIm Gegensatz zu herkömmlichen Funktionsdefinition wird der Funktionsname weggelassen und durch einen Pfeil (=\u003e) ersetzt.\n1 2 3 4 5 6  const sum = (number1, number2) =\u003e { return number1 + number2; } let total = sum(3, 5); console.log(total); // 8   Wenn die Funktion nur einen Ausdruck hat, kann sie noch kürzer geschrieben werden, indem die geschweiften Klammern und das return-Schlüsselwort weggelassen werden. Diese Syntax nennt man auch “implizite Rückgabe”.\n1  const sum = (number1, number2) =\u003e number1 + number2;   Function Expressions Eine Funktionsexpression ist ein anderer Ansatz, um eine Funktion in JavaScript zu definieren. Im Gegensatz zur Funktionsdeklaration wird bei der Funktionsexpression eine Funktion in einer Variablen gespeichert:\n1 2 3 4 5 6 7 8 9 10  // Function-Expression: const sum = function(number1, number2) { return number1 + number2; } // Das Gleiche mit der Arrow-Function-Schreibweise: const sum2 = (a, b) =\u003e a + b; console.log(sum(3, 5)); // 8 console.log(sum2(3, 5)); // 8   Der Hauptunterschied zwischen einer Funktionsdeklaration und einer Funktionsexpression besteht darin, dass Funktionsexpression nur im Scope der Variabel aufgerufen werden können, sprich erst nach der Zuweisung der Variable.\nDieser Unterschied wird durch den Hoisting-Prozess verursacht: Der Hoisting-Prozess ist ein Konzept, bei dem Variablen- und Funktionsdeklarationen an den Anfang ihres Gültigkeitsbereichs verschoben werden. Mit anderen Worten, bevor der Code ausgeführt wird, werden Variablen und Funktionen in den Speicher geladen und sind somit bereits verfügbar, bevor sie im Code definiert wurden. Im Falle von Funktionsdeklarationen bedeutet das, dass die gesamte Funktionsdefinition im Speicher geladen wird, einschließlich der Funktionsparameter und des Funktionskörpers. Dadurch kann eine Funktion in einem Programm an jeder beliebigen Stelle aufgerufen werden, auch wenn sie erst später im Code definiert wird. Es ist jedoch wichtig zu beachten, dass das Hoisting für Funktionsdeklarationen gilt, nicht aber für Funktionsexpressionen. Wenn man eine Funktion als Funktionsexpressionen definieren, wird sie nicht gehoisted. Das bedeutet, dass man sie erst nach der Definition aufrufen kann.\nBeispiel mit Hoisting-Prozess:\n1 2 3 4 5 6 7 8 9 10  console.log(multiply(2,3)); // 6 console.log(sum(1,2)); // Cannot access 'sum' before initialization  function multiply(number1, number2) { return number1 * number2; } const sum = function(number1, number2) { return number1 + number2; }   ","categories":"","description":"Modul #F4 - JavaScript - Verschiedene Arten von Funktionen.\n","excerpt":"Modul #F4 - JavaScript - Verschiedene Arten von Funktionen.\n","ref":"/docs/web/javascript/07_js_functions/","tags":"","title":"Functions"},{"body":"Ziele  Ich weiss, was nicht-semantische Tags sind und wofür sie verwendet werden. Ich weiss, was semantische Tags sind und wofür sie verwendet werden. Ich kann, HTML-5 semantische Elemente anwenden.  Nicht-semantische Tags Oft kommst du in die Situation, wo du mehrere Elemente in einem anderen Element gruppieren willst. In den aller meisten Fällen verwendet man dafür div-Elemente.\n\u003cdiv\u003e-Tags werden oft als Container für HTML-Elemente verwendet. Dieser Container kann dann mit CSS gestylt oder mit JavaScript manipuliert werden. Probiere das nächste Beispiel einmal aus, ohne das Styling zu verstehen (ignoriere das, was im \u003cstyle\u003e-Element drinsteht):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  Just a Text \u003cdiv class=\"content\"\u003e \u003ch1\u003eHello\u003c/h1\u003e \u003cp\u003eThis is my amazing website!\u003c/p\u003e \u003c/div\u003e Other Text \u003cstyle\u003e .content { width: 20em; padding: 1em; border-radius: 1em; background-color: orange; } \u003c/style\u003e   Das ist ein typisches Beispiel für die Verwendung von \u003cdiv\u003es.\nMöchtest du hingegen ein paar Wörter (aber nicht einen ganzen Block/Paragrafen) speziell stylen, wird oft ein \u003cspan\u003e-Element verwendet. Möchtest du z.B. das Datum in einem Text hervorheben, dann könnte das z.B. so aussehen:\n1 2 3 4 5 6 7 8  Das nächste Event findet am \u003cspan class=\"date\"\u003e20. Mai\u003c/span\u003e statt. \u003cstyle\u003e .date { font-size: 1.25em; font-weight: bold; color: blue; } \u003c/style\u003e   In den beiden oberen Beispielen wurde bei den Tags eine Klasse angegeben. Der Sinn dahinter war, dass wir alle Elemente mit der gleichen Klasse gleich stylen können.\nSemantische Tags Mit HTML5 wurden viele neue semantische Tags eingeführt, die in vielen Fällen \u003cdiv\u003es und \u003cspan\u003es ersetzen.\nDas “Zeit”-\u003cspan\u003e-Beispiel könnte z.B. folgendermassen vereinfacht werden:\n1 2 3 4 5 6 7 8  Das nächste Event findet am \u003ctime\u003e20. Mai\u003c/time\u003e statt. \u003cstyle\u003e time { font-size: 1.25em; font-weight: bold; color: blue; } \u003c/style\u003e   In HTML5 wurden viele neue Tags eingeführt, die die Struktur von HTML-Dateien genauer beschreiben. Oft hat eine Website eine ähnliche Struktur wie die folgende:\nDer \u003cheader\u003e ist meistens das, was auf einer Website zuoberst ist. Dieser enthält oft den Titel der Applikation, das Logo der Firma und evtl. noch eine \u003cnav\u003eigation (also Links wie für ‘Home’, ‘About’, …).\nDas Gegenteil des \u003cheader\u003es ist der \u003cfooter\u003e. Der Footer befindet sich oft am Ende der Website (also ganz unten) und enthält oft das Copyright sowie weiterführende Links wie z.B. solche zu den Datenschutzbestimmungen.\nNicht auf diesem Bild, aber trotzdem relevant: Oft befindet sich der Hauptteil einer Website (also nicht der Header, Footer, Werbung) in einem \u003cmain\u003e-Element. Wenn die Website einen Leseartikel beschreibt, dann wäre der Text inkl. Überschriften dort drin.\nEinzelne Abschnitte (z.B. Unterkapitel inkl. Überschriften) werden oft in \u003csection\u003es gepackt und sind im nachfolgenden Beispiel-Code eine gute Alternative zu \u003cdiv\u003es.\nWas genau ein \u003carticle\u003e ist, würde den Rahmen hier definitiv sprengen. Auf jeden Fall beschreibt ein article ein von der aktuellen Website unabhängiges und in sich abgeschlossenes Element. Ein article-Element könnte man also einfach von der aktuellen Seite ausschneiden und in eine andere kopieren.\nBitte schaue dir diese Dokumentation zu HTML Semantic Tags an. Dort sind auch \u003carticle\u003es genauer beschrieben: https://www.w3schools.com/html/html5_semantic_elements.asp\nMit semantischen Tags könnte man z.B. das\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e\u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"header\"\u003e \u003ch1\u003eThe Header\u003c/h1\u003e \u003cdiv class=\"nav-links\"\u003e \u003cp\u003eNav:\u003c/p\u003e \u003cp\u003eHome\u003c/p\u003e \u003cp\u003eNews\u003c/p\u003e \u003cp\u003eAbout\u003c/p\u003e \u003c/div\u003e \u003c/div\u003e \u003cdiv id=\"content\"\u003e \u003ch1\u003eThe Article - BANANA TREE\u003c/h1\u003e \u003cdiv class=\"chapter\"\u003e \u003ch2\u003eSection 1\u003c/h2\u003e \u003cp\u003eA banana tree is a must if you wish to bring a sizeable touch of the tropics into your home.\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"chapter\"\u003e \u003ch2\u003eSection 2\u003c/h2\u003e \u003cp\u003eThere are some 400 species worldwide.\u003c/p\u003e \u003cdiv class=\"move-to-the-right\"\u003e \u003ch2\u003eA Aside - Why are bananas bent?\u003c/h2\u003e Gravity causes the fruit to hang down. \u003c/div\u003e \u003c/div\u003e \u003cp\u003eThe text is from: \u003ca href=\"https://www.thejoyofplants.co.uk/banana-tree\"\u003eThe Joy of Plants.co.uk\u003c/a\u003e\u003c/p\u003e \u003c/div\u003e \u003cdiv id=\"end-of-the-page\"\u003e \u003ch2\u003eThe Footer\u003c/h2\u003e \u003cdiv\u003e \u003cp\u003eContact\u003c/p\u003e \u003cp\u003eImpressum\u003c/p\u003e \u003c/div\u003e \u003c/div\u003e \u003c/body\u003e \u003c/html\u003e   in das vereinfachen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e\u003c/head\u003e \u003cbody\u003e \u003cheader\u003e \u003ch1\u003eThe Header\u003c/h1\u003e \u003cnav\u003e \u003cp\u003eNav:\u003c/p\u003e \u003cp\u003eHome\u003c/p\u003e \u003cp\u003eNews\u003c/p\u003e \u003cp\u003eAbout\u003c/p\u003e \u003c/nav\u003e \u003c/header\u003e \u003cmain\u003e \u003carticle\u003e \u003ch1\u003eThe Article - BANANA TREE\u003c/h1\u003e \u003csection\u003e \u003ch2\u003eSection 1\u003c/h2\u003e \u003cp\u003eA banana tree is a must if you wish to bring a sizeable touch of the tropics into your home.\u003c/p\u003e \u003c/section\u003e \u003csection\u003e \u003ch2\u003eSection 2\u003c/h2\u003e \u003cp\u003eThere are some 400 species worldwide.\u003c/p\u003e \u003caside\u003e \u003ch2\u003eA Aside - Why are bananas bent?\u003c/h2\u003e Gravity causes the fruit to hang down. \u003c/aside\u003e \u003c/section\u003e \u003cp\u003eThe text is from: \u003ca href=\"https://www.thejoyofplants.co.uk/banana-tree\"\u003eThe Joy of Plants.co.uk\u003c/a\u003e\u003c/p\u003e \u003c/article\u003e \u003c/main\u003e \u003cfooter\u003e \u003ch2\u003eThe Footer\u003c/h2\u003e \u003cdiv\u003e \u003cp\u003eContact\u003c/p\u003e \u003cp\u003eImpressum\u003c/p\u003e \u003c/div\u003e \u003c/footer\u003e \u003c/body\u003e \u003c/html\u003e   Jetzt bist du dran. Löse bitte die Aufgabe 3 in den Labs.\n","categories":"","description":"Modul #F3 - HTML und CSS - Tags, die ihre Bedeutung dem Browser und dem Entwickler beschreiben.\n","excerpt":"Modul #F3 - HTML und CSS - Tags, die ihre Bedeutung dem Browser und …","ref":"/docs/web/html_css/07_html_5_semantic_tags/","tags":"","title":"HTML5 Semantic Tags"},{"body":"Ziele  Ich kann in eigenen Worten den Unterschied zwischen statische- und nicht-statische Initialisierungsblöcke erklären. Ich kann den Zweck erörtern, welcher Initialisierungsblöcke erfüllen.  Initialisierungsblöcke Neben Konstruktoren gibt es noch zwei weitere Konstrukte, die der Initialisierung dienen. Statische und nicht-statische Initialisierungsblöcke. Diese sehen wie folgt aus:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class Car { static { // Statischer Initialisierungsblock \t} { // Instanzblock \t} public Car { // Konstruktor \t} }   Innerhalb dieser Initialisierungblöcke können ähnlich wie bei den Konstruktoren bestimmte Initialisierungen durchgeführt werden. Initialisierungsblöcke sind dann nützlich, wenn z.B. bei der Erstellung eines Objekts gewisser Code noch vor der Ausführung des Konstruktors als Vorbereitung ausgeführt werden muss.\nGrundsätzlich können die beiden Blöcke beliebigen Programmcode enthalten. Die Reihenfolge bei der Erstellung eines neuen Objekts ist wie folgt:\n Statische Variablen Statische Initialisierungblöcke Instanzvariablen Instanzblöcke Konstruktoren  Eine Java-Klasse kann beliebig viele statische und nicht-statische Initialisierungsblöcke aufweisen. Die Reihenfolge des Aufrufs bei mehreren Blöcken richtet sich nach der Reihenfolge der Implementation (sprich, die oberen Blöcke werden zuerst ausgeführt).\nBeispiel Folgendes Beispiel braucht einen statischen Initialisierungsblock, um eine Default-Waffe auszuwählen, die als Default für alle Ninjas gilt. In einem Instanzblock wird die Instanzvariable weapon gleich diesem Default-Wert gesetzt, damit das nicht in jedem Konstruktor (stelle dir vor, es gäbe viele davon) gemacht werden muss, wo die weapon nicht gesetzt wird.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  import java.util.Random; public class Ninja { private String name; private String weapon; private static String defaultWeapon; private static final String[] availableWeapons = {\"Shuriken\", \"Ninjatō\", \"Kunai\"}; static { Random random = new Random(System.currentTimeMillis()); int randomIndex = random.nextInt(availableWeapons.length); defaultWeapon = availableWeapons[randomIndex]; } // Instanzblock  { // Default-Wert, damit der Wert nicht in jedem Konstruktor gesetzt werden muss:  this.weapon = defaultWeapon; } public Ninja(String name) { this.name = name; } public Ninja(String name, String weapon) { this(name); this.weapon = weapon; } @Override public String toString() { return \"[name: \" + name + \", weapon: \" + weapon + \"]\"; } public static void main(String[] args) { Ninja ninja1 = new Ninja(\"Kaito\"); Ninja ninja2 = new Ninja(\"Kota\", \"Kusarigama\"); System.out.println(ninja1); System.out.println(ninja2); } }   ","categories":"","description":"Modul #J2\n","excerpt":"Modul #J2\n","ref":"/docs/java/j2-oop/07-initialization-blocks/","tags":"","title":"Initialisierungsblöcke"},{"body":"","categories":"","description":"Exercises zu Modul #J4 - Testing\n","excerpt":"Exercises zu Modul #J4 - Testing\n","ref":"/labs/java/java-testing/","tags":"","title":"Java Exercises - Testing"},{"body":"java.util.LinkedList LinkedLists sind verkettete Listen. D.h. die Elemnte der Listen sind zu einander verkettet und nicht wie bei einer ArrayList an bestimmten Positionen platziert.\njava.util.LinkedList implementiert zwei Collection-Interfaces: java.util.List und java.util.Deque. Das bedeutet grundsätzlich, dass sie sowohl die Methoden des List-Interfaces implementiert, als auch die des Deque-Interfaces.\nGrundsätzlich gibt es zwei Arten von verketteten Listen: Einfach verkettete Listen und doppelt verkettete Liste. Wir werden beide anschauen, wie sie im Allgeimeinen aussehen. Die java.util.LinkedList ist die Implementierung einer doppelt verketteten Liste..\nEinfach verkettete Listen Verkettete Listen bestehen aus Knoten (Nodes). Jeder Knoten enthält ein Element und eine Referenz auf einen weiteren Knoten, falls dieser vorhanden ist. Die Knoten sind somit über eine Referenz auf jeweils den nächsten Knoten miteinander verkettet. Die verkettete Liste enthält schlussendlich eine Referenz auf den ersten Knoten in der Liste. Der letzte Knoten enthält eine Referenz auf null.\nElement zu einer einfach verketten Liste hinzufügen Wird ein Knoten zu einer einfach verketteten Liste hinzugefügt, dann muss die Referenz des Knotens davor auf dieses Element zeigen und die Referenz des Elements, das hinzugefügt wird, muss auf den nächsten Knoten zeigen. So wird ein neuer Knoten zwischen zwei Knoten eingeschoben.\nElement zu aus einer einfach verketten Liste löschen Wird ein Knoten aus einer einfach verketteten Liste gelöscht, dann muss die Referenz des Knotens davor auf das zu löschende Element gelöscht werden und ersetzt werden mit der Referenz auf das nächste Element. Die Referenz des Elements, das gelöscht wird, auf das nächste Element muss auch gelöscht werden. So wird ein bestehender Knoten zwischen zwei Knoten entfernt.\nDoppelt verkettete Listen In einer doppelt verketteten Liste haben die Knoten nicht nur eine Referenz auf den nächsten Knoten, sondern auch eine Referenzen auf den vorherigen Knoten. Eine mögliche Implementierung einder doppelt verketteten Liste könnte sein, dass der letzte Knoten, wie auch schon bei einer einfach verketteten Liste eine Referenz auf null hat als nächsten Knoten und der erste Knoten in einer doppelt verketteten Liste eine Referenz auf null hat als vorherigen Knoten. Zusätzlich hat man eine Referenz auf den Kopf der Liste, d.h. auf den ersten Knoten und eine Referenze auf den letzten Knoten der Liste.\nDas Einfügen und Entfernen funktioniert analog zu einer einfach verketteten Liste.\nEin Element aus einer (einfach oder doppelt) verketteten Liste auslesen Wenn man ein Element in einer einfach verketteten Liste auslesen möchte, dann muss man vom ersten Knoten anfangen und ein Knoten nach dem anderen die Liste durchlaufen bis zu diesem Element. Im “schlimmsten” Fall muss über alle Knoten iteriert werden, wenn das Element, das mun sucht, im letzten Knoten ist.\nArrayList vs. LinkedList Der Vorteil von LinkedLists besteht darin, dass Elemente schneller hinzugefügt und schneller aus der Liste gelöscht werden können im Vergleich zu ArrayLists. Bei einer LinkedList müssen nur die Referenzen zum “Vorgänger” und “Nachfolgen” angepasst werden, wenn man ein Element einfügen oder löschen möchte. Der Nachteil jedoch besteht darin, dass der Zugriff auf Elementen der Liste an einer bestimmten Position im Vergleich zu ArrayLists langsamer ist, da in diesem Fall die Liste bis zu dem entsprechenden Element durchlaufen werden muss. Die Entscheidung für einen bestimmten Listen-Typ ist also abhängig von der Art und Anzahl der Zugriffe.\nLinkedList-Klasse im Java Die LinkedList-Klasse im Java (java.util.LinkedList) implementiert eine doppelt verkettete Liste. Sie ist so implementiert, dass sie zwei Referenzen enthält, zum einen die Referenz zum ersten Knoten und zum anderen die Referenz zum zweiten Knoten:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  public class LinkedList\u003cE\u003e extends AbstractSequentialList\u003cE\u003e implements List\u003cE\u003e, Deque\u003cE\u003e, Cloneable, java.io.Serializable { transient int size = 0; /** * Pointer to first node. */ transient Node\u003cE\u003e first; /** * Pointer to last node. */ transient Node\u003cE\u003e last; ... }   Ein Knoten, also das Objekt des Typs Node, enthält\n das Element, welches einen generischen Typ hat (deshalb Node\u003cE\u003e), die Referenz auf den vorherigen Knoten, also auf ein Node-Objekt und eine Referenz auf den nächsten Knoten.  Die statische Klasse Node\u003cE\u003e ist innerhalb der Klasse java.util.LinkedList definiert:\n1 2 3 4 5 6 7 8 9 10 11 12  private static class Node\u003cE\u003e { E item; Node\u003cE\u003e next; Node\u003cE\u003e prev; Node(Node\u003cE\u003e prev, E element, Node\u003cE\u003e next) { this.item = element; this.next = next; this.prev = prev; } }   Einige Methoden der Klasse java.util.LinkedList 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  /* * Konstruktor: Erstellt eine initial leere Liste */ public LinkedList() /* * Gibt das erste Element der Liste zurück. */ public E getFirst() /* * Gibt das letzte Element der Liste zurück. */ public E getLast() /* * Entfernt das erste Element der Liste und gibt es zurück. */ public E removeFirst() /* * Entfernt das letzte Element der Liste und gibt es zurück. */ public E removeLast() /* * Fügt das angegeben Element an den Anfang der Liste ein. */ public void addFirst(E e) /* * Fügt das angegebene Element an das Ende der Liste an. */ public void addLast(E e) ... // *** Queue and Deque methods ***  ... // *** Stack methods ***  ... // *** List methods ***  ...   ","categories":"","description":"Eine verkettete Liste, die LinkedList.\n","excerpt":"Eine verkettete Liste, die LinkedList.\n","ref":"/docs/java/java-collections/07_linked_list/","tags":"","title":"LinkedList"},{"body":"Referenztypen Nebst primitiven Datentypen gibt es Referenzdatentypen. Eine Variable von diesem Typ enthält nicht die Werte selbst (wie eine Variable primitiven Typs), sondern nur einen Verweis (Referenz) auf den Speicherort der Daten. Der Standardwert von Referenzvariablen ist null, welcher besagt, dass die Variable auf kein Objekt verweist.\nEs gibt zwei Unterarten von Referenztypen:\n Objektdatentyp, repräsentiert ein beliebiges Objekt einer Klasse wie z.B. String (wird im nächsten Kapitel präsentiert) Array: Eine Datenstruktur fester Grösse, die dazu dient, mehrere Elemente gleichen Typs zu speichern (wird im übernächsten Kapitel präsentiert)  ","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/07_reference_types/","tags":"","title":"Referenztypen"},{"body":"Ziele  Ich weiss, warum das Testen in der Softwareentwicklung eine zentrale Bedeutung hat Ich kenne die gängigen Testarten in der Software-Entwicklung und deren Zweck Ich kenne die wichtigsten Funktionen des Frameworks JUnit 5 Ich kann für einfache Anwendungen selber Unit-Tests implementieren Ich kenne die wichtigsten Funktionen des Frameworks Mockito Ich weiss was Mocks und Spies sind und kenne den Unterschied dazwischen Ich weiss, was Test-Driven-Development ist und wie ich die Methodik anwenden kann  Einführung Tests in den unterschiedlichen Phasen der Softwareentwicklung dienen dazu festzustellen, ob die entwickelte Software die spezifizierten Anforderungen erfüllt oder nicht. Ausserdem können Tests Mängel in dem produzierten Code aufdecken noch bevor der Code produktiv geschaltet wird und stellen damit sicher, dass das Endprodukt fehlerfrei funktioniert.\nTests sind vor allem aus folgenden Gründen sehr wichtig und sollen entsprechend sehr früh (dazu später) in den Entwicklungsprozess integriert werden:\n Testing erhöht die Qualität des entwickelten Produkts da damit Mängel frühzeitig entdeckt und beseitigt werden können Testing gibt mehr Sicherheit bei Änderungen am Code da damit sichergestellt werden kann, dass die Änderung nicht zu unerwünschten Nebenwirkungen geführt haben. Testing spart Geld da damit weniger Nachbearbeitungsaufwand in Form von Bug/Hot-Fixes betrieben werden muss. Testing führt zu höherer Kundenzufriedenheit da damit weniger Fehler den Kunden davor hindern, fehlerfrei mit dem Produkt zu arbeiten  Testarten Es gibt viele verschiedene Softwaretestverfahren und Methoden, mit denen sichergestellt werden kann, dass Änderungen am Code wie erwartet funktionieren.\nSoftwaretests können in zwei Bereiche unterteilt werden: manuelles Testen und automatisiertes Testen. Beim manuellen Testen werden Testfälle manuell durch einen Menschen und ohne Unterstützung durch Werkzeuge oder Skripte ausgeführt.\nBeim automatisierten Testen werden Testfälle jedoch mithilfe von Tools, Skripten und Software ausgeführt.\nHier werden wir uns auf das automatisierte Testen konzentrieren, da dieses im Softwareentwicklungsprozess essenziell ist.\nUnit-Tests Unit-Tests sind sehr einfach und erfolgen nah an der Quelle der Anwendung.\nSie dienen zum Testen einzelner Methoden und Funktionen der von der Software verwendeten Klassen, Komponenten oder Module.\nMit Unit-Tests stellen wir sicher, dass eine Applikation mit ihren Funktionen genau das macht, was eigentlich beabsichtigt war. Dazu genügt es nicht nur die “guten” Fälle zu testen, es sollten auch Tests für Grenzwerte durchgeführt werden. Ein Unit-Test ist immer ein sog. “White-Box” Test, da der Entwickler bei der Implementation von Unit-Tests den Sourcecode kennt oder ihn einsehen kann.\nBei Unit-Tests in Java ist der Testumfang eines Unit-Tests normalerweise in der Grössenordnung einer Methode.\nIn der Regel lassen sich Unit-Tests automatisieren und können einzeln oder auch in Gruppen (sog. Test-Suites) lokal (an der eigenen Maschine) oder von einem Continuous-Integration-Server (eine externe Maschine, der dafür sorgt, dass Programmteile sofort getestet und zusammengeführt werden können) sehr schnell durchgeführt werden.\nIntegrations-Tests Mit Integrationstests wird sichergestellt, dass verschiedene Programmteile der Anwendung problemlos ineinandergreifen. So kann beispielsweise die Interaktion mit einer Datenbank oder das Zusammenspiel von Mikroservices getestet werden.\nTests dieser Art sind kostspieliger und können auch länger dauern als Unit-Tests, weil dafür mehrere Teile der Anwendung funktionsfähig sein müssen.\nEnd-to-End-Tests Bei End-to-End-Tests wird der Umgang des Benutzers (oder auch andere, externe Programme) mit der Software in einer vollständigen Anwendungsumgebung repliziert. Auf diese Weise wird das ordnungsgemässe Funktionieren von Benutzerabläufen überprüft. Die Szenarien können ganz einfach sein (z.B. Laden einer Website, Anmeldevorgang) oder auch sehr komplex (z.B. E-Mail-Benachrichtigungen, Onlinezahlungen).\nEnd-to-End-Tests sind sehr nützlich, aber auch aufwändiger zu erstellen und in automatisierter Form unter Umständen schwer zu verwalten. Es empfiehlt sich deshalb, eher weniger End-to-End-Tests zu implementieren und stattdessen eher auf weniger aufwändigen Testarten (Unit- und Integrationstests) zu setzen, um riskante Änderungen schnell erkennen zu können.\n Junit Zur Implementation von Unit-Tests steht in Java das Framework JUnit zur Verfügung. Die aktuellste Version ist 5.9.0. Dies ändert aber stetig, da das Produkt weiterentwickelt wird. Vielfach ist in Produkten und Projekten auch JUnit 4 im Einsatz. In diesem Modul wird jedoch nur die aktuellste Version von JUnit behandelt. Wir schreiben Unit-Tests also mit JUnit 5.\nWie ist JUnit 5 aufgebaut? Das Framework besteht aus folgenden Teilen:\n   Teil Verwendung     JUnit Plattform Grundlage zur Einführung von Testframeworks in die JVM. Definition der Test-Engine zur Entwicklung von Testframeworks auf der jeweiligen Plattform. Plattform-Konsole zum Starten der Plattform. Kurz gesagt: Plattform zur Ausführung von Unit-Tests   JUnit Jupiter Programmiermodell zur Implementation von Unit-Tests   JUnit Vintage Ermöglicht die Ausführung von Tests, die mit JUnit 3 oder JUnit 4 geschrieben wurden    Wo kann ich das Framework herunterladen? Damit wir nun Unit-Tests implementieren können benötigen wir zuerst die Bibliotheken von JUnit 5, dies wird in den beiden folgenden Abschnitten beschrieben.\nAbhängigkeiten einbinden ohne Maven Dieser Abschnitt kann übersprungen werden, wenn mit einem Maven-Projekt gearbeitet wird. Alle Bibliotheken sind unter den beiden folgenden Links zu finden:\n org.junit.jupiter org.junit.platform  Die folgenden JARs werden benötigt:\n Aus dem ersten Link  junit-jupiter-engine junit-jupiter-params junit-jupiter junit-jupiter-api   Aus dem zweiten Link  junit-platform-engine junit-platform-commons    Die Einbindung in ein Projekt muss (ohne Maven) manuell gemacht werden. Die folgende Anleitung soll dabei helfen:\n   # Beschreibung Screenshot     1 Ordner für Bibliotheken im Projekt anlegen. Im Projekt (Root) einfach einen neuen Ordner “lib” erzeugen.    2 Die oben genannten JAR-Bibliotheken in den neuen Ordner kopieren    3 Projekteinstellungen öffnen. Das Projekt mit einem Klick markieren und Taste F4 drücken. Die Projekteinstellungen werden geöffnet    4 Auf der linken Seite den Tab “Libraries” auswählen    5 Oben auf das Plus-Icon klicken und Java auswählen    6 Die vorhin kopierten Bibliotheken auswählen und alle Dialoge mit OK bestätigen    7 Die Bibliothek muss anschliessend dem Modul hinzugefügt werden. Der Scope sollte auf Test gestellt werden, da es sich um reine Test-Bibliotheken handelt.     Abhängigkeiten einbinden mit Maven Dieser Abschnitt kann übersprungen werden, wenn es sich nicht um ein Maven Projekt handelt.\nDie entsprechenden Abhängigkeiten für das Project Object Model (pom.xml) sind:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55  \u003cdependencies\u003e \u003c!-- Plattform --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter\u003c/artifactId\u003e \u003cversion\u003e5.9.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c!-- API, enthält unter anderem alle Annotationen --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-api\u003c/artifactId\u003e \u003cversion\u003e5.9.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c!-- Test-Engine zur Ausführung von Unit-Tests, die mit JUnit 5 geschrieben wurden --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-engine\u003c/artifactId\u003e \u003cversion\u003e5.9.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c!-- JUnit 5 Erweiterung für parametrisierte Tests (Optional) --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.jupiter\u003c/groupId\u003e \u003cartifactId\u003ejunit-jupiter-params\u003c/artifactId\u003e \u003cversion\u003e5.9.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c!-- Test-Enginge zur Ausführung von Unit-Tests, die mit JUnit 3 oder JUnit 4 geschrieben wurden (Optional) --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.vintage\u003c/groupId\u003e \u003cartifactId\u003ejunit-vintage-engine\u003c/artifactId\u003e \u003cversion\u003e5.9.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c!-- Bibliotheken für die Ausführung von Unit-Tests --\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.platform\u003c/groupId\u003e \u003cartifactId\u003ejunit-platform-engine\u003c/artifactId\u003e \u003cversion\u003e1.9.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.junit.platform\u003c/groupId\u003e \u003cartifactId\u003ejunit-platform-commons\u003c/artifactId\u003e \u003cversion\u003e1.9.0\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e   Füge diese Abhängigkeiten (ohne die optionalen) in dein pom.xml ein. Danach besitzt du alle Bibliotheken, die zur Implementation von Unit-Tests notwendig sind.\nOrdnerstruktur anlegen Um Unit-Tests implementieren zu können benötigen wir grundsätzlich die folgende Ordnerstruktur im IntelliJ IDEA.\nFalls dein Projekt kein Maven-Projekt ist, kannst du die Verzeichnisse einfach manuell anlegen. Mit einem Rechtsklick auf die Verzeichnisse, kannst du sie mit dem Befehl “Mark Directory as” aus dem Kontext-Menü wie folgt markieren:\n   Verzeichnis Markierung Zweck     src/main/java Sources Root Source Code deiner Applikation   src/main/resources Resources Root Ressourcen deiner Applikation, die nicht Programmcode sind   src/test/java Test Sources Root Source Code deiner Unit-Tests   src/test/resources Test Resources Root Ressourcen deiner Unit-Tests, die nicht Programmcode sind    Diese Ordnerstruktur wurde ursprünglich vom Projektmanagement-Tool Gradle “erfunden” und dann von Maven übernommen. Stand heute ist dies die Standard-Ordnerstruktur innerhalb von Java-Projekten.\nImplementation von Unit-Tests an einem Beispiel Nach all den Vorbereitungen sind wir nun bereit Unit-Tests zu implementieren. Der folgende Abschnitt beschreibt die Grundlagen für das Schreiben von Unit-Tests.\nDas JUnit-Framework\n nutzt Assertions, um Resultate innerhalb eines Tests zu überprüfen nutzt Annotationen, um Testfälle zu finden und durchzuführen  Erklärung Beispiel einer Unit-Test Implementation anhand eines einfachen Beispiels.\nSource-Code\n1 2 3 4 5 6 7  package ch.sbb.talentfactory.calculator; public class Calculator { public int add(int i1, int i2) { return i1 + i2; } }   Test-Code\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  package ch.sbb.talentfactory.calculator; import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class CalculatorTest { private Calculator uut = new Calculator(); @Test public void testAdd() { // prepare test data  int i1 = 5; int i2 = 9; // call method  int result = this.uut.plus(i1, i2); // verify  assertEquals(14, result); } }   Der Unit-Test befindet sich im gleichen Package wie die zu testende Klasse. Innerhalb der weiter oben genannten Ordnerstruktur ist die Test-Klasse aber nicht am gleichen Ort abgelegt! Innerhalb des Unit-Tests wird zuerst eine Instanz der zu testenden Klasse angelegt. Die Bezeichnung für diese Instanz lautet normalerweise UUT, dies steht für “Unit Under Test”. Für jeden Test einer der Methoden aus dem UUT wird anschliessend eine Test-Methode implementiert. Diese Methoden sind mit @Test zu annotieren, so werden sie anschliessend vom Test-Framework als eigenständiger Test erkannt und ausgeführt. Ein Unit-Test kann beliebig viele Testmethoden enthalten. Grundsätzlich reichen aber je nach Funktionalität ein paar wenige Tests aus, um die ganze Funktionalität einer Methode zu überprüfen. Innerhalb der Test-Methoden implementieren wir dann “normalen” Programmcode, welcher den Code aus dem UUT “überprüft”. In unserem Beispiel setzen wir zwei Variablen und rufen damit die zu testende Methode auf. Mit einer Assertion vergleichen wir dann einen erwarteten Wert mit dem von der Methode zurückgelieferten Resultat. Beachte, dass der erwartete Wert in der Assertion immer an erster Stelle stehen muss. Wenn die beiden Werte identisch sind, dann ist der Unit-Test erfolgreich.\nVorgehen beim Schreiben von Unit-Tests Grundsätzlich sollte die AAA-Methode angewendet werden, sie ist auch im Beispiel oben ersichtlich. AAA steht für “Arrange”, “Act” und “Assert”. “Arrange” steht dabei für die Vorbereitung des Tests, “Act” ist die eigentliche Durchführung und mit “Assert” werden die Resultate des Tests überprüft.\nGrenzwerte austesten Vielfach sind gewisse Funktionen in einer Applikation so implementiert, dass sie sich mit wenigen Unit-Tests komplett testen lassen. Dazu ein kleines Beispiel: gegeben ist ein Rechteck mit bestimmten Koordinaten (Ecke oben links) und einer bestimmten Grösse (Höhe und Breite).\nEine Methode innerhalb des Rechtecks dient dazu herauszufinden, ob eine bestimmte Koordinate inner- oder ausserhalb des Rechtecks liegt. Punkte, die auf dem Rand zu liegen kommen gelten in diesem Sinne nicht als innerhalb des Rechtecks.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package ch.sbb.talentfactory.rectangle; public class Rectangle { private int top; private int left; private int width; private int height; public Rectangle(int top, int left, int width, int height) { this.top = top; this.left = left; this.width = width; this.height= height; } public boolean isInside(int x, int y) { if (x \u003e left \u0026\u0026 x \u003c left + width) { if (y \u003e top \u0026\u0026 y \u003c top + height) { return true; } } return false; } }   Damit keine Verwirrung entsteht, hier das verwendete Koordinatensystem. Wie wir in der Implementation sehen können gibt es hier vier verschiedene Bedingungen. Das Ziel des Tests muss es also sein, dass wir alle diese Bedingungen überprüfen. Wenn immer möglich, sollten alle möglichen Kombinationen getestet werden. Nur so kann sichergestellt werden, dass die Methode wie gewünscht funktioniert. Aufgrund der AND-Verknüpfung werden die zweiten Bedingungen der jeweiligen Statements nicht mehr ausgewertet. Damit müssen die folgenden Kombinationen durch einen Unit-Test abgedeckt werden\n   Bedingung x \u003e left x \u003c left + width y \u003e top y \u003c top + height Resultat     Variante 1 False    False   Variante 2 True False   False   Variante 3 True True False  False   Variante 4 True True True False False   Variante 5 True True True True True    Dies bedeutet wir implementieren fünf Unit-Tests, um die Methode vollständig abzudecken.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  package ch.sbb.talentfactory.rectangle; import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class RectangleTest { // I know this is a square ;-)  private Rectangle uut = new Rectangle(0, 0, 10, 10); @Test public void testIsInside() { assertFalse(this.uut.isInside(-1, 5)); assertFalse(this.uut.isInside(11, 5)); assertFalse(this.uut.isInside(5, -1)); assertFalse(this.uut.isInside(5, 11)); assertTrue(this.uut.isInside(5, 5)); } }   Im IntelliJ gibt es wie bei der Ausführung einer Applikation auch die Möglichkeit einen Unit-Test zu debuggen. Zusätzlich können wir die Testabdeckung anschauen, wenn wir den Unit-Test mit “Coverage” durchlaufen lassen. Wenn der Test erfolgreich durchgelaufen ist, dann kann die getestete Klasse geöffnet werden.\nDie grünen Balken auf der linken Seite zeigen die Testabdeckung an. In diesem Fall sind sämtliche Zeilen durch einen Test durchlaufen worden.\nDa der Unit-Test nun alle Möglichkeiten der Methode abdeckt, kann ein einfaches Refactoring durchgeführt werden. In unserem Fall kann die Methode wie folgt vereinfacht werden:\n1 2 3  public boolean isInside(int x, int y) { return x \u003e left \u0026\u0026 x \u0026lt; left + width \u0026\u0026 y \u0026gt; top \u0026\u0026 y \u003c top + height; }   Der Test kann dann beliebig oft erneut durchgeführt werden, um das Refactoring zu überprüfen.\nAnnotationen von JUnit5 Die folgende Tabelle zeigt eine Übersicht über die wichtigsten Annotationen von JUnit 5. Mehr Informationen zu den jeweiligen Annotationen finden sich in den nächsten Kapiteln.\n   Annotation Beschreibung     @Test Bezeichnet einen Test   @ParameterizedTest Bezeichnet einen parametrisierten Test   @RepeatedTest Bezeichnet einen sich wiederholenden Test   @DisplayName Namensgebung für Testklassen und -methoden   @Disabled Möglichkeit eine Testklasse oder -methode nicht ausführen zu lassen   @TestMethodOrder\n@Order Ausführungsreihenfolge der Tests bestimmen.   @BeforeAll\n@BeforeEach\n@AfterAll\n@AfterEach Initialiserungen und Aufräumarbeiten vor und nach Unit-Tests    Parametrisierte Unit-Tests Der oben gezeigte Unit-Test ist ein typisches Beispiel für einen Test, der mit vielen unterschiedlichen Parametern durchlaufen werden sollte. Wenn wir den Test parametrisieren, können wir die Test-Methode wiederverwenden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  package ch.sbb.talentfactory.calculator; import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class CalculatorTest { private Calculator uut = new Calculator(); @ParameterizedTest @ValueSource(ints = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }) public void testAddParameterized(int operand1) { // call method  int result = this.uut.add(operand1, 5); // verify  assertEquals(operand1 + 5, result); } }   Der gezeigte Test wird so insgesamt neun Mal durchlaufen, wobei der Parameter operand1 jeweils die Werte des angegebenen Arrays durchläuft.\nWiederholende Unit-Tests Unit-Tests können mehrmals hintereinander ausgeführt werden, dabei wird die annotierte Test-Methode einfach mehrfach aufgerufen. Die Anzahl Aufrufe wird durch den Parameter in der Annotation bestimmt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  package ch.sbb.talentfactory.calculator; import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class CalculatorTest { private Calculator uut = new Calculator(); @RepeatedTest(10) public void testAddRepeated() { // prepare test data \tRandom random = new Random(); int i1 = random.nextInt(100); int i2 = random.nextInt(100); // call method  int result = this.uut.plus(i1, i2); // verify  assertEquals(i1 + i2, result); } }   Repetierende Tests können wie oben gezeigt benutzt werden, um beispielsweise mit generierten Zufallszahlen bestimmte Funktionen zu überprüfen.\nDisplay Names Testklassen und -methoden können mit der Annotation @DisplayName beliebig umbenannt werden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  package ch.sbb.talentfactory.calculator; import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; @DisplayName(\"Special test for calculator\") public class CalculatorTest { private Calculator uut = new Calculator(); @Test @DisplayName(\"Ultimate addition test\") public void testAdd() { // prepare test data  int i1 = 5; int i2 = 9; // call method  int result = this.uut.plus(i1, i2); // verify  assertEquals(14, result); } }   Der angegebene Name erscheint dann in der Testauswertung.\nTests ausschalten Testklassen und -methoden können mit der Annotation @Disabled aus den Testläufen ausgeschlossen werden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  package ch.sbb.talentfactory.calculator; import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; @Disabled(\"Test disabled until calculator is finished\") public class CalculatorTest { private Calculator uut = new Calculator(); @Test public void testAdd() { // prepare test data  int i1 = 5; int i2 = 9; // call method  int result = this.uut.plus(i1, i2); // verify  assertEquals(14, result); } }   Reihenfolge der Ausführung Die Reihenfolge von Tests bei der Ausführung kann durch die Verwendung von @TestExecutionOrder und @Order bestimmt werden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  package ch.sbb.talentfactory.calculator; import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; @TestExecutionOrder(OrderAnnotation.class) public class CalculatorTest { private Calculator uut = new Calculator(); @Test @Order(1) public void testAdd() { // prepare test data  int i1 = 5; int i2 = 9; // call method  int result = this.uut.plus(i1, i2); // verify  assertEquals(14, result); } @Test @Order(2) public void testAdd() { // prepare test data  int i1 = -1; int i2 = 3; // call method  int result = this.uut.plus(i1, i2); // verify  assertEquals(2, result); } }   Die Annotation @Order wird nur verwendet, wenn der Typ der Ausführung OrderAnnation.class ist. Weitere Angaben sind “Alphanumeric” (Sortierung nach Methodenname) und “Random” (Zufällige Ausführungsreihenfolge).\nDaten initialisieren / aufräumen Mit den Annotationen @BeforeEach, @AfterEach, @BeforeAll und @AfterAll können bestimmte Initialisierungen und Aufräumarbeiten vor und nach Unit-Tests ausgeführt werden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  package ch.sbb.talentfactory.calculator; import org.junit.jupiter.api.Test; import static org.junit.jupiter.api.Assertions.assertEquals; public class CalculatorTest { private Calculator uut = new Calculator(); @BeforeAll public static void setUpAll() { // Diese Methode wird VOR allen Test-Methoden EINMALIG ausgeführt \t} @BeforeEach public void setUp() { // Diese Methode wird VOR jeder Test-Methode ERNEUT ausgeführt \t} @Test public void testAdd() { // prepare test data  int i1 = 5; int i2 = 9; // call method  int result = this.uut.plus(i1, i2); // verify  assertEquals(14, result); } @AfterEach public void tearDown() { // Diese Methode wird NACH jeder Test-Methode ERNEUT ausgeführt \t} @AfterAll public static void tearDownAll() { // Diese Methode wird NACH allen Test-Methoden einmalig ausgeführt \t} }   Verwendung von Providern Bei der Verwendung von parametrisierten Tests ist es möglich, dem Unit-Test über einen Stream von Argumenten entsprechende Testdaten oder Instanzen von verschiedenen Objekten zukommen zu lassen. Das folgende Beispiel illustriert die Verwendung eines solchen Providers.\nVier Gewinnt Interface\n1 2 3  public interface ConnectFourCheck { String checkWin(String[][] board); }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  public class VierGewinntTest { private String[][] testBoard = { {\" \", \" \", \" \", \" \", \"O\"}, {\" \", \" \", \" \", \"O\", \"X\"}, {\" \", \" \", \" \", \"O\", \"X\"}, {\" \", \" \", \"O\", \"X\", \"X\"}, {\" \", \" \", \" \", \" \", \"X\"} }; // Alle Klassen des Streams (VierGewinntSolution1 und VierGewinntSolution2) implementieren das oben gezeigte Interface  private static Stream\u003cArguments\u003e instances() { return Stream.of( Arguments.of(new VierGewinntSolution1()), Arguments.of(new VierGewinntSolution2()) ); } @ParameterizedTest @MethodSource(\"instances\") public void testBoardWithWinnerX(ConnectFourCheck cfc) { try { String winner = cfc.checkWin(this.testBoard); assertEquals(\"X\", winner); } catch (Exception e) { fail(e); } } }   Mit einem solchen Provider kann derselbe Unit-Test für verschiedene Implementation (zum Beispiel eines Interfaces) wiederverwendet werden.\n Mockito Mockito ist ein Framework zum Erstellen und Benutzen von Mocks in Softwaretests. Es bietet die Möglichkeit, Verhalten von noch nicht implementierten Klassen und Methoden rudimentär zu simulieren, um so das zu testende System (trotz fehlender Teile) testen zu können. Mockito ermöglicht auch andere Systeme/Services zu simulieren, welche z.B. von einem anderen Team entwickelt werden wie auch solche, deren echtes Verhalten zum Testzweck nicht interessiert oder sogar nicht erwünscht ist (man will aber z.B. wissen, dass diese Systeme/Services vom getesteten Code angesprochen worden sind).\nMockito kann in Unit-Tests wie auch in Integrations-Tests verwendet werden.\nWo kann ich das Framework herunterladen? Wie bei JUnit, werden auch für die Arbeit mit Mockito die Bibliotheken davon benötigt.\nAbhängigkeiten einbinden ohne Maven Dieser Abschnitt kann übersprungen werden, wenn mit einem Maven-Projekt gearbeitet wird. Das letzte Release (aktuell 5.3.1) kann hier heruntergeladen werden: Mockito Core 5.3.1 Jar-Datei\nDie Heruntergeladene Jar-Datei kann nun genau wie die JUnit-Jar-Dateien eingebunden werden.\nAbhängigkeiten einbinden mit Maven Dieser Abschnitt kann übersprungen werden, wenn es sich nicht um ein Maven Projekt handelt.\nDie entsprechende Abhängigkeit für das Project Object Model (pom.xml) ist:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.mockito\u003c/groupId\u003e \u003cartifactId\u003emockito-core\u003c/artifactId\u003e \u003cversion\u003e5.3.1\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003eorg.mockito\u003c/groupId\u003e \u003cartifactId\u003emockito-junit-jupiter\u003c/artifactId\u003e \u003cversion\u003e5.3.1\u003c/version\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e \u003c/dependencies\u003e   Mockito Begriffe Mock Mocks sind ein vollständiger Ersatz für Objekte, Services usw., von denen der zu testende Code abhängt, um seine Kernlogik zu testen. Ein Mock kann so programmiert werden, dass es eine angegebene Ausgabe zurückgibt, wenn eine Methode des Mocks aufgerufen wird.\nMockito bietet eine Standardimplementierung für alle Methoden eines Mocks. Das bedeutet, dass beim Aufrufen einer Methode eines Mocks, nicht der “echte” Code der Methode aufgerufen wird, sondern es wird ein von Mockito vordefinierter Wert zurückgeliefert (abhängig vom Rückgabewert-Typ der Methode).\nEs gibt Situationen, in denen es nützlich sein kann, bestimmte Werte aus einer Methode zurückzuliefern statt die Mockito-Standardwerte. In diesen Situationen kann ein gewünschter Rückgabewert vorkonfiguriert werden, so dass beim Aufruf der Methode, dieser Wert zurückgeliefert wird.\nSpy Ein Spy (‘Spion’) ist im Wesentlichen ein Wrapper für eine “echte” Instanz eines gemockten Objekts. Dies bedeutet, dass eine neue Instanz des Objektes erforderlich ist und dann ein Spy darüber hinzugefügt wird.\nStandardmässig leiten Spies Methodenaufrufe an die “echten” Methoden des Objekts weiter. Das ist auch der Hauptunterschied zwischen Spies und Mocks. Letztere überschreiben den “echten” Methoden-Code.\nSpies bieten aber auch die Möglichkeit, bestimmte Methoden als Mock-Methoden vorzukonfigurieren. In solchen Fällen, wird der Methodenaufruf nicht auf den “echten” Code weitergeleitet, sondern es wird, wie beim Mock, der vorgegebene Rückgabewert zurückgeliefert.\nMockito Annotationen Damit die Mockito-Annotationen innerhalb eines JUnit-Tests verwendet werden könnten, müssen sie zuerst eingeschaltet werden. Eine Möglichkeit dies zu tun ist, die Unit-Test-Klasse mit @ExtendWith zu annotieren und als Parameter den Wert MockitoExtension.class anzugeben:\n1 2 3 4  @ExtendWith(MockitoExtension.class) public class MyUnitTest { //TODO write tests }   Die folgende Tabelle zeigt eine Übersicht über die wichtigsten Annotationen von Mockito:\n   Annotation Beschreibung     @Mock Mock-Objekte erzeugen lassen   @InjectMock Markiert ein Feld, welches mit Mocks initiiert wird   @Spy Spy-Objekte erzeugen lassen   @Captor ArgumentCaptor Objekte erzeugen lassen    Wie diese Annotationen verwendet werden, wird in den folgenden Kapiteln gezeigt.\n@Mock Annotation Diese Annotation wird dazu verwendet, um Mock-Objekte komplett von Mockito erzeugen zu lassen. Das heisst, die gesamte Mock-Funktionalität wird von Mockito zur Verfügung gestellt.\n1 2 3 4 5 6 7 8 9 10 11 12 13  @ExtendWith(MockitoExtension.class) public class MyUnitTest { @Mock private List\u003cString\u003e mockedList; // hier wird eine Liste von Strings gemockt.  // Mockito stellt eine rudimentäre Umsetzung für JEDE Methode der Liste zur Verfügung  @Test public void testMockedListSize() { mockedList.add(\"one\"); assertEquals(0, mockedList.size()); } }   Was mit einem Mock gemacht werden kann und wie der Mock vorkonfiguriert werden kann, wird in einem späteren Kapitel erklärt.\n@InjectMocks Annotation Wenn eine Klasse ein Objekt-Feld beinhaltet, kann Mockito dieses Feld mit einem Mock initiieren. Damit es funktioniert, muss das Feld entweder via Konstruktor, via Setter oder via Property-Injection initialisiert werden.\nIm folgenden Beispiel, hat die Klasse MyService ein Feld vom Typ DataService, welches mittels Konstruktor initialisiert werden kann:\n1 2 3 4 5 6 7 8 9 10 11 12 13  import java.util.List; public class MyService { private final DataService dataService; public MyService(DataService dataService) { this.dataService = dataService; } public int processData(List\u003cInteger\u003e numbers) { return dataService.sum(numbers); } }   1 2 3 4 5  import java.util.List; public interface DataService { int sum(List\u003cInteger\u003e numbers); }   Im Test, wird ein Mock für ein DataService erstellt und mit der Annotation @InjectMocks, via Konstruktor-Initialisierung in dem MyService-Objekt injektiert (der Konstruktor muss also nicht noch dazu aufgerufen werden):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.InjectMocks; import org.mockito.Mock; import org.mockito.junit.jupiter.MockitoExtension; import java.util.Arrays; import java.util.List; import static org.junit.jupiter.api.Assertions.assertEquals; @ExtendWith(MockitoExtension.class) public class MyServiceTest { @Mock private DataService dataService; // hier wird ein DataService gemockt.  @InjectMocks private MyService myService; // der Mock von DataService wird in die MyService-Instanz \"injiziiert\", das heisst  // überall im DataService-Objekt, wo der DataService verwendet wird, wird der Mock zum Zug kommen!  @Test public void testProcessData() { List\u003cInteger\u003e numbers = Arrays.asList(1, 2, 3, 4, 5); Mockito.when(dataService.sum(numbers)).thenReturn(15); int result = myService.processData(numbers); assertEquals(15, result); } }   @Spy Annotation Ein Spy wird auf einem “echten” Objekt erzeugt. Dieser Spy leitet, sofern nichts anderes konfiguriert wurde, alle Methodenaufrufe an das echte Objekt weiter. Mit Hilfe der Mockito-Methoden, kann jedoch definiert werden, dass bestimmte Methoden “umgeleitet” werden und eine andere Umsetzung dafür angewendet wird.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.*; import org.mockito.junit.jupiter.MockitoExtension; import java.util.List; import static org.junit.jupiter.api.Assertions.assertEquals; @ExtendWith(MockitoExtension.class) public class MyUnitTest { @Spy private List\u003cString\u003e spiedList; // Ein Spy über eine Liste. Wenn nichts anders konfiguriert wird  // werden die \"echte\" Listen-Methoden aufgerufen, wenn der Spy verwendet wird.  @Captor private ArgumentCaptor\u003cString\u003e stringCaptor; // stringCaptor wird ein Argument vom Typ String \"fangen\"  @Test public void testMockedList() { spiedList.add(\"one\"); Mockito.verify(spiedList).add(stringCaptor.capture()); // während der Prüfung wird das Argument  // für die Methode add() gefangen  // und im stringCaptor aufbewahrt  assertEquals(\"one\", stringCaptor.getValue()); // mit getValue() kann das gefangene Argument inspiziert werden  } }   Wie ein Spy verwendet werden kann, um nur einige Methoden umzuleiten, wird in einem späteren Kapitel erklärt.\n@Captor Annotation Ein ArgumentCaptor kann Argumente einer Methode “fangen” damit diese danach inspiziert werden könnten.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.ArgumentCaptor; import org.mockito.*; import org.mockito.junit.jupiter.MockitoExtension; import java.util.List; import static org.junit.jupiter.api.Assertions.assertEquals; @ExtendWith(MockitoExtension.class) public class MyUnitTest { @Mock private List\u003cString\u003e mockedList; @Captor private ArgumentCaptor\u003cString\u003e stringCaptor; // stringCaptor wird ein Argument vom Typ String \"fangen\"  @Test public void testMockedList() { mockedList.add(\"one\"); Mockito.verify(mockedList).add(stringCaptor.capture()); // während der Prüfung wird das Argument  // für die Methode add() gefangen  // und im stringCaptor aufbewahrt  assertEquals(\"one\", stringCaptor.getValue()); // mit getValue() kann das gefangene Argument inspiziert werden  } }   Mockito statische Methoden Mockito stellt mehrere statische Methoden zur Verfügung, welche das Konfigurieren von Mocks und Spies wie auch deren Überwachung ermöglichen. In diesem Kapitel werden die wichtigsten Methoden anhand von Beispielen erklärt.\nMockito.when kombiniert mit Mockito.thenReturn Die Mockito.when Methode kombiniert mit der Methode Mockito.thenReturn ermöglicht es, die Standardimplementierung einer Methode für ein gegebenen Mock zu überschreiben. Dasselbe kann auch mit der Kombination Mockito.doReturn und danach when erreicht werden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  @ExtendWith(MockitoExtension.class) public class MyUnitTest { @Mock private List\u003cString\u003e mockedList; // eine Mock-Liste, mit Mockitos-Standardimplementierung für alle Methoden  @Test public void testMockedList() { assertEquals(0, mockedList.size()); // die Mockito-Standardimplementierung für \"size()\"  // liefert immer 0 zurück  Mockito.when(mockedList.size()).thenReturn(10); // hier wird die Standardimplementierung der Methode  // size() auf dem Mock-Objekt überschrieben,  // sodass immer der Wert 10 zurückgeliefert wird.  assertEquals(10, mockedList.size()); Mockito.doReturn(20).when(mockedList).size(); // auch hier wird die Standardimplementierung der Methode  // size() auf dem Mock-Objekt überschrieben,  // diesmal mit dem Wert 20.  assertEquals(20, mockedList.size()); } }   Mockito.verify Die Mockito.verify Methode prüft, ob eine Interaktion mit dem Mock/Spy-Objekt stattgefunden hat. Geprüft werden kann unter anderem folgendes (weitere Prüfungen werden hier anhand von Beispielen erklärt):\n Es gab keine Interaktion mit dem Mock/Spy Es gab eine Interaktion mit dem Mock/Spy Es gab eine gewisse Anzahl an Interaktionen mit dem Mock/Spy Es gab mindestens eine gewisse Anzahl an Interaktionen mit dem Mock/Spy Es gab nicht mehr als eine gewisse Anzahl an Interaktionen mit dem Mock/Spy  Interaktion in diesem Sinn kann entweder eine Interaktion mit dem Objekt oder mit einer seiner Methoden sein.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  import org.junit.jupiter.api.Test; import org.junit.jupiter.api.extension.ExtendWith; import org.mockito.*; import org.mockito.junit.jupiter.MockitoExtension; import java.util.List; import static org.mockito.Mockito.*; @ExtendWith(MockitoExtension.class) public class MyUnitTest { @Mock private List\u003cString\u003e mockedList; // eine Mock-Liste, mit Mockitos-Standardimplementierung für alle Methoden  @Spy private List\u003cString\u003e spiedList; // ein Spy über eine Liste.  @Test public void testSpiedList() { spiedList.add(\"one\"); // hier wird die \"echte\" add Methode einer Liste aufgerufen!  verify(spiedList).add(\"one\"); // prüfe, ob die \"add\" Methode mit dem Parameter \"one\" auf dem spyList aufgerufen wurde  verify(spiedList, never()).size(); // prüfe, ob die size() Methode nie aufgerufen wurde  spiedList.clear(); spiedList.clear(); verify(spiedList, times(2)).clear(); // prüfe, ob die clear() Methode genau 2 Mal aufgerufen wurde  } @Test public void testMockedList() { Mockito.verifyNoInteractions(mockedList); // bis hier gab es keine Interaktionen mit dem mockedList Objekt  mockedList.size(); mockedList.size(); mockedList.size(); mockedList.size(); verify(mockedList, atLeast(1)).size(); // prüfe, ob die size() Methode mindestens einmal aufgerufen wurde  verify(mockedList, atMost(5)).size(); // prüfe, ob die size() Methode nicht mehr als 5 Mal aufgerufen wurde  } }    Test Driven Development (TDD) Test Driven Development (TDD) (Testgetriebene Entwicklung) ist ein Softwareentwicklungsansatz, bei dem ein Test geschrieben wird, bevor der Code geschrieben wird. Sobald der neue Code den Test besteht, wird er auf einen akzeptablen Standard umgestellt.\nTDD stellt sicher, dass der Quellcode gründlich getestet wird und zu modularisiertem, flexiblem und erweiterbarem Code führt. Es konzentriert sich darauf, nur den Code zu schreiben, der notwendig ist, um Tests zu bestehen, wodurch das Design einfach und klar wird.\nMit TDD kann der Programmierer beim Schreiben von Software kleine Schritte unternehmen.\nDer Test wird vor dem Testen der Funktionalität geschrieben und stellt sicher, dass die Anwendung für die Testbarkeit geeignet ist, erst danach wird die Funktionalität implementiert. Dies wird als „Rot-Grün-Refaktor“ bezeichnet, wobei Rot bedeutet, fehlgeschlagen zu sein, und Grün zeigt einen erfolgreichen Durchlauf an. Diese Schritte werden dann wiederholt.\nSchritte eines test gesteuerten Entwicklungszyklus Der test-gesteuerte Entwicklungszyklus besteht aus folgenden, sich immer wiederholenden, Schritten:\n Hinzufügen eines Tests, der fehlschlägt: Jedes neue Feature in TDD beginnt mit einem Test, der nach seiner Implementation fehlschlagen muss, bevor die Features implementiert werden. Code schreiben und damit den Test “begrünen”: Es wird nur soviel Code geschrieben, wie zum “Begrünen” des Tests nötig ist - nicht mehr! (alle bisherigen Tests müssen weiterhin erfolgreich durchlaufen!!) Code verbessern, ohne dabei die Funktionalität zu verändern (Refactor): Code bereinigen (z.B. das Entfernen von Duplikaten, kleinere Methoden usw.) und auf “Clean Code” Standard bringen  TDD Walkthrough In diesem Walkthrough wird der TDD Entwicklungszyklus anhand eines Beispiels erläutert.\nIn diesem Beispiel geht es darum eine Klasse zu schreiben, welche ein Tier modelliert. Das Tier soll uns informieren, ob es Hunger hat oder nicht.\nHinweis im Beispielcode, wird folgendes Namensschema für Tests verwendet:\n1 2 3  public void given_when_then() { ... }   Wobei:\n given die Ausgangslage definiert (z.B. newAnimal oder animalAte) when ist der Name der Methode, welche getestet wird (z.B. isHungry) then ist das Ergebnis, welche erwartet wird (z.B. returnTrue oder returnFalse)  Schritt 1: Grundgerüst erstellen Es wird nur die Klasse erstellt, welche dann getestet werden soll:\n1 2  public class Animal { }   Schritt 2: Fehlschlagender Test schreiben 1 2 3 4 5 6 7  public class AnimalTest { @Test public void newAnimal_isHungry_returnTrue() { Animal myAnimal = new Animal(); assertTrue(myAnimal.isHungry()); } }   Zu diesem Zeitpunkt existiert die Methode “isHungry” nicht (Kompilierfehler) und natürlich gibt sie kein “true” zurück. Im nächsten Schritt wird die Methode hinzugefügt und der Test “begrünt”.\nSchritt 3: Test “begrünen” 1 2 3 4 5  public class Animal { public boolean isHungry() { return true; } }   Der Test, welcher vorher geschrieben wurde, kompiliert nun und kann erfolgreich durchlaufen werden. Somit ist dieser Zyklus beendet (es gibt noch nichts, was refactored werden soll)\nSchritt 4: Neuer, fehlschlagender Test schreiben 1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class AnimalTest { @Test // Dieser Test ist nun grün...  public void newAnimal_isHungry_returnTrue() { Animal myAnimal = new Animal(); assertTrue(myAnimal.isHungry()); } @Test public void animalAte_isHungry_returnFalse() { Animal myAnimal = new Animal(); animal.eat(); // Kompilierfehler, da es diese Methode noch nicht gibt  assertFalse(myAnimal.isHungry()); } }   Schritt 5: zweiter Test “begrünen”, ohne den ersten Test “kaputt” zu machen In diesem Schritt finden wir heraus, dass wir einen Hunger-Zustand für unser Tier haben müssen, welcher sich ändert, wenn das Tier gefressen hat:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  public class Animal { private boolean isHungry = true; // müssen wir hier so setzen, damit der erste Test noch funktioniert!  public boolean isHungry() { if (isHungry) { return true; } else { return false; } } public void eat() { isHungry = false; } }   Nach diesem Schritt kompiliert der Test wieder erfolgreich und beide Tests werden erfolgreich durchlaufen.\nSchritt 6: Refactor Unser Code kann nun eleganter geschrieben werden, ohne dabei die Funktionalität zu ändern:\n1 2 3 4 5 6 7 8 9 10 11  public class Animal { private boolean isHungry = true; public boolean isHungry() { return isHungry; // if-else ersetzt, da nicht nötig  } public void eat() { isHungry = false; } }   Somit ist auch dieser Zyklus beendet.\nDer code wird so stetig weiterentwickelt und neue Funktionalitäten werden auf diese Weise Schritt für Schritt und getestet hinzugefügt. Dabei werden die bereits bestehenden Funktionalitäten durch die bisherigen Tests vor ungewollten Änderungen geschützt.\n","categories":"","description":"Modul #J4\n","excerpt":"Modul #J4\n","ref":"/docs/java/java-testing/","tags":"","title":"Testing"},{"body":"Ziele  Du weisst, was Unit-Tests in Angular sind. Du kannst, beschrieben welche Blöcke es in einem Unit-Test gibt.  Unit Testing Testdateien (.spec.ts Files) sind Teil des Test-Frameworks, das in Angular integriert ist. Sie dienen dazu, verschiedene Components, Services, Directives, Pipes etc in einer Angular-Anwendung zu testen. Das Testen ist ein wichtiger Bestandteil der Entwicklung, da es hilft, die Funktionalität einer Anwendung zu überprüfen, Fehler zu identifizieren und sicherzustellen, dass Änderungen keine unerwünschten Nebenwirkungen haben.\nAls Beispiel sieht man einen minimalen Test, welcher für den AppComponent erstellt wurde:\n1 2 3 4 5 6 7 8 9 10 11  // app.component.ts import { Component } from '@angular/core'; @Component({ selector: 'app-root', templateUrl: './app.component.html', styleUrls: ['./app.component.scss'] }) export class AppComponent { title = 'docs-project'; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  // app.component.spec.ts import { TestBed } from '@angular/core/testing'; import { RouterTestingModule } from '@angular/router/testing'; import { AppComponent } from './app.component'; describe('AppComponent', () =\u003e { beforeEach(() =\u003e TestBed.configureTestingModule({ imports: [RouterTestingModule], declarations: [AppComponent] })); it('should create the app', () =\u003e { const fixture = TestBed.createComponent(AppComponent); const app = fixture.componentInstance; expect(app).toBeTruthy(); }); it(`should have as title 'docs-project'`, () =\u003e { const fixture = TestBed.createComponent(AppComponent); const app = fixture.componentInstance; expect(app.title).toEqual('docs-project'); }); it('should render title', () =\u003e { const fixture = TestBed.createComponent(AppComponent); fixture.detectChanges(); const compiled = fixture.nativeElement as HTMLElement; expect(compiled.querySelector('.content span')?.textContent).toContain('docs-project app is running!'); }); });   Wozu die einzelnen Blöcke und Methoden im Testfile sind wird nachfolgend besser erläutert.\n Test-Suites (describe-Blöcke): Eine Testdatei enthält normalerweise eine oder mehrere Test-Suiten. Eine Test-Suite fasst eine Gruppe von verwandten Tests zusammen. Zum Beispiel kann man eine Test-Suite für einen bestimmten Component oder einen bestimmten Service erstellen. Test-Cases (it-Blöcke): Innerhalb einer Test-Suite werden einzelne Test-Cases definiert. Ein Test-Case überprüft eine bestimmte Funktionalität oder ein bestimmtes Verhalten der Anwendung. Man kann mehrere Test-Cases innerhalb einer Test-Suite haben. Test-Setup (beforeEach-Block): Vor jedem Testfall kann man den beforeEach-Block verwenden, um Vorbereitungsschritte auszuführen. Zum Beispiel kann man einen Component initialisieren, Abhängigkeiten injizieren oder den Zustand der Anwendung festlegen. Dies stellt sicher, dass jeder Test-Case in einem konsistenten Zustand beginnt. Assertions: In den Test-Cases verwendet man Assertions, um zu überprüfen, ob das erwartete Verhalten erfüllt ist. Man kann verschiedene Assertions verwenden, um Eigenschaften, Zustände, Ausgaben oder Verhalten des Components zu überprüfen. Beispiele für Assertions sind expect(), toBe(), toEqual(), toContain(), toBeTruthy() etc.  ","categories":"","description":"Modul #F6 - Angular - Testing\n","excerpt":"Modul #F6 - Angular - Testing\n","ref":"/docs/web/angular/02_7_angular_unit_test/","tags":"","title":"Testfiles"},{"body":"Ziele  Du weisst, wie man ein Array/eine Liste erstellt und updated. Du weisst, wie man durch Arrays iteriert, und welcher Ansatz welche Vor-/Nachteile besitzt.  Arrays Basics Ein Array ist eine Datenstruktur in JavaScript, die eine geordnete Sammlung von Elementen speichert. Ein Array kann verschiedene Datentypen speichern, einschliesslich Zahlen, Zeichenketten und Objekten. Arrays werden in JavaScript durch eckige Klammern [] definiert und die Elemente innerhalb des Arrays werden durch Kommas getrennt.\n1 2 3  const array = [1, 2, 3, 'vier', 'fünf', {name: 'Max'}] console.log(array) // [1, 2, 3, 'vier', 'fünf', {name: 'Max'}]   Jedes Element im Array hat eine Indexposition, die bei 0 beginnt. Auf die Elemente eines Arrays kann zugegriffen werden, indem der Index des Elements in eckigen Klammern angegeben wird:\n1 2 3 4  const array = [1, 2, 3, 'vier', 'fünf', {name: 'Max'}] console.log(array[0]); // 1 console.log(array[3]); // 'vier'   Erstellen Um ein Array in JavaScript zu erstellen, kann man die eckigen Klammern-Notation verwenden und die Elemente durch Kommas trennen.\n1 2 3  const array = [1, 2, 3, 'vier', 'fünf', {name: 'Max'}]; console.log(array); // [1, 2, 3, 'vier', 'fünf', {name: 'Max'}]   Es kann auch ein leeres Array erstellt werden:\n1 2 3  const array = []; console.log(array); // []   Elemente verändern Um ein Element an einer bestimmten Position in einem Array anzupassen, wird der entsprechende Index des Elements in eckigen Klammern angeben. Anschliessen kann dieser Wert zugewiesen werden:\n1 2 3 4  let array = [1, 2, 3, 4, 5]; array[1] = 10; console.log(array); // [1, 10, 3, 4, 5]   Länge bestimmen Man kann die Länge (Anzahl der Elemente) eines JavaScript-Arrays mit der Eigenschaft length bestimmen.\n1 2 3  const array = [1, 2, 3, 4, 5]; console.log(array.length); // 5   Iterieren Um durch ein Array zu iterieren, gibt es mehrere Möglichkeiten. Die gängisten davon sind for, forEach und for of\nFor-Loop Der for Loop ist eine Loop, mit der man eine bestimmte Anzahl von Loop durchläufen ausführen kann. Der for Loop wird oft verwendet, um durch Arrays zu iterieren oder um eine Aktion eine bestimmte Anzahl von Malen auszuführen.\n1 2 3 4 5  const array = [1, 2, 3, 4, 5]; for (let i = 0; i \u003c array.length; i++) { console.log(array[i]); }   break Das break-Statement wird verwendet, um den Loop vorzeitig zu beenden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  const numbers = [1, 2, 3, 4, 5, 6]; for (let i = 0; i \u003c numbers.length; i++) { if (numbers[i] === 4) { break; } console.log(numbers[i]); } console.log('Loop beendet!'); // 1 // 2 // 3 // Loop beendet!   continue Das continue-Statement wird verwendet, um den aktuellen Durchlauf des Loops zu überspringen und mit dem nächsten Durchlauf fortzufahren.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  const numbers = [1, 2, 3, 4, 5, 6] for (let i = 0; i \u003c numbers.length; i++) { if (numbers[i] % 2 === 0) { continue; } console.log(numbers[i]); } console.log('Loop beendet!'); // 1 // 3 // 5 // Loop beendet!   forEach-Loop forEach ist eine Methode auf Arrays, um durch jedes Element des Arrays nacheinander zu iterieren. Der forEach-Loop ist eine kürzere Schreibweise, um durch ein Array zu iterieren.\nMan kann es in JavaScript mit der function() lösen:\n1 2 3 4 5 6 7 8 9 10 11  const array = [1, 2, 3, 4, 5]; array.forEach(function(element) { console.log(element); }); // 1 // 2 // 3 // 4 // 5    Wie in Kapitel Functions beschrieben, kann auch eine Arrow-Function verwendet werden:\n1 2 3 4 5 6 7 8  const array = [1, 2, 3, 4, 5]; array.forEach((element) =\u003e console.log(element)); // 1 // 2 // 3 // 4 // 5   Im Gegensatz zum for Loop bietet die forEach-Methode jedoch weniger Kontrolle über den Loop. Zum Beispiel kann man den Loop nicht mit break oder continue unterbrechen oder überspringen. Ausserdem gibt es so keine Möglichkeit, auf den Index jedes Elements im Array zuzugreifen. Wenn man den Index benötigen, müsste man einen Zähler verwenden.\nfor…of-Loop Der for (... of ...)-Loop ist dafür ausgelegt, Arrays oder andere iterierbare Objekte wie Maps, Sets, Strings usw. zu durchlaufen. Dieser Loop ist in der Regel einfacher zu lesen und zu schreiben als ein traditioneller for-Loop.\n1 2 3 4 5 6 7 8 9 10  const array = [1, 2, 3, 4, 5]; for (const element of array) { console.log(element); } // 1 // 2 // 3 // 4 // 5   Funktionen Hinzufügen Mit der push()Methode kann man ein Element am Ende des Arrays hinzufügen.\n1 2 3 4 5 6 7 8 9  let array = [1, 2, 3]; array.push(4) // einzelnes Element hinzufügen array.push(5, 6); // zwei Elemente aufs Mal hinzufügen  const x = 7; array.push(x); // Variablen funktionieren natürlich auch:  console.log(array); // [1, 2, 3, 4, 5, 6, 7]   Letztes Element entfernen Mit der Methode pop() kann man das letzte Element aus dem Array entfernen und zurückgeben.\n1 2 3 4 5  let array = [1, 2, 3, 4, 5]; const removedElement = array.pop(); console.log(array); // 1, 2, 3, 4] console.log(removedElement); // 5   Erstes Element entfernen Im Gegensatz zu pop() verwendet man shift() um das erste Element aus dem Array entfernen und zurückgeben zu können.\n1 2 3 4 5  let array = [1, 2, 3, 4, 5]; const removedElement = array.shift(); console.log(array); // [2, 3, 4, 5] console.log(removedElement); // 1   Elemente am Anfang hinzufügen Die Methode unshift()ist das Gegenstück zu der Methode shift(), mit der ein oder mehrere Elemente am Anfang des Arrays hinzugefügt werden können.\nunshift() gibt die neue Länge des Arrays zurückgibt.\n1 2 3 4 5  let array = [1, 2, 3]; const newLength = array.unshift(4, 5); console.log(array); // [4, 5, 1, 2, 3] console.log(newLength); // 5   Elemente austauschen Die Methode slice() entfernt Elemente aus einem Array und fügt neue Elemente an ihrer Stelle ein. Die splice() Methode nimmt drei Parameter an:\n den Index, an dem man beginnen möchten, die Anzahl der Elemente, die man entfernen möchten, und die neuen Elemente, die man einfügen möchte.  1 2 3 4  let array = [1, 2, 3, 4, 5]; array.splice(1, 1, 'new element 1', 'new element 2'); console.log(array); // [1, 'new element 1', 'new element 2', 3, 4, 5]   Elemente an bestimmter Position hinzufügen oder entfernen Die splice()-Methode wird verwendet, um Elemente im Array hinzuzufügen oder zu entfernen.\nsplice() ändert das ursprüngliche Array und gibt das gelöschte Element oder die gelöschten Elemente zurück.\nBeispiel für Elemente löschen:\n1 2 3 4 5  let array = [1, 2, 3, 4, 5]; const removedElements = array.splice(2, 2); console.log(array); // [1, 2, 5] console.log(removedElements); // [3, 4]   Beispiel für Elemente hinzufügen:\n1 2 3 4 5 6 7  let array = [1, 2, 3, 4, 5]; // An der 3. Stelle (Index 2), 0 Elemente entfernen. // Füge dort die Elemente 6 und 7 hinzu: array.splice(2, 0, 6, 7); console.log(array); // [1, 2, 6, 7, 3, 4, 5]   Arrays kombinieren Die concat() Methode gibt ein neues Array zurück, das aus der Verkettung (Zusammenführung) von zwei oder mehr Arrays besteht. Man kann somit mehrere Arrays zusammenmergen.\n1 2 3 4 5  const array1 = [1, 2, 3]; const array2 = [4, 5, 6]; const newArray = array1.concat(array2); console.log(newArray); // [1, 2, 3, 4, 5, 6]   Mehrere Arrays werden wie folgt miteinander verkettet:\n1 2 3 4 5  const array1 = [1, 2, 3]; const array2 = [4, 5, 6]; const array3 = [7, 8, 9]; let newArray = array1.concat(array2, array3); console.log(newArray); // [1, 2, 3, 4, 5, 6, 7, 8, 9]   Index eines Elements herausfinden Um den Index eines bestimmten Elements in einem Array zu finden, wird die Methode indexOf()verwendet.\nWenn das Element im Array nicht gefunden wird, gibt die Methode den Wert -1 zurück.\nBeispiel:\n1 2 3 4  const fruits = ['apple', 'banana', 'orange', 'pear']; const index = fruits.indexOf('banana'); console.log(index); // 1   Beispiel, wenn Element nicht gefunden wird:\n1 2 3 4  const fruits = ['apple', 'banana', 'orange', 'pear']; const index = fruits.indexOf('grape'); console.log(index); // -1   Man kann der Methode auch einen optionalen Parameter hinzufügen, der angibt, ab welchem Index die Suche beginnen soll. Wenn dieser Parameter nicht angegeben wird, wird die Suche ab Index 0 gestartet.\n1 2 3 4  const fruits = ['pear', 'banana', 'orange', 'pear']; const index = fruits.indexOf('pear', 1); console.log(index); // 3   ","categories":"","description":"Modul #F4 - JavaScript - Arrays/Listen und ihre Methoden.\n","excerpt":"Modul #F4 - JavaScript - Arrays/Listen und ihre Methoden.\n","ref":"/docs/web/javascript/08_js_arrays/","tags":"","title":"Arrays"},{"body":"Ziele  Ich kenne die Schlüsselwörter try, catch, finally, throw und throws Ich weiss was “Unchecked” und “Checked” Exceptions sind Ich kann auftretende Exceptions abhandeln Ich kann eigene Exceptions definieren und anwenden Ich kenne Multicatch und Try-With-Resources und kann die beiden Konstrukte anwenden Ich kenne die beiden Interfaces AutoCloseable und Closeable. Ich kenne eine Möglichkeit, um klar zu machen, dass bestimmte Werte “nullable” bzw. nicht “nullable” sind. Ich weiss, inwiefern Optionals meinen Code null-safer machen.  Theorie / Einleitung In jeder Applikation kann es zu erwarteten oder unerwarteten Fehlern kommen. In Java werden diese Fehler durch den Bereich Exception Handling abgedeckt. Im Exception Handling gilt es, durch gezieltes Abhandeln von auftretenden Exceptions, Abstürze der Anwendung zu verhindern. Jeder Software-Entwickler muss sich bewusst sein, dass nicht behandelte Exceptions eine Anwendung jederzeit beenden können.\nIn Java unterscheidet man zwischen zwei Arten von Fehlern:\n Error: das sind nicht reparierbare Laufzeitfehler oder ein Hardware-Problem, welche zum Absturz des Programms führen. Exception: das sind Fehler oder nicht geplante Ereignisse, welche während der Ausführung eines Programms vorkommen und dessen normalen Ablauf stören.  Eine Java-Applikation sollte nicht versuchen Errors zu “fangen”, da die meisten Fehler dieser Art wegen abnormalen Bedingungen (wie z.B. nicht genügend Speicher) auftreten und unter normalen Bedingungen nicht behoben werden können.\nExceptions sind hingegen unerwartete Fehler, auf die das Programm reagieren muss.\nInnerhalb des Java Exception Handling unterscheiden wir zwei Arten von Exceptions:\n Unchecked Exceptions: das sind Laufzeitfehler und sie werden durch den Compiler nicht erkannt. Checked Exceptions: das sind Fehler, welche vom Compiler zum Zeitpunkt der Kompilierung erkannt werden.  Unchecked Exceptions sind oft Fehler, welche bei der Implementation übersehen werden. Der häufigste Laufzeitfehler ist die NullPointerException. Diese kann erst zur Laufzeit auftreten, da nur zur Laufzeit Objekte erzeugt werden und damit eine Referenz überhaupt null sein kann.\nDie einzige Möglichkeit Laufzeitfehler abzuhandeln ist “Safe Programming”. Das heisst, dass wir während der Implementation Prüfungen und sog. “Guards” im Code einbauen (z.B. prüfen, ob eine Referenz nicht null ist bevor wir darauf zugreifen) um sicherzustellen, dass solche Situationen zur Laufzeit nicht auftreten.\nChecked Exceptions müssen zum Zeitpunkt der Kompilierung entweder am Ort des Auftretens abgehandelt werden oder sie werden an das Objekt weitergereicht, welches die entsprechende Methode aufgerufen hat. Damit wird auch die Verantwortung die Exception abzuhandeln an den Aufrufer weitergegeben.\nDazu ein kleines Beispiel:\n1 2 3 4 5  public static void main(String[] args) { PhoneBook phoneBook = new PhoneBook(); Person person = phoneBook.findByPhoneNumber(\"079 654 32 10\"); System.out.println(person.getName()); }   Ohne die Implementation der Methode findByPhoneNumber zu kennen, muss ein Software-Entwickler an dieser Stelle das zurückgelieferte Objekt vom Typ Person zuerst auf null prüfen.\nSchauen wir uns also die Implementation dieser Methode etwas genauer an:\n1 2 3 4 5 6 7 8 9 10 11 12  public class PhoneBook { private List\u003cPerson\u003e entries = new ArrayList\u003c\u003e(); public Person findByPhoneNumber(String number) { for (Person p: this.entries) { if (p.getPhoneNumber().equals(number)) { return p; } } return null; } }   Wie (vielleicht) erwartet liefert die Methode null zurück, falls kein Eintrag mit der gesuchten Nummer gefunden wird. Dies führt in der Main-Methode im Codeblock oben auf der letzten Zeile zu einer NullPointerException, da die Referenz der Person auf null zeigt. Abhilfe schafft hier ein einfaches If-Statement:\n1 2 3 4 5 6 7  public static void main(String[] args) { AddressBook addressBook = new AddressBook(); Person person = addressBook.findByPhoneNumber(\"079 654 32 10\"); if (person != null) { System.out.println(person.getName()); } }   Der Laufzeitfehler kann nun nicht mehr auftreten. Es stellt sich nun die Frage, ob wir mit dieser Lösung zufrieden sein können.\nIm Prinzip müssten wir zumindest informiert werden, wenn keine Person mit dieser Nummer gefunden wird. Eine Möglichkeit, dies zu tun ist mittel eines Else-Statement:\n1 2 3 4 5 6 7 8 9  public static void main(String[] args) { AddressBook addressBook = new AddressBook(); Person person = addressBook.findByPhoneNumber(\"079 654 32 10\"); if (person == null) { System.out.println(person.getName()); } else { System.out.println(\"Es wurde keine Person mit dieser Nummer gefunden!\"); } }   Eine andere Lösung könnte sein das Null-Object Pattern oder auch ein Optional-Objekt zu verwenden und damit ein gültiges Objekt anstelle von null zurückzuliefern.\n try / catch / finally Um eine Checked Exception abzuhandeln, muss der Block (welcher die Exception erzeugt) innerhalb eines try-Blocks angelegt werden. Der abzuhandelnde Exception-Typ wird dabei in den catch-Block geschrieben:\n1 2 3 4 5  try { // Code, welcher eine IOException werfen könnte } catch (IOException e) { // Code für die Abhandlung der IOException }   Ein solches Statement kann beliebig viele catch-Blöcke aufweisen:\n1 2 3 4 5 6 7 8  try { int[] array = new int[2]; array[3] = 30 / 0; } catch (ArithmeticException e) { // Code für die Abhandlung der ArithmeticException } catch (ArrayIndexOutOfBoundsException e) { // Code für die Abhandlung der ArrayIndexOutOfBoundsException }   Bei mehreren catch-Blöcken muss die spezifischste Exception stets zuoberst stehen. Je weiter unten der catch-Block steht, desto genereller wird die Exception, die abgefangen werden soll. Der Grund dafür ist, dass alle Checked Exceptions von der Klasse Exception abgeleitet sind. Steht eine allgemeinere Exception weiter oben, so wird der catch-Block der spezifischeren Exception weiter unten nicht mehr erreichbar sein.\nAn jeden try-Block (ob mit oder ohne catch-Block) kann zusätzlich ein finally-Block angehängt werden. Der finally-Block wird nach der Abhandlung der Exception ausgeführt.\nWenn kein Exception aufgetreten ist, wird der Code im finally-Block direkt nach dem Code im try-Block ausgeführt.\n1 2 3 4 5 6 7  try { // Code, welcher eine IOException werfen könnte } catch (IOException e) { // Code für die Abhandlung der IOException } finally { // Code, welcher nach der Abhandlung der Exception ausgeführt werden soll }   Wie oben erwähnt, kann der catch-Block weggelassen werden:\n1 2 3 4 5  try { // Code, welcher eine beliebige Exception werfen könnte } finally { // Code, welcher nach der Abhandlung der Exception ausgeführt werden soll }   Vorsicht ist geboten bei return-Anweisungen innerhalb von catch- oder finally-Blöcken. Da der finally-Block immer zuletzt ausgeführt wird, ist das Statement in diesem Block auch massgebend für die Funktionalität.\n throw / throws Wie bereits weiter oben erwähnt, muss eine Exception nicht immer dort abgehandelt werden, wo sie gerade auftreten kann. Wenn entschieden wird, die Abhandlung in andere Klassen zu verlagern, so kann mit dem Schlüsselwort throws angegeben werden, dass die aufrufende Komponente die Exception abhandeln muss.\nDazu ein kurzes Beispiel:\n1 2 3  public class EntryForbiddenException extends Exception { }   1 2 3 4 5 6 7 8  public class Saloon { public void checkAge(int age) throws EntryForbiddenException { if (age \u003c 18) { throw new EntryForbiddenException(); } // ...  } }   1 2 3 4 5 6 7 8 9 10  public class Main { public static void main(String[] args) { Saloon saloon = new Saloon(); try { saloon.checkAge(15); } catch (EntryForbiddenException e) { // ...  } } }   Wie wir sehen, wird die Abhandlung in die Main-Methode verlagert. Die Weitergabe von Exceptions kann über beliebig viele Stufen erfolgen.\nWird die Exception jedoch von der “obersten” Stufe (in diesem Fall die Main-Methode) nicht abgehandelt, so wird die Anwendung mit der entsprechenden Exception beendet. Dies passiert, weil niemand die Exception abgehandelt hat.\n Umwandlung Laufzeitfehler in Checked Exception Mit der Lösung aus dem Beispiel weiter oben können wir nicht wirklich zufrieden sein.\nAnstatt den Rückgabewert der Methode findByPhoneNumber auf null zu prüfen, wählen wir nun einen anderen Ansatz:\nWir erweitern die Anwendung, sodass die Methode als Rückgabewert keine null-Werte mehr liefert.\nDa wir aber durch den Compiler gezwungen werden einen Rückgabewert zu definieren, bleibt uns nur noch die Möglichkeit übrig eine Exception zu werfen. Zu diesem Zweck definieren wir zuerst einmal eine entsprechende Exception:\n1 2 3  public class PersonNotFoundException extends Exception { }   Diese Exception wird nun an der entsprechenden Stelle im Sourcecode geworfen. Die Methode erhält zudem noch eine Erweiterung mit dem Schlüsselwort throws:\n1 2 3 4 5 6 7 8 9 10 11 12  public class PhoneBook { private List\u003cPerson\u003e entries = new ArrayList\u003c\u003e(); public Person findByPhoneNumber(String number) throws PersonNotFoundException { for (Person p: this.entries) { if (p.getPhoneNumber().equals(number)) { return p; } } throw new PersonNotFoundException(); } }   Beim Aufruf der Methode sind wir nun gezwungen, die Exception abzuhandeln:\n1 2 3 4 5 6 7 8 9  public static void main(String[] args) { AddressBook addressBook = new AddressBook(); try { Person person = addressBook.findByPhoneNumber(\"079 654 32 10\");\tSystem.out.println(person.getName()); } catch (PersonNotFoundException e) { System.out.println(\"Es wurde keine Person mit dieser Nummer gefunden!\"); } }   Aus dem ursprünglichen Laufzeitfehler ist nun eine abgehandelte Exception geworden. Die Implementation vermeidet, wo immer möglich, die Rückgabe von null-Werten.\n Multi-Catch Seit Java 7 gibt es die Möglichkeit für einen sogenannten Multi-Catch.\nSchauen wir uns das folgende Beispiel an:\nOhne Multi-Catch 1 2 3 4 5 6 7 8 9 10 11 12 13  public static void main(String[] args) { Scanner scn = new Scanner(System.in); try { int n = Integer.parseInt(scn.nextLine()); if (99%n == 0) { System.out.println(n + \" is a factor of 99\"); } } catch (ArithmeticException ex) { System.out.println(\"Arithmetic Exception \" + ex); } catch (NumberFormatException ex) { System.out.println(\"Number Format Exception \" + ex); } }   Mit Multi-Catch 1 2 3 4 5 6 7 8 9 10 11  public static void main(String[] args) { Scanner scn = new Scanner(System.in); try { int n = Integer.parseInt(scn.nextLine()); if (99%n == 0) { System.out.println(n + \" is a factor of 99\"); } } catch (ArithmeticException | NumberFormatException ex) { System.out.println(\"Exception \" + ex); } }   Die beiden Exceptions werden in einem catch-Block zusammengefasst. Die Exceptions innerhalb eines Multi-Catch dürfen nicht in einer Vererbungsbeziehung zueinander stehen. Der Basistyp muss also unterschiedlich sein.\n Try-With-Resources Ebenfalls seit Java 7 gibt es die Möglichkeit für automatisches Ressourcen-Management.\nBetrachten wir dazu zuerst ein Beispiel ohne automatisches Ressourcen-Management:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  public static String readFirstLine(String path) { BufferedReader br = null; try { br = new BufferedReader(new FileReader(path)); return br.readLine(); } catch (IOException e) { // handle or rethrow  } finally { try { if (br != null) { br.close(); } } catch (IOException e) { // ignore  } } return \"\"; }   Der finally-Block ist notwendig, um die verwendete Ressource des Buffered-Readers zu schliessen.\nDa beim Schliessen aber eine IOException auftreten kann benötigen wir innerhalb des finally-Blocks einen zusätzlichen try-catch-Block.\nBetrachten wir nun das gleiche Beispiel mit automatischem Ressourcen-Management:\n1 2 3 4 5 6 7 8  public static String readFirstLine(String path) { try (FileReader fr = new FileReader(path); BufferedReader br = new BufferedReader(fr)) { return br.readLine(); } catch (IOException e) { // handle or rethrow  } return \"\"; }   Wie wir sehen fällt der finally-Block zum Schliessen der Ressourcen komplett weg.\nDie beiden Ressourcen FileReader und BufferedReader werden automatisch geschlossen. Dies geschieht im Hintergrund über die Methode close, welche vom Interface AutoCloseable zur Verfügung gestellt wird.\nIn einem try-with-resources Statement dürfen also nur Objekte vorliegen, welches das genannte Interface implementieren.\nDas Closeable-Interface mit der gleichen Funktion stellt dabei die Abwärtskompatibilität zu älteren Java-Versionen sicher.\nGrundsätzlich soll das Closeable-Interface für IO Streams verwendet werden, da es mit IOExceptions arbeitet.\nDas Schliessen der Ressourcen hat stets die Reihenfolge von hinten nach vorne.\nIn unserem Beispiel wird also zuerst der BufferedReader geschlossen und danach der FileReader.\nDie Verkettung von Ressourcen innerhalb eines try-with-resources Statements ist zu vermeiden. Besser sind separate Deklarationen wie oben gezeigt.\n Null-Safety Der häufigsten Laufzeitfehler in Java ist die NullPointerException. Diese Exception tritt auf, wenn\n eine Methode auf einem null-Objekt aufgerufen wird, oder wenn versucht wird, auf ein Feld (Variable) eines null-Objektes zuzugreifen.  Häufig wird einfach vergessen, dass eine bestimmte Variable null sein kann:\n1 2 3 4 5 6 7  public static void main(String[] args) { method(null); } private static void method(String parameter) { System.out.println(\"Länge des Wortes: \" + parameter.length()); }   Im letzten Beispiel wird versucht, die Methode length() auf dem Objekt mit Wert null aufzurufen. Aus diesem Grund wird die NullPointerException geworfen.\nIn diesem Beispiel sieht man ziemlich gut, wie NullPointerExceptions auftreten können:\n Einer Variable (hier parameter) wird null zugewiesen/übergeben, was aber nicht erlaubt sein sollte. Oder es wird vergessen, dass eine Variable auch den Wert null haben kann.  Diese beide Fälle können in Java auf verschiedene Arten abgedeckt werden.\nnull durch Check abfangen Die offensichtlichste Möglichkeiten, NullPointerExceptions zu umgehen ist die Verwendung von null-Checks. Im folgenden Beispiel verbieten wir den Wert null, indem wir zu Beginn der Methode die Variable auf null überprüfen und eine Exception werfen (und somit die Methode abbrechen), falls die Variable dem Wert null entspricht.\n1 2 3 4 5 6  private static void method(String parameter) throws IllegalArgumentException { if (parameter == null) { throw new IllegalArgumentException(\"Parameter parameter must not be null.\"); } System.out.println(\"Länge des Wortes: \" + parameter.length()); }   In diesem Beispiel haben wir den Fall abgedeckt, in welchem für das Argument der Wert null verbietet wird. Dieser Code hat neben den 3 zusätzlichen Zeilen Code den Nachteil, dass der/die Entwickler:in nicht direkt von aussen sieht, dass null-Werte verboten sind. Diesen Fall wird besser mit einer anderen Technik angegangen, die später vorgestellt wird (@NotNull-Annotation).\nSprechen wir aber nun über den Fall, in welchem der Wert null eigentlich auch unterstützt werden müsste. Statt einem Fehler zu werfen, benutzen wir Bedingungen, um den richtigen Code auszuführen:\n1 2 3 4 5 6 7  private static void method(String parameter) { if (parameter != null) { System.out.println(\"Länge des Wortes: \" + parameter.length()); } else { System.out.println(\"Länge fes Wortes: ist nicht definiert bzw. 0.\"); } }   Um hier null-Sicherheit zu garantieren, haben wir nun 3 Zeilen hinzugefügt, was relativ viel für diesen Zweck ist. In solchen Fällen lohnt es sich oft, nur den problematischen Teil durch eine Bedingung zu ersetzen. In Java hilft der “Ternary-Operator” weiter:\n1 2 3 4  private static void method(String parameter) { System.out.println(\"Länge des Wortes: \" + (parameter != null ? parameter.length() : \"ist nicht definiert bzw. 0.\")); }   Der Ternary-Ausdruck ist hierbei der folgende:\n1  parameter != null ? parameter.length() : \"ist nicht definiert bzw. 0.\"   Dieser Ausdruck gibt parameter.length() zurück, wenn parameter != null ist. Ansonsten gibt er den String \"ist nicht definiert bzw. 0.\" zurück.\nGanz allgemein ist der Ternary-Ausdruck wie folgt aufgebaut:\n1  Bedingung ? Wert-wenn-Bedingung-true : Wert-wenn-Bedingung-false   Annotationen wie @NotNull und @Nullable Sicherlich ist dir schon einmal die Angabe @Nullable bei einem Argument von einer Methode aus einer externen Library aufgefallen.\nSolche Annotationen teilen mit,\n dass bei einer Variable erwartet wird, dass sie unter Umständen auch den Wert null haben kann (@Nullable) bzw. dass eine Variable nicht den Wert null aufweisen darf (@NotNull bzw. @NonNull).  Für die folgenden Beispiele haben wir die Library org.jetbrains.annotations verwendet, es gibt aber weitere bekannte mit ähnlichen Annotationen. Da zu diesem Zeitpunkt noch nicht erklärt wurde, wie du Dependencies hinzufügen kannst (Maven-Teil), halten wir dies rein theoretisch.\nHier ein Beispiel, wie Annotationen zu mehr null-Sicherheit führen können:\n1 2 3 4 5 6 7 8 9 10 11 12  public static void main(String[] args) { method(\"Lightning Moon\", new String[]{\"Lightning\", \"Moon\"}); method(null, null); } private static void method(@Nullable String fullName, @NotNull String[] names) { System.out.println(fullName.length()); if (names != null) { System.out.println(Arrays.toString(names)); } }   In diesem Beispiel wird\n die Annotation @Nullable verwendet, um mitzuteilen, dass bei der Variable fullName der Wert null möglich ist. In IntelliJ Idea (von Jetbrains) wird dadurch die Methode length() gelb unterstrichen, weil für die Variable fullName der null-Check fehlt. die Annotation @NotNull verwendet, um mitzuteilen, dass die Variable names nicht den Wert null haben darf. Leider fügt diese Möglichkeit kein Warning beim Aufruf von method(..., null) hinzu. Dafür aber wird eine IllegalArgumentException zur Laufzeit geworfen, falls ihr null beim Methodenaufruf zugewiesen wird.  Optionals In Java gibt es auch ohne externe Dependency eine Möglichkeit anzugeben, dass eine Variable den Wert null “repräsentieren” kann.\nHierfür wurde die generische Klasse Optional\u003cT\u003e ins Leben gerufen.\nDie Idee ist, dass Variablen, die den Wert null haben können, den Typ Optional\u003c...\u003e bekommen. Für ein nullable String wird also z.B. der Typ Optional\u003cString\u003e gewählt:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import java.util.Optional; public static void main(String[] args) { // Richtige Verwendung von Optionals:  method(Optional.of(\"Hello World\")); // Repräsentiert den Wert \"Hello World\".  method(Optional.empty()); // Repräsentiert den Wert null.  // Falsche Verwendung von Optionals:  method(Optional.of(null)); // Null-Pointer, weil `Optional.of()` beim Wert `null` einen Fehler wirft.  method(null); // Null-Pointer, weil `isPresent()` nicht auf `null` aufgerufen werden kann. } private static void method(Optional\u003cString\u003e parameter) { System.out.println(\"Länge des Wortes: \" + (parameter.isPresent() ? parameter.get().length() : \"ist nicht definiert bzw. 0.\")); }   Der Nutzen von Optionals ist, dass man als Entwickler:in gezwungen wird, einen null-Check zu machen:\n1 2 3  if (optional.isPresent()) { System.out.println(\"Wert ist: \" + optional.get()); }   Denn\n wenn kein null-Check vor dem Aufrufen von .get() (was den eigentlichen Wert zurückgibt) gemacht wird , dann reklamiert deine Entwicklungsumgebung (IntelliJ/VS Code) automatisch mit einer Warnung. wenn .get() aufgerufen wird, und der Wert null repräsentiert, dann wird bereits an dieser Stelle eine NullPointerException geworfen.  Optionals sind daher eine der gängigsten Möglichkeiten, Entwickler:innen zu zwingen, Werte auf null zu prüfen.\nDiese Technik wird z.B. bei Streams häufig eingesetzt:\n1 2 3 4 5 6 7 8 9 10 11 12 13  Optional\u003cInteger\u003e firstResult = Stream .of(1, 2, 3, 4, 5) .filter(x -\u003e x % 6 == 0) .findFirst(); // Die Verwendung des Optionals zwingt einen dazu, den `.isPresent()`-Check zu machen, da es vorkommen könnte, // dass kein solches Element vorhanden ist, welches die Bedingung erfüllt:  if (firstResult.isPresent()) { System.out.println(\"Erste Zahl aus der 6er-Reihe: \" + firstResult.get()); } else { System.out.println(\"Keine Zahl aus der 6er-Reihe präsent.\"); }   Zusammenfassung zu Null-Safety Die NullPointerException ist eine der häufigsten Exceptions in Java-Programmen. Deswegen lohnt es sich, besser mit null-Werten umzugehen bzw. besser sichtbar zu machen, dass Werte null sein können.\nDrei der häufigsten Möglichkeiten, um mehr Null-Sicherheit in deinen Code zu bringen, sind:\n null-Checks Annotationen wie @NotNull und @Nullable und Optional\u003c...\u003e-Typen zu verwenden.   Jetzt bist du dran. Löse bitte die Aufgaben zu Exception Handling in den Labs.\n","categories":"","description":"Modul #J5 - Exception Handling\n","excerpt":"Modul #J5 - Exception Handling\n","ref":"/docs/java/java-exception_handling/","tags":"","title":"Exception Handling"},{"body":"Du hast nun viel über HTML gelernt. Jetzt kannst du die Aufgabe 4 in den Labs lösen.\nBeherrschst du HTML? Wenn ja, dann gib deinem HTML ein Styling - mit CSS! Fahre hier fort.\nHast du nicht alles verstanden oder du fühlst dich noch nicht so sattelfest? Dann kannst du gerne HTML noch ein bisschen üben. Wir empfehlen den HTML-Teil aus dem folgenden Kurs:\n Intro to HTML and CSS - Udacity  ","categories":"","description":"Modul #F3 - HTML und CSS - Wie weiter?\n","excerpt":"Modul #F3 - HTML und CSS - Wie weiter?\n","ref":"/docs/web/html_css/08_html_finish/","tags":"","title":"HTML Rekapitulieren"},{"body":"Ziele  Ich kann alle Komponenten auswendig aufzählen, die zu einer Methodendeklaration dazugehören. Ich kann auswendig die Regeln aufzählen, die ein Methodenname einhalten sollte (Konventionen). Ich schreibe Getter- und Setter-Methoden gemäss Namenskonventionen. Ich kann in eigenen Worten erklären, warum der Zugriffsmodifikator einer Methode so restriktiv wie möglich gewählt werden sollte. Ich kann die Voraussetzungen, um Methoden überladen zu können, vollständig aufzählen. Ich kann in eigenen Worten die Umstände erläutern, wann die equals- und die hashCode-Methode überschrieben werden sollten. Ich kann in eigenen Worten die Bedingungen beschreiben, welche bei der Überschreibung der Methode equals erfüllt werden müssen. Ich kann in eigenen Worten die Bedingungen beschreiben, welche bei der Überschreibung der Methode hashCode erfüllt werden müssen.  Instanzmethoden Methoden werden benutzt, um Funktionalitäten zur Verfügung zu stellen. Diese Funktionalitäten reichen von einfachen Änderungen am Zustand eines Objekts bis zu komplexen Algorithmen zur Berechnung von mathematischen Dingen. Hier passiert also die Magie in einer Applikation. Diese Methoden können also entweder den Inhalt von Datenfelder ändern oder ihre Werte verwenden, um eine bestimmte Berechnung durchzuführen.\nEine Methodendeklaration besteht aus bis zu sieben Komponenten:\n Zugriffsmodifikator: public, protected, private oder package-private. Der Zugriffsmodifikator sollte immer so restriktiv wie möglich gewählt werden. Sonstige Modifikatoren. Beispielsweise static oder synchronized. Rückgabewert. Der Datentyp des von der Methode zurückgegebenen Werts oder void, wenn die Methode keinen Wert zurückgibt. Methodenname / Bezeichner. Parameterliste in Klammern. Eine durch Kommas getrennte Liste von Eingabeparametern (Datentyp + Bezeichner). Wenn keine Parameter benötigt werden, genügt die Angabe der beiden Klammern. Exceptions (also welche Fehler, die die Methode wirft). Dazu mehr später im Modul Exception Handling. Methodenkörper (der Code in geschweiften Klammern, der die Methode ausführt).  Namenskonventionen für Methoden Methodennamen sollen - per Konvention - folgende Regeln einhalten:\n Erster Buchstabe ist immer klein. CamelCase: Alle Buchstaben sind klein. Wenn der Methodenname aus mehreren Worten besteht, wird jeweils der erste Buchstabe ab dem zweiten Wort grossgeschrieben. Beispiele: equals, printThisToConsole. Der Methodenname soll ein Verb enthalten, welches die Funktionalität der Methode beschreibt. Wenn es dem Verständnis der Funktionalität dient, wird dieses Verb zusammen mit einem Nomen zusammengesetzt. Der Methodenname soll möglichst aussagekräftig sein. Statt Abkürzungen sollen die einzelnen Wörter möglichst ausgeschrieben werden (ausser es handelt sich um sehr bekannte Abkürzungen).  Getter und Setter Eine get-Methode (Getter) ruft den Wert eines bestimmten Datenfelds ab und gibt diesen Wert zurück, während eine set-Methode (Setter) ihren Wert verändert. Dies dient dem Prinzip der Kapselung und kann unter anderem dazu verwendet werden, ein bestimmtes Datenfeld als read-only (nur lesbar) gegen aussen zu gestalten (wenn es keine Setter-Methode dazu gibt).\nNamenskonventionen Für Getter- und Setter-Methoden werden immer die gleichen Methodennamen verwendet. Als Präfix benutzen wir get und set gefolgt vom Namen des Datenfelds worauf sich die Methode bezieht.\n1 2 3 4 5 6 7 8 9 10 11  public class Car { private int speed; public int getSpeed() { return speed; } public void setSpeed(int speed) { this.speed = speed; } }   1 2 3 4 5 6 7  class Demo { public static void main(String[] args) { Car car = new Car(); car.setSpeed(100); System.out.println(car.getSpeed()); } }   Methoden überladen In Java können wir Methoden überladen. Das heisst, wir können mehrere Methoden mit demselben Namen definieren, solange die Anzahl an Parametern oder die Datentypen der Parameter variieren. Beim Aufruf der Methode wird vom Compiler die entsprechende Definition ausgewählt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  class Calculator { public double product(double x, double y) { return x * y; } // Overloading the function to handle three arguments \tpublic double product(double x, double y, double z) { return x * y * z; } // Overloading the function to handle int \tpublic int product(int x, int y) { return x * y; } }   1 2 3 4 5 6 7 8 9 10 11 12 13  class Demo { public static void main(String[] args) { Calculator cal = new Calculator(); double x = 10; double y = 20; double z = 5 int a = 12; int b = 4; System.out.println(cal.product(x, y)); System.out.println(cal.product(x, y, z)); System.out.println(cal.product(a, b)); } }   Methoden, deren Parameter gleich sind (gleiche Anzahl, gleiche Datentypen) und sich lediglich in ihren Rückgabetypen unterscheiden, können nicht überladen werden, da der Compiler nicht in der Lage ist, zwischen ihren Aufrufen zu unterscheiden.\nDie Methoden equals() und hashCode() Die Methoden equals() und hashCode() gehören zu den grundlegenden Java APIs. Beide Methoden gehören automatisch zur öffentlichen Schnittstelle jeder Klasse, da sie durch die implizite Ableitung von der Object-Klasse geerbt werden (mehr dazu im Modul “Objektorientiertes Design (OOD)\").\nequals() Möchtest du überprüfen, ob zwei Objekte den gleichen Wert repräsentieren, dann verwendest du die Methode equals().\nDie Default-Umsetzung der Methode in der Object-Klasse definiert, dass zwei Objekte nur dann gleich sind, wenn sie die gleiche Identität haben. Das heisst, zwei unterschiedliche Instanzen (also zwei Objekte) einer Klasse sind gemäss dieser Umsetzung nicht gleich auch wenn alle Felder der beiden Objekten mit den gleichen Werte befüllt werden.\nAufgrund der fachlichen Gegebenheiten kann diese Definition der Gleichheit nicht korrekt sein. In so einem Fall muss die Methode equals() überschrieben werden.\nBei der Umsetzung müssen folgende Bedingungen für die Definition der Gleichheit bei nicht-null Objekten gemäss API-Definition für equals() erfüllt werden:\n Reflexivität: Das Objekt liefert beim Vergleich mit sich selbst true. Symmetrie: Das Resultat des Vergleichs x mit y ist gleich wie das des Vergleichs y mit x. Es ist also egal wie verglichen wird. Transivität: Wenn x gleich y ist und y gleich z, dann ist x gleich z. Konsistenz: Egal wie häufig der Vergleich durchgeführt wird, es kommt immer dasselbe heraus, sofern sich der Inhalt der Objekte nicht verändert. Behandlung von null: Der Vergleich mit null liefert immer false.  Eine mögliche Implementierung von equals() für die Klasse Car könnte wie folgt aussehen:\n1 2 3 4 5 6 7  @Override public boolean equals(Object other) { if (this == other) return true; if (other == null || getClass() != other.getClass()) return false; Car car = (Car) other; return speed == car.speed; }   (Die Angabe (“Annotation”) von @Override ist freiwillig. Sie wird angegeben, wenn eine bestehende Methode (z.B. von der Klasse Object) überschrieben wird. Diese Angabe bewirkt, dass es ein Kompilierfehler gibt, falls keine bestehende Methode überschrieben wird.)\nDie equals()-Methode kannst du wie eine ganz normale Methode aufrufen, wird aber meistens in einer if-Anweisung verwendet:\n1 2 3 4 5 6 7 8 9 10  Car carA = new Car(); carA.setSpeed(3); Car carB = new Car(); if (carA.equals(carB)){ System.out.println(\"Both cars are equal.\"); } else { System.out.println(\"The cars are different.\"); // Output: The cars are different. }   hashCode() Die Methode hashCode() sollte für jedes Objekt einen Hashwert (Fingerabdruck) liefern, der das Objekt möglichst eindeutig identifiziert.\nDer berechnete Hashwert ermöglicht einen effizienten und schnellen Zugriff auf ein bestimmtes Objekt innerhalb eines Hash-basierten Containers wie z.B. einer HashMap.\nAuch für diese Methode definiert die API-Definition für hashCode() Bedingungen, welche erfüllt werden müssen, damit die Methode zweckmässig verwendet werden kann:\n Konsistenz: Egal wie häufig hashCode() aufgerufen wird, es kommt stets dasselbe Resultat zurück, sofern der Inhalt des Objekts nicht geändert wurde. Zusammenhang equals: Zwei Objekte, die gemäss equals() gleich sind, müssen den gleichen Hashwert liefern. Zusammenhang not-equals: Zwei Objekte die gemäss equals() verschieden sind, müssen nicht zwingend unterschiedliche Hashwerte liefern. Grundsätzlich wäre es aber besser für die Performanz, wenn verschiedene Objekte auch verschiedene Hashwerte liefern würden.  In der Regel entscheiden wir uns aufgrund von fachlichen Gegebenheiten für die Überschreibung der Methode equals(). Die Überschreibung von hashCode() resultiert daraus als Konsequenz der Bedingung “Zusammenhang equals”.\nHier ein Beispiel für die Klasse Car, wie eine mögliche hashCode()-Methode aussehen könnte. Hier haben wir 2 weitere Felder aus Demonstrationsgründen hinzugefügt:\n1 2 3 4 5 6 7 8 9 10  public class Car { private int speed; private String brand; private float remainingAmountOfFuel; @Override public int hashCode() { return Objects.hash(speed, brand, remainingAmountOfFuel); } }   Oft sieht man statt Objects.hash(...) auch eine eigene Implementation wie die folgende:\n1 2 3 4 5 6 7  @Override public int hashCode() { int result = speed; result = 31 * result + (brand != null ? brand.hashCode() : 0); result = 31 * result + (remainingAmountOfFuel != +0.0f ? Float.floatToIntBits(remainingAmountOfFuel) : 0); return result; }   ","categories":"","description":"Modul #J2\n","excerpt":"Modul #J2\n","ref":"/docs/java/j2-oop/08-methods/","tags":"","title":"Instanzmethoden"},{"body":"","categories":"","description":"Exercises zu Modul #J5 - Exception Handling\n","excerpt":"Exercises zu Modul #J5 - Exception Handling\n","ref":"/labs/java/java-exception-handling/","tags":"","title":"Java Exercises - Exception Handling"},{"body":"Ziele  Ich kann in eigenen Worten und mit Hilfe von Skizzen erklären, was Streams sind und wofür sie verwendet werden. Ich kann Streams für die Iteration über Listen anwenden. Ich kann mindestens eine intermediäre und eine terminale Stream-Operation aus dem Kopf nennen und beschreiben.   Streams Mit Java 8 ist das Stream-API zum java.util-Package des JDKs hinzugekommen. Das API ist eine Erweiterung des Java-Collection-Frameworks mit einer Schnittstelle im Stil der funktionalen Programmierung. Mit dem Stream-API wurden mächtige Möglichkeiten zur Durchführung von Operationen auf Arrays und Listen eingeführt.\nIn diesem Teil wird erklärt, was Streams sind und wie sie für Operationen auf Arrays und Listen eingesetzt werden können.\nWas ist ein Stream? Streams stellen Ströme von Referenzen dar, die es erlauben, verkettete Operationen auf diesen Referenzen nacheinander oder parallel auszuführen.\nEin Stream erhält seinen Input aus Datenstrukturen wie Arrays oder Listen und führt die gewünschte Operationen auf diesem Input aus, ohne die ursprüngliche Datenstruktur zu verändern.\nNachfolgend ist ein Code aufgelistet, der aus einem Array mit den verschiedenen Punktzahlen von verschiedenen Studierenden aus einer Prüfung\n alle Punktzahlen aussortiert, die 0 oder kleiner sind (Intermediäre Operation filter(...)), dann die Punktzahlen in Noten umrechnet (Intermediäre Operation mapToDouble(...)), und dann den Durchschnitt über alle Studierenden berechnet (Terminale Operation average(), zu Deutsch “Durchschnitt”).  1 2 3 4 5 6 7 8 9 10 11 12  import java.util.Arrays; int[] scores = new int[] { 4, 19, 22, 23, 0, 12 }; int maxScores = 24; var averageGrade = Arrays.stream(scores) .filter(score -\u003e score \u003e 0) .mapToDouble(score -\u003e score * 5f / maxScores + 1f) .average(); System.out.println(\"Average: \" + averageGrade.getAsDouble());   Die einzelnen Bestandteile werden in den weiteren Unterkapitel genauer beleuchtet und die sogenannten Lambda-Ausdrücke score -\u003e score \u003e 0 und score -\u003e score * 5f / maxScores + 1f werden später erläutert.\nErzeugung von Streams Damit überhaupt mit Streams gearbeitet werden kann, muss zuerst ein Stream existieren bzw. erzeugt werden. Streams können aus Arrays, Listen und anderen Collections erzeugt werden.\nErzeugung aus Elementes eines Arrays Aus den Elementen eines Arrays kann ein Stream mithilfe der Klasse Arrays aus dem java.util-Package wie folgt erzeugt werden:\n1 2 3 4 5  int[] numbers = {1, 2, 3, 4}; IntStream numbersStream = Arrays.stream(numbers); // IntStream ist eine Spezialisierung von Stream, welche die Verabeitung von primitive int-Werte ermöglicht.  String[] greeting = {\"Hello\", \"Streams\"}; Stream\u003cString\u003e greetingStream = Arrays.stream(greeting); // Anhand der spitzigen Klammern wird ersichtlich, welche Objekttypen durch den Stream verarbeitet werden.   Erzeugung aus Elementen einer Liste Wenn eine Liste bereits vorhanden ist, kann die Methode stream() aufgerufen werden, um einen Stream aus den Elementen der Liste zu erzeugen:\n1 2 3 4 5 6  List\u003cString\u003e stringList = new ArrayList\u003c\u003e(); stringList.add(\"Hello\"); stringList.add(\"List\"); stringList.add(\"Stream\"); Stream\u003cString\u003e stream2 = stringList.stream();   Unterschied zwischen generischen Streams und IntStreams Wenn du beim Aufruf von Arrays.stream(...) ein Array vom Typ int[] oder double[] übergibst, erhältst du keinen gewöhnlichen Stream vom Typ Stream sondern einen optimierten Stream-Typ für den entsprechenden Datentyp:\n ein int-Array resultiert in einem IntStream, ein double-Array in einem DoubleStream, usw.  An dieser Stelle könnte man sich fragen wieso. Aber die Antwort ist ziemlich klar:\nEin IntStream besitzt mehr Methoden als ein Stream\u003cInteger\u003e. So kannst du auf dem Stream z.B. direkt eine Summe (.sum()) oder Durchschnitt (.average()) berechnen, statt selbst diese Funktionen zu implementieren.\nHast du z.B. ein Stream\u003cInteger\u003e und möchtest aber eine Summe berechnen, dann kannst du z.B. den Stream\u003cInteger\u003e mit der Methode mapToInt(...) in einen IntStream umwandeln:\n1 2 3 4 5 6  Stream\u003cInteger\u003e integerStream = Stream.of(1, 2, 3, 4, 5); IntStream intStream = integerStream.mapToInt(Integer::intValue); int summe = intStream.sum(); System.out.println(\"Summe der Zahlen 1 bis 5: \" + summe);   Lasse dich von der “Methodenreferenz” Integer::intValue nicht verwirren - wird in einem der nächsten Unterkapitel erklärt. Diese wird hier angegeben, damit beim Stream klar ist, wie jeder einzelne Integer in einen int umgewandelt wird. In diesem Fall wird ein Integer integer wie folgt umgewandelt: int neuerWert = integer.intValue().\nLambda Expressions Streams arbeiten mit sog. Lambda-Expressions oder Methodenreferenzen. Lambda Expressions (Lambda-Ausdrücke) wurden in Java 8 eingeführt, damit Funktionen als Argumente bei Methoden übergeben werden können.\nDa Lambda-Expressions oft in Streams verwendet werden, wird hier aufgezeigt, wie Lambdas aussehen und wie sie verwendet werden können.\nLambda-Ausdrücke in Java sind quasi Methoden ohne Namen. Sie bestehen aus folgenden Elementen:\n einer Liste von Parametern. Mehrere Parameter werden durch ein Komma separiert und mit Klammern umrundet. (keine Parameter werden mit leeren Klammern () dargestellt, einen Parameter muss nicht zwingend mit Klammern umrundet werden) einem Pfeil-Token -\u003e und einem Funktionsrumpf. Wenn der Funktionsrumpf mehrere Anweisungen lang ist, wird er mit geschweiften Klammern { ... } umrundet. Wenn keine geschweiften Klammern verwendet werden, dann ist der Ausdruck nach dem Pfeil-Token automatisch der Rückgabewert der Funktion (das return entfällt).  Im Gegensatz zu Methoden werden der Rückgabetyp und Exceptions nicht spezifiziert, sondern vom Compiler “erraten”.\nIm Beispiel mit den Prüfungsnoten haben wir mit .mapToDouble(score -\u003e score * 5.0 / maxScores + 1.0) die einzelnen Punktzahlen in Noten umgerechnet (map()-Methoden werden später erklärt). Hierbei wurde der Lambda-Ausdruck score -\u003e score * 5.0 / maxScores + 1.0 verwendet. Dieser Lambda-Ausdruck ist eine Funktion (Methode), die beschreibt, wie jede Punktzahl in eine Note umgerechnet werden soll. Würden wir diesen Lambda-Ausdruck in eine Methode umschreiben, dann könnte diese so aussehen:\n1 2 3  private static double punkteZuNote(int score) { return score * 5.0 / maxScores + 1.0; }   Der Lambda-Ausdruck score -\u003e score \u003e 0 hingegen könnte als Methode so geschrieben werden:\n1 2 3  private static boolean isScoreGreaterThan0(int score) { return score \u003e 0; }   Beispiele\nHier noch ein paar Beispiele, wie Lambda-Ausdrücke geschrieben werden können:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  // keine Parameter () -\u003e System.out.println(\"Ich habe kein Parameter\") // ein Parameter word -\u003e System.out.printf(\"Ich habe einen Parameter erhalten, nämlich: %s\", word) // zwei oder mehr Parameter (name, age) -\u003e System.out.println(\"My name is \" + name + \" and I am \" + age + \"years old\") // Funktionsrumpf mehrzeilig (name, age) -\u003e { System.out.println(\"My name is \" + name); System.out.println(\"I am \" + age + \"years old\"); }   Method Reference Eine Methoden-Referenz ist die verkürzte Schreibweise einer Lambda-Expression, welche nur einen einzigen Methodenaufruf beinhaltet. Die generische Syntax für Methodenreferenz sieht wie folgt aus: Klasse::methode. Bei Methoden-Referenzen werden die Argumente für die Methode nicht notiert.\n1 2 3 4 5 6  // Lambda-Expression mit einem Methodenaufruf (word) -\u003e System.out.println(word) // Method-Reference Syntax der obigen Lambda-Expression // Das Argument (word) muss nicht mitgegeben werden System.out::println   Der wesentliche Vorteil von dieser Schreibweise ist, dass er kürzer ist. Lambda-Ausdrücke sind aber oft einfacher zu verstehen.\nMethodenausführung auf Streams Im Beispiel mit den Prüfungsnoten haben wir verschiedene Operationen auf dem Stream durchgeführt, die die einzelnen Werte entweder umrechnen oder am Schluss in einem einzigen Wert zusammenfasst (z.B. average()). Folglich stellen Streams Operationen zur Verfügung, welche in zwei Kategorien unterteilt werden können:\n Intermediäre Operationen, welche am Ende der Verarbeitung in einem Stream resultieren (und somit eine weitere, verkettete Verarbeitung ermöglichen) wie z.B. filter(...) oder map(...). Terminale Operationen, welche am Ende der Verarbeitung einen Wert zurückliefern (und somit den Stream beenden) wie sum() oder average().  Folgendes Bild illustriert die Arbeitsweise von Streams Nun werden einige Operationen auf Streams vorgestellt:\n Intermediäre Operationen:  filter(...) sortiert alle Elemente aus, die NICHT die übergebenen Bedingung erfüllen. map(...), mapToInt(...) und mapToDouble(...) wandeln die einzelnen Stream-Elemente in andere Werte um (bilden diese ab auf andere). sorted() sortiert die einzelnen Werte.   Terminale Operationen:  Mit forEach(...) kann für jedes Element etwas gemacht werden (z.B. jedes Element ausgeben). collect(...) und toArray(...) füllen die einzelnen Elemente in Listen oder Arrays ab.    Intermediäre Operationen Die filter(...)-Methode Die filter(...)-Methode ist eine intermediäre Operation, die Elemente in einem Stream auf diejenigen beschränkt, die einer bestimmten Bedingung entsprechen. Diese Bedingung wird als Lambda-Ausdruck angegeben, der true zurückgibt, wenn das Element im Stream bleiben soll. Gibt er false zurück, wird das Element aussortiert.\nIm folgenden Beispiel werden alle ungeraden Zahlen aus einem Stream entfernt und dann alle verbleibenden Elemente ausgegeben:\n1 2 3  IntStream.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15) .filter(x -\u003e x % 2 == 0) .forEach(System.out::println);   Die map(...)- und mapToInt(...)-Methode Die map(...)- und mapToInt(...)-Methode gehört zu den intermediären Operationen eines Streams.\nDie Methode liefert einen Stream zurück, worin jedes einzelne Element durch den Rückgabewert der übergebenen Funktion ersetzt wurde.\nDie map(...)-Methode wird oft verwendet, um Daten umzuwandeln oder den Stream auf ein Feld/Methode eines Objekts zu fokussieren.\nHier ein Beispiel, in welchem Zahlen durch ihr Quadrat ersetzt werden:\n1  Stream.of(1,2,3,4).map(x -\u003e x * x).forEach(System.out::println);   Und hier ein Beispiel, wo uns nur die Länge der Strings interessiert:\n1 2 3  Stream.of(\"Ein\", \"Ninja\", \"bewegt\", \"sich\", \"lautlos\", \"wie\", \"der\", \"Wind\", \"und\", \"unsichtbar\", \"wie\", \"der\", \"Schatten\") .map(word -\u003e word.length()) .forEach(System.out::println);   Im zweiten Beispiel könnte unser Ziel sein, die durchschnittliche Länge der Wörter zu berechnen. Wenn man mathematische Operationen mit Streams durchführen möchte, dann ist es oft einfacher, den Stream in einen für den mathematischen Typ spezifischen Stream wie IntStream zu “verwandeln”, damit Funktionen wie sum() und average() (Durchschnitt) nicht manuell implementiert werden müssen. Hierfür kannst du statt der map(...)- die mapToInt(...)-Methode (oder mapToDouble) verwenden:\n1 2 3 4 5 6 7 8  System.out.println( \"Durchschnittliche Länge eines Wortes: \" + Stream.of(\"Ein\", \"Ninja\", \"bewegt\", \"sich\", \"lautlos\", \"wie\", \"der\", \"Wind\", \"und\", \"unsichtbar\", \"wie\", \"der\", \"Schatten\") .mapToInt(word -\u003e word.length()) .average() );   Die sorted() Methode Die sorted()-Methode gehört zu den intermediären Operationen eines Streams.\nDie Methode liefert ein Stream zurück, worin die Elemente im Stream nach ihrer natürlichen Reihenfolge (natural order) sortiert sind.\nDie Syntax der Methode ist wie folgt: Stream\u003cT\u003e sorted() wobei T der Typ der Elemente innerhalb des Streams ist\nBeispiel mit einem Array\n1 2 3 4 5 6 7 8  // Erstelle ein Array mit Strings String[] greeting = {\"C\", \"A\", \"B\"}; // Sortiere die Strings nach ihrer natürlichen Reihenfolge (alphabetisch) und // gib die sortierten Elementen in der Console wieder aus Arrays.stream(greeting) .sorted() .forEach(System.out::println);   Beispiel mit einer Liste\n1 2 3 4 5 6 7 8  // Erstelle eine Liste mit Zahlen List\u003cInteger\u003e list = Arrays.asList(-9, -18, 0, 25, 4); // Sortiere die Zahlen nach ihrer natürlichen Reihenfolge (numerisch sortiert) und // gib die sortierten Elementen in der Console wieder aus list.stream() .sorted() .forEach(System.out::println);   Terminale Operationen Die forEach() Methode Die forEach(Consumer action) Methode gehört zu den terminalen Operationen eines Streams.\nDer Parameter action ist vom Typ Consumer (ist ein FunctionalInterface). Dieser Typ repräsentiert eine Operation (eine Funktion), welche nur ein einziges Input-Argument akzeptiert und keine Ergebnisse (also void) zurückliefert. Ein Beispiel für so einen Consumer ist die Methode System.out.println(...), welche maximal ein einziges Objekt als Parameter akzeptiert, dieses Objekt in den Standard-Output ausgibt und void (also kein Ergebnis) zurückliefert. Die Methode System.out.println erfüllt also die Bedingungen eines Consumers und kann als Parameter für die forEach() Methode verwendet werden\nDie forEach()-Methode kann als Ersatz für einen for-Loop verwendet werden.\nBeispiel mit einem Array\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  String[] greeting = {\"Hello\", \"Streams\"}; // Hier wid jedes Element des Arrays ausgegeben for (String word : greeting) { System.out.println(word); } // Hier wird mithilfe von Streams dasselbe erreicht wie beim for-loop Arrays.stream(greeting) .forEach(word -\u003e System.out.println(word)); // Und nun noch kürzer mit der Method-Reference Syntax der obigen Lambda-Expression Arrays.stream(greeting) .forEach(System.out::println);   Beispiel mit einer Liste\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  List\u003cString\u003e greetingList = new ArrayList\u003c\u003e(); greetingList.add(\"Hello\"); greetingList.add(\"Stream\"); greetingList.add(\"List\"); // Einmal mit der vollen Syntax der Lambda-Expression greetingList.stream().forEach(word -\u003e System.out.println(word)); // Und einmal mit der verkürzte Variante mittels Method-Reference greetingList.stream().forEach(System.out::println); // Collection, darunter auch Listen, haben selbst eine forEach Methode, // welche die gleichen Ergebnisse liefert, wie diejenige vom Stream-Interface greetingList.forEach(System.out::println);   Die collect()-Methode Die collect(Collector collector)-Methode ist auch eine terminale Operation auf einem Stream. Sie ermöglicht es, die Ergebnisse der Bearbeitung des Streams in einer neuen Collection (List, Map usw.) zu speichern. Dies ist nötig, da bei der Bearbeitung des Streams die ursprüngliche Elemente nicht geändert werden können.\nDer Parameter collector ist vom Typ Collector. Die Aufgabe eines Collectors besteht darin, mehrere Input-Elemente in einem Result-Container zusammenzufassen. Zum Beispiel können die Elemente eines Streams in einer Liste “gespeichert” und zurückgeliefert werden.\nUm ein Collector zu erzeugen, wird oft die Klasse Collectors aus dem java.util.stream-Package verwendet. Diese beinhaltet mehrere öffentliche, statische Methode um Collectors unterschiedlicher Typen (List, Map usw.) erzeugen zu können.\nBeispiel\n1 2 3 4 5 6 7 8 9 10 11 12 13  // Erstelle eine Liste von unsortieren Zahlen List\u003cInteger\u003e unsortedList = Arrays.asList(-9, -18, 0, 25, 4); // Aus der unstortierte Liste, erstelle eine NEUE, sortierte Liste List\u003cInteger\u003e sortedList = unsortedList.stream() .sorted() .collect(Collectors.toList()); // hier wird aus dem sortierten Stream eine neue Liste erstellt  // gib die unsortierte Liste in der Konsole aus (die Original-Liste wurde nicht verändert!) unsortedList.forEach(System.out::println); // gib die sortierte Liste in der Konsole aus sortedList.forEach(System.out::println);   Die toArray(...)-Methode Mit der collect(...)-Methode kannst du den Stream in eine Liste umwandeln. Wenn du den Stream aber in ein Array umwandeln möchtest, dann hilft dir die toArray(...)-Methode:\n1 2 3 4 5 6 7 8 9  String[] strings = Stream.of(\"A\", \"B\", \"C\") // String[]::new muss noch angegeben werden, damit ein String-Array (und nicht ein Object[]) zurückgegeben wird:  .toArray(String[]::new); int[] array = Stream.of(1,2,3,4) // Zu einem IntStream umwandeln, weil sonst ein Integer[] statt int[] resultieren müsste:  .mapToInt(Integer::intValue) .toArray();   Die toArray(...)-Methode ist eine terminale Operation auf einem Stream.\n Jetzt bist du dran. Löse bitte die Aufgabe 1 - 3 in den Stream-Labs.\n","categories":"","description":"Modul #J7\n","excerpt":"Modul #J7\n","ref":"/docs/java/java-collections/08-streams/","tags":"","title":"Streams Basics"},{"body":"Ziele  Ich kann String-Variablen deklarieren und initialisieren. Ich kann mehrere Strings miteinander in eine String-Variable verknüpfen (String Concatenation). Ich weiss, wann man einen StringBuilder verwenden sollte. Ich weiss, wie ich herausfinde, wie viele Zeichen eine String-Variable enthält. Ich weiss, dass String-Variablen nicht mit == sondern equals verglichen werden sollten. Ich kann von der Klasse String folgende Methode anwenden: toUpperCase(), toLowerCase(), charAt(...), indexOf(...), contains(...), substring(...), replace(...), split(...).  String Eine Variable, die eine Zeichenkette repräsentiert, hat den Typ String und kann wie folgt initialisiert werden:\n1  String hello = \"Hello, Java\";   Diese Zeichenkette besteht aus 11 Zeichen, einschliesslich eines Leerzeichens. Wie wir hier ebenfalls sehen, müssen String-Literale von doppelten Anführungszeichen umgeben sein.\nEin Objekt des Typs String ist unveränderlich, die Werte innerhalb eines Strings können also nach dessen Erstellung nicht mehr verändert werden - der Variable kann aber ein neuer String-Wert zugewiesen werden:\n1 2  String hello = \"Hello, Java\"; hello = \"Hello, how are you?\";   Ausserdem ist es möglich, Strings mit mehreren Zeilen zu definieren, indem du einen String mit 3 \" beginnst und beendest und den String auf einer neuen Zeile beginnst:\n1 2 3 4 5  String poem = \"\"\" Strings dürfen mehreren Zeilen enthalten. So kannst du auch einfach eine Auflistung notieren: 1. Element 2. Element.\"\"\";   Strings verknüpfen (String Concatenation) Oft generierst du aus verschiedenen Variablen EINEN neuen String. Angenommen du hast eine Variable für “name” und “age” (Alter), dann kannst du wie folgt den String “Hallo {name}, du bist {age} Jahre alt.” generieren:\n1 2 3 4  String name = \"Leonardo\"; int age = 68; String greeting = \"Hallo \" + name +\", du bist \" + age + \" Jahre alt.\";   Alternativ kannst du statt die vielen + auch von der String.format()-Methode Gebrauch machen:\n1  String greeting = String.format( \"Hallo %s, du bist %d Jahre alt.\", name, age);   Bei der String.format()-Methode übergeben wir dann die einzelnen Werte als Argumente. Beachte hierbei, dass %s für String- und %d für Integer-Werte verwendet werden.\nWenn Performance (also wie schnell, dass ein Programm läuft) eine übergeordnete Rolle einnimmt, dann wird die Methode mit einem StringBuilder bevorzugt:\n1 2 3 4 5 6 7 8  StringBuilder sb = new StringBuilder(); sb.append(\"Hallo \") .append(name) .append(\", du bist \") .append(age) .append(\" Jahre alt.\"); String greeting = sb.toString();   Hierbei musst du aber zuerst ein neues StringBuilder-Objekt erstellen. (Im Modul #J1 musst du solche Objekte noch nicht verstehen.) Anschliessend fügst du alle einzelnen Strings via .append(...) hinzu. Den gewünschten String kannst du dann mit .toString() generieren lassen.\nNeue Zeilen oder Tabs Beim Verknüpfen von Strings ist es oft praktisch, wenn man Zeilenumbrüche hinzufügen kann. Dies kannst du mit dem Character '\\n' (new line) tun:\n1  String greeting = \" name: \" + name + \", \\n nage: \" + age;   Das Gleiche ist auch mit Einrückungen (Tabulatoren) möglich mit dem Character '\\t' (tab):\n1 2 3 4  System.out.println(\"weapon name \\t ranges (m)\"); System.out.println(\"Shuriken \\t 5-10\"); System.out.println(\"Nunchaku \\t 1-1.5\"); System.out.println(\"Naginata \\t 3-4\");   Im Java fungiert das Zeichen \\ als “escape character”. Das bedeutet, dass spezielle Zeichen, die in einem String regulär nicht möglich wären, oft irgendwie mit einem \\ “escaped” werden. Neben der “New-Line” und dem “Tabulator” gibt es noch weitere, die oft verwendet werden:\n \\\\: Das \\-Zeichen (“Backslash) selber. \\\": Ein Anführungszeichen in einem String.  Hier ein Beispiel, wie das Anführungszeichen und Backslash in einem String verwendet werden können:\n1  System.out.println(\"Die Datei \\\"Main.java\\\" befindet sich im Ordner C:\\\\Users\\\\Ninja\\\\Documents.\");   Methoden Nachfolgend sind einige der wichtigsten Methoden der Klasse String beschrieben. Alle Methoden sind detailliertet beschrieben unter java.lang.String zu finden.\nAnzahl Zeichen (String.length()) Bei Strings sind dessen Länge (also Anzahl Zeichen) oft von Interesse.\nIm folgenden Beispiel wird eine Nachricht ausgegeben, wenn eine Dummy-Usereingabe nicht mindestens 6 Zeichen enthält:\n1 2 3 4  String nickname = \"peter\"; if (nickname.length() \u003c 6) System.out.println(\"Der Nickname muss mindestens 6 Zeichen enthalten!\");   Strings miteinander vergleichen (String.equals(String)) Sehr oft wirst du überprüfen, ob ein String einem anderen entspricht. Dies kannst du mit der equals()-Methode tun:\n1 2 3 4 5  String a = \"hello\"; String b = \"hello\"; if (a.equals(b)) System.out.println(\"A ist gleich B.\");   Beachte hierbei, dass du zum Vergleichen von Strings in Java immer equals() nun nie == verwenden solltest, weil String kein primitiver Datentyp ist. == funktioniert in einfacheren Beispielen, führt aber in vielen Fällen trotzdem nicht zum gewünschten Resultat.\nIn Gross-/Kleinbuchstaben umwandeln In bestimmten Fällen soll die Gross- und Klein-Schreibung keine Rolle spielen. Nehmen wir hierfür noch einmal das Beispiel von der equals-Methode:\n1 2 3 4  String input = \"hello\"; if (input.toUpperCase().equals(\"HELLO\")) System.out.println(\"Der Input entspricht 'hello'.\");   Die relevanten String-Methoden bezüglich Gross- und Klein-Schreibung sind hierbei:\n toUpperCase(): Gibt die Zeichenkette in Grossbuchstaben zurück. toLowerCase(): Gibt die Zeichenkette in Kleinbuchstaben zurück.  Eine häufige Fehlerquelle ist es zu denken, dass eine dieser beiden Methoden den String verändert. Strings können sich aber nicht verändern. Deswegen geben diese beide Funktionen einen neuen String zurück, der Wert in der Variable bleibt also unverändert:\n1 2 3 4 5  String myString = \"Hello\"; myString.toUpperCase(); System.out.println(myString);   Damit dieses Beispiel wie gewollt funktioniert, müsste es so geschrieben werden:\n1 2 3 4 5  String myString = \"Hello\"; myString = myString.toUpperCase(); System.out.println(myString);   Buchstaben an bestimmter Position ermitteln (String.charAt(int)) Wenn du z.B. alle Buchstaben in einem String durchgehen willst, dann musst du irgendwie den Buchstaben (char) an einer bestimmten Position des Strings ermitteln können. Dies kannst du mit charAt(int).\nDas folgende Beispiel liest den ersten Buchstaben aus einem String aus und gibt in aus:\n1 2 3 4 5  String word = \"Hello\"; char firstLetter = word.charAt(0); System.out.println(\"Erster Buchstabe: '\" + firstLetter + \"'\");   Beachte, dass die Nummerierung in Java generell bei 0 beginnt. Für das erste Element übergibst du 0, für das zweite 1, für das vierte 3, für n das (n-1)-te, usw. Für charAt(...) bedeutet das, dass du wie folgt Buchstaben an bestimmten Positionen ermittelst:\n1 2 3 4 5 6 7 8 9 10 11  // erstes Zeichen: word.charAt(0); // zweites Zeichen: word.charAt(1); // viertes Zeichen: word.charAt(3); // letztes Zeichen: word.charAt(word.length() - 1);   Nach Strings in Strings suchen (String.indexOf() und String.contains()) In seltenen Fällen möchtest du wissen, an welcher Position ein kleinerer String (oder char) in einem grösseren String vorkommt. Diese Information erhältst du mit indexOf(String/char).\nMöchtest du z.B. herausfinden, an welcher Stelle in einer Email-Adresse das “@” steht, dann könnte das wie folgt aussehen:\n1 2 3 4 5  String email = \"wallace@gmail.com\"; int indexOfAt = email.indexOf(\"@gmail\"); System.out.println(\"Der Teil vor dem @ ist \" + indexOfAt + \" Zeichen lang.\");   In diesem Fall gibt die Methode 7 zurück, weil sich das @ an der 8. Stelle befindet.\nAllgemein gibt indexOf(...) folgendes zurück:\n Wenn der Suchbegriff vorkommt, dann die Position, wo der Suchbegriff zum ersten Mal beginnt. Wenn der Suchbegriff nie vorkommt: -1.  Weil -1 zurückgeben wird, wenn der Suchbegriff nicht vorkommt, könnte diese Methode auch dafür verwendet werden, um herauszufinden, ob ein bestimmter Text in einem String vorkommt. Java bietet aber für diesen Fall bereits eine praktischere Methode:\n1 2 3 4  String email = \"wallace@gmail.com\"; if (email.contains(\"@gmail.\")) System.out.println(\"Diese Email-Adresse ist ein Gmail-Adresse.\");   Der Vorteil von der contains()-Methode ist, dass sie bereits einen boolean zurückgibt, was die if-Anweisung einfacher macht als das Überprüfen nach -1.\nText aus einem String ausschneiden Die substring()-Methode ist nützlich, wenn ein Text aus einem String ausgeschnitten werden soll.\nIn diesem Beispiel interessiert uns die Information nach dem “:”, welches sich immer an 6. Stelle befindet:\n1 2 3 4 5  String systemInfo = \"power: on\"; String status = systemInfo.substring(7); System.out.println(\"The system is \" + status + \".\");   In diesem Beispiel haben wir mit dem Schneiden an 7. Stelle begonnen. Wir können aber auch angeben, wie viele Zeichen, das ausgeschnitten werden sollen:\n1 2 3 4 5  String sentence = \"Today is Wed, 9th August 2023\"; String dayOfWeek = sentence.substring(9, 12); System.out.println(\"Day of Week: \" + dayOfWeek);   In diesem Beispiel beginnt das Ausschneiden bei Index 9 und hört 1 Zeichen VOR Index 12 auf.\nIn all diesen Beispielen sind wir davon ausgegangen, dass wir wissen, ab welcher Stelle das Ausschneiden beginnt. Oft ist diese Stelle aber dynamisch. Hier kann daher eine Kombination mit indexOf() weiterhelfen:\n1 2 3 4  String dadJoke = \"Warum dürfen Geister keine Lügen erzählen? Weil man durch sie hindurchsieht!\"; String punchline = dadJoke.substring(dadJoke.indexOf(\"Weil \")); System.out.println(\"Pointe: \" + punchline);   Teile eines Strings ersetzen (String.replace()) Ein bestimmter Teil eines Strings kannst du mit replace ersetzen:\n1 2  String classicPhrase = \"To be or not to be, that's the question.\"; System.out.println(classicPhrase.replace(\"o be\", \"o beer\"));   Beachte auch hier, dass replace den ursprünglichen String nicht verändert, sondern einen neuen zurückgibt.\nBausteine aus einem String herauslösen (String.split()) Mit der split(String)-Methode kannst du einen String anhand eines Suchbegriffes aufteilen und erhältst dann eine Auflistung von Strings, die sich zwischen dem Suchbegriff befinden:\n1 2 3 4 5 6 7  String ingredients = \"Käse, Brot, Speck, Eier, Surströmming\"; var items = ingredients.split(\", \"); System.out.println(\"This receipt has \" + items.length + \". Ingredients: \"); for (String item : items) System.out.println(item);   Die for-Schlaufe musst du zu diesem Zeitpunkt noch nicht verstehen. Wichtig ist, dass die Variable items eine Auflistung (nicht ein String) ist von folgenden Werten:\n Käse Brot Speck Eier Surströmming  Auf diese Art und Weise können wir z.B. alle Wörter aus einem String ermitteln.\nAnzufügen ist noch, dass es sich beim Suchbegriff um eine sogenannten “Regulären Ausdruck” (RegEx) handelt. Eine RegEx ist eine Folge von Zeichen, die ein Suchmuster bilden. Eine Regex wird dafür verwendet, um einen Text anhand eines Musters (einer Regel) abzugleichen. RegEx ist im Moment kein Thema im Modul #J1. Wichtig ist für dich im Moment nur, dass du weisst, dass sich bei diesem Suchbegriff von split(...) nicht um einen gewöhnlichen String handelt, sondern um eine RegEx. Möglicherweise können dir RegEx' viel Arbeit abnehmen. Bitte melde dich bei Interesse für RegEx.\n Jetzt bist du dran. Löse bitte die Aufgaben 5 und 6 in den Labs.\n","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/08_strings/","tags":"","title":"String"},{"body":"Ziele  Du weisst, was ein Directive ist und wozu es verwendet wird. Du kennst, die drei Arten von Directives und kannst diese beschrieben Du kannst, ngIf, ngFor, ngSwitch und ngClass anwenden und erklären.  Directives Directives sind ein Mechanismus, um die Darstellung von HTML-Elementen und das Verhalten von Components zu manipulieren. Direktiven ermöglichen es, benutzerdefinierte HTML-Attribute oder -Elemente zu definieren, die spezielle Funktionalitäten bereitstellen, die standardmässig nicht in HTML verfügbar sind.\nEs gibt drei Arten von Directives in Angular\nComponents-Directives Components-Directives sind die am häufigsten verwendeten Directives in Angular. Sie erweitern das HTML durch die Definition von benutzerdefinierten HTML-Elementen und enthalten zugehörige Templates und Logik. Components-Direktiven sind im Wesentlichen Angular-Components.\n1 2  \u003c!--app-greeting.html--\u003e \u003capp-triumphs [title]=\"'Triumphs'\"\u003e\u003c/app-triumphs\u003e   1 2 3 4 5 6 7 8  import { Component, Input } from '@angular/core'; @Component({ // .. }) export class TriumphsComponent { @Input() title: string = \"\"; }   1 2  \u003c!--app-triumphs.html--\u003e \u003ch1\u003e{{ title }}\u003c/h1\u003e   Struktur-Directives Struktur-Directives sind Directives, die das DOM manipulieren und Elemente hinzufügen oder entfernen. Ein Beispiel für eine Struktur-Directive ist *ngIf, das ein Element ausblendet, wenn eine Bedingung nicht erfüllt ist.\n1 2  \u003c!--app-greeting.html--\u003e \u003capp-triumphs *ngif=\"hasTriumphs\" [title]=\"'Triumphs'\"\u003e\u003c/app-triumphs\u003e   1 2 3 4 5 6 7 8 9 10 11  import { Component } from '@angular/core'; @Component({ // .. }) export class GreetingComponent { // ..  triumphs: string[] = ['HTML', 'CSS', 'JavaScript', 'TypeScript']; hasTriumphs: boolean = this.triumphs.length \u003e 0; }   *ngIf Die *ngIf-Direktive wird verwendet, um im Template eines Components Bedingungen zu überprüfen und den darin enthaltenen HTML-Code nur dann anzuzeigen, wenn die Bedingung erfüllt ist. Wenn die Bedingung nicht erfüllt ist, wird der entsprechende HTML-Code aus der gerenderten View entfernt.\nDie Verwendung von *ngIf ermöglicht es, dynamisch Elemente in der View zu steuern.\n1 2  \u003c!--app-greeting.html--\u003e \u003capp-triumphs *ngif=\"hasTriumphs\" [title]=\"'Triumphs'\"\u003e\u003c/app-triumphs\u003e   1 2 3 4 5 6 7 8 9 10 11  import { Component } from '@angular/core'; @Component({ // .. }) export class GreetingComponent { // ..  triumphs: string[] = ['HTML', 'CSS', 'JavaScript', 'TypeScript']; hasTriumphs: boolean = this.triumphs.length \u003e 0; }   *ngFor Die *ngFor-Direktive wird verwendet, um eine Liste von Elementen im Template eines Components zu rendern. Mit *ngFor kann man über eine Datenquelle iterieren und für jedes Element den entsprechenden Code im Template generieren. Es ist besonders nützlich wenn man Kachel anzeigen möchte oder eine Liste mit User Objekten anzeigen möchte.\n1 2  \u003c!--app-greeting.html--\u003e \u003capp-triumphs *ngIf=\"hasTriumphs\" [title]=\"'Triumphs'\" [triumphs]=\"triumphs\"\u003e\u003c/app-triumphs\u003e   1 2 3 4 5 6 7 8 9 10 11  import { Component } from '@angular/core'; @Component({ // .. }) export class GreetingComponent { // ..  triumphs: string[] = ['HTML', 'CSS', 'JavaScript', 'TypeScript']; hasTriumphs: boolean = this.triumphs.length \u003e 0; }   1 2 3 4  \u003c!--app-triumphs.html--\u003e \u003cdiv *ngFor=\"let triumph of triumphs\"\u003e \u003cp\u003e{{ triumph }}\u003c/p\u003e \u003c/div\u003e   1 2 3 4 5 6 7 8 9  import { Component, Input } from '@angular/core'; @Component({ // .. }) export class TriumphsComponent { @Input() title: string = \"\"; @Input() triumphs: string[] = []; }   Wenn man den Index bei einem *ngFor benötigt kann dieser sehr einfach angegeben werden. Dazu muss man nach dem *ngFor den Code ; let i = index hinzufügen. Nun kann man in den Elementen innerhalb des *ngFor auf den Index der Elemente zu greifen.\n1 2 3  \u003cdiv *ngFor=\"let triumph of triumphs; let i = index\"\u003e \u003cp\u003e{{ triumph }}, {{ i }}\u003c/p\u003e \u003c/div\u003e   *ngSwitch Das ngSwitch-Directive ermöglicht das bedingte Rendern von Inhalten auf der Grundlage eines Ausdrucks mit mehreren möglichen Werten. Es funktioniert ähnlich wie ein switch in anderen Programmiersprachen.\n1 2 3 4 5 6 7 8  import { Component } from '@angular/core'; @Component({ // .. }) export class WeaponComponent { weapons: string[] = ['Sword']; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  \u003cdiv [ngSwitch]=\"chosenWeapon\"\u003e \u003cdiv *ngSwitchCase=\"'Sword'\"\u003e \u003cp\u003eYou are wielding a mighty sword!\u003c/p\u003e \u003cp\u003eDefeat your enemies with precision and power.\u003c/p\u003e \u003c/div\u003e \u003cdiv *ngSwitchCase=\"'Bow'\"\u003e \u003cp\u003eYou have a deadly bow and arrows!\u003c/p\u003e \u003cp\u003eStrike your foes from a distance with accuracy.\u003c/p\u003e \u003c/div\u003e \u003cdiv *ngSwitchCase=\"'Staff'\"\u003e \u003cp\u003eYour staff is a conduit of mystical energy!\u003c/p\u003e \u003cp\u003eHarness the power of magic to overcome your adversaries.\u003c/p\u003e \u003c/div\u003e \u003cdiv *ngSwitchDefault\u003e \u003cp\u003eYou have not chosen a weapon yet.\u003c/p\u003e \u003cp\u003eFind your destined weapon and embark on your epic journey.\u003c/p\u003e \u003c/div\u003e \u003c/div\u003e   Attribut-Directives Attribut-Directives sind Directives, die das Verhalten von HTML-Elementen ändern, ohne sie zu ersetzen. Ein Beispiel für eine Attribut-Direktive ist ngClass, die es ermöglicht, CSS-Klassen basierend auf Bedingungen hinzuzufügen oder zu entfernen.\n1  \u003ch1 appTriumphs\u003e{{ title }}\u003c/h1\u003e   1 2 3 4 5 6 7 8 9 10 11 12  import { Directive, ElementRef, Renderer2 } from '@angular/core'; @Directive({ selector: '[appTriumphs]' }) export class TriumphsDirective { constructor(private elementRef: ElementRef, private renderer: Renderer2) { this.renderer.setStyle(this.elementRef.nativeElement, 'padding', '10px'); this.renderer.setStyle(this.elementRef.nativeElement, 'font-style', 'italic'); this.renderer.setStyle(this.elementRef.nativeElement, 'text-decoration', 'underline'); } }   ngClass Die Direktive ngClass wird verwendet, um dynamisch CSS/(SCSS)-Klassen auf ein HTML-Element anzuwenden. Sie ermöglicht es, CSS/(SCSS)-Klassen basierend auf Bedingungen oder Ausdrücken hinzuzufügen oder zu entfernen.\nEs gibt zwei verschiedene Arten wie ngClass verwendet wird.\nVariante 1: Bei der ersten Variante gibt man zuerst die Klasse an und nach einem Doppelpunkt dann die Bedingung. Bei der Bedingung kann wieder mit Booleans oder Operatoren gearbeitet werden.\n1 2 3 4 5 6 7 8  import { Component } from '@angular/core'; @Component({ // .. }) export class GreetingComponent { type: string = 'text'; }   1  \u003cdiv [ngClass]=\"{'text': type === 'text'}\"\u003eText\u003c/div\u003e   1 2 3 4 5 6  @import '_variables'; .text { color: $black; font-family: Helvetica, sans-serif; }   Man kann jedoch diese Variante auch für mehrere Klassen machen, indem man diese aneinander reiht und mit einem Komma trennt.\n1 2 3 4 5 6 7 8 9  import { Component } from '@angular/core'; @Component({ // .. }) export class GreetingComponent { type: string = 'text'; textLength: number = 10; }   1  \u003cdiv [ngClass]=\"{'text': type === 'text', 'title' : textLength === 10 }\"\u003eText\u003c/div\u003e   1 2 3 4 5 6 7 8 9 10 11 12 13  @import '_variables'; .text { color: $black; font-family: Helvetica, sans-serif; } .title { color: $black; font-family: Arial, sans-serif; font-size: 24px; font-weight: bold; }   Variante 2: Bei der zweiten Variante arbeitet man mit dem ternary Operator, um zu prüfen ist eine Bedingung true, wenn ja verwende die erste angegebene Klasse. Ist die Bedingung jedoch false so verwende die zweite Klasse.\n1 2 3 4 5 6 7 8  import { Component } from '@angular/core'; @Component({ // .. }) export class GreetingComponent { textLength: number = 10; }   1  \u003cdiv [ngClass]=\"textLength === 10 ? 'title' : 'text'\"\u003eText\u003c/div\u003e   1 2 3 4 5 6 7 8 9 10 11 12 13  @import '_variables'; .text { color: $black; font-family: Helvetica, sans-serif; } .title { color: $black; font-family: Arial, sans-serif; font-size: 24px; font-weight: bold; }   ","categories":"","description":"Modul #F6 - Angular - Directives\n","excerpt":"Modul #F6 - Angular - Directives\n","ref":"/docs/web/angular/02_8_angular_directives/","tags":"","title":"Directives"},{"body":"Ziele  Du kannst ein Array mit Hilfe von High Order Functions filtrieren, deren Elemente umwandeln (map) und sortieren.  Higher Order Functions map() Die map() Methode verwendet man, um eine neue Array-Instanz zu erstellen, indem jeder Wert des ursprünglichen Arrays durch eine bestimmte Funktion transformiert wird. Dabei wird eine neue Array-Instanz erstellt, die die transformierten Werte enthält.\n1 2 3 4 5 6  const numbers = [1, 2, 3, 4, 5]; const squares = numbers.map(function(num) { return num * num; }); console.log(squares); // [1, 4, 9, 16, 25]   filter() Die Methode filter() wird angewendet, um eine neue Array-Instanz zu erstellen, die nur die Elemente des ursprünglichen Arrays enthält, die bestimmte Kriterien erfüllen (Filtern).\n1 2 3 4 5 6  const numbers = [1, 2, 3, 4, 5]; const evenNumbers = numbers.filter(function(num) { return num % 2 === 0; }); console.log(evenNumbers); // [2, 4]   sort() Die sort()-Methode sortiert die Elemente in einem Array.\nDie Standard-Sortierreihenfolge ist alphanumerisch. Das bedeutet, dass die Elemente nach ihrem Unicode-Codepunkt sortiert werden.\n1 2 3 4  const fruits = ['Banana', 'Mango', 'Apple', 'Orange']; const sortedFruits = fruits.sort(); console.log(sortedFruits); // [\"Apple\", \"Banana\", \"Mango\", \"Orange\"]   sort() kann auch mit einer Vergleichsfunktion verwendet werden, um die Elemente auf andere Weise zu sortieren.\nDie Vergleichsfunktion sollte zwei Argumente haben\n und einen negativen Wert zurückgeben, wenn das erste Argument vor dem zweiten Argument in der Sortierreihenfolge stehen soll, einen positiven Wert, wenn das erste Argument nach dem zweiten Argument stehen soll, und 0, wenn sie beide gleich zu gewichten sind.  1 2 3 4  const numbers = [10, 5, 20, 3]; numbers.sort((a, b) =\u003e a - b); console.log(numbers); // [3, 5, 10, 20]   includes() (contains) Die includes() Methode wird verwendet, um zu prüfen, ob ein bestimmtes Element in einem Array vorhanden ist oder nicht. Die Funktion gibt true zurück, wenn das Element gefunden wurde, sonst false.\n1 2 3 4  const fruits = ['Banana', 'Mango', 'Apple', 'Orange']; const isAppleInFruits = fruits.includes('Apple'); console.log(isAppleInFruits); // true   includes() kann auch mit einem optionalen zweiten Parameter verwendet werden. Dies ist der Index, der angibt, ab wo die Suche beginnen soll. Wenn dieser Parameter nicht angegeben wird, beginnt die Suche am Anfang des Arrays.\n1 2 3 4  const fruits = ['Banana', 'Mango', 'Apple', 'Orange']; const isAppleInFruits = fruits.includes('Banana', 2); console.log(isAppleInFruits); // false   some() Die Methode some() prüft, ob zumindest ein Element in einem Array den angegebenen Test bestehen würde. Die Funktion gibt true zurück, wenn mindestens ein Element den Test besteht, andernfalls gibt sie false zurück.\n1 2 3 4  const fruits = ['Banana', 'Mango', 'Apple', 'Orange']; const isAppleInFruits = fruits.some(fruit =\u003e fruit === 'Apple'); console.log(isAppleInFruits); // true   find() Die find() Methode wird verwendet, um das erste Element in einem Array zu finden, das den angegebenen Test bestehen würde. Die Funktion gibt das gefundene Element zurück, falls eines gefunden wird, andernfalls gibt sie undefined zurück.\n1 2 3 4  const fruits = ['Banana', 'Mango', 'Apple', 'Orange']; const apple = fruits.find(fruit =\u003e fruit === 'Apple'); console.log(apple); // 'Apple'   reduce() Die reduce()-Methode wird verwendet, um das Array auf einen einzigen Wert zu reduzieren. Dabei wird der erste Wert (“Accumulator”) genommen und mit dem zweiten kombiniert. Das Ergebnis davon ist der neue Accumulator und mit dem nächsten Wert (Wert des dritten Elements) im Array kombiniert. Dies solange bis man durch das gesamte Array durch ist.\nBeispiel mit nur Reduktionsfunktion:\n1 2 3 4 5 6  const numbers = [1, 2, 3, 4, 5]; const sum = numbers.reduce(function(accumulator, currentValue) { return accumulator + currentValue; }); console.log(sum); // 15   ","categories":"","description":"Modul #F4 - JavaScript - Higher Order Functions von Arrays.\n","excerpt":"Modul #F4 - JavaScript - Higher Order Functions von Arrays.\n","ref":"/docs/web/javascript/09_js_higher_order_functions_arrays/","tags":"","title":"Arrays - Higher Order Functions"},{"body":"","categories":"","description":"Aufgaben zu Modul #J7 - Collections\n","excerpt":"Aufgaben zu Modul #J7 - Collections\n","ref":"/labs/java/java-collections/","tags":"","title":"Aufgaben zu Java - Collections"},{"body":"Ziele  Ich kann auswendig in eigenen Worten beschreiben, was Enums sind und wann sie benutzt werden. Ich setze Enums in einem konkreten Code-Beispiel selbständig und korrekt ein. Ich setze Methoden und Konstruktoren in Enums in einem konkreten Code-Beispiel selbständig und korrekt ein.  Enums Enums (kurz für “enumeration”, zu Deutsch “Aufzählung”) bieten die Möglichkeit, vordefinierte Konstanten zusammen zu gruppieren. Enums werden dann verwendet, wenn alle mögliche Werte zur Kompilierzeit bekannt sind (z.B. alle Wochentage, alle Planeten im Sonnensystem usw.).\nIn Java sind Aufzählungstypen als Klassen realisiert und die definierten Werte sind als Objekte implementiert. Daraus ergeben sich folgenden nützlichen Eigenschaften:\n Enums können Konstruktoren, Instanzvariablen und Instanz-Methoden beinhalten Der Name der Enum-Werte kann mithilfe der toString()-Methode (oder mit dem Keywort this) im Klartext (String) ausgegeben werden. Mithilfe des ==-Operators kann auf Gleichheit geprüft werden. Enumerations können in switch-Anweisungen verwendet werden. Mithilfe der values-Methode wird ein Array zurückgegeben, das alle Elemente der Enumeration enthält. In Verbindung mit der erweiterten for-Schleife (for-each) können die Elemente sehr einfach durchlaufen werden.  Obwohl Java Enums als Klassen realisiert werden, müssen sie nicht mit new instanziiert werden. Im Gegensatz zu Klassen können Java-Enums weder erweitert werden noch von anderen Klassen erben.\nEnums definieren Enums können innerhalb oder ausserhalb einer Klasse definiert werden (nicht aber innerhalb einer Methode!). Um ein Enum zu definieren, wird das Java-Schlüsselwort enum verwendet.\nDie erste Zeile(n) innerhalb der Enum-Definition soll eine kommagetrennte Liste von Konstanten beinhalten (in Java per Konvention mit Grossbuchstaben geschrieben). Danach werden allfällige Variablen, Methoden und Konstruktoren definiert.\nJede Enum-Konstante ist implizit public static final. Weil es static ist, kann über den Enum-Namen darauf zugegriffen werden. Weil es final ist, kann es nicht erweitert werden.\nBeispiel: Definition ausserhalb einer Klasse 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  enum Weekday { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY } public class DailyPlanner { private static void dailyMood(Weekday weekday) { switch (weekday) { case MONDAY: System.out.println(\"I don't like Mondays\"); break; case FRIDAY: System.out.println(\"Thank God it's Friday\"); break; case SATURDAY: case SUNDAY: System.out.println(\"There aren't enough days in the weekend\"); break; default: System.out.println(\"Some Midweek days feel like Mondays when I wish they were Fridays\"); break; } } public static void main(String[] args) { dailyMood(Weekday.MONDAY); } }   Beispiel: Definition innerhalb einer Klasse 1 2 3 4 5 6 7 8 9  public class DailyPlanner { enum Weekday { MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY } public static void main(String[] args) { System.out.println(\"I like \" + Weekday.SATURDAY + \" and \" + Weekday.SUNDAY + \" the best\"); } }   Enum mit einem Konstruktor Ein Enum-Konstruktor wird für jede Enum-Konstante während dem Klassenladen des Enums ausgeführt. Es ist unmöglich, Enum-Objekte explizit zu erzeugen. Darum kann ein Enum-Konstruktor auch nicht direkt aufgerufen werden.\nBeispiel: Enum mit einem Konstruktor 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  enum Weekday { MONDAY(1), TUESDAY(2), WEDNESDAY(3), THURSDAY(4), FRIDAY(5), SATURDAY(6), SUNDAY(7); final int dayNumber; Weekday(int dayNumber) { this.dayNumber = dayNumber; System.out.println(\"Konstruktor für Tag \" + this.toString() + \" wird ausgeführt. Das ist der \" + this.dayNumber+ \". Tag in der Woche\"); } } public class TestDays { public static void main(String[] args) { Weekday monday = Weekday.MONDAY; // Output:  // Konstruktor für Tag MONDAY wird ausgeführt. Das ist der 1. Tag in der Woche  // Konstruktor für Tag TUESDAY wird ausgeführt. Das ist der 2. Tag in der Woche  // Konstruktor für Tag WEDNESDAY wird ausgeführt. Das ist der 3. Tag in der Woche  // Konstruktor für Tag THURSDAY wird ausgeführt. Das ist der 4. Tag in der Woche  // Konstruktor für Tag FRIDAY wird ausgeführt. Das ist der 5. Tag in der Woche  // Konstruktor für Tag SATURDAY wird ausgeführt. Das ist der 6. Tag in der Woche  // Konstruktor für Tag SUNDAY wird ausgeführt. Das ist der 7. Tag in der Woche  System.out.println(monday); // Output: MONDAY  } }   Enum mit Methoden Ein Enum kann konkrete wie auch abstrakte Methoden beinhalten. Wenn ein Enum eine abstrakte Methode beinhaltet, muss jede Instanz (also jede Konstante) dieses Enums diese Methode umsetzen (mehr Information über abstrakten Methoden findest du im Modul OOD).\nBeispiel: Enum mit konkreten und abstrakten Methoden 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  enum Color { RED { // Umsetzung der abstrakten Methode für die Farbe RED  @Override public void colorPoem() { System.out.println(\"Roses are red\"); } }, VIOLET { // Umsetzung der abstrakten Methode für die Farbe VIOLET  @Override public void colorPoem() { System.out.println(\"Violets are blue\"); } }; // Konkrete Methode, welche für alle Werte im Enum, dasselbe tut  public void generalColorInfo(){ System.out.println(\"Everyday color is a great color!\"); } // Abstrakte Methode, welche von jedem Wert im Enum umgesetzt werden muss  public abstract void colorPoem(); } public class Test { public static void main(String[] args) { Color violet = Color.VIOLET; violet.generalColorInfo(); // Output: Everyday color is a great color!  violet.colorPoem(); // Output: Violets are blue  Color red = Color.RED; red.generalColorInfo(); // Output: Everyday color is a great color!  red.colorPoem(); // Output: Roses are red  } }    Jetzt bist du dran. Löse bitte die Aufgaben in den OOP-Labs.\n","categories":"","description":"Modul #J2\n","excerpt":"Modul #J2\n","ref":"/docs/java/j2-oop/09-enums/","tags":"","title":"Enums"},{"body":"","categories":"","description":"Exercises zu Modul #J8 - JDBC\n","excerpt":"Exercises zu Modul #J8 - JDBC\n","ref":"/labs/java/java-jdbc/","tags":"","title":"Java Exercises - JDBC"},{"body":"Ziele  Ich weiss, wofür Methoden sind. Ich weiss, wie eine Methode aufgebaut ist. Ich weiss, wie eine Methode mit Parameter aufgebaut ist. Ich weiss, wie eine Methode mit Rückgabewert aufgebaut ist. Ich kann Methoden gezielt in meinem Programm Methoden einsetzen.  Was sind Methoden? In Java sind Methoden Blöcke von Code, die spezifische Aufgaben ausführen. Sie dienen zur Organisation und Wiederverwendung von Code. Methoden ermöglichen es, eine Gruppe von Anweisungen in einem eigenen Codeblock zu kapseln und diesen Codeblock durch einen Funktionsaufruf auszuführen.\nAufbau einer Methode Eine Methode in Java ist wie folgt aufgebaut:\n1 2 3  Rückgabetyp methodName(Parameterliste) { // Methoden Code }    Rückgabetyp: Dieser Typ gibt an, welchen Datentyp die Methode zurückgibt. Wenn die Methode keinen Rückgabewert hat, wird void verwendet. methodName: Der Name der Methode, über den sie aufgerufen wird. Parameterliste: Hier werden die Parameter aufgelistet, die die Methode erwartet. Methoden Code: Dies ist der Codeblock, der die spezifische Aufgabe der Methode ausführt.  Methoden mit Parametern Methoden können auch Parameter akzeptieren, die beim Aufruf übergeben werden. Hier ist ein Beispiel:\n1 2 3  void begrüßeBenutzer(String name) { System.out.println(\"Hallo, \" + name + \"!\"); }   In diesem Fall erwartet die Methode begrüßeBenutzer einen String-Parameter, der den Namen des Benutzers enthält.\nLernvideo Wenn du dir die Erklärung noch mit einem Video genauer anschauen möchtest, empfiehlt dir das Coaching-Team dieses Video.\nMethoden mit Rückgabewert Methoden können einen Wert zurückgeben. Hier ist ein Beispiel:\n1 2 3 4  int addiere(int a, int b) { int summe = a + b; return summe; }   In diesem Fall gibt die Methode addiere die Summe der beiden übergebenen Zahlen als int zurück.\nLernvideo Wenn du dir die Erklärung noch mit einem Video genauer anschauen möchtest, empfiehlt dir das Coaching-Team dieses Video.\nJetzt bist du dran. Löse bitte die Aufgabe 7 in den Labs.\n","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/09_methods/","tags":"","title":"Methoden"},{"body":"Control Flow Im Doc Directives hast du die Directives *ngIf, *ngFor, usw. kennengelernt. In Angular 17 wurde nun ein Built-in Control Flow hinzugefügt, was bedeutet, dass Angular eine eigene Struktur für diese Operationen erstellt hat. Diese Control Flows können in jedem Template (HTML) eingesetzt werden und lösen ab sofort die bisherigen Directives ab.\nVerwendung Wie bereits erwähnt können die Control Flows direkt in jedem HTML eingesetzt werden. Aktuell gibt es folgende Control Flows.\n@if \u0026 @else Mit den beiden neuen @if und @else wird die Verwendung vereinfacht, so dass beim Lesen des Codes auch das else klar sichtbar ist. Aktuell musste ein if und also so gemacht werden:\n1 2 3 4 5 6  \u003cdiv *ngIf=\"loggedIn; else anonymousUser\"\u003e The user is logged in \u003c/div\u003e \u003cng-template #anonymousUser\u003e The user is not logged in \u003c/ng-template\u003e   Mit dem neuen Control Flow vereinfacht sich der Code zu:\n1 2 3 4 5  @if (loggedIn) { The user is logged in } @else { The user is not logged in }   Auch durch dieses Update möglich ist ein @else if, was mit den alten directives nur sehr schwer und unschön möglich war.\n@switch Der neue @switch Control Flow in Angular 17 bietet eine verbesserte und vereinfachte Möglichkeit, mehrere Bedingungen in einem Template zu überprüfen. Hier ist ein Vergleich zwischen dem alten und dem neuen Ansatz:\nAngular 16:\n1 2 3 4 5 6  \u003cdiv [ngSwitch]=\"accessLevel\"\u003e \u003cadmin-dashboard *ngSwitchCase=\"admin\"/\u003e \u003cmoderator-dashboard *ngSwitchCase=\"moderator\"/\u003e \u003cuser-dashboard *ngSwitchDefault/\u003e \u003c/div\u003e   Angular 17:\n1 2 3 4 5  @switch (accessLevel) { @case ('admin') { \u003cadmin-dashboard/\u003e } @case ('moderator') { \u003cmoderator-dashboard/\u003e } @default { \u003cuser-dashboard/\u003e } }   Wie du siehst, ist der neue @switch Control Flow viel lesbarer und einfacher zu verwenden als der alte ngSwitch. Es ermöglicht eine klare und direkte Art, verschiedene Fälle in deinem Code zu behandeln.\n@for Der @for Control Flow in Angular 17 bietet eine verbesserte und vereinfachte Möglichkeit, über eine Sammlung von Elementen zu iterieren. Hier ist ein Vergleich zwischen dem alten und dem neuen Ansatz:\nAngular 16:\n1 2 3  \u003cdiv *ngFor=\"let item of items\"\u003e {{item}} \u003c/div\u003e   Angular 17:\n1 2 3  @for (item of items; track item) { {{item}} }   Wie du siehst, ist der neue @for Control Flow viel lesbarer und einfacher zu verwenden als der alte *ngFor. Es ermöglicht eine klare und direkte Art, über eine Sammlung von Elementen in deinem Code zu iterieren.\nEs ist auch möglich, den Index des aktuellen Elements zu erhalten, aber das wird jetzt mit track gemacht. Hier ist ein Beispiel:\n1 2 3  @for (item of items; track $index) { {{$index}}: {{item}} }   In diesem Beispiel gibt {{$index}} den Index des aktuellen Elements in der Sammlung zurück und {{item}} gibt den Wert des aktuellen Elements zurück. Dies ist besonders nützlich, wenn du sowohl den Index als auch den Wert des Elements in deinem Template benötigst.\nPassend zum @for gibt es das @empty, welches einen Standardwert oder Ansicht bereitstellt. Hier ein Beispiel dazu:\n1 2 3 4 5  @for (user of users; track user.id) { {{ user.name }} } @empty { Empty list of users }   ","categories":"","description":"Modul #F6 - Angular - Neuer Control Flow in Angular\n","excerpt":"Modul #F6 - Angular - Neuer Control Flow in Angular\n","ref":"/docs/web/angular/02_9_angular_control_flow/","tags":"","title":"Control Flow"},{"body":"Ziele  Du kennst verschiedenen Arten, um Objekte zu erstellen. Du kennst die unterschiedlichen Arten, um die Variablen eines Objektes abzufragen. Du kannst Objekte-Eigenschaften anpassen und auch neue Eigenschaften hinzufügen. Du kannst Objekte in einen JSON-String kodieren und einen JSON-String in ein Objekt dekodieren. Du, weisst, wofür der Spread-Operator ist, und wie er angewandt wird.  Objekte Ein Objekt ist eine Sammlung von Eigenschaften, die eine Entität repräsentieren.\nObjekte können verschiedene Datentypen enthalten, einschließlich anderen Objekten, Arrays, Strings, Zahlen und booleschen Werten.\n1 2 3 4 5  const person = { name: 'Max', age: 20, isStudent: true };   Objekt erstellen Man kann Objekte auf zwei verschiedene Arten erstellen. Zum einen mit der Objektliteral-Syntax und zum anderen mit der Konstruktor-Syntax.\nObjektliteral-Syntax Die einfachere und auch gängigere Methode ist mit der Objektliteral-Syntax. Bei dieser Methode können die Eigenschaften und Werte direkt innerhalb geschweifter Klammern angeben werden:\n1 2 3 4 5  const person = { name: 'Max', age: 20, isStudent: true };   Konstruktor-Syntax. Die andere Möglichkeit, ein neues Objekt zu erstellen, besteht darin, einen Konstruktor zu verwenden:\n1 2 3 4  const person = new Object(); person.name = 'Max'; person.age = 20; person.isStudent = true;   Man kann auch Methoden (Funktionen) innerhalb des Objekts hinzufügen, indem man sie als Eigenschaften definiert:\n1 2 3 4 5 6 7 8  const person = { name: 'Max', age: 20, isStudent: true, sayHello: function() { console.log('Hello, my name is ' + this.name); } };   Eingenschaften von Objekten abfragen Um die Eigenschaften eines Objekts abzurufen, gibt es zwei verschiedene Arten:\n Mit der Punkt-Notation, und der Klammern-Notation.  Punkt-Notation Eine bestimmte Eigenschaft (“property”) kann abgefragt werden, indem nach dem Objekt ein Punkt . angehängt wird und der Name der Eigenschaft hingeschrieben wird:\n1 2 3 4 5 6 7 8 9  const person = { name: 'Max', age: 20, isStudent: true }; console.log(person.name); // 'Max' console.log(person.age); // 20 console.log(person.isStudent); // true   Klammern-Notation Im Gegensatz zu der Punkt-Notation, wird bei der Klammern-Notation der Name der Eigenschaft als String übergeben:\n1 2 3 4 5 6 7 8 9  const person = { name: 'Max', age: 20, isStudent: true }; console.log(person['name']); // 'Max' console.log(person['age']); // 20 console.log(person['isStudent']); // true   Auch Methoden (Funktionen) innerhalb eines Objekts können über die Punkt-Notation oder Klammer-Notation aufgerufen werden:\n1 2 3 4 5 6 7 8 9 10 11  let person = { name: 'Max', age: 20, isStudent: true, sayHello: function() { console.log('Hello, my name is ' + this.name); } }; console.log(person.sayHello()); // 'Hello, my name is Max' console.log(person['sayHello']()); // 'Hello, my name is Max'   Diese Punkt-Notation könnte zu mehr Flexibilität und Wiederverwendbarkeit von Code führen. Beispielsweise, wenn wir eine Funktion generell für Objekte schreiben und bestimmte Dinge mit bestimmten Eigenschaften durchführen möchten, die wir später separat angeben können möchten:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  let person = { name: 'Max', age: 20, isStudent: true }; function printProperties(object, properties) { for (const property of properties) { console.log(object[property]); } } printProperties(person, ['name', 'age', 'isStudent']); // Max // 20 // true   In den meisten Fällen empfiehlt es sich aber, auf so ein Gebastel zu verzichten, da der Code so sehr schnell sehr unverständlich für andere Personen wird.\nObjekte updaten Um Eigenschaften von Objekte anzupassen, kann wieder die Punkt-Notation sowie Klammer-Notation verwendet werden:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  let person = { name: 'Max', age: 20, isStudent: true, sayHello: function() { console.log('Hello, my name is ' + this.name) } }; person.age = 30; console.log(person.age); // 30  person['age'] = 40; console.log(person.age); // 40  person.sayHello = function() { console.log('Hello, my name is ' + this.name + ' and I am ' + this.age + ' years old.'); } person.sayHello(); // 'Hello, my name is Max and I am 40 years old.'   Hinzufügen neuer Eigenschaften Um eine neue Eigenschaft zu einem Objekt hinzuzufügen, muss lediglich einen Wert mit einem neuen Eigenschaftsnamen zugewiesen werden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  let person = { name: 'Max', age: 20, isStudent: true, sayHello: function() { console.log('Hello, my name is ' + this.name); } }; person.job = 'programmer'; console.log(person.job); // 'programmer  person['hobby'] = 'hockey'; console.log(person.hobby); // 'hockey  person.sayGoodbye = function() { console.log('Bye!'); } person.sayGoodbye(); // 'Bye!'   JSON  JSON (JavaScript Object Notation) ist ein Textformat zum Austausch von Daten. Es wird oft in der Webprogrammierung verwendet, um Daten zwischen einem Client und einem Server auszutauschen.\n Objekte können mithilfe von JSON codiert und dekodiert werden. Ein JavaScript-Objekt ist im Wesentlichen eine Sammlung von Key-Value-Paaren. Ein JSON-Objekt ist eine Zeichenfolge, die diese Key-Value-Paare im JSON-Format enthält.\nEs ist wichtig zu beachten, dass JSON nur bestimmte Datentypen unterstützt, darunter Zeichenfolgen, Zahlen, Booleans, null, Arrays und Objekte. Funktionen, undefinierte Werte können nicht in JSON codiert werden.\nObjekt in JSON-String umwandeln Um ein JavaScript-Objekt in JSON zu kodieren, kann die Methode JSON.stringify() verwendet werden. Diese Methode nimmt das JavaScript-Objekt als Argument und gibt einen String zurück, der das Objekt im JSON-Format darstellt:\n1 2 3 4 5 6 7 8 9  const person = { name: 'Max', age: 20, isStudent: true, }; const jsonString = JSON.stringify(person); console.log(jsonString); // '{\"name\":\"Max\",\"age\":20,\"isStudent\":true}'   JSON-String in Objekt dekodieren Um eine JSON-Zeichenfolge in ein JavaScript-Objekt zu dekodieren, kann die Methode JSON.parse() verwendet werden. Diese Methode nimmt die JSON-Zeichenfolge als Argument und gibt ein JavaScript-Objekt zurück:\n1 2 3 4 5  const jsonString = '{\"name\":\"Max\",\"age\":20,\"isStudent\":true}'; const person = JSON.parse(jsonString); console.log(person); // Object { name: \"Max\", age: 20, isStudent: true }   Spread Operator Der Spread-Operator ist ein Operator in JavaScript, der es ermöglicht, ein Array oder einen Objekt-Literal-Ausdruck in eine Liste von Argumenten zu “entpacken”. Der Operator wird durch drei Punkte (...) dargestellt.\nDer Spread-Operator wird verwendet, um ein Array in eine Liste von Elementen zu “entpacken”. Dadurch können Arrays einfach zusammengeführt oder kopiert werden.\n1 2 3 4 5 6  const array1 = [1, 2, 3]; const array2 = [4, 5, 6]; const combinedArray = [...array1, ...array2]; console.log(combinedArray); // [1, 2, 3, 4, 5, 6]   Das Gleiche gilt auch für Objekte.\n1 2 3 4 5 6  const person = { name: 'Max', age: 20 }; const address = { city: 'New York', country: 'USA' }; const combinedObject = { ...person, ...address }; console.log(combinedObject); // { name: 'Max', age: 20, city: 'New York', country: 'USA' }   Der Operator kann auch zum Erstellen von Kopien von Arrays oder Objekten verwendet werden, anstatt sie zu ändern.\n1 2 3 4 5 6 7 8 9  const originalArray = [1, 2, 3]; const copiedArray = [...originalArray]; console.log(copiedArray); // [1, 2, 3]  copiedArray.push(4); console.log(originalArray); // [1, 2, 3] console.log(copiedArray); // [1, 2, 3, 4]   Er kann auch als Parameter in einem Funktionsaufruf verwendet werden. Dadurch können Argumente einer Funktion als einzelne Werte an die Funktion übergeben werden, anstatt als Array oder Objekt.\nWenn der Spread-Operator als Parameter verwendet wird, müssen die anderen Parameter vor ihm stehen, da er alle verbleibenden Argumente “entpackt”.\n1 2 3 4 5 6 7 8 9  function sumNumbers(x, y, z) { return x + y + z; } const numbers = [1, 2, 3]; const result = sumNumbers(...numbers); console.log(result); // 6   Im Parameter ist er besonders nützlich, wenn eine Funktion eine variable Anzahl von Argumenten akzeptieren soll:\n1 2 3 4 5 6 7  function concatenateStrings(separator, ...strings) { return strings.join(separator); } const result = concatenateStrings('-', 'hello', 'world'); console.log(result); // 'hello-world'   ","categories":"","description":"Modul #F4 - JavaScript - Objekte in JavaScript.\n","excerpt":"Modul #F4 - JavaScript - Objekte in JavaScript.\n","ref":"/docs/web/javascript/10_js_objects/","tags":"","title":"Objekte"},{"body":"Was ist CSS? Nun haben wir gelernt, was HTML ist, und wie es angewendet werden kann. Wie euch wahrscheinlich bereits aufgefallen ist, sieht pures HTML jedoch nicht besonders schön aus.\nUnd genau da kommt CSS (Cascading Style Sheets) ins Spiel. CSS ist da, um unsere HTML-Elemente zu stylen, wodurch wir unser gewünschtes Design gestalten können.\nDabei gibt es verschiedene Wege CSS zu schreiben und auch dies dann in die Webseite einzubinden.\n","categories":"","description":"Modul #F3 - HTML und CSS - Einführung ins CSS.\n","excerpt":"Modul #F3 - HTML und CSS - Einführung ins CSS.\n","ref":"/docs/web/html_css/10_css_intro/","tags":"","title":"CSS"},{"body":"Ziele  Ich kann erklären, was Collections sind. Ich kenne grob den Aufbau des Collection Frameworks. Ich kenne die wichtigsten Interfaces und ihre Merkmale: Lists, Sets, Queues, Maps Ich verstehe den Einsatz der Hash-Funktion für eine Performance-Verbesserung. Ich kenne die wichtigsten Implementationen und ihre Einsatzmöglichkeiten: ArrayList, HashSet, HashMap Ich verstehen die Funktionsweise und Anwendung der Klasse ArrayList. Ich verstehen die Funktionsweise und Anwendung der Klasse HashSet. Ich verstehen die Funktionsweise und Anwendung der Klasse HashMap. Ich verstehen die Funktionsweise und Anwendung der Klasse Stack. Ich kenne die Funktionsweise und der Unterschied der Klassen Queue + Deque und kann diese anwenden. Ich verstehen die Funktionsweise und Anwendung der Klasse LinkedList.  Voraussetzungen  Gute Grundlagenkenntnisse von Java-Anwendungen   Einleitung Beim Programmieren müssen wir oft Daten speichern bzw. Informationen verwalten, um gewisse Probleme zu lösen. In diesem Modul werden wir das Java Collection Framework anschauen, weil dieses Framework uns die Werkzeuge zum effizienten Verwalten von Informationen liefert.\nEine Collection ist ein Objekt, dass eine Sammlung von Objekten darstellt, d.h. mehrere Elemente zu einer Einheit zusammenfasst. In der Regel enthält eine Collection Datenelemente, die zusammen eine natürliche Gruppe bilden, wie z.B. eine Fussballmannschaft, die eine “Sammlung” von Fussballspielern ist, d.h. Fussballspieler enthält. Collections bieten uns im Allgemeinen die Möglichkeit neue Elemente hinzuzufügen, Elemente zu löschen und sonst die Elemente zu verwalten.\nEin bekanntes Beispiel für eine Collection ist die ArrayList Klasse, wobei eine ArrayList eine Liste von Objekten darstellt, welche skalierbar ist. Die ArrayList Klasse liefert uns beispielsweise die Methode add, mit welcher Elemente an das Ende einer Liste angefügt werden kann:\n1 2 3 4 5  List\u003cString\u003e farben=new ArrayList\u003cString\u003e(); farben.add(\"rot\"); farben.add(\"blau\"); farben.add(\"gelb\"); farben.add(\"orange\");   Oder sie liefert uns die Methode remove, welche Elemente aus der Liste entfernt:\n1 2 3 4 5  List\u003cString\u003e farben=new ArrayList\u003cString\u003e(); farben.add(\"rot\"); farben.add(\"blau\"); farben.add(\"gelb\"); farben.remove(\"blau\");   Wir werden die ArrayList Klasse später noch genauer anschauen.\nDas Java Collection Framework ist eine Menge von Interfaces und Klassen, die allgemein wiederverwendbare Collection-Datenstrukturen liefern. Es bietet uns also sowohl Interfaces, die Collection-Typen definieren, als auch Klassen, die diese implementieren an. Obwohl es als Framework bezeichnet wird, funktioniert es im Grunde wie eine Library.\nDas Java Collections Frameworks stellt für uns Hochleistungsimplementierungen von Datenstrukturen und Algorithmen bereit, um Sammlungen von Objekten beliebiger Datentypen darzustellen. Da wir diese Funktionalität nicht immer selber programmieren müssen, reduziert sich für uns der Programmieraufwand markant.\nDas Java Collection Framework befindet sich im Paket java.util.\nWir haben die ArrayList Klasse (java.util.ArrayList) als Beispiel für eine Collection gesehen. Die ArrayList Klasse repräsentiert eine Collection vom Typ List (implementiert also das Interface java.util.List) und wird mithilfe von zugrunde liegenden Arrays implementiert, deshalb auch der Name ArrayList. Es gibt aber auch andere Klassen, welche Collections vom Typ List darstellen: Wir werden später einige davon noch sehen.\nTheorie  Das Java Collection Framework ist eine einheitliche Architektur zur Darstellung und Bearbeitung von Collections, welche folgendes enthält:\n  Interfaces: Dies sind abstrakte Datentypen, welche verschiedene Collections darstellen. Mithilfe von Interfaces können Collections unabhängig von den Details ihrer Darstellung bearbeitet werden. Die Interfaces bilden in Java die Hierarchie aller Collections.\n  Implementierungen/Klassen: Dies sind die konkreten Implementierungen der Collection-Interfaces. Im Grunde handelt es sich um wiederverwendbare Datenstrukturen, mit konkreten Implementierungen.\n  Algorithmen/Methoden: Dies sind die Methoden, die nützliche Algorithmen, wie z. B. Hinzufügen, Löschen, Suchen und Sortieren, von Objekten in Collections durchführen. Viele Methoden und Algorithmen sind für verschiedene Arten der Collections wiederverwendbar.\n  Die Interfaces in der folgenden Abbildung (Collections, Set, List, Queue, Deque, Map …) bilden die Grundlage des Collection Frameworks. Durch diese grundlegenden Interfaces bildet sich eine Hierarchie innerhalb des Collection Frameworks:\nAuf dieser Grafik ist sichtbar, dass zum Beispiel:\n Sets spezielle Typen von Collections sind. SortedSets wiederum sind spezielle Typen von Sets. Lists sind spezielle Typen von Collections. ArrayLists sind spezielle Typen von Lists.  In der Abbildung sieht man zu dem, dass das Collection Framework aus zwei verschiedenen Teilen besteht: Zum einen die Collections und zum anderen die Maps. Maps stellen somit keine “echten” Collections dar. Maps sind trotzdem Datenstrukturen zur Darstellung von Sammlungen von Objekten als eine Einheit.\n Collection Eine Collection ist ein Objekt, dass eine Sammlung von Objekten darstellt, d.h. mehrere Elemente zu einer Einheit zusammenfasst. In der Regel enthält eine Collection Datenelemente, die zusammen eine natürliche Gruppe bilden, wie z.B. eine Fussballmannschaft, die eine “Sammlung” von Fussballspielern ist, d.h. Fussballspieler enthält. Collections bieten uns im Allgemeinen die Möglichkeit neue Elemente hinzuzufügen, Elemente zu löschen und sonst die Elemente zu verwalten.\nAllgemeine Methoden:\nsize(), isEmpty(), contains(Object element), add(E element), remove(Object element), clear(), iterator()\nSammelmethoden:\ncontainsAll(Collection\u003c?\u003e c), addAll(Collection\u003c? extends E\u003e c), removeAll(Collection\u003c?\u003e c), retainAll(Collection\u003c?\u003e c)\nList Eine List ist eine geordnete Sequenz, welche duplizierte Elemente erlaubt. Zusätzlich zu den vererbten Methoden der Collection bietet die List folgende an:\nElemente auf Basis ihrer Position zugreifen: get, set, addAll\nSuche nach einem bestimmten Element in der Liste:\nindexOf, lastIndexOf\nIteriert durch die Liste:\nlistIterator\nEin Teilbereich der Lite erstellen:\nsublist\n Es existieren zwei allgemeine Set Implementierungen:\n ArrayList welche in Normalfall die leistungsfähigere ist. LinkedList welche bei bestimmten Anwendungsfällen die bessere Lösung ist.   Set Ein Set ist eine Collection, in welche man ein Element nur einmal hinzufügen kann. Das Set enthält die Funktionen der Collection, stellt aber sicher, dass Kopien von Elementen verhindert werden. Die equals und hashCode Funktionen spielen dabei eine wichtige Rolle. Sie definieren, wann zwei Elemente gleich sind.\nElemente hinzufügen, löschen und Infos abfragen: add(), contains(), remove(), clear(), size(), isEmpty()\nSammelmethoden: addAll(), removeAll(), containsAll()\nZugriff wie auf eine Collection: iterator()\n Es existieren drei allgemeine Set Implementierungen:\n HashSet: Speichert die Elemente in einer Hash-Table, welche die leistungsstärkste Implementierung darstellt. Nachteil: Die Implementierung garantiert keine Reihenfolge. TreeSet: Speichert die Elemente in einem Red-Black Tree und ordnet die Elemente anhand deren Werte ein. Die Implementierung ist wesentlich langsamer als das HashSet. LinkedHashSet: Speichert die Elemente in einer Hash-Tabel ab, welche als verknüpfte Liste (Linked List) implementiert ist. Die Reihenfolge der Elemente entspricht der Reihenfolge, wie sie in das Set eingefügt wurden. Diese Implementierung hat einen geringfügigen höheren Preis als das HashSet.   Map Eine Map ist ein Objekt, dass Schüssel (keys) auf Werte (values) zuordnet. Eine Map kann nicht zwei gleiche Schlüssel enthalten. Jeder Schlüssel zeigt genau auf einen Wert. Das Interface Map definiert Grundfunktionen für das Einfügen, Lesen, Löschen, Abfragen von Schlüsseln usw.\nZusätzlich zu den vererbten Methoden der Collection bietet die List folgende an:\nElemente auf Basis ihrer Position zugreifen: put(), get(), containsKey(), containsValue()\nSammelmethoden: putAll()\nZugriff wie auf eine Collection: keySet(), entrySet(), values()\n Es existieren drei allgemeine Map Implementierungen, deren Verhalten analog den drei Set Implementierungen (HashSet, TreeSet, and LinkedHashSet) entspricht:\n HashMap: Speichert die Elemente in einer Hash-Table, welche die leistungsstärkste Implementierung darstellt. Nachteil: Die Implementierung garantiert keine Reihenfolge.. TreeMap: Speichert die Elemente in einem Red-Black Tree und ordnet die Elemente anhand deren Werte ein. Die Implementierung ist wesentlich langsamer als das HashMap. LinkedHashMap: Speichert die Elemente in einer Hash-Tabel ab, welche als verknüpfte Liste (Linked List) implementiert ist. Die Reihenfolge der Elemente entspricht der Reihenfolge, wie sie in die Map eingefügt wurden. Diese Implementierung hat einen geringfügigen höheren Preis als das HashMap.   Performanz Das Collection-Framework macht regen Gebrauch von der Hash-Funktion. Klassen wie HashSet oder HashMap verwenden die Hash-Funktoin zur Steigerung der Performanz.\nHash-Funktion Alle Java Klassen erben von der Klasse java.lang.Object die Methode public int hashCode(). Diese liefert ein Hash Code von der eigenen Instanz zurück. Bei Java ist diese ein Integer.\n Hashing bezeichnet die Umwandlung einer Zeichenfolge in einen normalerweise kürzeren, numerischen Wert oder Schlüssel mit fester Länge.\n Der Java Hash Code ist nicht immer eindeutig. Es kann also vorkommen, dass unterschiedliche Instanzen von unterschiedlichen Klassen den gleichen Hash Code zurückreichen. In der Praxis ist das kein Problem, da der Hash Code nur für eine Vorselektierung verwendet wird.\nVerwendung Stellen wir uns den Einsatz bei einem Set vor: Bei einem Set können wir mit der Methode contains(Object o) abfragen, ob ein Objekt in einem Set vorhanden ist. Das Set muss somit jedes Objekt mit dem Objekt vergleichen, welches wir der Methode contains übergeben. Wenn wir uns vorstellen, dass ein Objekt viele Instanzvariablen enthalten kann, welche wiederum Objekte sein können, so kann jeder Vergleich eine aufwändige Arbeit sein.\nBei einer Handvoll Objekte im Set ist das vernachlässigbar. Bei einigen tausend Objekte sieht es schon schlechter aus.\nDie Klasse HashSet wendet eine andere Strategie an:\n Beim Hinzufügen eines neuen Objekts, berechnet sie mit der hashCode() Methode deren Hash Code. Dieser Hash Code wird für das neue Objekt gespeichert. Bei der Methode contains(Object o) berechnet sie den Hash Code des Vergleichsobjekts. Anschliessen vergleicht sie diesen mit den gespeicherten Hash Code (Integer-Vergleich). Da der Java Hash Code nicht eindeutig ist, vergleicht sie bei jedem Treffer zur Sicherheit beide Objekte mit der equals(Object o) Methode.   Mit dem Hash Code Strategie kann das HashSet die allermeisten Vergleiche auf ein Integer-Vergleich vereinfachen.\n Anforderung an die Hash Berechnung Was ist die Anforderung an die Java hashCode() Methode?\n  Die Berechnung muss schnell sein. Der Hash Code sollte in der Praxis meistens eindeutig sein.   ","categories":"","description":"Modul #J7\n","excerpt":"Modul #J7\n","ref":"/docs/java/java-collections/","tags":"","title":"Java Collections"},{"body":"Ziele  Ich kann eine Eingabe von der Konsole lesen und in einer Variablen speichern.  Scanner Eine Möglichkeit, Benutzereingaben in Java vorzunehmen, besteht in der Verwendung der Scanner-Klasse, die verwendet wird, indem zuerst die Definition der Klasse wie in Zeile 1 importiert und dann ein Objekt dieser Klasse wie in Zeile 6 erstellt wird.\n1 2 3 4 5 6 7 8 9 10  import java.util.Scanner; public class TakeInput { public static void main (String[] args) { Scanner scanner = new Scanner(System.in); System.out.println(\"Enter your name: \"); String name = scanner.nextLine(); System.out.println(\"Your name is: \" + name); } }   Zeile 1\nDer erste Schritt besteht darin, die Scanner-Klasse zu importieren, damit sie im folgenden Code verwendet werden kann. Die Java Scanner-Klasse stammt aus dem Paket java.util. Es ist einfach zu bedienen, muss jedoch importiert werden, damit die Klasse funktioniert.\nZeile 6\n Wir deklarieren den Datentyp als Scanner und geben ihm den Bezeichner scanner Wir weisen der Variable scanner ein neues Objekt zu, welches den System-Eingabestream enthält (System.in)  Zeile 8\n Wir deklarieren eine Variable vom Datentyp String mit dem Bezeichner name Wir weisen der Variable name das Resultat der Methode scanner.nextLine() zu Diese Methode nimmt die Tastatureingabe vom Benutzer auf der Kommandozeile entgegen. Sie wird beendet, wenn der Benutzer die Enter-Taste drückt.  Zahlen einlesen Oft möchtest du, dass der Benutzer Zahlen in der Konsole eingeben kann. Hierfür bietet der Scanner eine passende Methode an:\n1 2  System.out.print(\"Enter an integer: \"); int number = scanner.nextInt();   Die Scanner.nextInt()-Methode gibt dir die letzte Zahl vor dem Enter und nach dem letzten Leerzeichen zurück.\nWie du es bereits an der mühsamen Formulierung des letzten Satzes siehst, hat diese Methode komische Eigenheiten. Wenn du z.B. nach dem Aufruf von nextInt() wieder nextLine() aufrufst, so gibt die zweit genannte Methode sofort einen leeren String zurück, weil das Enter von der Zahl noch nicht konsumiert wurde. Um dieses Problem in Java zu beheben, kannst du nextLine() 2 mal hintereinander aufrufen.\nFür die Labs und das Exams im Modul #J1 kannst du diese Methode gut brauchen. Spiele aber trotzdem ein bisschen mit dieser nextInt()-Methode, damit du die komischen Eigenheiten dieser Methode einmal kennenlernst.\n Jetzt bist du dran. Löse bitte die Aufgabe 8 in den Labs.\n","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/10_scanner/","tags":"","title":"Scanner"},{"body":"","categories":"","description":"Exercises zu den Modulen #J10 und #J11 - Spring und Spring Boot\n","excerpt":"Exercises zu den Modulen #J10 und #J11 - Spring und Spring Boot\n","ref":"/labs/java/spring/","tags":"","title":"Spring Framework"},{"body":"Ziele  Ich kann eine Möglichkeit aufzeigen, wie Felder nie überschrieben werden dürfen. Ich kann erklären, wie die Objekte von eigenen Klassen “unveränderlich” gemacht werden können. Ich kann auswendig erklären, welche Vorteile unveränderliche Klassen bieten.  Felder unveränderlich machen Manchmal wirst du in Klassen Felder haben, die sich nie ändern werden - und auch nie sollten. Damit sich ein Feld nicht ändern kann, kannst du das Keyword final vor dem Datentyp angeben. Im folgenden Beispiel haben wir eine Klasse für einen Schweizer Staatsbürger, der einen Namen besitzen kann, der sich ändern kann. Zusätzlich müssen alle BürgerInnen eine AHV-Nummer (socialSecurityNumber), die sich (im Normalfall) nie ändert:\n1 2 3 4 5 6 7 8 9  public class SwissCitizen { private String name; private final String socialSecurityNumber; // AHV-Nummer  public SwissCitizen(String name, String socialSecurityNumber) { this.name = name; this.socialSecurityNumber = socialSecurityNumber; } }   Das final-Keyword bewirkt bei Instanzvariablen, dass sie nur einmal gesetzt werden können - entweder direkt oder spätestens im Konstruktor.\nNachher darf der Wert dieser Variable nicht mehr geändert werden, wieso folgender Code zu einem Kompilierfehler führt:\n1 2 3 4 5 6 7 8 9 10 11  public class SwissCitizen { ... public static void main(String[] args) { var person = new SwissCitizen(\"Hans-Ruede Meier\", \"756.1234.5678.90\"); // Hans-Ruedi hat geheiratet :D  person.name = \"Hans-Ruedi Müller\"; person.socialSecurityNumber = \"756.0000.0000.01\"; // Gibt einen Compiler-Fehler  } }   Somit bietet das final-Keyword eine gute Möglichkeit an zu garantieren, dass ein Feld nicht später aus Versehen verändert wird.\nVeränderungen an Objekten - Immutable \u0026 mutable objects In der Programmierung gibt es ein wichtiges Konzept, das “Unveränderlichkeit” (Englisch: Immutability) genannt wird. Unveränderlichkeit bedeutet, dass ein Objekt nie seine Werte ändert. Wenn wir diese Werte ändern wollen, müssen wir ein neues Objekt erstellen.\nDas klassische Beispiel ist die Klasse String. Zeichenfolgen sind unveränderliche Objekte, sodass alle String-Operationen einen neuen String erzeugen.\n1 2 3 4 5 6  String alice = \"alice\"; alice.toUpperCase(); System.out.println(alice); // Output: alice --\u003e unveränderlich!  String aliceCapitalLetters = alice.toUpperCase(); System.out.println(aliceCapitalLetters); // Output: ALICE   Unsere neudefinierte Klasse Color hingegen ist nicht unveränderlich:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  public class Color { private int red; private int green; private int blue; public Color(int red, int green, int blue) { this.red = red; this.green = green; this.blue = blue; } @Override public String toString() { return String.format(\"Color(%s, %s, %s)\", red, green, blue); } // Konstanten(?), damit Farben beim Namen genannt werden können:  public static final Color RED = new Color(255, 0, 0); public static final Color GREEN = new Color(0, 255, 0); public static final Color BLUE = new Color(255, 0, 255); public static final Color YELLOW = new Color(255, 255, 0); public static final Color WHITE = new Color(255, 255, 255); public static final Color BLACK = new Color(0, 0, 0); }   Da Color in diesem Beispiel veränderlich ist, kann jedes Feld verändert werden:\n1 2 3 4 5 6 7 8 9 10 11  // print color red: Color color = Color.RED; System.out.println(\"Rot:\\t\" + color); // Print white: color.green = 255; color.blue = 255; System.out.println(\"Weiss:\\t\" + color); // print red again: System.out.println(\"Rot:\\t\" + Color.RED);   Die letzte Zeile führt zu dieser Ausgabe, die falsch ist:\n1  Rot: Color(255, 255, 255)   Das Problem mit unserem Code ist, dass wir erwarten, dass Color.RED dem Wert von new Color(255, 0, 0) entspricht, da die statische Variable sogar mit final deklariert wurde. Und das würde auch jede(r) andere Entwickler(in) erwarten!\nDas Problem war, dass wir immer wieder auf das gleiche Objekt zugegriffen haben, das wir auch bearbeitet haben, was dieses Diagramm verdeutlicht:\nMöchten wir, dass Color diesen Erwartungen gerecht wird, dann müssen wir sie unveränderlich (immutable) machen. Dann ist jedes ihrer Felder unveränderlich. Dies geschieht mit dem final-Key-Word vor allen Feldern innerhalb der Klasse:\n1 2 3 4 5 6 7  public class Color { private final int red; private final int green; private final int blue; ... }   Nun führt die Anweisung color.green = 255; zu einem Fehler, weil das Feld green unveränderlich ist und deshalb nicht geändert werden kann.\nDer Vorteil von diesem Code ist nun, dass Color.RED immer einen Wert zurückgibt, der wirklich die Farbe Rot repräsentiert.\nEin zweites Beispiel Oft lohnt es sich, Klassen die dafür verwendet werden, um Daten in einem Objekt zwischen zu speichern, immutable zu definieren. Nehmen wir hierzu wieder die Klasse Color, die genau diesem Zweck dient.\nIm ersten Beispiel gehen wir davon aus, dass Color veränderlich ist (also keine final-Keywords vor den Instanzvariablen). Hier bieten wir eine statische Methode an, die aus einer Farbe einen Grau-Wert produziert:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  public static Color convertToGrayScale(Color color) { // Helligkeit berechnen (Grün wird als Heller empfunden als z.B. Blau):  int luminance = (int) ( 0.299 * color.red + 0.587 * color.green + 0.114 * color.blue); // Bei einem Grauton haben alle Farbwerte den gleichen Wert:  color.red = luminance; color.green = luminance; color.blue = luminance; return color; } public static void main(String[] args) { Color color = Color.RED; Color grayScale = convertToGrayScale(color); System.out.println(\"Rot:\\t\" + color); System.out.println(\"Gray Scale:\\t\" + grayScale); }   Logischer Weise führt dieser Code zu einer unerwünschten Ausgabe in der Konsole. Offensichtlich ist der Fehler in der convertToGrayScale(...)-Methode, wo wir die Instanz-Variablen vom Parameter überschreiben, was wir nicht sollten. Obwohl dieses Beispiel den Fehler sehr offensichtlich begeht, ist das ein Fehler, der sehr oft passiert:\n Methoden, die einen neuen Wert berechnen oder holen (get), sollten im Normalfall bestehende Werte nicht bearbeiten. Sehr oft führt das dazu, dass Dinge passieren, die man als Aufrufer nicht erwartet und man muss Fehler an unerwarteten Stellen suchen, weil die Methode mehr macht als zu erwarten ist.\n  Solche convert...- bzw. get...-Methoden sollten einen neuen Wert zurückgeben, anstatt einen bestehenden zu verändern. Ein Indiz dafür, dass dieses Prinzip verletzt wird, ist oft, dass eine get...()-Methode den Rückgabe-Wert void besitzt (hier nicht der Fall).\n Oft ist es nicht so offensichtlich wie hier. Schreibt man die Klassen von Anfang an immutable, so ist der Code ganz generell viel weniger Fehler anfällig (erst recht, wenn der Code parallel auf mehreren Prozessoren läuft) und das Vorgehen führt dazu, dass zukünftiger Code automatisch lesbarer (aka “schöner”) wird - was dir in Zukunft sicherlich viel Zeit ersparen wird.\nDie gleiche convertToGrayScale(color) müsste mit der immutable-Version der Klasse umgeschrieben werden, damit kein Kompilierfehler auftritt (und nun funktioniert sie wie erwartet):\n1 2 3 4 5 6 7  public static Color convertToGrayScale(Color color) { // Helligkeit berechnen (Grün wird als Heller empfunden als z.B. Blau):  int luminance = (int) (0.299 * color.red + 0.587 * color.green + 0.114 * color.blue); // Bei einem Grauton haben alle Farbwerte den gleichen Wert:  return new Color(luminance, luminance, luminance); }   Der Hauptunterschied mit immutable Klassen ist daher, dass so viel öfters neue Instanzen generiert werden.\n Jetzt bist du dran. Erweitere bitte die Wassermengen-Aufgaben um die Aufgabe 2.\n","categories":"","description":"Modul #J2\n","excerpt":"Modul #J2\n","ref":"/docs/java/j2-oop/10-mutable-objects/","tags":"","title":"Veränderbarkeit"},{"body":"Ziele  Du weisst, wozu Services in Angular sind und kannst dies erläutern.  Services Angular-Services sind in Angular eine wichtige Art, Code zu organisieren und wiederzuverwenden. Sie bieten eine Möglichkeit, Funktionen und Daten zu teilen, die von mehreren Components innerhalb einer Anwendung benötigt werden. Ein Service ist eine Klasse, die von anderen Components injiziert werden kann, um auf seine Funktionen und Daten zuzugreifen.\nServices können beispielsweise Daten von einem Backend-Server abrufen, eine benutzerdefinierte Logik ausführen, eine Konfiguration bereitstellen oder andere Arbeiten erledigen, die für mehrere Komponenten relevant sind. Im Gegensatz zu Komponenten haben Services normalerweise keine visuelle Darstellung, sondern dienen als reine “Helfer”-Klassen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  import { Injectable } from '@angular/core'; @Injectable({ providedIn: 'root' }) export class WeaponService { private weapons: string[] = [ 'Sword', 'Bow', 'Axe', 'Staff', 'Dagger' ]; getWeapons(): string[] { return this.weapons; } }   ","categories":"","description":"Modul #F6 - Angular - Services\n","excerpt":"Modul #F6 - Angular - Services\n","ref":"/docs/web/angular/02_10_angular_services/","tags":"","title":"Services"},{"body":"Ziele  Du weisst, wie Loops funktionieren. Du weisst, welche Loops es gibt und du kannst diese anwenden.  Loops Ein Loop ist eine Struktur, mit der man einen Block von Code wiederholt ausführen kann, solange eine bestimmte Bedingung erfüllt ist. Loops sind nützlich, wenn man eine bestimmte Aktion mehrmals ausführen möchten, ohne den Code zu duplizieren.\nEs ist möglich, Loops zu verschachteln, um komplexe Iterationsprozesse durchzuführen. Dabei wird ein Loop innerhalb eines anderen Loops ausgeführt.\nWichtig bei der Verwendung von Loops ist es, darauf zu achten, dass die Bedingung, die man verwenden, letztendlich erfüllt wird, um eine Endlosschleife zu vermeiden. Eine Endlosschleife führt dazu, dass der Code in einem Loop stecken bleibt und den Rest des Programms nicht ausführt.\nfor-Loops for, forEach, for…of Im Kapitel Arrays werden die Loops for, forEach und for…of erklärt und können dort nachgelesen werden.\nfor…in-Loop Der for…in-Loop wird verwendet, um über die Eigenschaften eines Objekts zu iterieren.\n1 2 3 4 5 6 7 8 9 10  const person = { name: \"Max\", age: 30, city: \"Berlin\" }; for (let personProperty in person) { console.log(personProperty + \": \" + person[personProperty]); } // Output: // name: Max // age: 30 // city: Berlin   while-Loops while-Loop Der while-Loop wird verwendet, um einen Code-Block so lange auszuführen, wie die angegebene Bedingung wahr ist. Die Bedingung ist ein boolescher Ausdruck, der ausgewertet wird, bevor jeder Durchlauf des Loops beginnt.\n1 2 3 4 5 6 7 8 9 10 11 12  let i = 0; while (i \u003c 5) { console.log(i); i++; } // 0 // 1 // 2 // 3 // 4   do…while-Loop Der do…while-Loop funktioniert ähnlich wie der while-Loop, jedoch wird der Code-Block innerhalb des Loops mindestens einmal ausgeführt, bevor die Bedingung geprüft wird.\n1 2 3 4 5 6 7 8 9 10 11 12  let i = 0; do { console.log(i); i++; } while (i \u003c 5); // 0 // 1 // 2 // 3 // 4   ","categories":"","description":"Modul #F4 - JavaScript - Loops.\n","excerpt":"Modul #F4 - JavaScript - Loops.\n","ref":"/docs/web/javascript/11_js_loops/","tags":"","title":"Loops"},{"body":"Wie funktioniert CSS? Um CSS anwenden zu können, müssen wir das Grundprinzip verstehen:\nMit CSS werden selektiv HTML-Elemente ausgewählt und deren Styling angepasst. Hierfür gibt es verschiedene Möglichkeiten, welche wir im Verlaufe des Kurses kennenlernen werden.\nCSS verfolgt dabei die folgende Syntax:\n1 2 3 4  p { color: blue; background-color: red; }    Die Zeichenfolge vor den geschweiften Klammern ist der sogenannte Selektor (Englisch: Selector). Er definiert, auf welche Elemente das Styling angewendet werden soll. In diesem Fall würde das Styling auf alle Paragraphen angewendet werden. Die Zeilen innerhalb der geschweiften Klammern, definieren was für ein Styling angwendet werden soll. Beim gezeigten Beispiel würde die Textfarbe auf blau eingestellt werden und die Hintergrundfarbe rot.  Wie kann ich CSS anwenden? Als nächstes schauen wir an, wie man CSS in eine Webseite (bzw. in ein HTML File) einbinden kann. Dafür schauen wir uns folgende Abschnitte an:\nDirektes einbinden in HTML-Elemente Die wohl schnellste Möglichkeit CSS auf ein HTML-Element anzuwenden, ist, das “style”-Attribut des HTML-Elements anzupassen. Dies würde wie folgt ausschauen:\n1  \u003cp style=\"color: blue; background-color: red\"\u003eHier steht blauer Text auf rotem Hintergrund\u003c/p\u003e   Dabei ist anzumerken, dass sich die Syntax gegenüber der herkömmlichen Syntax (siehe erstes Beispiel) etwas unterscheidet. Einerseits müssen wir den Selektor nicht angeben und andererseits gibt es keine geschweiften Klammern mehr.\nEinbinden über einen Style-Tag Man kann CSS aber auch über einen sogenannten “Style” Tag ins HTML einbinden. Dies sieht wie folgt aus:\n1 2 3 4 5 6 7 8 9 10  \u003chead\u003e ... \u003cstyle\u003e p { color: blue; background-color: red; } \u003c/style\u003e ... \u003c/head\u003e   Hierbei können wir innerhalb des Style-Tags herkömmliches CSS anwenden, wie wir es bereits aus dem ersten Beispiel kennen. Der Style-Tag kann irgendwo (auch verschachtelt) irgendwo im \u003chead\u003e oder \u003cbody\u003e stehen. Wo genau darin ist jedoch nicht wichtig. Best-Practice dafür wäre im \u003chead\u003e nach den \u003cmeta\u003e-Tags.\nEinbinden über ein externes CSS-File Die wohl am weitesten verbreitete Methode CSS in eine Webseite einzubinden ist es, das CSS in ein CSS-File auszulagern und dann im HTML darauf zu verweisen.\nDies kann man wie folgt machen:\nDatei: index.html\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\" /\u003e \u003cmeta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" /\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /\u003e \u003ctitle\u003eDocument\u003c/title\u003e \u003clink rel=\"stylesheet\" href=\"styles.css\" /\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eHier steht blauer Text auf rotem Hintergrund\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e   Datei: styles.css\n1 2 3 4  p { color: blue; background-color: red }   Der Wichtige Teil des HTML-Codes ist dabei folgender Tag im Head:\n1  \u003clink rel=\"stylesheet\" href=\"styles.css\" /\u003e   Dieser Link-Tag definiert, dass der CSS-Code der Datei mit dem Pfad “styles.css” auf die aktuelle HTML-Datei angwendet werden soll.\nWas gibt es alles für CSS-Styling-Properties? Es gibt unzählige CSS-Properties. Zu viele, um auf jedes detailliert einzugehen. Auf dieser Seite findet ihr eine ganze Reihe CSS-Properties.\nAuf die wichtigsten Properties werden wir jedoch in den nächsten Seiten genauer eingehen.\n","categories":"","description":"Modul #F3 - HTML und CSS - Grundlagen der CSS-Sprache.\n","excerpt":"Modul #F3 - HTML und CSS - Grundlagen der CSS-Sprache.\n","ref":"/docs/web/html_css/11_css_basics/","tags":"","title":"CSS-Grundlagen"},{"body":"Ziele  Ich kenne Arrays und kann diese instantiieren, ihnen Werte von Indexen entnehmen und Werte an Indexe zuweisen.  Arrays Definition Häufig benötigen Software-Entwickler mehrere zusammengehörige Variablen desselben Datentyps, die logisch oder verwaltungstechnisch zusammengehören. Es wäre aber sehr aufwendig, diese Variablen alle einzeln zu deklarieren und zu verarbeiten. Zudem ist es möglich, dass die Anzahl an Objekten noch unbekannt ist und erst bei der Ausführung des Programms definiert wird. Deswegen wird in Java, wie in anderen Programmiersprachen auch, die Verwendung von Arrays unterstützt. In Arrays lassen sich beliebige primitive Datentypen und Objekte speichern und systematisch bearbeiten. Alle Variablen haben einen gemeinsamen Namen, werden aber über unterschiedliche Indizes angesprochen. Unter Arrays kannst du dir so etwas wie eine Liste vorstellen.\nDeklaration Die Deklaration eines Arrays enthält folgende Bestandteile:\n   Reihenfolge Bedeutung Beispiel     1. Typ String, int, double, char, ...   2. Eckige Klammern []   3. Bezeichner / Namen words, numbers, values, letters...    Konkret können wir so ein String-Array deklarieren:\n1  String[] words;   Syntax In Java müssen wir zum Zeitpunkt der Deklaration eines Arrays folgendes angeben:\n den Datentyp den Namen  und zum Zeitpunkt der Initialisierung:\n die Grösse  Das Code-Beispiel von der “Deklaration” deklariert die Variable words, erstellt das Array-Objekt jedoch noch nicht. Der Operator new wird in Java zum Erstellen von neuen Objekten verwendet:\n1  String[] words = new String[5];   Damit wird ein Array-Objekt der Länge 5 (also mit 5 Elementen) instantiiert. Die fünf Elemente dieses Arrays wurden mit Standardwerten initialisiert. Bei einem Array des Datentyps String ist der Default-Wert null. Alle Werte im Array werden also mit null aufgefüllt.\nWir können die Werte der Array-Elemente auch gleich direkt angeben:\n1  String[] words = { \"Hai\", \"Oktopus\", \"Rochen\", \"Wal\", \"Fisch\" };   Es wird also ein Array mit der Grösse 5 und den angegebenen Werten erstellt.\nLänge eines Arrays Die Anzahl der Elemente in einem Array wird als Länge eines Arrays bezeichnet. Diese Länge wird zum Zeitpunkt der Erstellung eines Arrays einmal festgelegt. Sie kann später in einem Programm nur durch Definition eines neuen Arrays und dem Kopieren von Werten geändert werden.\nWir können die Länge eines Arrays mithilfe einer in Java integrierten Funktionalität überprüfen:\n1  words.length   Indizierung Die Indizes in einem Array reichen immer von 0 bis length-1. Ein Array mit den ersten 100 natürlichen Zahlen hat beispielsweise eine Länge von 100 und Indizes von 0 bis 99.\nZugriff auf Elemente Wenn wir den Wert eines Elements in unserem Array verändern möchten, geschieht dies folgendermassen:\n1  words[index] = value;   Wenn du also das 4. Element (Index 3) mit dem Wert \"Delfin\" ersetzen möchtest, dann kannst du das wie folgt tun:\n1  words[index] = \"Delfin\";   Und wenn wir den Wert eines Array-Elements in einer Variablen ausserhalb des Arrays speichern wollen:\n1  String value = words[index];   Durch alle Elemente durchgehen Im Kapitel der “Kontrollstrukturen” hast du die for- und “foreach”-Schlaufe kennengelernt. Beide Schlaufen eignen sich, um ein Array durchzugehen (“iterieren”). Hier ein kleiner Reminder:\n1 2 3 4 5 6 7 8 9  System.out.println(\"Wörter ausgegeben in der for-Schlaufe\"); for (int i = 0; i \u003c words.length; i++) { System.out.print(words[i] + \"\\t\"); } System.out.println(\"\\nWörter ausgegeben in der forEach-Schlaufe\"); for (String word : words) { System.out.print(word + \"\\t\"); }   Lernvideo Wenn du dir die Erklärung noch mit Videos genauer anschauen möchtest, empfiehlt dir das Coaching-Team diese Videos: Theoretische Erklärung, Anwendung in Java\nZweidimensionale Arrays (2D Array) Bis jetzt hast du ausschliesslich Arrays gesehen, die auf eine Dimension beschränkt waren. Diese Arrays sind praktisch, um Listen-Artige Daten zu speichern. Zweidimensionale Arrays haben wie es der Name schon verrät eine zweite Dimension. Diese Art von Arrays sind praktisch für tabellarische Daten.\nDu kannst dir ein 2D-Array wie eine Excel vorstellen. Es besteht aus Reihen und Spalten die gleich wie im normalen Array mit einem Index/einer Position definiert werden.\nSyntax Für die Deklaration eines zweidimensionalen Arrays wird eine Angabe von der Anzahl Reihen und Spalten benötigt. Bei dieser Art von Array können die gleichen Datentypen wie bei den normalen Arrays verwendet werden. So sieht schliesslich die Syntax aus:\n1 2 3 4  int anzahlReihen = 4; int anzahlSpalten = 3; int[][] zweiDArray = new int[anzahlReihen][anzahlSpalten];   Zugriff auf Elemente Da wir jetzt im zweidimensionalen Bereich unterwegs sind, müssen wir für den Zugriff auf Elemente beide Dimensionen beachten. Das bedeutet, dass wir anders als bei einfachen Arrays 2 verschiedene indexe angeben müssen. Hier ein Beispiel dazu:\n1 2 3 4 5 6  int[][] zweiDArray = new int[4][2]; zweiDArray[0][1] = 69; // Wert 69 zuweisen int output = zweiDArray[0][1]; // Wert auf position 0 1 in zweiDArray in output variable speichern  System.out.println(output); // Ausgabe: 69   Lernvideo Wenn du dir die Erklärung noch mit einem Video genauer anschauen möchtest, empfiehlt dir das Coaching-Team dieses Video.\n Jetzt bist du dran. Löse bitte die Aufgabe 9 in den Labs.\n","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/11_arrays/","tags":"","title":"Arrays"},{"body":"Ziele  Ich kann in eigenen Worten erklären, was mit Generics in Java gemeint ist und wozu diese angewendet werden. Ich kann alle Vorteile, die die Arbeit mit Generics mit sich bringt, vollständig nennen. Ich kann in eigenen Worten erklären, was Typsicherheit ist. Ich kann anhand eines Beispiels aufzeigen, wie eine Typverletzung entsteht. Ich kann in eigenen Worten erklären, wozu “bounded types” verwendet werden. Ich kann in eigenen Worten erklären, was Wildcards im Kontext von Generics sind und wie sie verwendet werden. Ich kann in eigenen Worten erklären, was “type erasure” ist und wann dieses Vorgang stattfindet. Ich setzte generische Klassen und Methoden in Code-Aufgaben korrekt ein.   Einführung Mit Generics sind im Java-Umfeld parametrisierte Datentypen gemeint. So werden mit Generics Datentypen (Integer, String oder auch benutzerdefinierte Datentypen) als Parameter für Klassen, Interfaces und Methoden mitgegeben. Mit Generics ist es also möglich Klassen, Interfaces und Methoden zu schreiben, welche mit unterschiedlichen Datentypen arbeiten können.\nGenerics funktionieren nur mit Referenz-Datentypen (also nicht mit primitiven Datentypen) und werden nur während der Kompilierung ausgewertet.\nTypsicherheit Typsicherheit ist einen Zustand, bei dem Datentypen gemäss ihren Definitionen verwendet werden und keine sog. Typverletzungen auftreten.\nIn der Regel wird bei einer Variable der Datentyp festgelegt. Diesen Datentyp schränkt die Menge der konkreten, zulässigen Werte für diese Variable ein. Versucht man der Variable nun einen Wert ausserhalb diesen zulässigen Bereich zuzuweisen, so liegt eine Typverletzung vor.\nDie Überprüfung der Typsicherheit in Java ist eine Aufgabe des Java-Compilers. Wenn der Compiler eine Typverletzung zur “Compile-Zeit” entdeckt gibt es einen sog. Kompilierfehler, welcher davor warnt. Wenn eine Typverletzung unentdeckt bleibt, können zur Laufzeit des Programms schwer analysierbare Fehler auftreten.\nBeispiel einer Typverletzung, welche vom Compiler entdeckt wird\nIn der folgenden Klasse wird versucht, ein String zu einer Variable des Typs Integer zuzuweisen\n1 2 3 4 5 6  public class Test { public static void main(String[] args) { Integer myInteger; myInteger = \"this is not an integer...\"; } }   Beim Versuch, die Klasse zu kompilieren erscheint folgende Fehlermeldung: Warum Generics? Programme, welche Generics verwenden, haben mehrere Vorteile gegenüber Programmen ohne Generics:\n Wiederverwendbarer Code: eine Klasse oder eine Methode kann einmal geschrieben werden und mit unterschiedlichen Datentypen verwendet werden. Typsicherheit: Generics lösen Fehler während der Kompilierung aus, welche ansonsten erst zur Laufzeit ausgelöst wären. Individuelle Typ-Casting ist nicht nötig: Wenn bei der Anwendung von Generics der konkrete Typ angegeben wird, muss danach kein Typ-Casting stattfinden.  Schauen wir wie die Typsicherheit eines Programms mit Generics verbessert werden kann.\nDie Object-Klasse in Java ist die Super-Klasse aller anderen Klassen und eine Object-Referenz kann beliebige Objekte referenzieren. Diese Features sind nicht typsicher. Auch durch das Verwenden von Polymorphismus können Typverletzungen entstehen.\nBeispiel Typverletzung, welche nicht zu einem Compiler-Fehler führt\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import java.util.ArrayList; class Test { public static void main(String[] args) { // ArrayList erstellen ohne den Typ der Daten darin zu definieren  ArrayList hitchhikersInfo = new ArrayList(); hitchhikersInfo.add(\"Douglas\"); hitchhikersInfo.add(\"Adams\"); hitchhikersInfo.add(42); // Der Compiler erlaubt diese Zuweisung, da wir den Datentyp in der ArrayList nicht definiert haben  for (int i=0; i\u003c=hitchhikersInfo.size(); i++) { System.out.println((String) hitchhikersInfo.get(i)); // diesen Typ-Casting wäre nicht nötig gewesen, wenn wir die ArrayListe richtig definiert hätten!  } } }   Diese Klasse kompiliert ohne Fehler. Der Compiler warnt zwar, dass hier eine unsichere Operation durchgeführt wird, aber er erlaubt diese Operation und die Kompilation ist erfolgreich. Beim Ausführen des Programms kommt es jedoch zu einem Laufzeitfehler vom Typ ClassCastException, weil versucht wird ein Integer in einen String umzuwandeln (Typ-Casting): Generics helfen solche Laufzeitfehler mit sog. Typvariablen zu vermeiden. Diese Typvariablen werden zur Zeit der Implementierung zunächst durch Platzhalter repräsentiert und dann zum Zeitpunkt der Anwendung konkretisiert. Im obigen Beispiel hätte der Laufzeitfehler vermieden werden können, in dem wir die ArrayList als eine Liste von Strings definiert hätten:\n1 2 3 4  // ArrayList mit Elementen vom Typ String  ArrayList\u003cString\u003e hitchhikersInfo = new ArrayList\u003c\u003e(); ... hitchhikersInfo.add(42); // Der Compiler erlaubt diese Zuweisung nicht mehr   Beim Versuch, die Klasse erneut zu kompilieren, kommt es zum folgenden Fehler und die Kompilierung schlägt fehl: Generics in der Praxis In Java gibt es zwei Typen von Generics: generische Methoden und generische Klassen.\nEine generische Methode kann - wie andere “normale” Methoden auch - Parameter und einen Rückgabewert enthalten. Der Unterschied zu einer “normalen” Methode liegt darin, dass eine generische Methode sog. Typparameter bearbeitet. Somit kann eine generische Methode mit unterschiedlichen Datentypen benutzt werden.\nEine generische Klasse wird genau gleich wie eine nicht-generische Klasse umgesetzt. Der Unterschied liegt darin, dass die generische Klasse einen oder mehrere Typparameter definiert.\nTypparameter definieren In generischen Klassen wie auch in generischen Methoden, werden Typparameter mittels eines Grossbuchstabens definiert, welcher innerhalb spitziger Klammern geschrieben wird z.B: \u003cT\u003e oder \u003cI\u003e.\nMultiple Typparameter werden durch ein Komma getrennt: \u003cT, V\u003e\nTypparameter Namenskonvention Die Buchstaben, welche für die Definition von Typparametern verwendet werden, nutzen die folgende Namenskonvention:\n   Typname Zweck     T Type   E Element   K Key   N Number   V Value    Generische Klasse Um generische Klassen zu verwenden, wird zunächst die Klasse mit einem Typparameter definiert und bei der Anwendung dieser Klasse (bei der Instanziierung) wird innerhalb der spitzigen Klammern der konkrete Datentyp geschrieben.\nBeispiel einer benutzer-definierten, generischen Klasse\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  // \u003cT\u003e definiert einen Typparameter class Test\u003cT\u003e { // Deklaration einer Member-Variable vom Typ T  T obj; // Konstruktor, erhält ein Object vom Typ T und initialisiert die Member-Variable damit  Test(T obj) { this.obj = obj; } // die Getter-Methode liefert ein Objekt vom Typ T zurück  public T getObject() { return this.obj; } }   Sofern sich die obige Klasse auf dem Klassenpfad befindet, kann sie nun wie folgt verwendet werden:\n1 2 3 4 5 6 7 8 9 10 11  class MyProgram { public static void main(String[] args) { // Instanziieren der generischen Klasse und setzen den Typ auf Integer  Test\u003cInteger\u003e integerObject = new Test\u003cInteger\u003e(42); System.out.println(integerObject.getObject()); // Output: 42  // instance of String type  Test\u003cString\u003e stringObject = new Test\u003cString\u003e(\"Generics are great!\"); System.out.println(stringObject.getObject()); // Output: Generics are great!  } }   In diesem Beispiel wurde dieselbe generische Klasse einmal mit einem Integer und einmal mit String verwendet. Dabei wurde die Typsicherheit sichergestellt.\nGenerische Methode Wie bei generischen Klassen werden auch bei generischen Methoden zunächst die Typparameter als Argumente für die Methode definiert und beim Aufruf der Methode werden die konkreten Datentypen mitgegeben.\nBeispiel einer generischen Methode\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  public class Test { // Definition einer generischen Methode  static \u003cT\u003e void genericDisplay(T element) { System.out.println(element.getClass().getName() + \" = \" + element); } public static void main(String[] args) { // Die generische Methode wird mit einem Integer-Argument aufgerufen  // Achtung: hier wird nicht das primitive Typ \"int\" verwendet sondern die Wrapper-Klasse Integer!  genericDisplay(42); // Output: java.lang.Integer = 42  // Die generische Methode wird mit einem String-Argument aufgerufen  genericDisplay(\"Generics are great!!\"); // Output: java.lang.String = Generics are great!!  // Die generische Methode wird mit einem Double-Argument aufgerufen  // Achtung: hier wird nicht das primitive Typ \"double\" verwendet sondern die Wrapper-Klasse Double!  genericDisplay(42.0); // Output: java.lang.Double = 42.0  // Primitive Typen können nicht mit Generics verwendet werden  // aber eine ArrayList aus einem Array mit primitiven Typen ist erlaubt, weil Arrays Referenz-Typen sind!  ArrayList\u003cint[]\u003e arrayListOfIntArray = new ArrayList\u003c\u003e(); int[] oneAndTwo = {1, 2}; int[] threeAndFour = {3, 4}; arrayListOfIntArray.add(oneAndTwo); arrayListOfIntArray.add(threeAndFour); genericDisplay(arrayListOfIntArray); // Output: java.util.ArrayList = [[I@6b2fad11, [I@79698539]  } }   Bei der Definition von generischen Methoden gibt es einen Unterschied zwischen statischen Methoden und Member-Methoden einer Klasse.\nBei Member-Methoden, wird die generische Deklaration aus der Klassendefinition verwendet. Das heisst, der Typparameter, welche bei der Klassendefinition deklariert wird, wird dasselbe sein wie denjenigen, welche in der Member-Methode verwendet wird.\nStatische Methoden brauchen jedoch ihre eigen generische Deklaration - vor dem Rückgabewert-Typ. Das bedeutet, dass der Typparameter einer statischen Methode nicht vom selben Typ sein muss wie demjenigen aus der Klassendefinition (auch wenn beide Typparameter gleich heissen!).\n1 2 3 4 5 6 7 8 9 10 11  public class Test\u003cT\u003e { T obj; // Hier ist T nicht zwingend gleicher Typ wie denjenigen aus der Klassendefinition  public static \u003cT\u003e void staticMethod(T element) {...} // Hier entspricht der Rückgabewert-Typ denjenigen aus der Klassendefinition  public T getObject() { return this.obj; } }   Bounded Typparameter Es gibt Situationen, in denen es Sinn macht die Datentypen, welche als Argument in einem parametrisierten Typ verwendet werden dürfen, einzuschränken. Zum Beispiel, eine Methode, welche nur mit Zahlen funktionieren kann, sollte keine Datentypen zulassen, welche keine Zahl darstellen. Zu diesem Zweck werden sog. Bounded Type-Parameter verwendet.\nBounded Typparameter schränken die möglichen Typen schon bei der Erstellung der generischen Klasse/Methode ein.\nUm ein Bounded Typparameter zu definieren wird bei der Definition des Typparameters noch das Wort “extends” und der begrenzende Typ (“upper bound type”) hinzugefügt:\nBeispiel: \u003cT extends Number\u003e: T muss zwingend vom Typ Number sein\nIm folgenden Beispiel wird die Klasse “ZooExhibit” (Zoogehege) definiert, welche unterschiedlichen Arten von Tieren beherbergen kann:\n1 2 3 4  public class ZooExhibit\u003cT\u003e { private List\u003cT\u003e animals; ... }   Wenn wir die Klasse so definieren, könnte T durch alle mögliche Datentypen ersetzt werden:\n1 2 3 4 5 6 7  public class Main { public static void main(String[] args) { // T kann gemäss Definition auch z.B ein Integer sein!  // auch wenn ein Integer im Zoogehege nichts verloren hat...  ZooExhibit\u003cInteger\u003e zooExhibit = new ZooExhibit\u003c\u003e(); } }   Angenommen, wir haben eine Klasse “Animal” (mit Subklassen wie “Elephant”, “Zebra” usw.), können wir unsere ZooExhibit-Klasse so definieren, dass nur Animal-Typen verwendet werden dürfen:\n1 2 3 4 5 6 7 8 9 10 11 12 13  public class Animal { } public class Elephant extends Animal { } public class Zebra extends Animal { } public class ZooExhibit\u003cT extends Animal\u003e { private List\u003cT\u003e animals; ... }   Wenn wir nun unserem ZooExhibit befüllen möchten, erlaubt uns der Compiler dies nur mit Animal oder mit einer seinen Subklassen zu tun:\n1 2 3 4 5 6 7 8 9 10 11 12  public class Main { public static void main(String[] args) { // Die folgende Zeile wird nun vom Compiler nicht akzeptiert:  ZooExhibit\u003cInteger\u003e zooExhibit = new ZooExhibit\u003c\u003e(); // Zoogehege für Elefanten ist erlaubt, da Elephant ein Animal ist:  ZooExhibit\u003cElephant\u003e elephantExhibit = new ZooExhibit\u003c\u003e(); // Dasselbe gilt für Zebras:  ZooExhibit\u003cZebra\u003e zebraExhibit = new ZooExhibit\u003c\u003e(); } }   Wildcards In der generischen Programmierung wird das Fragezeichen (?) als Wildcard bezeichnet. Es repräsentiert eine Referenz auf einen unbekannten Typ.\nUm zu verstehen, wozu es Wildcards braucht, schauen wir uns ein Beispiel an: Angenommen, wir haben die Animal, Elephant und Zebra Klassen vom vorherigen Abschnitt definiert und dazu auch die folgende generische Klasse:\n1 2 3 4  public class AnimalList\u003cT extends Animal\u003e { private final List\u003cT\u003e animals = new ArrayList\u003c\u003e(); ... }   Nun möchten wir diese Klasse in einer anderen Klasse wie folgt verwenden:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class Zoo { public static void main(String[] args) { AnimalList\u003cElephant\u003e elephants = new AnimalList\u003c\u003e(); AnimalList\u003cZebra\u003e zebras = new AnimalList\u003c\u003e(); // Der Compiler gibt bei folgenden Zeilen eine Fehlermeldung!  printAnimalList(elephants); printAnimalList(zebras); } private static void printAnimalList(AnimalList\u003cAnimal\u003e animals) { System.out.println(animals) } }   Obwohl Elephant und auch Zebra beide ein Animal sind, gibt der Compiler eine Fehlermeldung beim Versuch, die Methode printAnimalList mit AnimalList resp. mit AnimalList aufzurufen.\nDieser Ansatz (die Super-Klasse zu verwenden, damit die Subklassen auch am gleichen Ort verwendet sein dürfen), funktioniert zwar mit Arrays, nicht aber mit generischen Klassen.\nDer Grund dafür ist der Zeitpunkt der Typ-Prüfung: Bei Arrays wird erst zur Laufzeit auf den richtigen Typ geprüft (und darum werden allfällige Fehler erst zur Laufzeit entdeckt). Bei Generics wird diese Prüfung durch den Compiler übernommen da sie zur Laufzeit wegen dem sog. Type-Erasure (dazu später) nicht erfolgen kann.\nDer Einsatz von Wildcards ermöglicht es, jeden beliebigen generischen Typ zu akzeptieren. Wenn wir nun die Methode printAnimalList mit einer Wildcard definieren, kompiliert der Rest vom Code einwandfrei:\n1 2 3  private static void printAnimalList(AnimalList\u003c?\u003e animals) { System.out.println(animals) }   Wenn man \u003c?\u003e verwendet, wird dies “unbeschränkter Wildcard Typ” (“unbounded wildcard”) genannt. Es besteht aber auch die Möglichkeit, Wildcards zu beschränken und zwar in zwei verschiedene Arten:\n Upper-Bound Beschränkung: Beschränkung auf einen Typ und dessen Kindtypen. Die Syntax sieht dann z.B. so aus: \u003c? extends Number\u003e (also irgendein Typ, solange er vom Typ Number oder einer Subklasse davon ist) Lower-Bound Beschränkung: Beschränkung auf einen Typ und dessen Supertypen. Die Syntax sieht dann z.B. so aus: \u003c? super Integer\u003e (also irgendein Typ, solange er vom Typ Integer oder einer Superklasse davon ist)  Type Erasure Generics werden nur vom Compiler behandelt und verschwinden zur Laufzeit. Das heisst, der Compiler entfernt beim Kompilieren alle Informationen, die durch Generics definiert wurden. Das bedeutet, dass zur Laufzeit nicht bestimmt werden kann, welcher generische Typ verwendet wurde. Grund für dieses Verhalten war die Notwendigkeit zur Bewahrung der Abwärtskompatibilität zu älteren Java-Versionen, welche keine Generics kennen.\nDas Entfernen der generischen Informationen heisst “type erasure” und der Compiler wendet dies an um:\n Alle Typparameter in generischen Typen mit ihren “bound”-Typen (falls definiert) oder mit Object umzutauschen. Der prduzierte Bytecode beinhaltet dann nur “normale” Klassen, Interfaces und Methoden. Type-Casting dort wo nötig hinzuzufügen, um die Typsicherheit bewahren zu können Sog. Bridge-Methoden zu generieren, um Polymorphismus in erweiterte generische Typen zu bewahren   Jetzt bist du dran. Löse bitte die Aufgaben in den Generics-Labs.\n","categories":"","description":"Modul #J2\n","excerpt":"Modul #J2\n","ref":"/docs/java/j2-oop/11-java-generics/","tags":"","title":"Java Generics Grundlagen"},{"body":"Ziele  Ich weiss was die JDBC-Schnittstelle ist und wofür sie benutzt wird Ich weiss was JDBC-Treiber sind und warum sie benötigt werden Ich kenne die wichtigsten Interfaces der JDBC-Schnittstelle Ich weiss wie parametrisierte SQL-Anweisungen verwendet werden können Ich kann eine Datenbank-Verbindung aus einer Java-Anwendung herstellen Ich kann CRUD-Operationen aus einer Java-Anwendung ausführen  Einleitung Die meisten Apps und Webseiten, welche wir heutzutage fast täglich verwenden, dienen lediglich der Datenverarbeitung.\nSobald du ein Bild deines Freundes likest, den Fahrplan abrufst oder eine neue Tastatur bestellst, es werden immer Daten gelesen, geschrieben, bearbeitet oder gelöscht.\nEs gibt Frameworks (darunter z.B. Spring), welche die Verbindung zu Datenbanken verwalten und die sog. “Boiler-Plate”-Details dazu von den Entwicklern verbergen. Diese Frameworks bieten auch einfache Interaktion mit der Datenbank z.B. im Form von CRUD-Operationen. Durch das Verwenden solcher Frameworks kann auf “Boiler-Plate” Code verzichtet werden. Die Entwicklung von Business-Logik ist somit von infrastrukturellen Details getrennt.\nEs gibt jedoch Situationen, wo solche Frameworks nicht benutzt werden können oder man muss bestimmte Aktivitäten, welche diese Frameworks out-of-the-box anbieten, anders gestalten. In solchen Situationen kann die JDBC-Bibliothek von Java verwendet werden.\nWas ist JDBC JDBC ist eine Schnittstelle, welche dafür benutzt wird, um aus einer Java Anwendung eine Verbindung zu einer Datenbank herzustellen und Queries auf den Daten darin (z.B. lesen oder bearbeiten) ausführen zu können.\nDie JDBC-Schnittstelle stellt eine Datenbank unabhängige API zur Verfügung und trägt damit dazu bei, dass die Anwendung nicht an einer bestimmten Datenbank stark gekoppelt ist (sprich, die Anwendung muss die unterliegende Datenbank, theoretisch, gar nicht kennen).\nUm die eigentliche Verbindung mit der Datenbank zu ermöglichen, werden JDBC-Treiber eingesetzt. Ein JDBC-Treiber ist eine Software-Komponente, welche die Zugriffstechnik für eine bestimmte Datenbank (z.B. Oracle, Postgres usw.) kennt und somit in der Lage ist, Anfragen an der Datenbank weiterzuleiten wie auch die Ergebnisse zurückzuliefern. Solche Treiber können umgetauscht werden, wenn die unterliegende Datenbank geändert werden soll, ohne dass es zu einer Anpassung in der Anwendung-Code kommt.\nEine vereinfachte Darstellung der JDBC-Architektur sieht also wie folgt aus:\nJDBC in der Praxis Die Klassen und Interfaces der JDBC-Schnittstelle befinden sich im Paket “java.sql”. Entsprechend reicht ein “import”-Statement um mit diesen Klassen/Interfaces arbeiten zu können. Die JDBC-Treiber sind jedoch separate und proprietäre Komponenten, welche zur Laufzeit vorhanden sein müssen damit der Classloader sie wirklich laden kann. Bei einem Maven-Projekt wird dies mittels einer Maven-Abhängigkeit erledigt. Ansonsten muss die Jar-Datei des Treibers auf dem Klassenpfad vorhanden sein.\nDie ersten Schritte bei der Arbeit mit der JDBC-Schnittstelle beinhalten die nötige Konfiguration um die Verbindung zur Datenbank herstellen zu können. Anschliessend können Abfragen und sonstige SQL-Anweisungen ausgeführt werden.\nDie folgenden Abschnitte zeigen die nötigen Schritte anhand von Beispielen. Diese Beispiele wurden in einem Maven-Projekt ohne das Spring-Framework erstellt.\nMaven-Dependency Sobald die gewünschte Datenbank festgelegt wurde, kann der dazugehörende JDBC-Treiber als Maven-Abhängigkeit herangezogen werden.\nDas folgende Beispiel zeigt eine Abhängigkeit zu einem MySql-Treiber:\nDie restlichen Schritte erfolgen im Java-Code.\nTreiber laden/registrieren Hinweis\nDieser Schritt wird nur bei JDBC-Versionen benötigt, welche älter sind als die Version 4! Bei neueren Versionen, werden alle Treiber geladen, welche auf dem Klassenpfad gefunden werden und somit braucht es diesen Schritt nicht mehr.\nMit der statischen Methode forName von Class wird die Klasse Driver geladen. Hier geht es um die Datenbank spezifischer Treiber, welche es der Anwendung den Datenzugriff auf der gewünschten Datenbank ermöglicht.\nIm folgenden Beispiel wird der JDBC-Treiber für MySql registriert:\nDatenbankverbindung herstellen Der Zugriff auf einer Datenbank erfordert die Konfiguration folgender Elemente:\n url: eine JDBC-URL, welche auf die gewünschte Datenquelle zeigt Benutzername: einer, für den Zugriff auf die Datenbank, autorisierter Benutzer Passwort: das Passwort des autorisierten Benutzers, womit er sich authentifizieren kann  Die Konfiguration wird hier einfachheitshalber als Klartext im Code geschrieben. Selbstverständlich dürfen vertrauliche Informationen wie z.B. das Passwort nicht als Klartext im Code stehen. Für diesen Zweck, wie auch für die Konfiguration unterschiedlichen Umgebungen, eignen sich System- oder Umgebungsvariablen (mit oder ohne Verschlüsselung) besser.\nDie obige Konfiguration kann nun für die Herstellung einer Datenbankverbindung verwendet werden. Dazu wird die statische Methode getConnection der Klasse DriverManager verwendet:\nAb diesem Punkt repräsentiert das Connection-Objekt die Verbindung zur Datenbank.\nSQL-Anweisung vorbereiten Die SQL-Anweisung kann als String vor der Ausführung vorbereitet werden:\nWenn eine IDE wie z.B. IntelliJ verwendet wird und eine Datasource mit der richtigen Datenbank definiert wird, erkennt die IDE, dass es sich um eine SQL-Anweisung handelt und liefert entsprechend Vorschläge und formatiert die Anweisung richtig und gut leserlich.\nDie obige SQL-Anweisung dient dazu alle Daten aus einer bestehenden Tabelle zu Lesen. SQL-Anweisungen können aber auch Operationen wie Tabellen erstellen, Daten einfügen, löschen oder bearbeiten usw. beinhalten.\nAls Beispiel, erstellt die folgende SQL-Anweisung eine Tabelle - falls diese noch nicht existiert - mit ein paar gewünschten Attributen (Spalten):\nSQL-Anweisung ausführen Um SQL-Anweisungen ausführen zu können wird zunächst ein Statement-Objekt aus dem vorhandenen Connection-Objekt erzeugt. Dieses Statement-Objekt wird verwendet, um die SQL-Anweisung an die Datenbank zu richten. Dazu wird eine der execute Methoden des Statement-Objektes verwendet.\nIm folgenden Beispiel wird die ein Statement-Objekt mithilfe des Connection-Objekt erstellt. Danach wird die Methode executeQuery verwendet, welche eine SQL-Anweisung als Parameter entgegennimmt, diese ausführt und eine Referenz auf die Ergebnismenge (sog. ResultSet) zurückliefert:\nParametrisierte SQL-Anweisungen Bis jetzt haben wir SQL-Anweisungen ausgeführt, welche keine Einschränkungen beinhaltet haben. Oft werden jedoch SQL-Anweisungen mit bestimmten Kriterien oder Einschränkungen benötigt damit die zurückgelieferten Daten anhand dieser Kriterien gefiltert werden können. In solchen Situationen wird der SQL “WHERE”-Befehl benutzt. Zum Beispiel:\nSELECT * FROM user WHERE username = ‘gandalf’ and age \u003e 20;\nIn diesem Beispiel, werden nur Einträge zurückgeliefert, welche die Kriterien username = ‘gandalf’ und age \u003e 20 erfüllen. Wenn nun dieselbe Anweisung mehrmals ausgeführt werden soll aber jeweils mit anderen Parameter (also mit unterschiedlichen username und age), wird die Anweisung mit Platzhaltern wie folgt geschrieben (ein Fragezeichen dient als einen Platzhalter):\nFür das eigentliche Ausführen der Anweisung müssen alle Platzhalter durch konkrete Werte ersetzt werden. Dazu wird ein PreparedStatement verwendet, welche es erlaubt, alle Platzhalter anhand ihrer Position (beginnend mit 1) mittels setXXX Methoden anzusprechen und mit den konkreten Werten zu ersetzen. Anschliessend, kann auch hier eine der executeXXX Methoden verwendet werden, um die Anweisung auszuführen:\nRückgabewerte verarbeiten Bei der Ausführung von bestimmten SQL-Anweisungen (z.B. bei SELECT Operationen), wird eine Ergebnismenge zurückgeliefert. Ein ResultSet repräsentiert einen sog. Cursor auf diese Ergebnismenge. Die Methoden des ResultSets, bewegen den Cursor (je nach Art des Cursors) vorwärts, rückwärts, zur ersten oder zur letzten Position usw. Somit kann über die gesamte Ergebnismenge, Zeile bei Zeile, iteriert werden, um die Werte zu lesen.\nIm obigen Beispiel wird die next Methode verwendet um den Cursor jeweils eine Zeile vorwärtszubewegen. Aus jeder Zeile werden aus dem ResultSet mittels getXXX Methoden (XXX steht für den Typ des Wertes) die Werte, welche in dieser aktuellen Zeile vorhanden sind. Die getXXX Methoden, bekommen als Parameter entweder die Spaltenposition oder den Spaltennamen, welche gelesen werden soll. Bei einer Spaltenposition hat die erste zurückgelieferte Spalte die Position 1. Hinter der letzten Zeile liefert die next Methode false zurück und somit wird die Schleife beendet, nachdem alle Zeilen bearbeitet worden sind.\nVerbindungen schliessen Objekte der Typ Connection, Statement oder auch PreparedStatement sind sog. Ressourcen. Solche Ressourcen müssen nach Verbrauch wieder explizit geschlossen werden:\nWenn diese Ressourcen innerhalb eines try-with-resources Befehls erstellt werden, entfällt diese explizite Schliessung der Ressourcen.\nDie Arbeit mit try-with-resources ist immer vorzuziehen, wenn es um Closable-Ressourcen geht.\nZusammenfassung Die folgende Beispiel-Methode fasst die oben erwähnten Arbeitsschritte mit JDBC (aktuelle Version) zusammen:\n","categories":"","description":"Modul #J8 - JDBC\n","excerpt":"Modul #J8 - JDBC\n","ref":"/docs/java/java-jdbc/","tags":"","title":"JDBC (Java Database connection)"},{"body":"Ziele  Du weisst, was Modules in Angular sind. Du kannst, erklären was in einem Module alles enthalten ist und wie es aufgebaut ist.  Modules In Angular ist ein Modul ein Mechanismus, um Components, Directives und Pipes und Services zu gruppieren, die miteinander zusammenhängen. Auf diese Weise können sie mit anderen Modulen kombiniert werden, um eine Anwendung zu erstellen.\nEin Angular-Modul wird mit dem @NgModule-Decorator definiert und kann die folgenden Eigenschaften haben:\n declarations: Die Components, Directives und Pipes, die zum Modul gehören. imports: Andere Module, die in diesem Modul verwendet werden können. exports: Die Components, Directives und Pipes, die von diesem Modul exportiert werden und von anderen Modulen verwendet werden können. providers: Services, die in diesem Modul verfügbar sein sollen. bootstrap: Die Components, die bei Anwendungsstart gerendert werden sollen.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import { NgModule } from '@angular/core'; import { BrowserModule } from '@angular/platform-browser'; import { AppComponent } from './app.component'; @NgModule({ declarations: [ AppComponent ], imports: [ BrowserModule, AppRoutingModule ], providers: [], bootstrap: [AppComponent] }) export class AppModule { }   ","categories":"","description":"Modul #F6 - Angular - Module\n","excerpt":"Modul #F6 - Angular - Module\n","ref":"/docs/web/angular/02_11_angular_modules/","tags":"","title":"Modules"},{"body":"Ziele  Du kennst den Unterschied zwischen Maps und Sets. Du kannst Maps erstellen, bearbeiten und Daten abrufen. Du kannst Map-Iteratoren verwenden.  Map Maps sind spezielle Objekte, die eine Zuordnung von Key zu Value ermöglichen. Der Key kann ein beliebiges Objekt sein, während der Value beliebig sein kann. Eine Map speichert keine Duplikate von Keys.\n1  const map = new Map();   Eintrag hinzufügen Mit der set() Methode wird ein neues Key-Value-Paar zur Map hinzugefügt. Der erste Parameter der Methode ist der Key und der zweite Parameter ist der Value, der mit dem Key assoziiert werden soll. Wenn die Map bereits einen Eintrag mit dem angegebenen Key enthält, wird der neue Value anstelle des alten Values gespeichert.\n1 2 3 4 5 6 7 8 9 10 11  const map = new Map(); map.set('key1', 'value1'); map.set('key2', 'value2'); map.set('key3', 'value3'); console.log(map); // Map {'key1' =\u003e 'value1', 'key2' =\u003e 'value2', 'key3' =\u003e 'value3'}  map.set('key1', 'value4'); console.log(map); // Map {'key1' =\u003e 'value4', 'key2' =\u003e 'value2', 'key3' =\u003e 'value3'}   Wert (value) für Key ermitteln Die get(key) Methode gibt den Value zurück, der mit einem bestimmten Key in der Map assoziiert ist. Wenn der Key nicht vorhanden ist, gibt die Methode undefined zurück.\n1 2 3 4 5 6 7 8  const map = new Map(); map.set('key1', 'value1'); map.set('key2', 'value2'); map.set('key3', 'value3'); console.log(map.get('key1')); // 'value1' console.log(map.get('key4')); // undefined   Prüfen, ob Key vorhanden ist Die has(key) Methode ist dazu da, um zu überprüfen, ob ein Key in der Map vorhanden ist. Die Methode gibt einen booleschen Wert zurück je nachdem ob der Key gefunden wurde oder nicht.\n1 2 3 4 5 6 7 8  const map = new Map(); map.set('key1', 'value1'); map.set('key2', 'value2'); map.set('key3', 'value3'); console.log(map.has('key1')); // true console.log(map.has('key4')); // false   Eintrag löschen Die Methode delete(key) löscht den Key und den zugehörigen Value aus der Map. Wenn der Key in der Map vorhanden ist, wird er zusammen mit dem Value entfernt, und die Methode gibt “true” zurück. Wenn der Key nicht vorhanden ist, wird die Map unverändert belassen, und die Methode gibt “false” zurück.\n1 2 3 4 5 6 7 8 9  const map = new Map(); map.set('key1', 'value1'); map.set('key2', 'value2'); map.set('key3', 'value3'); console.log(map.delete('key1')); // true console.log(map.delete('key4')); // false console.log(map.get('key1')); // undefined   Map zurücksetzen Die clear() Methode kann verwendet werden, um alle Key-Value-Paare aus einer Map zu entfernen und somit diese auf eine leere Map zurückzusetzen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  const map = new Map(); map.set('key1', 'value1'); map.set('key2', 'value2'); map.set('key3', 'value3'); console.log(map.get('key1')); // 'value1' console.log(map.get('key2')); // 'value2' console.log(map.get('key3')); // 'value2'  map.clear() console.log(map.get('key1')); // undefined console.log(map.get('key2')); // undefined console.log(map.get('key3')); // undefined   Anzahl Elemente Die size Methode einer Map gibt die Anzahl der Key-Value-Paare in der Map zurück.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  const map = new Map(); map.set('key1', 'value1'); map.set('key2', 'value2'); map.set('key3', 'value3'); console.log(map.size); // 3  map.delete('key1'); console.log(map.size); // 2  map.clear(); console.log(map.size); // 0   Map Iteratoren Iteratoren sind Objekte, die eine Möglichkeit bereitstellen, auf die Elemente einer Sammlung nacheinander zuzugreifen. Ein Iterator bietet also eine sequenzielle Schnittstelle, die es einem ermöglicht, die Elemente einer Sammlung in einer bestimmten Reihenfolge abzurufen.\nentries() Die entries() Methode gibt einen Iterator zurück, der alle Key-Value-Paare der Map in der Reihenfolge ihrer Hinzufügung enthält. Jedes Element des Iterators ist ein Array mit zwei Elementen, dem Key und dem zugehörigen Value.\n1 2 3 4 5 6 7 8 9 10 11 12 13  const map = new Map(); map.set('key1', 'value1'); map.set('key2', 'value2'); map.set('key3', 'value3'); for (const [key, value] of map.entries()){ console.log([key, value]); } // Array [ \"key1\", \"value1\" ] // Array [ \"key2\", \"value2\" ] // Array [ \"key3\", \"value3\" ]   keys() Die Methode keys() gibt einen Iterator zurück, der nur die Keys der Map enthält.\n1 2 3 4 5 6 7 8 9 10 11 12 13  const map = new Map(); map.set('key1', 'value1'); map.set('key2', 'value2'); map.set('key3', 'value3'); for (const key of map.keys()){ console.log(key); } // key1 // key2 // key3   values() Die Methode values() gibt einen Iterator zurück, der im Gegensatz zu der Methode keys()nur die Values der Map enthält.\n1 2 3 4 5 6 7 8 9 10 11 12 13  const map = new Map(); map.set('key1', 'value1'); map.set('key2', 'value2'); map.set('key3', 'value3'); for (const value of map.values()){ console.log(value); } // value1 // value2 // value3   ","categories":"","description":"Modul #F4 - JavaScript - Maps.\n","excerpt":"Modul #F4 - JavaScript - Maps.\n","ref":"/docs/web/javascript/12_js_maps/","tags":"","title":"Maps"},{"body":"Was gibt es für CSS-Selektoren? Nun da wir die Grundlagen von CSS gelernt haben, können wir uns die Selektoren genauer anschauen. Die Selektoren bestimmen, für welche HTML-Elemente die CSS-Regeln gelten (“ziehen”).\nSelektoren im Überblick Es gibt verschiedenste Selektoren, welche alle ihren eigenen Nutzen haben. In der folgenden Tabelle werden die gängigsten aufgezählt und erklärt.\n   Name Anwendung in HTML Anwendung in CSS Beschreibung     Klasse class=\"demo-class\" .demo-class {...} CSS-Klassen können mit dem “class”-Attribut auf jedes beliebige HTML-Element angewendet und dann im CSS referenziert werden. Klassen können dabei auf mehrere Elemente gegeben werden, was das Wiederverwenden der CSS-Regeln ermöglicht.   ID id=\"demo-id\" #demo-class {...} IDs können mit dem “id”-Attribut auf jedes beliebige HTML-Element angewendet werden. Grundsätzlich sollten IDs eindeutig sein, d.h. nicht an mehreren Orten verwendet werden.   Element \u003celement-name\u003e\u003c/element-name\u003e \"element-name\" {...} Um alle HTML-Elemente eines Types auszuwählen, muss man nichts spezielles im HTML anpasse. Es muss einfach gegeben sein, dass die Elemente auch tatsächlich vorhanden sind. Im CSS muss man dann nur noch den Element-Namen angeben (im Beispiel zu ersetzen mit z.B. a, p, input, body), wobei keine Prefixes notwendig sind.    Im nächsten Beispiel werden diese 3 Möglichkeiten verwendet:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  \u003cform class=\"round-container\"\u003e \u003cp\u003eBitte gib deinen Namen ein:\u003c/p\u003e \u003clabel for=\"your-name\"\u003eName\u003c/label\u003e \u003cinput type=\"text\" id=\"your-name\" name=\"name\"\u003e \u003cinput type=\"submit\" /\u003e \u003c/form\u003e \u003cstyle\u003e .round-container { width: 20em; background-color: lightgrey; border-radius: 2em; padding: 1em; } #your-name { background-color: orange; } label { font-weight: bold; } \u003c/style\u003e   In diesem Beispiel wurde die frei erfundene Klasse round-container, die ID your-name und das Element label mit CSS versehen.\nSpezifischere Selektoren Element auf Grund eines Attributes setzen Es kann vorkommen, dass du ein Element mit einem spezifischen Attribut stylen musst. Möchtest du z.B. alle Submit-Buttons stylen, dann könnte dir dieser Selektor weiterhelfen: input[type=submit] {...}\nEs gibt aber auch die Möglichkeit, ob der Attribut-Wert einen bestimmten Text enthält, damit beginnt bzw. endet. Hierfür sei auf diese Seite verwiesen: https://www.w3schools.com/cssref/css_selectors.asp\nSpezifisches Element mit Klasse Möchtest du z.B. alle \u003cform\u003e-Elemente, die die Klasse round-container enthalten, stylen, dann möchtest du wahrscheinlich folgenden Selektor: form.round-container {...}\nElemente, die sich in einem anderen Element befinden müssen Möchtest du z.B. alle labels stylen, die sich in einer form befinden, dann verwende so etwas: form label {...}. Zuerst kommt das übergeordnete Element, dann dasjenige, das tiefer verschachtelt ist. Die Elemente werden mit einem Leerzeichen voneinander getrennt. Bei diesem Selektor spielt es keine Rolle, ob label direkt in form ist, Hauptsache label befindet sich innerhalb einer form.\nIst es hingegen relevant, dass der label direkt in der form kommt (also keinen anderen Parent hat als form), dann benutze folgende Regel: form \u003e label {...}. Bei diesem Selektor bedeutet das \u003e, dass das erste Element der Parent vom zweiten Element sein muss.\nPseudoklassen Mithilfe von Pseudoklassen kann einen besonderen Zustand abgefragt werden. Mit :hover können CSS-Regeln z.B. auf Elemente beschränkt werden, wenn sich diese unterhalb des Mauszeigers befinden.\nMit dem nächsten Selektor kannst du z.B. das Aussehen beim Darüber-“Hovern” (also wenn der Mauszeiger darüber ist) vollständig verändern:\n1 2 3 4  input[type=submit]:hover { background-color: orange; color: white; }   Für \u003cinput\u003e-Elemente könnten Pseudoklassen wie :disabled oder :checked (Checkboxen) noch interessant sein.\nDu hast aber auch Zugriff auf völlig andere Sachen! Du kannst z.B. den ersten Buchstaben einem Paragraphen z.B. automatisch gross schreiben lassen:\n1 2 3  p:first-letter { font-size: 200%; }   Viele weitere interessante Pseudoklassen findest du hier beschrieben: https://web.dev/learn/css/pseudo-classes/\n","categories":"","description":"Modul #F3 - HTML und CSS - Die verschiedenen CSS-Selektoren.\n","excerpt":"Modul #F3 - HTML und CSS - Die verschiedenen CSS-Selektoren.\n","ref":"/docs/web/html_css/12_css_selectors/","tags":"","title":"CSS-Selektoren"},{"body":"Ziele  Ich kenne den Unterschied zwischen statischen und nicht statischen Elementen. Ich weiss, wann ich das Schlüsselwort static verwenden sollte und wann nicht. Ich kenne den Zugriff auf statische und nicht statische Elemente. Ich weiss, was eine statische Methode ist und kann sie aufrufen. Ich weiss, was eine Utility-Klasse ist und kenne deren wichtigste Bestandteile. Ich verstehe den Unterschied zwischen Methoden mit und ohne Rückgabewert. Ich kann eine Methodensignatur für Methoden mit und ohne Rückgabewert richtig schreiben. Ich kann Methoden schreiben, die Parameter entgegennehmen.  Static / Non-Static Statische Elemente (Variablen und Methoden) existieren innerhalb des Java-Ökosystems pro Klasse nur einmal. Es spielt also keine Rolle wie viele Objekte einer Klasse erzeugt werden, eine statische Variable bleibt über alle Instanzen stets gleich.\nDas folgende Beispiel soll dies zeigen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  public class Student { public static int numberOfStudents = 0; private String name; public Student(String name) { this.name = name; numberOfStudents++; } public String getName() { return this.name; } }   Die Variable numberOfStudents gibt es in Bezug auf die Klasse Student nur einmal. Der Zugriff erfolgt über den Namen der Klasse.\n1 2 3 4 5 6 7 8 9  public class Main { public static void main(String[] args) { Student maria = new Student(\"Maria\"); System.out.println(Student.numberOfStudents); // output will be 1  Student rick = new Student(\"Rick\"); System.out.println(Student.numberOfStudents); // output will be 2  } }   Will man hingegen den Namen von einem Studenten holen, so erfolgt der Zugriff über die Instanz des entsprechenden Objektes:\n1 2 3 4 5 6 7 8 9  public class Main { public static void main(String[] args) { Student maria = new Student(\"Maria\"); System.out.println(maria.getName()); // output will be \"Maria\"  Student rick = new Student(\"Rick\"); System.out.println(rick.getName()); // output will be \"Rick\"  } }   Die Verwendung des Schlüsselworts this ist in einem statischen Kontext nicht möglich, da dieser ja wie erwähnt keine Referenzen verwendet.\nStatische Methoden Mittlerweile hast du bereits einige statische Methoden kennengelernt, wie zum Beispiel die Main-Methode oder die Methode println() der Klasse System oder die Methode valueOf() der String-Klasse. Hier wollen wir uns nun genauer anschauen, was statische Methoden sind, denn diese wirst du unter anderem für das Lösen der Übungen benötigen. Das Keyword static ist ein sehr nützliches Werkzeug in Java. Bei statischen Methoden sind einige wichtige Punkte zu beachten.\n Diese Methoden gehören nicht zu einer Referenz von einem bestimmten Objekt Diese Methoden werden über den Klassennamen aufgerufen und nicht über eine Referenz von einem bestimmten Objekt  Wenn also in einem Methodenkopf das Keyword static steht, dann weisst du, dass es sich um eine statische Methode handeln muss. Schauen wir uns unterschiedliche Methodendeklarationen an (folgendes gilt für statische Methoden wie auch für nicht-statische Methoden): Wenn eine Methode einen Wert an ihren Aufrufer zurückgeben soll, sprechen wir von einer Methode mit einem Rückgabewert:\n1 2 3  public static returnType methodName() { return returnValue; // der Typ des Rückgabewerts muss vom Typ sein, welcher im Methodenkopf steht }   Wir sehen, dass in der Methodendeklaration angeben werden muss, welcher Typ zurückgegeben wird.\nWenn eine Methode keinen Wert zurückgegeben soll, verwenden wir das Keyword void:\n1 2 3  public static void methodName() { }   Das Keyword return ist in Methoden ohne Rückgabewert weiterhin zulässig um die Methode zu verlassen. Die Angabe eines Rückgabewerts entfällt in diesem Fall.\nWir können auch Werte einer Methode übergeben – hierbei sprechen wir von Parametern.\n1 2 3  public static void methodName(type identifier) { }   Ein Parameter besteht immer aus dem Datentyp und einem Bezeichner. Wir können beliebig viele Parameter an eine Methode übergeben. Gemäss den SBB Code Conventions (Regeln für den Programmcode) sollte eine Methode nicht mehr als acht Parameter haben.\nRegeln  Die Reihenfolge der Schlüsselwörter im Methodenkopf darf nicht verändert werden Bei der Auswahl des Methodennamens müssen die gleichen Regeln wie bei der Benennung einer Variablen eingehalten werden Keine doppelten Methoden: Jede Methodensignatur darf in einer Klasse nur einmal vorkommen  Aufruf Innerhalb der gleichen Klasse\n1  methodName();   Ausserhalb:\n1  ClassName.methodName();   Utility-Klassen Eine Klasse, welche ausschliesslich statische Elemente besitzt nennt man Utility-Klasse. Ein gutes Beispiel dafür ist die Klasse Math. Eine solche Klasse sollte einen privaten Konstruktor aufweisen, da es keinen Sinn macht von ihr eine Referenz zu erstellen. Zudem sollte die Klasse als final deklariert werden, da eine Vererbung aufgrund des statischen Kontextes ebenfalls keinen Sinn ergibt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  public final class SpeedConverter { private SpeedConverter() { // Utility class  } public static double toMilesPerHour(double kmh) { return kmh * 0.621; } public static double toKilometersPerHour(double mph) { return mph * 1.609; } }    Jetzt bist du dran. Löse bitte die Aufgabe 9 in den Labs.\n","categories":"","description":"Modul #J1\n","excerpt":"Modul #J1\n","ref":"/docs/java/java-grundlagen/12_static-non_static/","tags":"","title":"Statische und nicht-statische Elemente"},{"body":"Ziele  Du weisst, was Routing in Angular ist. Du kannst, Routing anwenden und weisst wie man es einsetzen muss. Du kennst, die verschiedenen Arten von Routen. Du weisst, was RoutGuards sind und kannst diese anwenden. Du kennst, die Navigation Directive und kannst sie anwenden.  Routing Angular Router ist ein leistungsstarker JavaScript-Router, der vom Angular Core Team erstellt und gewartet wird. Der Router wird über das Paket @angular/router installiert. Das Paket bietet eine vollständige Routing-Library:\n Mehrere Router-Outlets Verschiedene Strategien für Path-Matching Einfachen Zugriff auf Route-Parameter und Route-Guards zu haben, um Components vor unbefugtem Zugriff zu schützen.  Der Angular-Router ist ein zentraler Bestandteil der Angular-Plattform. Entwickler können damit Single Page Applications mit mehreren Views erstellen und zwischen diesen navigieren.\nRouter-Outlet Die Router-Library stellt uns die Router-Outlet Direktive zur Verfügung. In dieser Direktive fügt der Router den Component ein, der anhand der URL abgeglichen wird. Wir können in einer Angular-Applikation mehrere Outlets hinzufügen, um erweiterte Routing-Szenarien zu implementieren. Für den Anfang werden wir uns jedoch auf einen einzelnen Outlet beschränken.\n1 2 3 4  \u003c!--app.component.html--\u003e \u003cdiv\u003e \u003crouter-outlet\u003e\u003c/router-outlet\u003e \u003c/div\u003e   Routen und Pfade Routen sind Objekte, die aus mindestens einem Pfad- und einem Component-Attribut bestehen. Das Pfad-Attribut bezieht sich auf den Teil der URL, der eine eindeutige View festlegt, die angezeigt werden soll. Das Component-Attribut bezieht sich auf den Angular-Component, der dem Pfad zugeordnet wird.\nJede Route ordnet einem Component einen URL-Pfad zu.\nDer Router kann, basierend auf einer von uns bereitgestellten Routendefinition, den Benutzer zu einer bestimmten View navigieren.\nSchauen wir uns ein Beispiel einer Route an:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import { NgModule } from '@angular/core'; import { RouterModule, Routes } from '@angular/router'; import { TriumphsComponent } from './components/triumphs/triumphs.component'; import { WeaponComponent } from './components/weapon/weapon.component'; const routes: Routes = [ { path: 'triumph', component: TriumphsComponent }, { path: 'weapon', component: WeaponComponent }, ]; @NgModule({ imports: [RouterModule.forRoot(routes)], exports: [RouterModule], }) export class AppRoutingModule {}   Falls diese Route so in der Router Konfiguration festgelegt wird, wird der Router den Component TriumphsComponent rendern, sobald die URL des Browsers /triumph beinhaltet.\nStandard Route Der Pfad kann auch leer sein. Dies gibt den Standardpfad einer Applikation an und ist normalerweise auch der Start der Applikation.\nWichtig ist das die Route mit dem leeren Pfad vor anderen Routen definiert ist, da Angular die Routen in der Reihenfolge überprüft, in der sie definiert sind. Dadurch wird sichergestellt, dass die Standardroute für den leeren Pfad richtig erkannt wird.\nBeispiel:\n1  { path: '', component: GreetingComponent }   Wildcard Route Der Pfad kann einen Wildcard String (**) enthalten. Der Router wählt diese Route aus, wenn die angeforderte URL keinen Pfaden der definierten Routen entspricht. Wenn keine Übereinstimmung gefunden wird, kann man dies zum Anzeigen einer “Nicht gefunden”-View oder zum Umleiten zu einer bestimmten View verwendet werden.\nEs ist wichtig sicherzustellen, dass die Catch-All-Route am Ende der Route-Konfiguration platziert wird, da Angular die Routen in der Reihenfolge überprüft, in der sie definiert sind. Dadurch wird sichergestellt, dass zuerst nach übereinstimmenden Pfaden gesucht wird, bevor die Standardroute zum Einsatz kommt.\nBeispiel:\n1  { path: '**', component: NotFoundComponent }   dynamische Route Routen können mit Variablen verwendet werden, um dynamische Routen zu ermöglichen. Man kann zum Beispiel den Platzhalter :id in der Routendefinition verwenden, um eine Variable (hier eine ID) in den Pfad einzufügen. Diese Variable kann dann von dem entsprechenden Component abgerufen werden.\n1  { path: 'triumph/:id', component: TriumphsComponent },   Um die Variable im Component zu verwenden, musst du den ActivatedRoute-Service von Angular importieren und im Component verwenden.\nHier ist ein Beispiel, wie man die ID-Variable im UserComponent abrufen kann:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import { Component } from '@angular/core'; import { ActivatedRoute } from '@angular/router'; @Component({ // .. }) export class TriumphsComponent { // ..  id: string = \"\"; constructor(private route: ActivatedRoute) { const idParam = this.route.snapshot.paramMap.get('id'); this.id = idParam ? idParam : \"\"; } }   Wichtig ist das der String innerhalb des this.route.snapshot.paramMap.get(''); gleich geschrieben ist wie die Variable, welche man im path der Route gegeben hat. Das beduetet das man beliebige Variablen setzen kann und nicht nur “id” wie im Beispiel.\nRoute Guards Ein Route Guard ist ein Feature des Angular Routers, mit der wir Logik ausführen können, wenn eine Route angefordert wird. Es wird häufig verwendet, um zu überprüfen, ob ein Benutzer angemeldet ist und über die Berechtigung verfügt, bevor er zugreifen kann. Somit können wir also dem Benutzer den Zugriff auf die Route ermöglichen oder verweigern.\nFür den Route Guard müssen wir das CanActivateFn-Interface implementieren, welches im @angular/router Paket verfügbar ist. Die canActivateFn() Methode des Interfaces enthält die Logik, um den Zugriff auf die Route zuzulassen oder zu verweigern.\nBeispielsweise ermöglicht folgender Guard immer den Zugriff auf eine Route, wenn im WeaponService die Methode getWeapons() keine Waffe zurückliefert:\n1 2 3 4 5 6 7 8 9 10  import {ActivatedRouteSnapshot, CanActivateFn, RouterStateSnapshot} from '@angular/router'; import {inject} from \"@angular/core\"; import {WeaponService} from \"../services/weapon.service\"; export const WeaponGuard: CanActivateFn = ( route: ActivatedRouteSnapshot, state: RouterStateSnapshot ): boolean =\u003e { return inject(WeaponService).getWeapons().length === 0; }   return inject(WeaponService) in Angular bedeutet, dass die Instanz des WeaponService mithilfe der inject-Funktion abgerufen wird. Diese Vorgehensweise wird typischerweise in Szenarien angewendet, in denen die Dependency Injection nicht direkt im Konstruktor verfügbar ist.\nEine Route können wir nun anhand dieses Guards schützen, indem wir das “canActivate”-Attribut des Pfades benutzen:\n1  { path: \"weapon\", canActivate: [WeaponGuard], component: WeaponComponent }   Wichtig Wenn man nun auf der Webseite auf die Route navigieren möchte wird folgender Error in der Konsole erscheinen: NullInjectorError: No provider for Component!.\nWenn in diesem Fall ein Guard einen Component verwenden möchte, muss dieser als Abhängigkeit im Guard aufgelöst werden können. Dies kann durch die Verwendung von Dependency Injection gemacht werden.\nDie Providers in Angular dienen dazu, Dependency Injection zu konfigurieren, indem sie angeben, welche Objekte (Services, Components, etc.) zur Verfügung gestellt werden und wie sie instanziiert werden sollen. Wenn ein Component oder ein Service als Provider registriert ist, kann darauf zugegriffen werden, indem es als Parameter in den Konstruktor von anderen Components, Services oder Guards eingefügt wird.\nEs ist wichtig zu beachten, dass das Registrieren eines Components als Provider in einem Module nicht bedeutet, dass der Component überall automatisch erzeugt wird. Es bedeutet lediglich, dass der Component im Dependency Injection-System verfügbar ist und bei Bedarf instanziiert werden kann.\n1 2 3 4 5 6 7 8  import { GreetingComponent } from './components/greeting/greeting.component'; @NgModule({ // ..  providers: [GreetingComponent], // .. }) export class AppModule { }   Navigation Directive Der Angular Router stellt die routerLink-Directive zum Erstellen von Navigationslinks bereit. Dieses Directive navigiert anhand des Pfads, welcher dem Component zugeordnet ist.\nBeispielsweise:\n1  \u003ca [routerLink]=\"'/weapon'\"\u003eWeapon\u003c/a\u003e   Es ist wichtig anzumerken, dass man das RouterModule im Angular-Modul importieren muss, um die routerLink-Directive verwenden zu können. Dies kann man im app.module.ts wie folgt tun:\n1 2 3 4 5 6 7 8 9 10  import { RouterModule } from '@angular/router'; @NgModule({ // ..  imports: [ RouterModule.forRoot(routes) ], // .. }) export class AppModule { }   ","categories":"","description":"Modul #F6 - Angular - Routing\n","excerpt":"Modul #F6 - Angular - Routing\n","ref":"/docs/web/angular/02_12_angular_routing/","tags":"","title":"Routing"},{"body":"Ziele  Du kennst den Unterschied zwischen Maps und Sets. Du kannst Sets erstellen, bearbeiten und Daten abrufen. Du kannst Set-Iteratoren erklären.  Set Oft möchte man eine Liste haben, in der klar ist, dass jedes Element nur 1x vorkommen kann.\nGenau diesen Zweck erfüllt die Set.\n1  const set = new Set();   Wert hinzufügen Die add(value) Methode fügt einen Wert zur Set hinzu.\nWenn der Wert bereits in der Set vorkommt, wird der Wert kein weiteres Mal hinzugefügt, siehe:\n1 2 3 4 5 6 7 8 9 10 11 12  const set = new Set(); set.add('value1'); set.add('value2'); set.add('value3'); console.log(set); // Set {'value1', 'value2', 'value3'}  set.add('value2'); set.add('value4'); console.log(set); // Set {'value1', 'value2', 'value3', 'value4'}   Wert löschen Die Methode delete() löscht den angegebenen Wert aus der Set, wenn dieser enthalten ist und gibt true zurück. Ansonsten false.\n1 2 3 4 5 6 7 8  const set = new Set(); set.add('value1'); set.add('value2'); set.add('value3'); console.log(set.delete('value1')); // true console.log(set.delete('value1')); // false   Prüfen, ob Wert vorhanden ist Die has() Methode gibt zurück, ob der angegebene Value im Set enthalten ist oder nicht. Die Methode gibt “true” zurück, wenn der Value im Set vorhanden ist, andernfalls gibt sie “false” zurück.\n1 2 3 4 5 6 7 8  const set = new Set(); set.add('value1'); set.add('value2'); set.add('value3'); console.log(set.has('value1')); // true console.log(set.has('value4')); // false   Set zurücksetzen Die clear()-Methode löscht alle Elemente aus der Set.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  const set = new Set(); set.add('value1'); set.add('value2'); set.add('value3'); console.log(set.has('value1')); // true console.log(set.has('value2')); // true console.log(set.has('value2')); // true  set.clear(); console.log(set.has('value1')); // false console.log(set.has('value2')); // false console.log(set.has('value3')); // false   Anzahl Elemente Die Methode size() gibt die Anzahl der Elemente im Set zurück.\n1 2 3 4 5 6 7 8 9 10 11  const set = new Set(); set.add('value1'); set.add('value2'); set.add('value3'); console.log(set.size); // 3  set.clear(); console.log(set.size); // 0   Set Iteratoren Im Set existieren im Grunde fast die gleichen Iteratoren wie bei einer Map. Jedoch gibt es bei keys() und entries() Unterschiede, diese sind nachfolgend nachzulesen.\nvalues() values() gibt einen Iterator zurück, der die Werte des Sets in der Reihenfolge des Einfügens zurück gibt:\n1 2 3 4 5 6 7 8 9 10 11 12 13  const set = new Set(); set.add('value1'); set.add('value2'); set.add('value3'); for (const value of set.values()){ console.log(value); } // value1 // value2 // value3   keys() und entries() keys() gibt einen Iterator zurück, der dieselben Value wie der values()-Iterator zurück gibt. Der keys()-Iterator ist jedoch nur aus Gründen der Kompatibilität mit der Map-Datenstruktur verfügbar und existiert für Sets nur, weil Sets auf der gleichen Grundlage wie Maps implementiert sind.\nDasselbe gilt auch für die entries()-Methode.\n","categories":"","description":"Modul #F4 - JavaScript - Sets.\n","excerpt":"Modul #F4 - JavaScript - Sets.\n","ref":"/docs/web/javascript/13_js_sets/","tags":"","title":"Sets"},{"body":"Arten von Schriftarten Browser unterstützen mindestens diese 5 Arten von Schriftarten:\n  Die wichtigste Unterscheidung ist zwischen Serif- und Sans-Serif-Schriftarten. Serif-Schriftarten haben Serife (also dünne Linien auf den Buchstabenlinien). Eine detailliertere Beschreibung findest du hier: https://de.wikipedia.org/wiki/Serife\n  Sans-Serif-Schriftarten haben diese Serifen nicht.\n  Bei Monospace-Schriftarten beanspruchen alle Buchstaben gleich viel Platz. Ein bekanntes Beispiel hierfür ist Consolas. Diese werden oft für Code verwendet.\n  Kursive Schriftarten imitieren Handschrift.\n  Fantasy-Schriftarten werden oft für kreative Zwecke eingesetzt.\n  Schriftarten in CSS Im CSS kannst du Schriftarten wie folgt einbinden:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  .p1 { font-family: \"Times New Roman\", Times, serif; } .p2 { font-family: Arial, Helvetica, sans-serif; } .p3 { font-family: \"Consolas\", monospace; } .p4 { font-family: \"Lucida Handwriting\", cursive; } .p5 { font-family: \"Comic Sans MS\", fantasy; }   Als CSS-Property (=Eigenschaft) wird font-family verwendet. Dabei können mehrere Schriftarten übergeben werden, was auf Grund von Browser-Kompatibilität empfohlen wird. Die erste Schriftart ist die wichtigste. Sollte diese nicht geladen werden können, so wird die nächste Schriftart ausprobiert. Als Fallback kann man dann serif, sans-serif, monospace, cursive oder fantasy verwenden.\nWeitere Informationen darüber kriegst du hier: https://www.w3schools.com/css/css_font.asp\nWeitere Font-Eigenschaften Text kann auf viele weitere Arten gestylt werden:\n   CSS-Property Beispiel Beschreibung     color color: blue Schriftfarbe   background-color color: blue Hintergrundfarbe (~Anstreichen)   font-size font-size: 16px Schriftgrösse.   text-align text-align: center Einen Text zentrieren.    Auftrag Im Rahmen der Semantic-Tags hast du ein HTML-Dokument erstellt.\nVersuche alle Properties von dieser Seite auf deiner zu verwenden.\n","categories":"","description":"Modul #F3 - HTML und CSS - Arten von Schriftarten.\n","excerpt":"Modul #F3 - HTML und CSS - Arten von Schriftarten.\n","ref":"/docs/web/html_css/13_css_fonts/","tags":"","title":"Schriftarten"},{"body":"Server Side Rendering (SSR) Das serverseitige Rendering (SSR) ist ein Prozess, bei dem Seiten auf dem Server gerendert werden, was zu einem anfänglichen HTML-Inhalt führt, der den anfänglichen Zustand der Seite enthält. Sobald der HTML-Inhalt an einen Browser übermittelt wird, initialisiert Angular die Anwendung und nutzt die im HTML enthaltenen Daten.\nDie Hauptvorteile von SSR im Vergleich zum clientseitigen Rendering (CSR) sind:\n Verbesserte Leistung: SSR kann die Leistung von Webanwendungen verbessern, indem es vollständig gerendertes HTML an den Client liefert, das der Browser parsen und anzeigen kann, bevor er die JavaScript-Anwendung herunterlädt. Dies kann besonders vorteilhaft für Benutzer mit geringer Bandbreite oder mobilen Geräten sein. Verbesserte Core Web Vitals: SSR führt zu Leistungsverbesserungen, die mit Core Web Vitals (CWV)-Statistiken gemessen werden können, wie z. B. reduziertem First Contentful Paint (FCP) und Largest Contentful Paint (LCP) sowie Cumulative Layout Shift (CLS). Besseres SEO: SSR kann die Suchmaschinenoptimierung (SEO) von Webanwendungen verbessern, indem es Suchmaschinen erleichtert, den Inhalt der Anwendung zu durchsuchen und zu indexieren.  Um ein neues Projekt mit SSR zu erstellen, führen man folgenden Befehl aus:\n1  ng new --ssr   Um SSR zu einem vorhandenen Projekt hinzuzufügen, verwenden man den Angular CLI-Befehl ng add.\n1  ng add @angular/ssr   Diese Befehle erstellen und aktualisieren den Anwendungscode, um SSR zu aktivieren, und fügen dem Projektstrukturspezifische Dateien hinzu.\nProjektstruktur 1 2 3 4 5 6  my-app |-- server.ts # Anwendungsserver └── src |-- app | └── app.config.server.ts # Konfiguration für den Server └── main.server.ts # Haupt-Bootstrapping für den Anwendungsserver   Static Site Generation (SSG) Prerendering, häufig als Static Site Generation (SSG) bezeichnet, stellt die Methode dar, bei der Seiten während des Build-Prozesses zu statischen HTML-Dateien gerendert werden.\nPrerendering behält die gleichen Leistungsvorteile des serverseitigen Renderings (SSR) bei, erreicht jedoch eine reduzierte Time to First Byte (TTFB), was letztendlich die Benutzererfahrung verbessert. Der wesentliche Unterschied liegt in seinem Ansatz, dass Seiten als statischer Inhalt bereitgestellt werden und keine anfragebasierte Rendern erfolgt.\nWenn die für das serverseitige Rendering erforderlichen Daten bei allen Benutzern konsistent bleiben, erweist sich die Strategie des Prerenderings als wertvolle Alternative. Anstatt Seiten dynamisch für jede Benutzeranfrage zu rendern, geht das Prerendering proaktiv vor und rendert sie im Voraus.\nUm eine statische Seite vorzuerrendern, fügt man in der Anwendung mit dem folgenden Angular CLI-Befehl die SSR-Fähigkeiten hinzu:\n1  ng add @angular/ssr   Um eine Anwendung mit Prerendering-Fähigkeiten von Anfang an zu erstellen, verwendet man den Befehl:\n1  ng new --ssr   Sobald SSR hinzugefügt wurde, kann man die statischen Seiten generieren, indem man den Build-Befehl ausführen:\n1  ng build   Hydration Die Hydration ist der Vorgang, der die serverseitig gerenderte Anwendung auf dem Client wiederherstellt. Dazu gehört das Wiederverwenden der serverseitig gerenderten DOM-Strukturen, das Beibehalten des Anwendungszustands, das Übertragen von bereits vom Server abgerufenen Anwendungsdaten und andere Prozesse.\nDie Hydration verbessert die Leistung der Anwendung, indem zusätzliche Arbeit zur Neuerstellung von DOM-Knoten vermieden wird. Stattdessen versucht Angular, vorhandene DOM-Elemente zur Laufzeit mit der Anwendungsstruktur abzugleichen und wiederverwendet DOM-Knoten, wenn möglich. Dies führt zu einer Leistungsverbesserung, die anhand von Core Web Vitals (CWV)-Statistiken gemessen werden kann, z.B. der Reduzierung der First Input Delay (FID) und Largest Contentful Paint (LCP) sowie des Cumulative Layout Shift (CLS). Eine Verbesserung dieser Kennzahlen wirkt sich auch auf Dinge wie die SEO-Leistung aus.\nOhne aktiviert Hydration werden serverseitig gerenderte Angular-Anwendungen die DOM der Anwendung zerstören und erneut rendern, was zu einem sichtbaren Flackern der Benutzeroberfläche führen kann. Dieses erneute Rendern kann sich negativ auf Core Web Vitals wie LCP auswirken und zu einem Layout-Shift führen. Durch Aktivieren der Hydration können die vorhandenen DOM-Elemente wiederverwendet werden und ein Flackern wird verhindert.\nWie aktiviert man die Hydratisierung in Angular Bevor man mit der Hydration beginnen kann, muss man eine serverseitig gerenderte (SSR) Anwendung besitzen. Sobald die Anwendung mit SSR zum Laufen gebracht wurde, können die Hydration aktiviert werden. Indem die Hauptanwendungskomponente oder das Hauptmodul besucht wird und provideClientHydration von @angular/platform-browser importiert wird. Anschliessend fügt man diesen Provider zur Liste der Bootstrapping-Provider in der App hinzu.\n1 2 3 4 5 6 7 8 9 10  import { bootstrapApplication, provideClientHydration, } from '@angular/platform-browser'; ... bootstrapApplication(AppComponent, { providers: [provideClientHydration()] });   Alternativ, wenn man NgModules verwendet, fügt man provideClientHydration zur Provider-Liste im Root-App-Moduls hinzu.\n1 2 3 4 5 6 7 8 9 10  import {provideClientHydration} from '@angular/platform-browser'; import {NgModule} from '@angular/core'; @NgModule({ declarations: [AppComponent], exports: [AppComponent], bootstrap: [AppComponent], providers: [provideClientHydration()], }) export class AppModule {}   WICHTIG: Es muss sichergestellt werden, dass der Aufruf von provideClientHydration() auch in einer Liste von Providern enthalten ist, die zum Bootstrappen einer Anwendung auf dem Server verwendet wird. In Anwendungen mit der standardmässigen Projektstruktur (generiert durch den Befehl ng new), sollte es ausreichen, den Aufruf im Root-App-Modul hinzuzufügen, da dieser vom Servermodul importiert wird. Wenn man eine benutzerdefinierte Konfiguration verwendet, sollte man den Aufruf von provideClientHydration() zur Provider-Liste in der Konfiguration zum Server-Bootstrapping hinzufügen.\n","categories":"","description":"Modul #F6 - Angular - Rendering in Angular\n","excerpt":"Modul #F6 - Angular - Rendering in Angular\n","ref":"/docs/web/angular/02_13_angular_rendering/","tags":"","title":"Rendering"},{"body":"JSON (JavaScript Object Notation) JSON ist ein weit verbreitetes Datenformat zur Repräsentation strukturierter Informationen. Es basiert auf einer einfachen Syntax, die sowohl von Menschen als auch von Maschinen leicht verstanden werden kann. JSON-Daten bestehen aus Schlüssel-Wert-Paaren und geordneten Listen von Werten. Hier ist eine grundlegende Übersicht der JSON-Syntax:\nSchlüssel-Wert-Paare Ein JSON-Objekt besteht aus einer Sammlung von Schlüssel-Wert-Paaren. Ein Schlüssel ist eine Zeichenfolge (String), gefolgt von einem Doppelpunkt und einem zugehörigen Wert. Die Paare sind durch Kommas getrennt und in geschweiften Klammern eingeschlossen:\n1 2 3 4 5  { \"name\": \"John Doe\", \"age\": 30, \"city\": \"New York\" }   Geordnete Listen In JSON können auch geordnete Listen von Werten dargestellt werden. Diese Listen sind durch eckige Klammern gekennzeichnet und die Werte sind durch Kommas getrennt:\n1 2 3  { \"fruits\": [\"apple\", \"banana\", \"orange\"] }   Beispiel Hier ist ein einfaches Beispiel, das ein JSON-Objekt darstellt:\n1 2 3 4 5 6  { \"name\": \"Alice\", \"age\": 25, \"isStudent\": true, \"grades\": [95, 89, 78] }   JSON wird häufig in der Webentwicklung, APIs und Datenaustausch verwendet, da es leicht zu verarbeiten ist. Es ist eine effektive Möglichkeit, Daten in einer strukturierten Form zu speichern und zwischen verschiedenen Systemen auszutauschen.\n","categories":"","description":"Modul #F4 - JavaScript - JSON\n","excerpt":"Modul #F4 - JavaScript - JSON\n","ref":"/docs/web/javascript/14_js_json/","tags":"","title":"JSON"},{"body":"Zuweisen von Farben Um einem Text eine Schriftfarbe zuzuweisen, ist folgendes eine Option:\n1 2 3 4  span { /*font color:*/ color: orange; }   Den Hintergrund von einem Element kann mit dem background-color-Property bestimmt werden:\n1 2 3 4  div { /*Color of the container*/ background-color: orange; }   Arten von Farben In den oberen Beispielen wurde die Farbe mit dem Wort orange bestimmt. Es gibt aber viele Arten, diese Farbe zu übergeben:\n via Color-Name: orange via RGB-Angaben (red green blue): rgb(255,165,0) via hexadezimalen Wert (HEX color): #ffa500  Es gibt noch weitere Möglichkeiten. Du findest diese hier: https://www.w3schools.com/colors/default.asp\nDie folgende CSS-Regel setzt die Schriftfarbe auf Orange. Nur eine dieser 3 Regeln wird benötigt:\n1 2 3 4 5  .orange { color: orange; color: rgb(255,165,0); color: #ffa500; }   Da diese Farbe in CSS bereits einen Namen hat (\"orange\"), wird hier die Angabe via Farbnamen empfohlen.\nObwohl die Angabe mit RGB in CSS möglich ist, sieht man in der Webentwicklung häufiger die hexadezimale Schreibweise.\nNachfolgend sind diese 3 Varianten genauer beschrieben.\nVia Color-Name Am lesbarsten ist die Angabe der Farben via Namen. Es werden mindestens 140 Farben mit Namen unterstützt. Häufig verwendete Farben sind z.B.:\n black white gray (American) oder grey (British), lightgray blue, lightblue cornflowerblue red orange yellow  Hier findest du eine Liste der Farben: https://www.w3schools.com/colors/colors_names.asp\nvia RGB RGB steht für Rot-Grün-Blau. Wenn man die Farben via RGB angibt, so gibt man an, wie intensiv jede dieser 3 Farben in der gewünschten Farbe vorkommt. 0 bedeutet, dass die Farbe nicht vorkommt, 255 bedeutet hingegen, dass die Farbe zu 100% gebraucht wird.\nFolgende RGB-Werte solltest du als Informatiker:in kennen:\n   Name RGB     red rgb(255, 0, 0)   green rgb(0, 255, 0)   blue rgb(0, 0, 255)   yellow rgb(255, 255, 0)   white rgb(255, 255, 255)   black rgb(0, 0, 0)    In RGB (oder HEX) gibts du Farben an, die der Browser nicht per Namen kennt. Ein Beispiel hierfür wäre die Farbe ‘amber’, die es leider noch nicht in die offizielle Liste geschafft hat.\nMöchtest du herausfinden, wie der RGB- oder HEX-Wert einer Farbe ist, so kannst du dafür Online-Tools wie https://www.color-hex.com/color-names.html verwenden. Dort kannst du den Namen der Farbe eingeben und dann kannst du nachschauen, wie diese Werte für diese Farben sind. Im Beispiel der Farbe ‘amber’ erhälst du folgende Werte:\n   Name RGB HEX     amber rgb(255, 191, 0) #ffbf00    via HEX color Am häufigsten werden im Web die Farben via Hex color angegeben.\nFarben in hexadezimale sind auch in RGB angegeben, wobei jeder dieser 3 Farben 2 Stellen in diesem Code ausmachen.\nKennen solltest du sicher:\n   Farbe HEX color     red #ff0000 oder #f00   grenn #00ff00 oder #0f0   blue #0000ff oder #00f   yellow #ffff00 oder #ff0   white #ffffff oder #fff   black #000000 oder #000   gray #808080    Wenn bei allen Farben die beiden Ziffern gleich sind, dann kann bei jeder Farbe die zweite Ziffer weggelassen werden (siehe Tabelle).\n","categories":"","description":"Modul #F3 - HTML und CSS - Arten, um Farben anzugeben.\n","excerpt":"Modul #F3 - HTML und CSS - Arten, um Farben anzugeben.\n","ref":"/docs/web/html_css/14_css_colors/","tags":"","title":"Farben"},{"body":"Ziele  Ich kann am Beispiel Spring erklären, was ein “Framework” ausmacht, indem ich Unterschiede zu einer gewöhnlichen externen Library aufzählen kann. Ich kenne einige Vor- und Nachteile aufzählen, wenn ein Frameworks im Projekt eingesetzt wird. Ich kann erläutern, welche Zuständigkeiten die folgenden Module im Spring-Framework haben: Core, Data-Access, Web. welche Aufgaben sie erfüllen. Ich bin mit den bedeutendsten Spring-Projekten (Spring-Boot, Spring-Cloud, Spring-Security) vertraut, und kann erklären, wann welche eingesetzt werden. und weiss wofür ich diese einsetzen kann. Ich verstehe das Konzept hinter “Inversion of Control” (IoC), indem ich erklären kann, auf welche Art und Weise es in Spring eingesetzt wird. Ich kann mind. 2 Arten auflisten, wie “Dependency-Injection” (DI) dazu verwendet werden kann, um Variablen automatisch einen Wert zuzuweisen.``` Constructor-Based, Setter-Based, Field-Based) um DI in Spring zu benutzen. Ich kann das Konzept hinter @Beans in Spring skizzieren und ich kann erläutern, wie @Beans definiert und verwendet werden können. Ich kann den Scopes einer “Spring-Beans” ändern. (z.B. Singleton, Session, Application usw.). Ich kenne die am häufigsten verwendeten Spring-Bean-Annotationen @Service, @Configuration, @Component, @Repository, @Controller und weiss, wie ich diese einsetze und welchem Zweck sie dienen. Ich weiss, was “Wiring” ist und wie es in Spring gemacht wird. Ich kann in Spring-Projekten sogenannte Properties setzen und abfragen. Ich kenne Anwendungsfälle, in welchen Spring-Profiles verwendet werden und wie ich sie setzen kann.   Framework Ein Framework kann die Grundstruktur für Applikationen vorgeben. Es stellt Funktionen, Bibliotheken und Regeln bereit, um den Entwicklungsprozess zu erleichtern und zu beschleunigen. Häufig gibt es eine standartisierte Struktur und Methodik vor, um eine gewisse Konsistenz und Qualität des Codes und der Software sicherzustellen.\nSpring Framework Das Spring Framework ist eine umfassende Plattform, die weit über die Entwicklung einfacher Web-Applikationen hinausgeht. Sie bietet ein breites Spektrum an Funktionalitäten und Unterstützung für die Entwicklung von Enterprise-Anwendungen, Webanwendungen und Microservices.\nModule Das Spring-Framework besteht aus verschiedenen Modulen, die unterschiedliche Aufgaben erfüllen und in Kategorien wie Core, Data Access, Web usw. organisiert sind.\nQuelle: https://docs.spring.io/spring-framework/docs/3.0.0.M4/reference/html/images/spring-overview.png\nDas Core-Modul umfasst essenzielle Funktionen wie Dependency Injection. Das Beans-Modul beinhaltet alles, was zur Erstellung von Beans benötigt wird.\nDas JDBC-Modul bietet ein JDBC-Interface für den Datenbankzugriff. Das ORM-Modul ermöglicht den Zugriff auf Object-Mapping-APIs wie JPA, JDO, Hibernate. Das OXM-Modul ermöglicht den Zugriff auf Objekt/XML-Speicher-Implementierungen.\nDas Web-Modul ist für die Kommunikation mit der Außenwelt (Internet) verantwortlich.\nWeitere Informationen finden sich in der offiziellen Dokumentation.\nSpring Projekte Es gibt verschiedene Spring-Projekte, die auf dem Spring Framework aufbauen und dessen Anwendungsmöglichkeiten erweitern. Zu diesen gehören z. B. Spring Security, Spring Shell, Spring Boot, die jeweils spezifische Funktionalitäten bereitstellen.\nMehr dazu auf GitHub Spring Projects.\nSpring Boot Spring Boot vereinfacht das normale Spring Framework. Mit dem Spring Initializer können Abhängigkeiten wie Datenbanktreiber oder Software für die Cloud-Infrastruktur ausgewählt werden, was die manuelle Konfiguration des Projekts überflüssig macht. Spring Boot ist jedoch kein Ersatz für das Spring Framework, sondern vereinfacht die Konfiguration.\nDesign-Pattern Design-Patterns sind wiederverwendbare Vorlagen für die Anwendungsentwicklung und sind nicht spezifisch für eine Programmiersprache. Es gibt verschiedene Arten, z. B. Kreationsmuster, Strukturmuster und Verhaltensmuster, die auch in Spring genutzt werden.\nInversion of Control (IoC) Inversion of Control (IoC) ist ein Prinzip, das vereinfacht gesagt den Kontroll-Fluss umkehrt. Das Ziel dabei ist es, eine lose Kopplung zu erreichen, wodurch der Code einfacher testbar, wartbarer und erweiterbarer wird.\nIoC wird in Spring durch “Dependency Injection” erreicht, was im nächsten Kapitel vorgestellt wird. Dabei werden Abhängigkeiten wie Variablen von einer anderen Klasse durch Spring automatisch erstellt und “injektiert” (eingefügt), statt dass man sich selbst darum kümmern und Objekte selbst erstellen muss. Zuständigkeiten getrennt werden. Spring nutzt dieses Prinzip.\nDependency Injection (DI) DI bezeichnet die Weitergabe einer Abhängigkeit an ein Objekt. Spring verwendet einen Inversion-of-Control-Container, um zu bestimmen, wie und wo die Injektion erfolgt. Es gibt verschiedene Orte im Code, wo DI eingesetzt werden kann. Es gibt die Konstruktor-, Setter- und Feld-basierte Injection.\nKonstruktor Injection Bei einer Konstruktor-Injection fungiert jedes Argument als eine Abhängigkeit.\nEin Beispiel sieht so aus:\n1 2 3 4 5 6 7 8 9  @Component public class Store { private final Item item; public Store(Item item1) { this.item = item1; } }   In diesem Beispiel wird die Bean item1 injektiert.\nDie @Bean Annotation besagt, dass es sich hier um ein Bean handelt. Mehr dazu hier.\nFelder Injection Bei der Felder Injection werden die Abhängigkeiten direkt in die Felder Injected. Hier ein Beispiel:\n1 2 3 4  public class Store { @Autowired private Item item; }   Ein Nachteil der Field-Injection ist, dass es im Gegensatz zur Konstruktor-Injection nicht möglich ist, alle Instanzvariablen mit final zu deklarieren.\nSingleton Das Singleton Design Pattern stellt sicher, dass von einer Klasse nur eine Instanz existiert. Im Kontext von Spring können Singleton-Beans erstellt werden, aber es ist wichtig zu beachten, dass dies innerhalb des Spring-Containers gilt, nicht systemweit.\nBeans Beans sind Kernkomponenten in der Spring-Welt. Sie repräsentieren die grundlegenden Bausteine, die vom Spring IoC-Container verwaltet werden. Diese Container verwalten die Lebenszyklen der Beans, wodurch ihre Erstellung, Initialisierung, Verwendung und Entsorgung standardisiert werden.\nErstellung von Beans Beans können auf verschiedene Weisen erstellt werden:\n  XML-Konfiguration: Historisch gesehen wurden Beans oft in XML-Dateien definiert. Hier wird beschrieben, wie der Container diese Instanzen erstellt und verwaltet.\n1 2 3  \u003cbean id=\"exampleBean\" class=\"com.example.ExampleClass\"\u003e \u003cproperty name=\"someProperty\" value=\"Wert\"/\u003e \u003c/bean\u003e     Java-Konfiguration: Mit Annotationen und Java-Klassen kann die Konfiguration von Beans lesbarer und flexibler gestaltet werden.\n1 2 3 4 5 6 7  @Configuration public class AppConfig { @Bean public ExampleClass exampleBean() { return new ExampleClass(); } }     Bean-Scopes Beans haben verschiedene Scopes, die ihr Lebenszyklus bestimmen:\n Singleton: Es wird nur eine Instanz pro Container erzeugt. Dies ist der Standard-Scope in Spring. Prototype: Für jeden Aufruf zur Bean-Anforderung wird eine neue Instanz erstellt. Request, Session, Application: Spezifische Scopes für Webanwendungen, um den Lebenszyklus der Beans an HTTP-Anforderungen oder Sitzungen zu binden.  Verwendung von Beans Beans werden normalerweise über Injektionen verwendet, um Abhängigkeiten zwischen verschiedenen Komponenten einer Anwendung zu verwalten. Dies geschieht via Dependency Injection:\n1 2 3 4 5 6 7 8 9 10  @Component public class ExampleService { private final ExampleRepository repository; public ExampleService(ExampleRepository repository) { this.repository = repository; } // ... }   Hier wird ExampleRepository als Abhängigkeit von ExampleService injiziert. Die @Component-Annotation wird für dieses Beispiel verwendet, damit die Abhängigkeiten via Dependency Injection eingefügt werden.\nBeans sind flexibel, wiederverwendbar und ermöglichen die Modularität von Anwendungen.\nIn der folgenden offiziellen Dokumentation zu der @Bean-Annotation findest du weitere Beispiele, wie Beans verwendet werden:\n Using the Bean Annotation  Scope Der Scope eines Beans besagt, wann und wie ein Bean erstellt wird.\nHier eine Liste der Scopes:\n   Scope Beschreibung     singleton (Standard) Singleton besagt, dass es immer nur eine Instanz eines Beans gibt, welche dann geteilt wird. Es wird daher nur eine Bean-Instanz in jedem IoC-Container. Mehr hier.   prototype Erstellt bei jeder Abhängigkeit eine neue Bean-Instanzen.   request Erstellt für jeden HTTP Request eine Bean Instanz.   session Erstellt für jede HTTP Session eine Bean Instanz.   application Erstellt für jeden ServetContext eine Bean Instanz.   websocket Erstellt für jeden WebSocket eine Bean Instanz.    Die beiden wichtigsten Scopes sind singleton und prototype.\nDer Scope wird durch die @Scope Annotation festgelegt.\nHier ein Beispiel:\n1 2 3 4 5 6 7 8  @Configuration public class MyConfiguration { @Bean @Scope(\"prototype\") public Encryptor encryptor() { // ...  } }   Weitere Information hier: https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes\nREST REST (Representational State Transfer) ist ein Designkonzept für das Internet, das Regeln und Standards definiert, wie Webdienste miteinander kommunizieren. Es basiert auf dem Austausch von Daten über das HTTP-Protokoll und verwendet einheitliche Methoden wie GET, POST, PUT und DELETE, um auf Ressourcen zuzugreifen und mit ihnen zu interagieren. REST betont die Verwendung von klaren, eindeutigen URLs und fördert eine zustandslose Kommunikation, was bedeutet, dass jede Anfrage alle benötigten Informationen enthält, um verstanden zu werden, ohne auf vergangene Anfragen zurückgreifen zu müssen.\nHier eine kurze Übersicht der REST-Methoden:\n GET: Wird genutzt, um Daten von einem bestimmten Ort abzurufen. Beispielsweise das Abrufen von Informationen über Benutzerprofile einer Social-Media-Plattform. POST: Um neue Daten an den Server zu senden, beispielsweise beim Ausfüllen eines Formulars und Absenden der Informationen. PUT: Zum Aktualisieren von bestehenden Ressourcen, indem neue Daten an einen bestimmten Ort gesendet werden. DELETE: Wird genutzt, um eine spezifische Ressource auf dem Server zu entfernen, wie das Löschen eines Benutzerkontos von einer Plattform.   Hinweis: Eigentlich ist REST kein Designpattern, jedoch hat es Ähnlichkeiten dazu.\n Spring Struktur Die Meisten modernen Webapplikationen bestehen aus 3 Schichten:\n   Layer Beschreibung     Boundary (Grenze) Auf dieser Schicht wird die Kommunikation mit der Aussenwelt abgewickelt.   Control (Verwaltung) Auf dieser Schicht sind alle Klassen und deren Logik.   Entity (Speicher) Auf dieser Schicht wird alles abgewickelt, was mit Datenspeicherung und Auslesung zu tun hat (z.B. mit Repositories).    Spring hat verschiedene Annotationen für verschiedene Aufgaben. Mit der @Component Annotation wird eine generische Spring Komponente dargestellt. Alle anderen Annotationen sind ebenfalls Komponenten. Sie grenzen nur ab, was sie genau machen. Mit der @Configuration Annotation werden Komponenten für die Konfiguration definiert. Mit der @Repository Annotation werden Komponenten, welche mit der Datenspeicherung zu tun haben definiert. Mit der @Controller Annotation werden Komponenten, welche mit der Kommunikation mit der Aussenwelt zu tun haben definiert. In der @Service Annotation werden Komponenten, welche mit der Kontrolllogik zu tun haben definiert.\nDie Schichten (Layer) in Spring Boundary Layer In diesem Layer definieren wir unsere REST Ressourcen. Hier ein Beispiel einer Order-Klasse in einem Webshop:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  @RestController @RequestMapping(\"/orders\") public class OrderResource { private final OrderService orderService; public OrderResource(OrderService orderService) { this.orderService = orderService; } @GetMapping public List\u003cOrder\u003e findAll() { return orderService.findAll(); } @GetMapping(\"/{id}\") public Order findById(@PathVariable Long id) { return orderService.findById(id).orElseThrow(EntityNotFoundException::new); } @PostMapping public Order save(@RequestBody Order order) { return orderService.save(order); } @PutMapping(\"/{id}\") public Order update(@PathVariable Long id, @RequestBody Order order) { return orderService.update(id, order); } @DeleteMapping(\"/{id}\") public ResponseEntity delete(@PathVariable Long id) { orderService.delete(id); return ResponseEntity.ok().build(); } }   Dies ist eine Rest-Resource und sie wird definiert mit der Annotation @RestController. Die Annotation @RequestMapping(\"/orders\") legt fest, dass alle Aufrufe, wessen URL mit \"/orders\" beginnen, diesen Rest-Controller verwenden sollen.\nSchauen wir uns dies doch ein bisschen genauer an:\n1 2 3 4  @GetMapping(\"/{id}\") public Order findById(@PathVariable Long id){ return orderService.findById(id).orElseThrow(EntityNotFoundException::new); }   Mit der @GetMapping Annotation bestimmen wir, dass alle Anfragen auf dem orders/id Pfad von der annotierten Methode gehandelt werden, wenn die HTTP-Methode GET verwendet wurde. @PathVariable bestimmt, dass die ID als Path-Variable (also in der URL) angegeben wird. Das bedeutet, dass ein Aufruf auf /orders/12 das gleiche Ergebnis hat wie findByID(12).\n1 2 3 4  @PutMapping(\"/{id}\") public Order update(@PathVariable Long id,@RequestBody Order order){ return orderService.update(id,order); }   Die Annotation @RequestBody wird verwendet, um anzugeben, dass der Parameter order aus dem Request-Body des HTTP-Requests gelesen werden soll.\nControl Layer Der Control Layer bildet den Kern aller Anwendungen und enthält dessen Geschäfts-Logiken. Auf der technischen Ebene ist der Control Layer die grundlegendste Schicht. Die Control Layer könnte wie folgt aussehen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  @Service @Transactional public class OrderService { private final OrderRepository orderRepository; public OrderService(OrderRepository orderRepository) { this.orderRepository = orderRepository; } public List\u003cOrder\u003e findAll() { return (List\u003cOrder\u003e) orderRepository.findAll(); } public Optional\u003cOrder\u003e findById(Long id) { return orderRepository.findById(id); } public Order save(Order order) { return orderRepository.save(order); } public Order update(Long id, Order order) { Order toUpdate = orderRepository.findById(id).orElseThrow(EntityNotFoundException::new); toUpdate.setName(order.getName()); return toUpdate; } public void delete(Long id) { orderRepository.deleteById(id); } }   Diese Klasse besitzt nur zwei Annotationen nämlich @Service und @Transactional. Die @Service Annotation markiert Beans als Holder der Businesslogik. @Transactional sagt einfach, dass alle Funktionen in der Klasse in einer einzigen Transaktion ausgeführt werden sollen. Das musst du vorläufig aber noch nicht verstehen. Durch die Constructor Injection wird hier auch noch die Bean OrderRepository injected.\nEntity Layer Der Entity Layer ist für die Datenspeicherung zuständig. Auf diesem Layer gibt es die zwei Hauptbestandteile Entity und Repository. Entities sind Klassen, die eine Datenbank-Tabelle repräsentieren. Die Repositories hingegen verwalten diese Entities.\nAuch hier wird mit Annotation gearbeitet, um die Funktionalität umzusetzen. Die @Entity Annotation sagt, dass es sich bei dieser Klasse um ein Entity handelt.\nDie @Table Annotation sagt, auf welcher Tabelle in der Datenbank diese Klasse gespeichert wird (Schreibweise @Table(name = \"tabellenNamen\")).\nDie @GeneratedValue Annotation besagt, dass dieser Wert in der Tabelle/Datenbank automatisch generiert wird.\nDie @Id Annotation sagt, dass dieses Feld als Primärschlüssel in der Tabelle fungiert.\nHier ist ein Beispiel:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  @Entity @Table(name = \"orders\") public class Order { @Id @GeneratedValue Long id; String name; public Long getId() { return id; } public void setId(Long id) { this.id = id; } public void setName(String name) { this.name = name; } public String getName() { return this.name; } }   Damit wir auf die Daten zugreifen können, brauchen wir ein Repository. Dazu können wir ein Interface implementieren, welches CrudRepository extended. Das CrudRepository hat schon viele Methoden implementiert, deshalb müssen wir keine eigenen implementieren.\nHier ein Beispiel:\n1 2 3  @Repository public interface OrderRepository extends CrudRepository\u003cOrder, Long\u003e { }   Du fragst dich vielleicht, wo die Daten gespeichert werden. Normalerweise macht Spring eine temporäre Datenbank, welche jedoch nach Abschluss des Programmes wieder gelöscht wird. Wenn man die Daten nicht jedes Mal neu schreiben will, kann man sie in einer “richtigen” Datenbank speichern. Dazu müssen wir die Spring Konfiguration ändern.\nSpring lädt die Konfiguration von einer Datei mit dem Namen application.properies bzw. application.yaml. Diese Datei befindet sich im resources-Ordner (oft im Ordner “src/main” oder “src/test”).\nFolgende 5 Konfigurationen werden oft im Zusammenhang mit Datenbanken benötigt:\n   Konfiguration Beschreibung     spring.datasource.url gibt die URL der Datenbank an (Format:jdbc:[datenbanktyp]://[server]:[port]/[datenbank])   spring.datasource.username gibt den Benutzername an, mit dem die Verbindung zur Datenbank aufgebaut werden soll.   spring.datasource.password gibt das Passwort der Datenbank an.   spring.datasource.driver-class-name gibt an, welcher Datenbanktreiber verwendet wird (muss als Maven-Dependency hinzugefügt werden)   spring.jpa.hibernate.ddl-auto beschreibt, wie Spring mit der Datenbank umgehen soll. update z.B. sorgt dafür, dass fehlende Spalten oder dergleichen automatisch erstellt werden und dass nie Sachen gelöscht werden. create-drop erstellt die Datenbank und löscht die Objekte nachher. none belässt die Datenbank.    Hier ist eine beispiel Konfiguration mit einer Mariadb Datenbank:\n1 2 3 4 5  spring.datasource.url=jdbc:mariadb://localhost:3306/order spring.datasource.username=spring spring.datasource.password=1234 spring.datasource.driver-class-name=org.mariadb.jdbc.Driver spring.jpa.hibernate.ddl-auto=update   Repository Eines der am häufigsten verwendeten Design-Patterns (siehe oben) ist das Repository Design-Pattern. Es ist ein Interface, welches dafür zuständig ist, uns Zugang zu den Daten in der Datenbank zu bereiten. Man kann es sich ein wenig, wie einen Bibliothekar vorstellen. Er gibt uns die Bücher zurück, die wir wollen, ohne dass wir wissen, wie er sie uns beschafft. Wir kennen nur die API, also die Befehle und welche Resultate wir erwarten können.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  public interface ArticleRepository { List\u003cArticle\u003e readAll(); List\u003cArticle\u003e readLatest(); List\u003cArticle\u003e readByTags(Tag... tags); Article readById(long id); Article create(Article article); Article update(Article article); Article delete(Article article); }   Meistens wird das Interface im Hintergrund vom Framework implementiert und wir müssen nichts dafür tun, ausser den richtigen Methodennamen und Rückgabewert zu wählen, damit Spring weiss, was es implementieren soll.\nProfile In Spring kann man verschiedene Profile erstellen. Damit kann man sicherstellen, dass bestimmte @Beans nur entsprechend gesetzt werden, wenn eine bestimmte Bedingung zutrifft. Die Datenbank soll zum Beispiel nur Beispieldaten laden, wenn das Dev-Profil aktiv ist, ansonsten soll eine richtige Datenbank verwendet werden.\nMit der @Profile Annotation kann man einer Klasse oder Methode (Beans) sagen, ob sie bei einem Profil läuft. Das standard Profil ist default, wenn irgendein Profil aktiv ist, wird das default Profil deaktiviert. Hier ist ein Beispiel:\n1 2 3 4 5 6 7 8  @Component @Profile(\"test\") public class TestString { @Bean public String test() { return \"test\"; } }   Im Beispiel lädt die Komponente TestString nur, wenn das Profil test aktiv ist.\nBei der @Profile-Annotation kann man auch logische Operatoren wie “Und” (\u0026) , “Oder” (|) und “Nicht” (!) benutzen. Hier ein Beispiel:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  @Component public class Demo { @Bean @Profile(\"default\") public String defaultString() { return \"Standard Profil\"; } @Bean @Profile(\"test | test2\") public String testString() { return \"Test Test\"; } @Bean @Profile(\"!(default | test | test2)\") public String rewoltString() { return \"None of the above\"; } }   In diesem Beispiel werden die Methoden angesteuert. Wenn das Profil default aktiv ist, wird die defaultString Methode geladen, wenn das Profil test oder test2 aktiv ist, wird die testString Methode geladen, wenn keines der obengenannten Profile aktiv ist, wird die rewoltString-Methode geladen.\nIn Spring kann man Mehrere Profile aktivieren. Die Profile können mit dem Program gesetzt werden.\nBeispiel hier:\n1 2 3 4  AnnotationConfigApplicationContext ctx=new AnnotationConfigApplicationContext(); ctx.getEnvironment().setActiveProfiles(\"test\"); ctx.register(SomeConfig.class,StandaloneDataConfig.class,JndiDataConfig.class); ctx.refresh();   Die Profile können auch über die spring.profiles.active Property aktiviert werden. Beispiel hier:\n1  spring.profiles.active=\"test\"   Bei beiden Möglichkeiten wurde das Profil test aktiviert. Weitere Informationen in der offiziellen Dokumentation.\n","categories":"","description":"Modul #J10 - Spring Framework\n","excerpt":"Modul #J10 - Spring Framework\n","ref":"/docs/java/spring/","tags":"","title":"Spring"},{"body":"Ziele  Du weisst die man Web-Request machen kann und die Antworten weiterverwendet.  Webanfrage mit JavaScript Wenn du eine Webanwendung schreibst, dann muss deine Website (=Frontend) wahrscheinlich Daten von (d)einem Backend abfragen.\nIn den meisten Fällen werden hierfür HTTP-Requests verwendet, die du bereits kennengelernt hast (REST API bei Spring und HTML Forms).\nUm das einmal auszuprobieren, wollen wir eine API anfragen, die als Antwort zufällige “Fakten” über Chuck Norris zurückschickt. Wenn wir diese URL im Browser aufrufen (= HTTP GET), erhalten wir einen Witz in Form von JSON:\nGET https://api.chucknorris.io/jokes/random\n1 2 3 4 5 6 7 8 9  { \"categories\": [], \"created_at\": \"2020-01-05 13:42:20.262289\", \"icon_url\": \"https://assets.chucknorris.host/img/avatar/chuck-norris.png\", \"id\": \"6F3bv9fIRUGCPTcma6Je1w\", \"updated_at\": \"2020-01-05 13:42:20.262289\", \"url\": \"https://api.chucknorris.io/jokes/6F3bv9fIRUGCPTcma6Je1w\", \"value\": \"Albert Einstein's hair used to be neatly combed...until the day he met Chuck Norris.\" }   Folglich interessiert uns der Wert für \"value\".\nDamit für dich das Vorgehen verständlicher ist, führen wir Schritt für Schritt in der Browser-Konsole aus.\nDie Abfrage kannst du wie folgt durchführen:\n1  fetch('https://api.chucknorris.io/jokes/random', {method: 'get'})   Du wirst sehen, dass dieser Funktionsaufruf ein Promise {\u003cpending\u003e} zurückgibt (Promises sind im Kapitel JS_Async zu finden). Wir sehen, dass die Anfrage noch nicht vorbei ist (pending = anstehend). Dieses Promise-Objekt wird die Antwort enthalten, sobald die Antwort verfügbar ist. Da wir sowieso erst weiterfahren möchten, wenn die Antwort bereit ist, interessieren wir uns nicht für das Promise. Daher können wir einfach mit der Fortsetzung des Scriptes solange warten, bis wir die Antwort hätten. Das können wir wie folgt machen:\n1  await fetch('https://api.chucknorris.io/jokes/random', {method: 'get'})   Das await führt dazu, dass das Script erst weitergeht, wenn die Antwort da ist. Zusätzlich wird die Antwort automatisch aus dem Promise-Objekt entpackt und wir erhalten so direkt ein Objekt vom Typ Response. In diesem sind mehrere wichtige Informationen wie zum Beispiel, ob es überhaupt erfolgreich war ok: true, wie der http statuscode ist etc. Zu beachten ist, dass body im unteren Beispiel als ReadableStream dargestellt ist, da es sich um einen Stream handelt und der tatsächliche Inhalt des Antwort-Body nicht direkt im JSON-Format angezeigt wird. Um den Inhalt des Antwort-Body zu lesen, muss die entsprechenden Methoden wie json(), text() oder blob() verwendet werden, je nachdem welches Format der Inhalt hat.\n1 2 3 4 5 6 7 8 9 10 11  { \"body\": \"ReadableStream\", \"bodyUsed\": true, \"headers\": {}, \"ok\": true, \"redirected\": false, \"status\": 200, \"statusText\": \"\", \"type\": \"cors\", \"url\": \"https://api.chucknorris.io/jokes/random\" }   Theoretisch haben wir nun die Daten, die wir wollen. Da wir als Antwort ein JSON-Objekt als Antwort erwarten, können wir direkt die Antwort als JavaScript-Objekt anfordern:\n1 2 3  let response = await fetch('https://api.chucknorris.io/jokes/random', {method: 'get'}); response.json();   Komischerweise erhalten wir wieder ein Promise {\u003cpending\u003e}. Was müssen wir machen, um das JSON aus diesem Promise zu kriegen?\nGenau: Wir müssen es awaiten:\n1 2 3  let response = await fetch('https://api.chucknorris.io/jokes/random', {method: 'get'}); let jokeObject = await response.json()   Dies ist notwendig, da die Methode json() asynchron den response Stream ausliest.\nWenn du nun das jokeObject loggst (z.B. mit console.log(jokeObject)), siehst du, dass wir nun das gleiche Objekt, das wir ganz oben erwartet haben, erhalten haben.\nDen Witz kannst du wie folgt ausgeben:\n1  console.log(jokeObject.value);   Anfrage in eine Funktion einbinden Im Normalfall packt man solche Logik in eine Funktion. Den oberen Code könntest du wie folgt in eine Methode einbinden:\n1 2 3 4 5 6 7 8 9 10  /** * Requests a random Chuck Norris joke and returns it. * @return {Promise\u003cstring\u003e} a random Chuck Norris joke. */ async function fetchJoke() { const response = await fetch('https://api.chucknorris.io/jokes/random', { method: 'get' }) const jokeObject = await response.json(); return jokeObject.value; }   Dir ist sicher aufgefallen, dass wir nun das async-Keyword vor function geschrieben haben. Dies ist erforderlich, wenn man await in einer Funktion verwenden möchte. Dieses async-Keyword führt auch dazu, dass die Methode ein Objekt des Typen Promise\u003c...\u003e zurückgibt.\nWenn du diese Funktion definiert hast, kannst du den Rückgabewert von ihr wie folgt loggen:\n1  console.log(await fetchJoke());   await umgehen Du wirst in die Situation kommen, wo du eine Antwort auf eine asynchrone Anfrage erhälst, aber kein await brauchen darfst, weil du dich nicht in einer mit async gekennzeichneten Funktion befindest.\nStatt ein Promise zu awaiten, kannst du auch definieren, dass eine bestimmte Aktion durchgeführt werden soll, sobald die Antwort da ist. Dies kannst du mit Promise.then(...) machen:\n1 2 3  fetchJoke().then(function(joke) { console.log(joke); });   Das kannst du auch schöner schreiben, funktioniert so aber nicht mehr im Internet Explorer:\n1  fetchJoke().then(joke =\u003e console.log(joke));   Was genau haben wir hier gemacht?\nWir haben fetchJoke() asynchron aufgerufen, ohne auf die Antwort zu warten. Deswegen erhalten wir ein Promise-Objekt. Promise-Objekte enthalten eine then-Methode. Bei dieser Methode kannst du eine Funktion übergeben. Die übergebene Funktion wird aufgerufen, sobald die Antwort erhalten wurde.\nException-Handling bei HTTP-Anfragen Während einer HTTP-Anfrage passieren oft folgendes typische Fehler:\n Der angefragte Server kann nicht erreicht werden bzw. der Browser erhält keine Antwort (Response). Die Anfrage wurde durch den Browser blockiert (z.B. durch die CORS Policy). Der Server gibt eine Antwort mit einem Status-Code zurück, der einen Fehler beschreibt.  In den ersten beiden Fällen würde die fetch()-Funktion eine Error asynchron werfen. Diesen Fall könntest du mit einem try und catch abfangen.\nHingegen wird kein Fehler geworfen, wenn eine Antwort erhalten wird. Aber trotzdem könnte die Response auf einen Fehler hindeuten, z.B. wenn der Status-Code 404 wäre. In diesem Fall hätten wir eine Antwort vom Server erhalten, die darauf hindeutet, dass die Seite hinter der URL nicht gefunden werden konnte.\nDaher macht es Sinn, die response auf den Status Code zu überprüfen. Hierfür bietet das response-Objekt ein praktisches Property an: ok. Wenn ok true ist, dann war der Status-Code zwischen 200 und 299 (erfolgreiche Status-Codes).\nBeide Fälle kombiniert resultieren in einem Error-Handling, das ungefähr so aussehen könnte:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  async function fetchJoke() { try { const response = await fetch('https://api.chucknorris.io/jokes/random', { method: 'get' }); if (!response.ok) { throw new Error(`Fehlerhafte Antwort. Status: ${response.status}`); } return await response.json(); } catch (error) { console.error(error); // Hier müsste noch der Fehler behandelt werden und evtl. eine Nachricht dem User angezeigt werden.  return null; // etwas zurückgebe, das auf einen Fehler hindeutet.  } }   Möchte man eine genauere Prüfung des Status-Codes vornehmen, dann könnte man statt response.ok das Property response.status überprüfen.\nHier noch ein Beispiel, wie es mit .then() und .catch() aussehen könnte:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  function fetchJoke() { return fetch(\"https://api.chucknorris.io/jokes/random\", { method: \"get\" }) .then((response) =\u003e { if (!response.ok) throw Error(\"API not reachable\"); return response.json(); }) .then((data) =\u003e { return data.value; }) .catch((error) =\u003e { console.error(\"Error in fetchJoke:\", error); return null; // etwas zurückgebe, das auf einen Fehler hindeutet.  }); }   Ganz generell: Bei der Verwendung von fetch() kann man darüber philosophieren, ob man fetch() überhaupt in einen try-catch-Block schmeissen soll. In den meisten Fällen reicht es vollkommen aus, die response auf den Status-Code zu überprüfen. In Frameworks wie Angular wird oft auf einen try-catch-Block verzichtet, da das Framework einen “globalen Exception-Handler” besitzt, der den User dann über den Fehler informieren würde.\nHierzu findest du zwei Aufgaben im Lab.\nFrüher war alles besser? Die fetch-Funktion hat Webrequest stark vereinfacht. Früher durftest du dich mit XML HTTP Requests herumschlagen. Aber siehe selbst: https://www.w3schools.com/xml/xml_http.asp\n","categories":"","description":"Modul #F4 - JavaScript - Web Requests in JavaScript.\n","excerpt":"Modul #F4 - JavaScript - Web Requests in JavaScript.\n","ref":"/docs/web/javascript/15_js_web_request/","tags":"","title":"Web Request"},{"body":"Block- und Inline-Elemente Bevor wir Elemente dimensionieren, müssen wir wissen, welche Elemente wir überhaupt dimensionieren können.\nIn CSS gibt es zwei grundlegende “Display”-Elemente:\n Block-Elemente Inline-Elemente  Im Normalfall können wir nur Block-Elemente dimensionieren (eine Grösse geben). Was ist aber nun der Unterschied zwischen den beiden?\nBlock-Elemente Block-Elemente starten im Normalfall immer auf einer neuen Zeile und haben per Default um sich selbst herum einen Abstand zu anderen Elementen.\nBlock-Elemente beanspruchen per Default die volle Breite an Platz (von links bis rechts).\nTypische Block-Elemente sind\n \u003cp\u003e \u003cdiv\u003e \u003caddress\u003e \u003carticle\u003e \u003caside\u003e \u003cblockquote\u003e \u003ccanvas\u003e \u003cdiv\u003e \u003cfooter\u003e \u003cform\u003e \u003ch1\u003e-\u003ch6\u003e \u003cheader\u003e \u003chr\u003e \u003cmain\u003e \u003cnav\u003e \u003cnoscript\u003e \u003col\u003e, \u003cul\u003e, \u003cdd\u003e, \u003cdl\u003e, \u003cdt\u003e, \u003cli\u003e \u003cpre\u003e \u003csection\u003e \u003ctable\u003e  Um das zu verstehen, probiere bitte diesen Code aus:\n1 2 3 4 5 6 7 8 9 10  \u003cp\u003eNur ein Paragraph\u003c/p\u003e \u003cp\u003eEin Paragraph mit einem \u003cspan\u003eSpan\u003c/span\u003e.\u003c/p\u003e \u003cstyle\u003e p { background-color: red; } span { background-color: yellow; } \u003c/style\u003e   Dieser Code zeigt gut, dass das Block-Element (hier \u003cp\u003e) die ganze Breite (abzüglich eines kleinen Randes) eingenommen hat, während das \u003cspan\u003e sich auf das Wort beschränkt.\nInline-Elemente Im obigen Beispiel hast du bereits ein Inline-Element kennengelernt: \u003cspan\u003e.\nInline-Elemente kommen meistens in einem Text vor. Inline-Elemente benötigen nur so viel Platz wie nötig. Als grossen Unterschied zu Block-Elementen, beginnen Inline-Elemente nicht auf einer neuen Zeile.\nTypische Inline-Elemente sind:\n \u003ca\u003e \u003cb\u003e \u003cbr\u003e \u003cbutton\u003e \u003ccode\u003e \u003cdfn\u003e \u003cem\u003e \u003ci\u003e \u003cimg\u003e \u003cinput\u003e \u003clabel\u003e \u003cscript\u003e \u003cselect\u003e \u003csmall\u003e \u003cspan\u003e \u003cstrong\u003e \u003ctextarea\u003e \u003ctime\u003e  Und wichtig zu wissen ist, dass sich keine Block-Elemente in einem Inline-Element befinden dürfen.\nBlock-Elemente dimensionieren Bei Block-Elementen kannst du die Grösse verändern:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u003cdiv class=\"box\"\u003e \u003cp\u003eInside the first Box\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"box\"\u003e \u003cp\u003eInside the second Box\u003c/p\u003e \u003c/div\u003e \u003cstyle\u003e div.box { /*display: block;*/ width: 10em; height: 10em; background-color: cornflowerblue; } \u003c/style\u003e   Wenn du diesen Code ausprobierst, siehst du zwei hellblaue Quadrate untereinander. Mit dem width-Property definiert man die Breite und mit dem height die Höhe. Hiermit haben wir dem \u003cdiv class=\"box\"\u003e eine Höhe und Breite von 10em gegeben.\nEinheiten (Units) Im vorherigen Beispiel haben wir dem Quadrat eine Seitenlänge von 10em gegeben. Was sind aber em?\n1em entspricht der Schriftgrösse des aktuellen Elements. Gibt man einem Text zum Beispiel font-size: 2em, so definiert man, dass die Schriftgrösse doppelt so gross sein soll wie beim übergeordneten Element. Somit ist die Grösseneinheit em proportional zur aktuellen Schriftgrösse.\nStatt em kann man auch rem verwenden: rem ist im Prinzip das Gleiche wie em, nur dass es relativ zur Schriftgrösse des root-Elements ist (statt dem aktuellen Element). Somit ist rem auf der ganzen Seite immer gleich gross, em nicht.\nFür Seiten im Browser verwendet man besser relative Einheiten wie em oder rem. Aber dennoch kommt man oft nicht an der absoluten Einheit px vorbei:\nOft möchte man z.B. den dünnsten möglichen Rand um ein Element von einem Pixel haben. In diesem Fall würde man die Breite des Randes (Borders) gleich 1px setzen. Die Regel könnte so aussehen:\n1 2 3 4  div.box { ... border: 1px solid black; }   Dieses Beispiel fügt einen schwarzen Rand von 1px Breite hinzu. Das solid bedeutet, dass es eine normale Linie sein soll (also nicht gestrichtelt o.ä.).\nEinheiten in der Übersicht Grundsätzlich empfehle ich dir diese Übersicht: https://www.w3schools.com/cssref/css_units.asp\nUnter den absoluten Einheiten musst du nur folgende kennen:\n px  Die absoluten Einheiten sollten immer gleich gross sein. Sie sind aber nicht speziell für im Browser geeignet, weil sich die Bildschirmgrössen der Enduser stark unterscheiden.\nVon den relativen Einheiten solltest du mehrere kennen:\n   Einheit Beschreibung     em, rem Längeneinheit relativ zur Schriftgrösse des aktuellen bzw. des root-Elements   vw 1vw = 1% von der Weite des ViewPorts (angezeigter Teil der Browser-Seite)   vh 1vh = 1% von der Höhe des ViewPorts (angezeigter Teil der Browser-Seite)   % Relativ zum Parent. width: 50% bedeutet z.B., dass das Element halb so breit wie das übergeordnete Element sein soll. % funktioniert gut im Zusammenhang mit Breiten, aber nicht immer so gut im Zusammenhang mit Höhen.    Wenn du noch mehr über Einheiten erfahren möchtest, dann schaue dir bitte diese Seite an: https://web.dev/learn/css/sizing/\nBlock-Elemente weiter dimensionieren (Box Model) Wir haben bereits CSS-Properties wie width, height, border verwendet. Nun wird es Zeit zu verstehen, wie diese Werte die Dimensionen von Block-Elementen beeinflussen. Probiere dieses Beispiel aus:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  \u003cdiv class=\"box\"\u003e \u003cp\u003eInside the first Box\u003c/p\u003e \u003c/div\u003e \u003cdiv class=\"box\"\u003e \u003cp\u003eInside the second Box\u003c/p\u003e \u003cp class=\"half-width\"\u003eHalbe Breite\u003c/p\u003e \u003c/div\u003e \u003cstyle\u003e div.box { /*display: block;*/ width: 10em; height: 10em; background-color: cornflowerblue; } .half-width { width: 50%; background-color: white; border: 2em solid gray; } \u003c/style\u003e   Du wirst sehen, dass das weisse Feld mit “Halbe Breite” die halbe Breite der übergeordneten Box beansprucht. Zusammen mit dem Rand macht das aber mehr als die Hälfte aus! Somit schauen wir uns das Box-Modell in CSS an:\nDie “Content Box” ist so zu sagen der Inhalt des Block-Elements. Die “Border Box” ist der Rahmen des Elements. Als wir die width gesetzt hatten, haben wir die Breite des Content Box gesetzt. Oft wollen wir aber, dass die Box inkl. Rand 50% der Breite einnimmt. Hierfür gibt es mehrere Möglichkeiten:\nTheoretisch könnten wir die Weite mit einer Berechnung herbeibasteln, indem wir einfach den Rand von der Breite wegsubtrahieren:\n1 2 3 4  .half-width { width: calc(50% - 2 * 2em); ... }   Dies sieht in den meisten Fällen unnötig kompliziert aus. Und dafür gibt es eine Abkürzung:\n1 2 3 4 5  .half-width { box-sizing: border-box; width: 50%; ... }   Auf diese Weise nimmt die Box nur noch 50% der Breite insgesamt ein (inkl. Border). Der Default für box-sizing ist content-box.\nZur Vertiefung des Box Models kannst du gerne diese Seite studieren: https://web.dev/learn/css/box-model/.\nAbstände Abstände zu anderen Elementen (Margin) Ziemlich oft möchtest du, dass Elemente untereinander einen Abstand haben. Genau dafür gibt es margin. Spiele mit diesem Wert ein bisschen herum:\n1 2 3 4  div.box { ... margin: 2em; }   Du kannst die Abstände auch in jede Richtung einstellen:\n1  margin: 1em 2em 3em 4px;   was äquivalent zu dem ist:\n1 2 3 4  margin-top: 1em; margin-right: 2em; margin-bottom: 3em; margin-left: 4px;   Beachte bei der kurzen Schreibweise, dass es oben beginnt und im Uhrzeigersinn weitergeht, bzw. merke dir “TRouBLe” (Top Right Bottom Left).\nAbstand vom Border zum Content (Padding) Oft sieht es hässlich aus, wenn der Text direkt am Rand (am Border) ankommt. Das kann behoben werden, indem ein innerer Rand (Padding) eingefügt wird:\n1 2 3 4 5 6 7 8  .half-width { padding: 0.5em; ... box-sizing: border-box; width: 73%; background-color: white; border: 7px solid gray; }   Beachte, dass bei einer Angabe wie width: 40% mit box-sizing: content-box die Weite sich nur auf den Content bezieht. Das Padding kommt in diesem Beispiel zu den 40% noch hinzu!\n","categories":"","description":"Modul #F3 - HTML und CSS - Dimensionierung von (Inline-)Block-Elementen mit CSS.\nAuf dieser Seite erfährst du, wie du die Grössen von Elementen definierst.\n","excerpt":"Modul #F3 - HTML und CSS - Dimensionierung von …","ref":"/docs/web/html_css/15_css_sizing/","tags":"","title":"Sizing"},{"body":"Zeile  Du weisst, was Lazy-Loading ist und kannst es erklären. Du kannst, Lazy Loading anwenden.  Was ist Lazy Loading Lazy Loading bezeichnet ganz allgemein eine Technik in der Software-Entwicklung, um Daten erst ab diesem Zeitpunkt zu laden, wenn sie benötigt werden. Im Zusammenhang mit Websites geht es darum, beispielsweise Bilder erst dann vom Server zu laden, wenn diese im sichtbaren Bereich sind. Dadurch wird die Ladezeit der Seite zu Beginn reduziert. So wird dem User z.B. schon eine Seite angezeigt, obwohl andere Dinge noch geladen werden. Lazy Loading in Angular Standardmässig lädt der Browser alle Angular-Module, bevor der Benutzer mit ihnen arbeiten kann. Natürlich gibt es auch einige, die nicht oder zumindest nicht sofort benötigt werden.\nGenau hier setzt das Lazy Loading an, um die Startgeschwindigkeit zu optimieren: Es stellt sicher, dass nur die wichtigsten Anwendungsbestandteile im Browser landen, der Rest wird später bei Bedarf angefordert.\nDazu muss man als erstes alle Module identifizieren welche man mittels lazy loading laden möchte. Danach erstellt man für jedes Modul eine neue separate Moduldatei (.module.ts). Jetzt kann man neuen Components, Services etc. welche zu diesem Modul gehören erstellen oder bestehende verschieben. Damit jedoch immer noch genau glich auf die Components zugegriffen werden können, muss man das routing anpassen. Die Routen müssen mit der Eigenschaft loadChildren verwendet werden, darin sagt man dann welches Modul geladen werden soll, wenn man auf diese Route zugreift.\n1 2 3 4 5  const routes: Routes = [ { path: '', component: GreetingComponent }, { path: 'triumph/:id', component: TriumphsComponent}, { path: 'weapon', canActivate: [WeaponGuard], loadChildren: () =\u003e import('./components/weapon/weapon.module').then(m =\u003e m.WeaponModule) }, ];   Das neue Modul muss jedoch im .module.ts-File, in welchem sich das Routing mit dem loadChildren befindet in den imports angegeben werden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  import { NgModule } from '@angular/core'; import { BrowserModule } from '@angular/platform-browser'; import { AppRoutingModule } from './app-routing.module'; import { WeaponModule } from './components/weapon/weapon.module'; @NgModule({ declarations: [ // ..  ], imports: [ BrowserModule, AppRoutingModule, WeaponModule, // ..  ], // .. }) export class AppModule { }   Für das neuen Modul muss man nun auch dessen Routen verfassen. Dazu ein neues -routing.module.ts-File erstellen und eine Standart-Route definieren, dessen Component wird aufgerufen, wenn das Modul geladen wird, also genauer gesagt, wenn in einem anderen Routing die Route mit dem loadChildren aufruft wird. Wichtig hier ist man bei den imports im NgModule nicht mehr forRoot für die Routen benötigt sondern forChild.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  import { NgModule } from '@angular/core'; import { RouterModule, Routes } from '@angular/router'; import { WeaponComponent } from './weapon.component'; const routes: Routes = [ { path: '', component: WeaponComponent }, // Standart-Route wenn man vom AppModule auf das WeaponModul wechselt  // .. ]; @NgModule({ imports: [RouterModule.forChild(routes)], exports: [RouterModule], }) export class WeaponRoutingModule {}   Im .module.ts-File der neuen Moduls kann man alle Components, etc. des Moduls deklarieren und die imports angeben genau wie beim AppModul. Wichtig ist jedoch das man für das Routing hier dann das neu erstellt des Moduls verwendet und nicht mehr das AppRoutingModule.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import { NgModule } from '@angular/core'; import { CommonModule } from '@angular/common'; import { WeaponComponent } from './weapon.component'; import { WeaponRoutingModule } from './weapon-routing.module'; @NgModule({ declarations: [ WeaponComponent ], imports: [ CommonModule, WeaponRoutingModule ] }) export class WeaponModule { }   Lazy Loading mit Angular Material Einige Components von Angular Material unterstützen Lazy Loading.\nEin Beispiel hierzu ist das Expansion-Panel.\nDie Inhalte des Expansion Panels werden geladen, auch wenn das Expansion-Panel geschlossen ist. Wenn man auf einer Ansicht beispielsweise 30 dieser Expansion-Panels anzeigt und den jeweiligen Inhalt lädt, kann dies zu Performance-Problemen führen.\nJedoch unterstützt dieser Component Lazy Loading, wodurch man die Performance-Probleme sehr einfach umgehen kann. Inhalte werden erst geladen, wenn sich das Expansion-Panel öffnet.\nIn den meisten Fällen ist das Anwenden von Lazy Loading in Angular Material Components auch kein grosser Aufwand.\nSchaut also auf der Angular Material Website in “Overview” des Components immer gut nach, ob der Component Lazy Loading unterstützt.\nDeferrable Views Mit dem Update von Angular 17 wurde eine neue Art des Lazy Loadings hinzugefügt, nämlich die Deferrable Views. Mit der neuen Syntax @defer können Components oder andere Inhalte innerhalb eines spezifischen Component dynamisch geladen werden. Beispielsweise kann ein Component erst geladen werden, sobald er bereitsteht (Alle Dependencies würde aufgelöst). Das würde dann so aussehen:\n1 2 3  @defer { \u003cshopping-cart /\u003e }   Zum @defer-Block gibt es noch einige zusätzliche erweiternden Blöcke, die das Laden und Anzeigen verschönern. Hier eine kurze Übersicht:\n@placeholder Standardmässig lädt der @defer-Block keinen Inhalt, was meist unschön ist. Dazu gibt es den @placeholder-Block. Dieser kann als normales Div verwendet werden und beliebigen Inhalt haben. Logischerweise sollte hier kein Inhalt platziert werden, der auch mit Lazy Loading geladen werden muss/soll.\n1 2 3 4 5  @defer { \u003cshopping-cart /\u003e } @placeholder { I'm a placeholder :D }   Der Placeholder bleibt so lange stehen, bis der Inhalt des @defer geladen hat. Wenn es gewünscht ist kann eine Mindestzeit bestimmt werden, in der der Placeholder angezeigt werden muss:\n1 2 3 4 5  @defer { \u003cshopping-cart /\u003e } @placeholder (minimum 500ms){ I'm a placeholder :D I will stay here atleast 500ms ;) }   @loading Der @loading-Block ähnelt sehr dem @placeholder-Block, jedoch ist im @loading noch eine zusätzliche Option verfügbar. Mit after kann definiert werden, wann der @loading-Block zusehen sein soll. Dieser überschreibt somit ab diesem Zeitpunkt auch den @placeholder-Block.\n1 2 3 4 5 6 7  @defer { \u003cshopping-cart /\u003e } @placeholder { I'm a placeholder :D I will be overwritten in 100ms :'( } @loading (after 100ms; minimum 1s) { \u003cimg alt=\"loading...\" src=\"loading.gif\" /\u003e }   Der @loading-Block ist vor allem in Kombination mit den triggers sinnvoll.\n@error Auch der @error-Block macht das, was man sich unter dem Namen vorstellt, wenn das Laden des Inhalts fehlschlägt wird der Inhalt des @error-Blocks angezeigt.\n1 2 3 4 5  @defer { \u003cshopping-cart /\u003e } @error { \u003cp\u003eFailed to load shopping cart :( \u003c/p\u003e }   \nAlle erwähnten Blöcke können natürlich auch aneinander gereiht werden und so eine klare Struktur abbilden: 1 2 3 4 5 6 7 8 9  @defer { \u003ccomment-list/\u003e } @loading { Loading… } @error { Loading failed :( } @placeholder { \u003cimg src=\"shopping-placeholder.png\"\u003e }   Defer mit Trigger In einigen Fällen ist es hilfreich, wenn selbst bestimmt werden kann, wann das Lazy Loading beginnt. Dazu wurden den Deferrable Views zusätzlich Triggers hinzugefügt, die den Zeitpunkt des Ladens einschränken.\nViewport Einer dieser Trigger ist der Viewport. Dieser Trigger wird ausgelöst, wenn ein @placeholder im Viewport sichtbar ist. Der Code dazu würde dann ungefähr so aussehen:\n1 2 3 4 5 6  @defer (on viewport) { \u003cshopping-cart /\u003e } @placeholder { \u003c!-- A placeholder content to show until the shopping-cart loads --\u003e \u003cimg src=\"shopping-placeholder.png\"\u003e }   Idle Der Trigger idle teilt Angular mit, dass der Inhalt erst geladen werden soll, wenn der Browser keine wichtigen Aufgaben mehr zu erledigen hat.\n1 2 3 4 5 6  @defer (on idle) { \u003cunimportant-info /\u003e } @placeholder { \u003c!-- A placeholder content to show until the unimportant-info loads --\u003e \u003cimg src=\"unimportant-info-placeholder.png\"\u003e }   Interaction Der Name interaction verrät bereits, dass der Inhalt hier erst geladen wird, wenn eine Aktion (Klick oder Keydown) auf einem bestimmten Element durchgeführt wird. Standardmässig ist dieses Element der Placeholder.\n1 2 3 4 5 6  @defer (on interaction) { \u003cshopping-cart /\u003e } @placeholder { \u003c!-- A placeholder content to show until the shopping-cart loads --\u003e \u003cimg src=\"shopping-placeholder.png\"\u003e }   Ein anderes Element kannst du so bestimmen:\n1 2 3 4 5 6  \u003cbutton type=\"button\" #greeting\u003eHello!\u003c/button\u003e @defer (on interaction(greeting)) { \u003cshopping-cart /\u003e } @placeholder { \u003cdiv\u003eShopping Cart placeholder\u003c/div\u003e }   Hier wird also das shopping-cart erst geladen, wenn der Button geklickt wird.\nHover Gleich wie beim Trigger interaction wird hier der Inhalt geladen, wenn über ein Element gehovert wird. Auch hier ist Standardmässig der Placeholder dieses Element.\n1 2 3 4 5 6  @defer (on hover) { \u003cshopping-cart /\u003e } @placeholder { \u003c!-- A placeholder content to show until the shopping-cart loads --\u003e \u003cimg src=\"shopping-placeholder.png\"\u003e }   Ein anderes Element kannst du so bestimmen:\n1 2 3 4 5 6  \u003cdiv #greeting\u003eHello!\u003c/div\u003e @defer (on hover(greeting)) { \u003cshopping-cart /\u003e } @placeholder { \u003cdiv\u003eShopping Cart placeholder\u003c/div\u003e }   Hier wird also das shopping-cart erst geladen, wenn der über das Hello! gehovert wird.\nTimer Mit dem Timer Trigger kann eine bestimmte Zeit in Millisekunden angegeben werden, die gewartet werden soll, bis das Laden beginnt.\n1 2 3 4 5 6  @defer (on timer(500ms)) { \u003cshopping-cart /\u003e } @placeholder { \u003c!-- A placeholder content to show until the shopping-cart loads --\u003e \u003cimg src=\"shopping-placeholder.png\"\u003e }   Immediate Anders als die anderen Trigger wird Immediate nicht verzögert durchgeführt, jedoch wird der Inhalt immer noch mit Lazy Loading geladen. Immediate kann hilfreich sein, wenn es Inhalte gibt, die priorität vor anderen Inhalten haben.\n1 2 3 4 5 6  @defer (on immediate) { \u003cshopping-cart /\u003e } @placeholder { \u003c!-- A placeholder content to show until the shopping-cart loads --\u003e \u003cimg src=\"shopping-placeholder.png\"\u003e }   When Mit dem Trigger When kann selbst definiert werden unter welchen Bedingungen ein Inhalt geladen wird. Das When funktioniert grundsätzlich wie ein normales if.\n1 2 3  @defer (when bedingung) { \u003cshopping-cart /\u003e }   Prefetching In einigen Anwendungsfällen kann es Sinn machen, wenn der Inhalt eines @defers bereits bei Möglichkeit vorgeladen wird. Wenn beispielsweise ein interaction-Trigger eingesetzt wird und dieser lange nicht ausgelöst wird. Dazu kann das Preloading wie folgt aktiviert werden:\n1 2 3 4 5  @defer (on interaction(greeting); prefetch on idle) { \u003cshopping-cart /\u003e } @placeholder { \u003cdiv\u003eShopping Cart placeholder\u003c/div\u003e }   Hier wird zusätzlich zum Trigger noch ein zweiter Trigger für das prefetch eingesetzt. Alle verfügbaren Trigger (inkl. when) sind hier zulässig, jedoch macht z.B. interaction meist wenig Sinn.\n","categories":"","description":"Modul #F6 - Angular - Lazy Loading\n","excerpt":"Modul #F6 - Angular - Lazy Loading\n","ref":"/docs/web/angular/02_14_angular_lazy_loading/","tags":"","title":"Lazy Loading"},{"body":"Ziele  Ich weiss, was Spring-Boot ist und wozu es verwendet wird. Ich kenne die Unterschiede zwischen dem Spring-Framework und Spring-Boot. Ich kann eine einfache Spring-Boot-Applikation erzeugen (Bootstrap). Ich kenne die, am häufigsten verwendeten Spring-Boot Annotationen (z.B. @SpringBootApplication, @EnableAutoConfiguration) und deren Bedeutung. Ich weiss, was ein Spring-Boot-Starter ist und kenne die am häufigsten verwendeten Spring-Boot-Starter (z.B. Web-Starter, Test-Starter usw.) und deren Zweck. Ich kann, eine Rest-Schnittstelle mit Spring-Boot erstellen und diese mit Postman (o.ä) ausführen/testen   Spring Boot Spring Boot ist ein Projekt von Spring, welches dazu gemacht ist, einfacher Spring benutzen zu können. Es gibt viele Voreinstellungen, die auch nachträglich noch geändert werden können. Es gibt auch den Spring Initializr, der ein Spring Boot Projekt erstellt. Dort kann man dann auch weitere Abhängigkeiten und Funktionalitäten hinzufügen.\nSpring Boot nimmt uns eigentlich sehr viel Arbeit ab, wenn man damit umzugehen weiß. Z.B. beherrscht Spring Boot die Autokonfiguration, kann zusätzlich eigenständige Anwendungen erstellen und vieles mehr. Wir gehen hier aber nur auf die wichtigsten Aspekte ein.\n Autokonfiguration: Autokonfiguration bedeutet, dass deine Anwendungen bereits mit voreingestellten Abhängigkeiten initialisiert werden. Dies dient hauptsächlich dazu, Zeit zu sparen und blöde Fehler bei der Konfiguration zu vermeiden. Durch die Autokonfiguration erhältst du ein sofort ausführbares Programm. Meinungsansatz: Spring Boot wählt nach eigenem Ermessen Pakete aus und welche Standardwerte verwendet werden sollen, damit wir das nicht selbst machen müssen. Standard Spring Boot umfasst über 50 solcher Spring Starter, jedoch gibt es noch viele weitere, die von Drittanbietern zur Verfügung gestellt werden. Eigenständige Anwendungen: Spring Boot kann selbst Anwendungen erstellen, die eigenständig ausgeführt werden, ohne sich auf einen externen Webserver zu verlassen. Infolgedessen kannst du deine Anwendung auf jeder Plattform starten, indem du einfach auf ausführen drückst. Falls man eine Anwendung ohne eingebetteten Webserver erstellen will, kann man diese Funktion einfach deaktivieren.  Nun ist aber die Frage, was ist überhaupt der Unterschied zwischen dem Spring Framework und Spring Boot? Und was davon ist besser?\nDa Spring Boot auf dem Spring Framework aufbaut, gibt es in der Grundstruktur keine grossen Unterschiede. Einer der grössten Unterschiede ist jedoch, dass Spring Boot sehr viel auf Komfortfunktionen setzt wie z.B. einen schnellen Projektstart, Starter Pakete und so weiter. Zudem besitzt Spring Boot noch Funktionen wie z.B. eingebettete Server, um Komplexität zu vermeiden aber auch automatische Konfigurationen für die Spring Funktionalität.\nIn der Praxis lohnt sich eine Verwendung von Spring Boot, außer du benötigst eine sehr einzigartige Konfiguration. Da man mit Boot auch auf das Annotationssystem des Spring Frameworks zugreifen kann und der Anwendung immer problemlos zusätzliche Abhängigkeiten hinzufügen kann, wird Boot in den meisten Fällen empfohlen.\nBoot Spezifische Annotationen Für Spring Boot gibt es spezifische Annotationen. Die @SpringBootApplication konfiguriert eine Klasse. Die @SpringBootApplication Annotation ist equivalent zu @Configuration, @EnableAutoConfiguration und @ComponentScan. Die @EnableAutoConfiguration Annotation schaltet die automatische Konfiguration ein, was einer der Hauptbestandteile von Spring Boot ist.\nSpring Boot Starter Wichtig zu erwähnen ist, dass die hier aufgeführten Starter nur ein Bruchteil von allen verfügbaren sind. Es sind jedoch die wichtigsten und am häufigsten verwendeten Starter.\n Test Starter: Für Testing brauchen wir normalerweise ein Paar der folgenden Erweiterungen: JUnit, Hamcrest, Mockito oder Spring Test. Diese könnten wir manuell einbinden oder verwenden den Test Starter der das für uns erledigt. Data JPA Starter: Der Data JPA Starter hilft dir, dich effizient mit relationalen Datenbanken zu verbinden. Intern verwendet der Data JPA Starter die Spring-boot-Jpa-Abhängigkeit. Jedoch schreiben wir die SQL-Abfragen nicht mehr wie z.b. bei JDBC, denn in der JPA speichern wir die Daten von Objekten in Tabellen und umgekehrt. Mail Starter: Vielleicht wirst du diesen Starter nicht allzu oft verwenden, jedoch ist es wichtig ihn zu erwähnen, damit du ihn kennst. Der Mail Starter kann hilfreich sein in der Unternehmensentwicklung, da dort das Senden von E-Mails und der direkte Umgang mit Java Mail API normalerweise schwierig sein kann. Mail Starter verbirgt diese Komplexitäten. Web Starter: Der Spring Boot Web Starter konfiguriert dir automatisch folgende Dinge: Dispatcher, Servlet, Fehlerseite, Web-JAR’s und Eingebettete Servlet-Behälter. Dies sind alles wichtige Konfigurationen, wenn du ein Spring Boot Backend für Web aufbauen willst.  Nun schauen wir uns noch kurz an, wie man diese Starter in sein Projekt einbringen würde:\nTest Starter:\n1 2 3 4 5  \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-test\u003c/artifactId\u003e \u003cscope\u003etest\u003c/scope\u003e \u003c/dependency\u003e   Data JPA Starter\n1 2 3 4 5 6 7 8 9  \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-data-jpa\u003c/artifactId\u003e \u003c/dependency\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.h2database\u003c/groupId\u003e \u003cartifactId\u003eh2\u003c/artifactId\u003e \u003cscope\u003eruntime\u003c/scope\u003e \u003c/dependency\u003e   Mail Starter\n1 2 3 4  \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-mail\u003c/artifactId\u003e \u003c/dependency\u003e   Web Starter\n1 2 3 4 5  \u003cdependency\u003e \u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e \u003cartifactId\u003espring-boot-starter-web\u003c/artifactId\u003e \u003cversion\u003e2.2.2.RELEASE\u003c/version\u003e \u003c/dependency\u003e   ","categories":"","description":"Modul #J11 - Spring Boot\n","excerpt":"Modul #J11 - Spring Boot\n","ref":"/docs/java/spring-boot/","tags":"","title":"Spring Boot"},{"body":"Du hast dich sicherlich schon gefragt, wie du mehrere Elemente nebeneinander haben kannst. Hierfür müssen wir ein paar Worte über Layouting verlieren.\nFloating Vor dem Zeitalter von FlexBoxen und Grids war das Layouting noch ein bisschen mühsamer. Eine Möglichkeit war es, die Elemente, die man z.B. nebeneinander haben wollte, dass diese gefloatet werden. Das hätte ungefähr so ausgesehen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  \u003cdiv class=\"container\"\u003e \u003cdiv class=\"box\"\u003eElement 1\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 2\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 3\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 4\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 5\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 6\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 7\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 8\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 9\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 10\u003c/div\u003e \u003c/div\u003e \u003cstyle\u003e .container { overflow: auto; background-color: lightgray; } .box { display: block; float: left; margin: 1em; width: 10em; height: 10em; background-color: orange; } \u003c/style\u003e   In diesem Beispiel wurde das container-div nur zur Demonstration verwendet. Da du diese Technik wahrscheinlich nie benötigen wirst, musst du im Moment auch nicht verstehen, weshalb overflow: auto verwendet wurde.\nWas genau passiert hier? Wichtig ist, dass die gefloateten Elemente display: block haben (was bei einem \u003cdiv\u003e bereits default ist). Mit float: left werden die Elemente der Reihe nach von links nach rechts angeordnet. Wenn es in den Rand hinaus gehen würde, wird eine neue Zeile begonnen (wrap). Das wäre bereits die ganze Magie.\nÄndere den Wert auf float: right. Nun beginnt ist das erste Element rechts. Was müsstest du machen, damit die Elemente zwar rechtsbündig sind, aber das erste Element dennoch links vom zweiten usw. ist?\nFlex-Boxen Wenn du Floating oft brauchen würdest, dann wirst du schnell merken, dass diese Technik sehr mühsam sein kann.\nDie gute Nachricht ist, dass man die vorherige Technik praktisch gar nicht mehr benötigt seit der Einführung von Flex-Boxen. Das obige Beispiel kann verkürzt werden auf:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  \u003cdiv class=\"flex-container\"\u003e \u003cdiv class=\"box\"\u003eElement 1\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 2\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 3\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 4\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 5\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 6\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 7\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 8\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 9\u003c/div\u003e \u003cdiv class=\"box\"\u003eElement 10\u003c/div\u003e \u003c/div\u003e \u003cstyle\u003e .flex-container { display: flex; flex-wrap: wrap; gap: 1em; background-color: lightgray; } .box { width: 10em; height: 10em; background-color: orange; } \u003c/style\u003e   Der grosse Unterschied hier ist, dass es einen Container braucht, den “Flex-Container”. Du kannst ein beliebiges Element als Flex-Container definieren, indem du display: flex auf dieses Element anwendest.\nDas flex-wrap ist nicht zwingend nötig, ist aber dafür verantwortlich, dass es einen Zeilenumbruch gibt, wenn die Elemente in den Rand hinaus gehen würden. Ansonsten war es das bereits. Interessanter Weise muss weder Flex-Container noch Flex-Item display: block haben. In diesem Beispiel könntest du also die \u003cdiv\u003es mit \u003cspan\u003es (Inline-Element) ersetzen und es würde immer noch funktionieren (aber nicht empfehlenswert).\nWenn du den Zeilenumbruch (das wrap) nicht willst, dann kanst du die flex-wrap-Regel entfernen. Wenn du das machst, dann zieht die width: 10em-Regel nicht immer, z.B. wenn es zu wenig Platz dafür hätte. In diesem Fall kannst du width mit min-width ersetzen oder flex-shrink: 0 auf den Items (.box) setzen. flex-shrink: 0 bedeutet, dass sich die Items nicht verkleinern, wenn zu wenig Platz da ist. Beachte in beiden Fällen, dass die Elemente in den Rand hinaus gehen würden, wenn zu wenig Platz da wäre!\nDieses Problem könntest du umgehen, indem du auf dem Flex-Container definierst, dass der Teil, der aus dem Rand hinausgehen würde,\n entweder versteckt werden würde (overflow: hidden) oder eine Scrollbar angezeigt würde (overflow: auto oder overflow: scroll)  Flex-Boxen mit flexiblen Items Im Prinzip sind Flex-Boxen überhaupt nicht kompliziert, auch wenn man sehr komplexe Layouts damit machen kann.\nSchaue dir rasch CSS Flexbox in 100 Seconds an. Dort ist die ganze Technik gut und interessant zusammengefasst.\nOft möchte man z.B. mehrere Spalten nebeneinander haben, die alle gleich viel Platz beanspruchen und zugleich sollen alle Spalten zusammen möglichst dynamisch die ganze Breite des Browsers ausnutzen.\nFolgendes Beispiel macht genau das:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u003cp\u003eLorem ipsum dolor sit amet, consectetuer adipiscing elit. Maecenas porttitor congue massa. Fusce posuere, magna sed pulvinar ultricies, purus lectus malesuada libero, sit amet commodo magna eros quis urna. Nunc viverra imperdiet enim. Fusce est. \u003c/p\u003e \u003cdiv class=\"flex-container\"\u003e \u003cp style=\"flex: 1\"\u003eVivamus a tellus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpisegestas. Proin pharetra nonummy pede. Mauris et orci. Aenean nec lorem. In porttitor.\u003c/p\u003e \u003cp style=\"flex: 1\"\u003eMauris eget neque at sem venenatis eleifend. Ut nonummy. Fusce aliquet pede non pede. Suspendisse dapibus lorem pellentesque magna. Integer nulla. \u003c/p\u003e \u003cdiv style=\"flex: 1\"\u003e \u003cimg src=\"https://it-ninjas.ch/img/png/Ninja%20Elements_ninja_phone.png\" alt=\"A picture\" style=\"max-width: 100%;\" /\u003e \u003cp\u003eMauris eget neque at sem venenatis eleifend. Ut nonummy.\u003c/p\u003e \u003c/div\u003e \u003c/div\u003e \u003cstyle\u003e .flex-container { display: flex; gap: 1em; } \u003c/style\u003e   Mit flex: 1 haben wir gesagt, dass jede dieser Spalten genau gleich viel Platz beanspruchen soll. Ändere z.B. beim \u003cdiv\u003e mit dem Bild den flex-Wert auf 2. Du wirst sehen, dass dieses \u003cdiv\u003e nun anteilmässig doppelt so viel Platz beansprucht wie die anderen.\nWelche Zahlen du genau verwendest, spielt keine grosse Rolle. Du kannst z.B. auch flex: 25% eingeben, was auch funktioniert. Wichtig zu wissen ist, dass so zu sagen alle Flex-Werte zusammen-addiert werden. Wenn du z.B. den flex-Wert des Bild-divs auf 2 geändert hast, so beansprucht dieses div 2 / (1 + 2 + 1) = 2/4 = 50% der Breite. Wenn du diese Rechnung nicht verstehen solltest, frage unbedingt nach!\nAusrichtung der Flex-Box Per Default werden die Elemente von links nach rechts angeordnet, was auch sehr viel Sinn macht: Um Elemente vertikal (also von oben nach unten) anzuordnen, braucht man eigentlich kein spezielles Layout.\nMöchtest du aber bei einem grossen Screen Elemente horizontal nebeneinander haben, aber bei einem kleinen Screen aus Platzgründen untereinander, so kannst du für kleinere Bildschirme folgende Regel hinzufügen:\n1 2 3 4 5  @media (max-width: 600px) { .flex-container { flex-direction: column; } }   Das @media (max-width: 600px) wird “Media Query” genannt. Wenn die Breite des Browsers einen bestimmten Wert unterschreitet, dann wird die Regel darin aktiv. Mehr über Media Queries erfährst du hier: https://www.w3schools.com/css/css_rwd_mediaqueries.asp\nBeide Richtungen Bevor wir an das Praktische gehen, musst du noch zwei Begriffe kennen:\n MainAxis und CrossAxis  Hat dein Flex-Container eine horizontale Ausrichtung (default: flex-direction: row), so ist die MainAxis die x-Achse (von links nach rechts) und die CrossAxis die y-Achse (oben nach unten). Bei einer vertikalen Ausrichtung (flex-direction: column) ist das genau umgekehrt.\nFlex-Elemente ausrichten Flex-Boxen machen das Ausrichten von Inhalt sehr einfach.\nDer Einfachheit halber nehmen wir einmal dieses Beispiel:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  \u003cdiv class=\"flex-container\"\u003e \u003cdiv\u003e1\u003c/div\u003e \u003cdiv\u003e2\u003c/div\u003e \u003cdiv\u003e3\u003c/div\u003e \u003c/div\u003e \u003cstyle\u003e .flex-container { display: flex; height: 20em; background-color: cornflowerblue; } .flex-container\u003ediv { background-color: white; width: 100px; height: 100px; margin: 10px; } \u003c/style\u003e   Da per Default flex-direction: row gilt, werden die Elemente von oben links nach rechts dargestellt. Um die Elemente horizontal (bzw. auf der MainAxis) zu zentrieren, kannst du folgende Regel auf den Flex-Container anwenden: justify-content: center.\nAuf horizontaler Ebene (MainAxis) kannst du die Elemente noch auf viele andere Arten ausrichten. Probiere folgende Werte für justify-content (z.B. mit Hilfe der Entwickler-Tools deines Browsers via [F12]) einmal aus:\n center space-around space-between space-evenly flex-start flex-end  Möchtest du hingegen die Elemente vertikal (auf der CrossAxis) ausrichten, dann hilft dir align-items weiter. Die Elemente kannst du vertikal zentrieren mit align-items: center. Die Elemente kannst du auch oben bzw. unten ausrichten mit align-items: flex-start bzw. flex-end.\nHast du Zeilenumbrüche drin, dann kannst du vertikal (auf der CrossAxis) die Abstände noch genauer spezifizieren. Um das auszuprobieren, setze flex-wrap: wrap auf dem Flex-Container und erstelle weitere \u003cdiv\u003es darin, damit es genug Elemente hat. Probiere im Flex-Container nun folgende Werte für align-content aus:\n center space-around space-between space-evenly flex-start flex-end  Wie du gesehen hast, sind die Property-Namen für die Ausrichtung unnötig kompliziert gewählt worden. Deshalb hier noch einmal in der Übersicht:\nUm horizontal (bzw. in der MainAxis) Elemente auszurichten:\n justify-content  Um vertikal (bzw. in der CrossAxis) Elemente auszurichten:\n align-items align-content in Kombination mit flex-wrap: wrap  Website-Layout mit Flex-Boxen Theoretisch reicht das Wissen über Flex-Boxen bereits, um eine ganze Seite zu layouten. Damit du ein Gefühl dafür bekommst, schaue dir bitte das unterste Beispiel auf dieser Seite an: https://www.w3schools.com/css/css3_flexbox_responsive.asp\nHilfestellung Hier kriegst du eine gute visuelle Übersicht über die einzelnen Flex-Properties: https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flexbox-properties Hier sind von w3schools die wichtigsten Eigenschaften von Flex-Boxen beschrieben: https://www.w3schools.com/css/css3_flexbox.asp\nDisplay-Flex-Properties üben Auf Flexbox Froggy kannst du dein Flexbox-Wissen auf lustige Art und Weise trainieren. Nimm dir rasch Zeit dafür.\nAufgaben im Lab Hierzu findest du eine Aufgabe im Lab.\n","categories":"","description":"Modul #F3 - HTML und CSS - Block-Elemente layouten.\n","excerpt":"Modul #F3 - HTML und CSS - Block-Elemente layouten.\n","ref":"/docs/web/html_css/16_layouting/","tags":"","title":"Layouting"},{"body":"Ziele  Du weisst, was Promises sind und wozu sie verwendet werden. Du kannst, Promises korrekt anwenden in Funktionen.  Promises Ein Promise repräsentiert einen Wert (oder ein Versprechen), der möglicherweise in der Zukunft verfügbar sein wird.\nPromises werden oft verwendet, um asynchrone Operationen wie das Laden von Daten von einem Server oder das Ausführen eines HTTP-Requests zu verwalten. Ein Promise kann sich in einem von drei Zuständen befinden:\n Pending (ausstehend): Der Promise ist noch nicht erfüllt (resolved) oder abgelehnt (rejected) worden. Fulfilled (erfüllt): Die asynchrone Operation wurde erfolgreich abgeschlossen (resolved) und der Promise enthält den zurückgegebenen Wert. Rejected (abgelehnt): Die asynchrone Operation ist fehlgeschlagen und der Promise enthält den Fehler.  Ein Promise kann mit der Funktion new Promise() erstellt werden. Diese Funktion nimmt eine Funktion als Argument, die zwei Parameter enthält: resolve und reject. resolve wird aufgerufen, wenn die Operation erfolgreich abgeschlossen wurde, und reject, wenn ein Fehler aufgetreten ist.\n1 2 3 4 5 6 7  const promise = new Promise((resolve, reject) =\u003e { if (success) { resolve('success'); } else { reject('error'); } });   Promises bieten zwei Methoden an, um mit dem Ergebnis oder dem Fehler der asynchronen Operation umzugehen:\n then() catch()  Die then() Methode wird verwendet, um eine Funktion zu registrieren, die ausgeführt wird, wenn das Promise erfolgreich erfüllt wird. Diese Funktion erhält das Ergebnis des erfüllten Promise als Parameter:\n1 2 3 4 5  const promise = new Promise((resolve, reject) =\u003e resolve('success')); promise.then((result) =\u003e { console.log(result) // 'success' })   then() kann jedoch mehrmals hintereinander verwendet werden, um eine Kette von Funktionen zu erstellen, die nacheinander ausgeführt werden, wenn das Promise erfüllt wird.\nDurch die Verwendung von then() in Kombination mit return in jeder Funktion kann eine Kette von Funktionen erstellt werden, die nacheinander ausgeführt werden, wobei jedes Ergebnis das Argument für die nächste Funktion in der Kette ist.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  const promise = new Promise((resolve, reject) =\u003e resolve(2)); promise .then((result) =\u003e { console.log(result); // 2  return result * 2; }) .then((result) =\u003e { console.log(result); // 4  return result * 2; }) .then((result) =\u003e { console.log(result); // 8  });   Die catch() Methode wird verwendet, um eine Funktion zu registrieren, die ausgeführt wird, wenn das Promise fehlschlägt. Diese Funktion erhält den Fehler als Parameter.\n1 2 3 4 5  const promise = new Promise((resolve, reject) =\u003e reject('error')); promise.catch((result) =\u003e { console.log(result); // 'error' });   then() und catch() werden fast immer zusammen verwendet:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  const number = 10; const promise = new Promise((resolve, reject) =\u003e { if (number \u003e 0) { resolve('success'); } else { reject('error'); } }); promise.then((result) =\u003e { console.log(result); // 'success' }).catch((error) =\u003e { console.error(error); // 'error' });   Promises als Function Promises in Funktionen zu packen ist eine gängige Praxis in JavaScript, um asynchrone Operationen und Callbacks zu verwalten. Indem man Promises in Funktionen einbettet, kann man sicherstellen, dass die asynchronen Operationen sequentiell ausgeführt werden und man eine klare Struktur im Code hat.\nDazu muss man das gesamte Promise in der function returned:\n1 2 3 4 5 6 7 8 9  function promiseFunction(number) { return new Promise((resolve, reject) =\u003e { if (number \u003e 0) { resolve('success'); } else { reject('error'); } }); }   Nun kann man diese Funktion innerhalb von anderen Funktionen verwenden. Wichtig ist das diese mit await verwendet werden, um auf das Ergebnis des Promises zu warten, bevor der Rest der Funktion fortgesetzt wird. So kann man sicher gehen das man das Resultat aus dem Promise zur Verfügung hat und es danach in der Funktion verwenden kann. Wenn man jedoch ein await in einer Funktion verwendet muss die gesamte Funktion asynchron sein, dazu muss man vor die Funktion das Schlüsselwort asyncschreiben.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  function promiseFunction(number) { return new Promise((resolve, reject) =\u003e { if (number \u003e 0) { resolve('success'); } else { reject('error'); } }); } async function callPromiseFunction() { const successResult = await promiseFunction(10); console.log(successResult); const errorResult = await promiseFunction(-5); console.log(errorResult); } callPromiseFunction(); // 'success' // Promise {\u003crejected\u003e: 'error'}   Wenn man es nicht verwenden würde, würde der Code in der Funktion weiterfahren ohne das er evtl. das Resultat aus der Promise hat (das Promise hat noch den Zustand Pending).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  function promiseFunction(number) { return new Promise((resolve, reject) =\u003e { if (number \u003e 0) { resolve('success'); } else { reject('error'); } }); } function callPromiseFunction() { const promise = promiseFunction(10).then((result) =\u003e { console.log(result); }).catch((error) =\u003e { console.error(error); }) console.log(promise); } callPromiseFunction(); // Promise {\u003cpending\u003e} // 'success'   ","categories":"","description":"Modul #F4 - JavaScript - Promises.\n","excerpt":"Modul #F4 - JavaScript - Promises.\n","ref":"/docs/web/javascript/16_js_async/","tags":"","title":"Promises"},{"body":"Ziele  Du weisst, was Interceptors in Angular sind und kannst diese anwenden.  Interceptor Interceptors in Angular sind eine einfache Möglichkeit des Frameworks, die http-Requests global abzufangen und zu verändern, bevor sie an den Server gesendet werden. Dies ist sehr praktisch, wenn wir Authentifizierungs-Token konfigurieren, Protokolle der Requests erstellen und benutzerdefinierte Header hinzufügen wollen.\nUm einen Interceptor zu implementieren, müssen wir eine Klasse erstellen, die die Intercept Methode des HttpInterceptor Interface implementiert.\nDer folgende Interceptor ist sehr simpel gehalten. Er gibt einfach jeden Request in der Konsole aus:\n1 2 3 4 5 6 7 8 9 10 11  @Injectable() export class RequestLogInterceptor implements HttpInterceptor { intercept( request: HttpRequest\u003cany\u003e, next: HttpHandler ) : Observable\u003cHttpEvent\u003cany\u003e\u003e { console.log(request.url); return next.handle(request); } }   Die Intercept Methode wandelt jeden Request in Observables um, die später durch Aufrufen von next.handle() aufgelöst werden. Für unsere Implementierung ist es also ganz einfach: Wir nehmen den Request entgegen, protokollieren die URL und rufen next.handle() auf, um den Request an den Server zu senden, ohne Änderungen daran vorzunehmen.\nInterceptors Providen Da die Interceptors eine Dependency des HttpClients sind, müssen diese als Provider im gleichen Injektor wie der HttpClient bereitgestellt werden. Angenommen, wir haben unser HttpClientModule in das AppModule importiert, müssen wir die Interceptors hier zu den Providern hinzufügen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  //... import { HTTP_INTERCEPTORS} from '@angular/common/http'; import { RequestLogInterceptor} from '...'; @NgModule({ //..  imports: [ HttpClientModule, // ..  ], providers: [ { provide: HTTP_INTERCEPTORS, useClass: RequestLogInterceptor, multi: true }, // ..  ], // .. }) export class AppModule{ }   Die Option multi: true teilt Angular mit, dass Wir mehrere Interceptors bereitstellen, und ist erforderlich, wenn dies das Szenario ist. In unserem Beispielszenario wäre dies nicht erforderlich, da wir nur einen Interceptor implementiert haben.\nEs ist auch wichtig zu berücksichtigen, dass Angular Interceptors in der Reihenfolge anwendet, in der sie bei den Providers des Moduls angegeben sind.\n Interceptors in Angular 17 Angular 17 bringt auch bei den Interceptors einigen Änderungen, da man ja nun nicht mehr mit den modules arbeitet müssen sie anders angegeben werden. Das wird jetzt auch von der app.config.ts übernommen.\nIn der app.config.ts muss man nun das provideHttpClient(withInterceptors([AuthInterceptor]))angeben. in den eckigen klammern von dem withInterceptors gibt man die definierten Konstanten an.\n1 2 3 4 5 6 7 8 9 10  import { ApplicationConfig } from '@angular/core'; import { provideRouter } from '@angular/router'; import { routes } from './app.routes'; import {provideHttpClient, withInterceptors} from \"@angular/common/http\"; import {AuthInterceptor} from \"./interceptors/auth.interceptor\"; export const appConfig: ApplicationConfig = { providers: [provideRouter(routes), provideHttpClient(withInterceptors([AuthInterceptor]))] };   Zudem ist der Interceptor keine class mehr mit implements. Er ist nun einfach eine Konstante mit dem Typ eines Interceptors. Ansonsten funktioniert noch alles genau gleich.\n1 2 3 4 5 6 7 8 9 10  import {HttpRequest, HttpEvent, HttpInterceptorFn, HttpHandlerFn} from '@angular/common/http'; import { Observable } from 'rxjs'; export const AuthInterceptor: HttpInterceptorFn = ( req: HttpRequest\u003cany\u003e, next: HttpHandlerFn ): Observable\u003cHttpEvent\u003cany\u003e\u003e =\u003e { console.log(request.url); return next.handle(request); };   Beispiel für eine Authentifizierung wo das Passwort und der Benutzer, welche mit Base64 verschlüsselt wurden (btoa), im Header versendet werden. Jedoch, nur wenn es keine GET-Request ist.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  import {HttpRequest, HttpEvent, HttpInterceptorFn, HttpHandlerFn} from '@angular/common/http'; import { Observable } from 'rxjs'; export const AuthInterceptor: HttpInterceptorFn = ( req: HttpRequest\u003cany\u003e, next: HttpHandlerFn ): Observable\u003cHttpEvent\u003cany\u003e\u003e =\u003e { if (req.method !== 'GET') { const authRequest = req.clone({ setHeaders: { 'Content-Type': 'application/json', 'Authorization': 'Basic ' + btoa('admin:admin') }, }); return next(authRequest); } return next(req); };    ","categories":"","description":"Modul #F6 - Angular - Interceptors\n","excerpt":"Modul #F6 - Angular - Interceptors\n","ref":"/docs/web/angular/02_15_angular_interceptors/","tags":"","title":"Interceptors"},{"body":"Ziele  Ich weiss, wozu ErrorHandler verwendet werden und wie ich selbst solche implementieren kann.  ErrorHandler Da man ja ein try-catch nicht verwenden sollte laut Best-Practises, muss man einen anderen Weg finden Error anzufangen. Zudem wäre es mühsam überall einen solchen try-catch Block hinzuzufügen. Praktischer wäre doch ein globales Behandeln von Fehlern. Da kommt dann der ErrorHandler ins Spiel.\nDer ErrorHandler ist eine abstrakte Klasse, die von Angular bereitgestellt wird und über die handleError()-Methode verfügt. Der Handler wird verwendet, um globale Fehler in einer Anwendung abzufangen und entsprechend zu behandeln.\n1 2 3 4 5 6 7 8 9 10  import { ErrorHandler, Injectable } from '@angular/core'; @Injectable() export class GlobalErrorHandler extends ErrorHandler { override handleError(error: any): void { console.log(\"test\") // Weitere Aktionen ausführen, z.B. Fehlermeldung anzeigen oder Logging durchführen  } }   Indem du den GlobalErrorHandler in der providers-Eigenschaft der AppModule-Klasse registrierst, wird dieser als globaler ErrorHandler für die Anwendung verwendet. Jeder Fehler, der in der Anwendung auftritt, wird automatisch durch den GlobalErrorHandler abgefangen und entsprechend behandelt.\n1 2 3 4 5 6 7 8  @NgModule({ // ..  providers: [ { provide: ErrorHandler, useClass: GlobalErrorHandler } ], // .. }) export class AppModule { }   ","categories":"","description":"Modul #F6 - Angular - Errorhandling\n","excerpt":"Modul #F6 - Angular - Errorhandling\n","ref":"/docs/web/angular/02_16_angular_errorhandler/","tags":"","title":"Errorhandling"},{"body":"Der Tag wird kommen, an dem du ein HTML-Element an einer bestimmten Position haben willst.\nrelative Positionierung: Element ein bisschen verschieben Angenommen, du hast z.B. ein Bild in einem Text:\n1 2 3 4 5 6 7 8 9 10 11  Are you a \u003cimg src=\"\thttps://it-ninjas.ch/img/svg/Ninja%20Elements_kopf.svg\" alt=\"\" /\u003e? \u003cstyle\u003e body { font-size: 5em; } img { height: 1em; } \u003c/style\u003e   Dann wird das Bild wahrscheinlich nicht perfekt im Text ausgerichtet sein. In diesem Beispiel wollen wir das Bild ein bisschen nach unten verschieben. Dann kannst du das wie folgt machen:\n1 2 3 4 5  img { position: relative; top: 0.2em; ... }   Mit position: relative bewirken wir, dass CSS-Properties wie top, bottom, left und right beachtet werden. Dank der relativen Positionierung dürfen wir dann das Element verschieben, ohne dass es andere Elemente bzw. den Textfluss verändert. Wir haben hier top verwendet, um oben einen Abstand einzufügen. Würdest du left verwenden, so würde sich das Element entsprechend nach rechts verschieben.\nHierzu findest du eine Aufgabe im Lab.\nabsolute Positionierung Möchtest du ein Element auf einer bestimmten Position haben, dann hilft dir womöglich position: absolute weiter:\n1 2 3 4 5 6 7 8 9 10 11 12  Are you a \u003cimg src=\"\thttps://it-ninjas.ch/img/svg/Ninja%20Elements_kopf.svg\" alt=\"\" /\u003e? \u003cstyle\u003e img { position: absolute; top: 20em; right: 10em; height: 150px; } \u003c/style\u003e   Mache den Browser mal ein bisschen kleiner und schaue, wie sich die Positionierung verhält, wenn du scrollst.\nMöchtest du, dass die Positionierung immer gleich - unabhängig vom Scrollen - ist? Dann versuche es einmal mit position: fixed.\nHierzu findest du eine Aufgabe im Lab.\n","categories":"","description":"Modul #F3 - HTML und CSS - HTML-Elemente auf der Seite positionieren.\n","excerpt":"Modul #F3 - HTML und CSS - HTML-Elemente auf der Seite positionieren.\n","ref":"/docs/web/html_css/17_css_positioning/","tags":"","title":"Positionierung"},{"body":"Code verzögert ausführen: setTimeout(…) Manchmal muss eine Aktion verzögert ausgeführt werden. Dies kannst du ganz einfach mit der Funktion setTimeout(callback, time) realisieren:\n1 2 3  setTimeout(function(){ console.log('Thanks for waiting :)'); }, 5000);   Das erste Argument ist die Aktion/Funktion, die ausgeführt wird, sobald die Zeit abgelaufen ist. Das zweite Argument ist die Zeit in Millisekunden, die verstreichen muss, bis die übergebene Funktion ausgeführt wird.\nCode immer wieder ausführen: setInterval(…) Folgender Code wird jede Sekunde ausgeführt:\n1 2 3  setInterval(function(){ console.log('hey!'); }, 1000);   Vielleicht ist dir aufgefallen, dass setTimeout(...) und setInterval(...) eine Ganzzahl zurückgeben. Das ist die ID des Timeouts bzw. Intervalls. Es macht Sinn, diesen Wert zu merken, damit man das Intervall wieder beendet werden kann:\n1 2 3 4  const intervalId = setInterval(function(){}, 1000); ... clearInterval(intervalId);   Hierzu findest du eine Aufgabe im Lab.\n","categories":"","description":"Modul #F4 - JavaScript - Code verzögert ausführen.\n","excerpt":"Modul #F4 - JavaScript - Code verzögert ausführen.\n","ref":"/docs/web/javascript/17_js_timeout_and_interval/","tags":"","title":"Timeouts und Intervalle"},{"body":"Ziele  Du weisst, was eine Dependency Injection ist und was es in Angular ist. Du kannst, eine Dependency Injection anwenden.  Was sind Dependencies (Abhängigkeiten) Um eine loose Kopplung zu erreichen, werden verschiedene Aufgaben wie das Laden von Server-Daten in verschiedene Dateien ausgelagert. Die einzelnen Klassen haben Abhängigkeiten zu einander. In Angular gibt man die Abhängigkeiten zu anderen Klassen oft z.B. im Konstruktor an.\nAngular erstellt und übergibt dann automatisch Instanzen dieser Klassen beim Laden der entsprechenden Klasse. Auf diese Weise werden die Klassen wiederverwendbarer und einfacher testbar.\nWas ist eine Dependency Injection Dependency Injection ist ein Coding pattern, bei welchem Klassen alle Abhängigkeiten von externen Quellen erhalten, anstatt sie selbst zu erstellen.\nDependency Injection in Angular Der Angular Dependency Injector liefert uns Vorteile wie Skalierbarkeit, Testbarkeit und eine klare Trennung von Aufgaben.\nUm den Dependency Injector in Angular zu nutzen, müssen wir 3 Schritte erledigen\n Den @Injectable() Decorator der Klasse/ dem Service hinzufügen. Den Injector davon erzählen, indem wir es als Provider aufzählen. Die Dependency injecten   @Injectable importieren und nutzen:  1 2 3 4 5 6  import {Injectable} from './@angular/core'; @Injectable({ providedIn: 'root' }) export class WeaponService {}   Den WeaponService als Provider registrieren (in module.ts):  1 2 3 4 5 6 7 8 9 10  // .. import { WeaponService } from './services/weapon.service'; @NgModule({ declatations: [], // ..  bootstrap: [AppComponent], providers: [WeaponService] }) export class AppModule{ }   Dependency injecten wo (in unserem Beispiel) der Service genutzt wird:  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import { WeaponService } from './services/weapon.service'; @Component({ // .. }) export class WeaponComponent { weapons: string[] = []; constructor(private weaponService: WeaponService) {} ngOnInit(){ this.weapons = this.weaponService.getWeapons(); } }   Das Minibeispiel soll lediglich die 3 wichtigen Schritte etwas besser darstellen.\nLernvideo Wenn du dir die Erklärung noch mit einem Video genauer anschauen möchtest, empfiehlt dir das Coaching-Team dieses Video.\n","categories":"","description":"Modul #F6 - Angular - Dependency Injection\n","excerpt":"Modul #F6 - Angular - Dependency Injection\n","ref":"/docs/web/angular/02_17_angular_dependency_injection/","tags":"","title":"Dependency Injection"},{"body":"JavaScript ist Prototyp-basierende Programmiersprache JavaScript ist eine prototype-basierte Programmiersprache, was bedeutet, dass die Vererbung und die Erstellung von Objekten auf Prototypen basieren.\nEin Prototyp ist ein vordefiniertes Objekt, das als Vorlage für die Erstellung neuer Objekte dient. Wenn ein neues Objekt erstellt wird, erbt es automatisch Eigenschaften und Methoden von seinem Prototypen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  // create Object-Prototyp const personProto = { name: '', age: 0, speak: function() { console.log('Hello World!'); } } // create new object based on prototyp const person1 = Object.create(personProto) person1.name = 'John' person1.age = 30 // Erstellen eines weiteren Objekts basierend auf dem Prototypen const person2 = Object.create(personProto) person2.name = 'Jane' person2.age = 25 console.log(person1) // { name: \"John\", age: 30 } console.log(person2) // { name: \"Jane\", age: 25 } person1.speak() //'Hello World!'   Klassen in JavaScript Es gibt in JavaScript das Konzept von Klassen, das in der objektorientierten Programmierung verwendet wird.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  // Klasse class Person { constructor(name, age) { this.name = name this.age = age } sayHello() { console.log('Hello, my name is ' + this.name) } } // Eine Instanz der Klasse erstellen const person = new Person('Max', 30) // Eine Methode der Klasse aufrufen person1.sayHello() // Hello, my name is Max   static Methods Es gibt auch hier statische Methoden, welche in Klassen definiert werden, um Methoden aufzurufen, die nicht an eine bestimmte Instanz der Klasse gebunden sind, sondern direkt auf der Klasse selbst aufgerufen werden können.\nStatische Methoden sind oft nützlich, um Hilfsfunktionen in einer Klasse zu definieren, die nicht auf eine bestimmte Instanz der Klasse angewiesen sind. Sie können auch verwendet werden, um Konstruktoren in einer Klasse zu definieren, die nur einmal ausgeführt werden müssen, unabhängig davon, wie viele Instanzen der Klasse erstellt werden.\nStatische Methoden werden mit static vor der Methodendefinition gekennzeichnet.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  class Person { constructor(name, age) { this.name = name this.age = age } sayHello() { console.log('Hello, my name is ' + this.name) } static sayBye() { console.log('Bye Bye') } } const person = new Person('Max', 30) console.log(person.name) // Max console.log(person.age) // 30  person.sayHello() // Hello, my name is Max Person.sayBye() // Bye Bye   Natürlich kann eine Klasse auch von einer anderen Erben (extends):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  class Person { constructor(name, age) { this.name = name this.age = age } } class Student extends Person { constructor(name, age, major) { super(name, age) this.major = major } } const person = new Person('Max', 30) const student = new Student('John', 20, 'Computer Science') console.log(person.name) // Max console.log(person.age) // 30  console.log(student.name) // John console.log(student.age) // 20 console.log(student.major) // Computer Science   typeof vs instanceof bei Klassen Es gibt zwei Möglichkeiten, den Typ von Objekten zu überprüfen: der typeof Operator und der instanceof Operator. Wenn es um Klassen geht, haben beide ihre eigenen Anwendungen und Unterschiede:\ntypeof wird verwendet, um den Typ eines Werts zu überprüfen. Wenn eine Klasse definiert wird, wird ihr Typ als “function” zurückgegeben. Für eine Instanz wird “object” zurückgegeben.\n1 2 3 4 5 6 7 8 9 10 11  class Person { constructor(name, age) { this.name = name this.age = age } } const person = new Person('Max', 30); console.log(typeof Person); // \"function\" console.log(typeof person); // \"object\"   instanceof wird verwendet, um zu überprüfen, ob eine Instanz einer bestimmten Klasse angehört.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  class Person { constructor(name, age) { this.name = name this.age = age } } class Student extends Person { constructor(name, age, major) { super(name, age) this.major = major } } const person = new Person('Max', 30) const student = new Student('John', 20, 'Computer Science') console.log(student instanceof Person) // true console.log(student instanceof Student) // true console.log(person instanceof Student) // false   ","categories":"","description":"Modul #F4 - JavaScript - Prototypen und Klassen.\n","excerpt":"Modul #F4 - JavaScript - Prototypen und Klassen.\n","ref":"/docs/web/javascript/18_js_prototyping_class_in_js/","tags":"","title":"Prototyping und Klassen"},{"body":"Ziele  Du weisst, wie du bei Elementen Übergänge auf CSS-Property-Änderungen hinzufügen kannst. Du weisst, wie du wiederholende Animationen erstellen kannst mit Keyframes.  Übergänge In CSS kannst du sehr einfach Übergänge erstellen. Zum Beispiel kannst du ungefähr so die Form eines \u003cdiv\u003es verändern:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  \u003cdiv class=\"box\"\u003e\u003c/div\u003e \u003cstyle\u003e .box { /* Initialzustand: */ width: 10em; height: 10em; background-color: lightgrey; border: 5px solid black; border-radius: 50%; /* Übergang wird mittels `transition` angegeben: */ transition: width 1s, background-color 2s, border-radius 3s; } .box:hover { /* Zustand, wenn sich die Maus über dem Element befindet: */ width: 20em; background-color: #FFBF00; border-radius: 0; } \u003c/style\u003e   Probiere es zuerst einmal aus!\nAber wie funktioniert das? Beschränken wir uns bei diesem Beispiel einmal nur auf die Änderung der Breite. Da in der regulären CSS-Regel (also ohne :hover) die Regel transition: width 1s steht, reagiert dieses HTML-Element auf eine Änderung in der Breite mit einem Übergang (transition). In dieser CSS-Regel war width der Name des CSS-Properties, auf welche der Übergang angewandt wurde. Die Angabe 1s spezifiziert, dass der Übergang 1 Sekunde lang dauert.\nOft siehst du die Angabe der Transition in diesem Format:\n1  transition: width 1s ease;   Das Keyword ease beschreibt, wie die Animation beschleunigt wird: ease-Animationen beginnen langsam, sind dann schneller und am Schluss wird sie “gebremst”. ease ist der Default-Wert (musst du also nicht angeben). Es gibt viele weitere:\n ease linear ease-in ease-out ease-in-out cubic-bezier(n,n,n,n)  Weitere Informationen zu Transitions erhältst du hier: https://www.w3schools.com/css/css3_transitions.asp\nAnimationen In CSS sind auch Animationen sehr einfach realisierbar - auch ohne JavaScript.\nIm folgenden Beispiel lassen wir eine Hand winken:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  \u003cspan class=\"hand\"\u003e🖐\u003c/div\u003e \u003cstyle\u003e .hand { /* transform geht nicht für inline-Elemente: */ display: inline-block; font-size: 72px; /* Animation properties: */ animation-name: wave; animation-duration: 2s; animation-direction: alternate; animation-iteration-count: infinite; } @keyframes wave { 0% {transform: rotate(-90deg);} 10% {transform: rotate(-90deg);} 90% {transform: rotate(90deg);} 100% {transform: rotate(90deg);} } \u003c/style\u003e   Das Zentrale an diesem Code-Beispiel ist der @keyframes-Block. Das erste Wort nach diesem Schlüsselbegriff ist der Name, der du der Animation gibst.\nDas 0% steht für den Anfang der Animation, diese Prozentangaben beschreiben also eine Zeitangabe: Zu welchem Zeitpunkt soll das Element wie gestylt werden?\nDamit du die Animation (hier mit dem Namen wave) verwenden kannst, musst du diese referenzieren: Das hast du mit animation-name: wave gemacht. Anschliessen haben wir die Animation weiter konfiguriert:\n Mit animation-direction: alternate haben wir eingestellt, dass die Animation wieder rückwärtsläuft, nachdem sie fertig ist. Hierfür war folgendes auch notwendig: animation-iteration-count: infinite bewirkt, dass die Animation immer wieder wiederholt wird.  Das ist bereits das Basis-Wissen zu Animationen in CSS. Interessierst du dich weiter für Animationen, dann kannst du dich gerne hier vertiefen: https://www.w3schools.com/css/css3_animations.asp\nDamit du siehst, wofür Animationen eingesetzt werden können, schaue dir bitte noch dieses Beispiel an, wie einfach (und ohne JavaScript) ein Ladebalken implementiert werden kann: https://www.w3schools.com/howto/howto_css_loader.asp\n","categories":"","description":"Modul #F3 - HTML und CSS - Erstelle professionelle Animationen - nur mit CSS und komplett ohne JavaScript.\n","excerpt":"Modul #F3 - HTML und CSS - Erstelle professionelle Animationen - nur …","ref":"/docs/web/html_css/18_css_keyframes/","tags":"","title":"Übergänge und Animationen"},{"body":"Ziele  Du weisst, was der Angular Life Cycle Hook ist und wozu dieser ist. Du kennst, die verschiedenen Hooks und weisst wozu diese zuständig sind.  Angular Life Cycle Hook Lifecycle-Hooks ermöglichen es Entwicklern, Code zu spezifischen Zeitpunkten im Lebenszyklus eines Components auszuführen und somit den Component zu initialisieren, auf Änderungen zu reagieren und Aufräumarbeiten durchzuführen.\n  ngOnChanges: Wird aufgerufen, wenn einer oder mehrere Input-Properties eines Components sich ändern. Hier kann man auf die Änderungen reagieren und entsprechende Aktionen ausführen.\n  ngOnInit: Wird einmalig aufgerufen, nachdem Angular die Input-Properties initialisiert hat und bevor der Component gerendert wird. Hier kann man Initialisierungslogik ausführen, Daten abrufen oder Abhängigkeiten initialisieren.\n  ngDoCheck: Wird bei jedem Angular-Change-Detection-Durchlauf aufgerufen. Hier kann man benutzerdefinierte Änderungsüberprüfungen durchführen, um auf Änderungen zu reagieren, die Angular nicht automatisch erkennt.\n  ngAfterContentInit: Wird aufgerufen, nachdem der eingebettete Inhalt (Content) im Component initialisiert wurde. Hier kann man auf den eingebetteten Inhalt zugreifen und damit interagieren.\n  ngAfterContentChecked: Wird nach jedem Angular-Change-Detection-Durchlauf aufgerufen, nachdem der eingebettete Inhalt überprüft wurde. Hier kann man Aktionen ausführen, die nach der Überprüfung des eingebetteten Inhalts erforderlich sind.\n  ngAfterViewInit: Wird aufgerufen, nachdem die View (DOM) des Components initialisiert wurde. Hier kann man auf die gerenderte View zugreifen und damit interagieren.\n  ngAfterViewChecked: Wird nach jedem Angular-Change-Detection-Durchlauf aufgerufen, nachdem die View überprüft wurde. Hier kann man Aktionen ausführen, die nach der Überprüfung der View erforderlich sind.\n  afterNextRender: Wird einmal ausgeführt, sobald alle Komponenten das nächste Mal im DOM gerendert wurden. Diese kann man verwenden, um manuelle DOM-Operationen durchzuführen.\n  afterRender: Wird jedes Mal ausgeführt, wenn alle Komponenten im DOM gerendert wurden. Diese kann man verwenden, um manuelle DOM-Operationen durchzuführen.\n  ngOnDestroy: Wird aufgerufen, bevor ein Component zerstört wird. Hier kann man bereinigende Aktionen durchführen, Subscriptions beenden oder Ressourcen freigeben.\n  afterNextRender \u0026 afterRender Diese Funktionen unterscheiden sich von den anderen beschriebenen Lebenszyklus-Hooks. Anstatt einer Klassenmethode handelt es sich um eigenständige Funktionen, die einen Callback akzeptieren. Die Ausführung von Render-Callbacks ist nicht an eine bestimmte Komponenteninstanz gebunden, sondern erfolgt stattdessen über einen anwendungsweiten Hook.\n","categories":"","description":"Modul #F6 - Angular - Life Cycle Hook\n","excerpt":"Modul #F6 - Angular - Life Cycle Hook\n","ref":"/docs/web/angular/02_18_angular_life_cycle_hook/","tags":"","title":"Life Cycle Hook"},{"body":"Ziele  Du weisst, wie du Variablen deklarierst. Du weisst, wann du eine Variable mit var, let oder const deklarierst. Du kannst das “Object Destructuring Assignment” anwenden  Basics In JavaScript deklarierst du Variablen mit dem let- oder const-Keyword - egal welcher Typ die Variable haben wird.\nDas folgende Listing zeigt auf, wie du mit Variablen deklarieren und zuweisen (“assign”) kannst:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  let a = \"A\"; const b = \"B\"; console.log(a); \u003e\u003e\u003e A console.log(b) \u003e\u003e\u003e B a = \"AA\" console.log(a); \u003e\u003e\u003e AA b = \"BB\" \u003e\u003e\u003e Uncaught TypeError: Assignment to constant variable. at \u003canonymous\u003e:1:3   Wie du siehst, kannst du eine mit let deklarierte Variable verändern. Veränderst du eine const-Variable, wird ein Fehler geworfen.\n Als Grundsatz gilt: Verwende immer const, ausser du willst später der Variable im gleichen Scope (nächster Abschnitt) einen anderen Wert zuweisen. Dann verwende let.\n Die Verwendung von const per Default hat die Vorteile, dass so Side-Effects vermieden werden können, welche auf Grund des Neu-Zuweisens von Variablen geschehen können. Wenn du z.B. sehr viele Variablen in einer Funktion hast, müsstest du überprüfen, dass du zuerst sicherstellen, dass deine neue Variable keine bestehende Variable im gleichen Scope überschreibst. Verwendest du standardmässig const, wird dir ein Fehler geworfen, der dir dann direkt ins Auge sticht.\nJavaScript besitzt keine Typisierung JavaScript ist eine dynamisch typisierte Sprache, was bedeutet, dass die Typen der Variablen und Ausdrücke erst zur Laufzeit und nicht zur Kompilierungszeit festgelegt werden. Im Gegensatz dazu haben andere Sprachen wie Java, C++ und Python eine statische Typisierung, bei der der Typ einer Variablen oder eines Ausdrucks zur Kompilierungszeit festgelegt wird.\nIn JS können Variablen während der Laufzeit ohne Einschränkungen ihren Typ ändern. Beispielsweise kann eine Variable zunächst als String initialisiert werden und später im Code auf einen numerischen Wert aktualisiert werden. Dies liegt daran, dass JS die Datentypen von Variablen dynamisch zuweist und ihnen erlaubt, sich während der Laufzeit zu ändern.\nObwohl diese Flexibilität ein Vorteil von JS ist, kann sie auch zu unerwarteten Verhaltensweisen führen, wenn der/die Entwickler:in nicht aufpasst. In der Tat kann die mangelnde Typsicherheit in JS ein Nachteil sein, da sie dazu führen kann, dass sich Fehler erst zur Laufzeit manifestieren, anstatt dass sie bereits beim Kompilieren erkannt werden.\nHier siehst du, dass sich die Typen von Variablen während der Laufzeit verändern lassen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  let x = 5; // x = number x = 'Hello World;' // x = string  const object = { name: 'Max', age: 30 }; // object = Object object.hobbies = [\"Lesen\", \"Sport treiben\"]; // object kann ohne Probleme erweitert werden  function addNumbers(a, b) { return a + b; } // addNumbers kann mit number-Parametern aufgerufen werden: console.log(addNumbers(5, 10)); // 15  // addNumbers kann auch mit string-Parametern aufgerufen werden: console.log(addNumbers(\"5\", \"10\")); // '510'   Allerdings gibt es in modernen Versionen von JS (z.B. ab ES6) die Möglichkeit, (optionale) Typisierung durch das Verwenden von Typ-Annotationen oder TypeScript hinzuzufügen, welche einer statische Typisierung ähneln können. Dies kann helfen, die Lesbarkeit und die Sicherheit von Code zu erhöhen.\nScope Block-Scope Variablen, die mit const oder let definiert wurden, sind in ihrem Block-Scope sichtbar und verwendbar.\nEs ist sehr wichtig, dass du folgenden Code komplett verstehst und wieso es zum entsprechenden Resultat führt - und warum die Verwendung von const nicht zu einem Fehler führt:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  const a = \"File\"; console.log(1, a); function myFunction(a=\"Argument\") { console.log(2, a); if (true) { const a = \"if\"; console.log(3, a); } console.log(4, a); } myFunction(); console.log(5, a);   Dies produziert folgenden Output:\n1 2 3 4 5  1 File 2 Argument 3 if 4 Argument 5 File   Global Scope und Function Scope Vor ES6 kannte JavaScript keinen Block-Scope, sondern nur einen globalen Scope und einen Function Scope.\nUm das zu verstehen, lasse diesen Code einmal laufen:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  var a = 10; console.log(a); function myFunction(a = 20) { console.log(a); if (true) { var a = 21; console.log(a); for (var a = 30; a \u003c 33; a++){ console.log(a); for (var a = 40; a \u003c 44; a++) { console.log(a); } } console.log(a); } console.log(a); } myFunction(); console.log(a); var a = 11; console.log(a);   Du solltest dann folgende Zahlen im Output erhalten:\n1  10, 20, 21, 30, 40, 41, 42, 43, 45, 45, 10, 11   Wie du siehst, haben alle Variablen, die innerhalb einer Funktion mit var deklariert werden, den gleichen Scope: Das bedeutet, dass du z.B. eine var-Variable, die du ganz oben in der Funktion definierst, veränderst, wenn du eine gleichnamige später in einer for-Schleife mit var definierst.\nEinen solchen Function Scope haben nur Variablen, die mit var definiert wurden. Variablen, die mit let oder const definiert wurden, haben einen Block-Scope und sind daher innerhalb ihres Blocks (for/while-Schlaufe, if/else-Block, Funktion, Datei) definiert und sichtbar. In Java gilt der Block Scope immer.\nHierzu findest du eine Aufgabe im Lab (Aufgabe 4).\nWann var verwenden? Folgender Grundsatz gilt:\n Verwende nie var, ausser du musst sicherstellen, dass der Code in Browser funktioniert, welche vor 2015 aktualisiert worden sind.\n Wenn du wissen willst, wieso var nicht mehr verwendet werden sollte, dann kannst du dein Wissen hier vertiefen: https://medium.com/@codingsam/awesome-javascript-no-more-var-working-title-999428999994.\ntypeof Operator typeof ist ein Operator, der den Datentyp eines Ausdrucks oder einer Variablen zurückgibt. Er kann verwendet werden, um zu überprüfen, ob eine Variable einen primitiven Datentyp (inkl. string) hat, bevor eine Operation durchgeführt wird, die nur für diesen Datentyp geeignet ist.\ntypeof gibt einen String zurück, der den Datentyp des Operanden darstellt. Die möglichen Rückgabewerte sind:\n undefined für undefined-Werte boolean für boolesche Werte number für Zahlen string für Zeichenketten object für Objekte (einschließlich Arrays und null-Werten) function für Funktionen  1 2 3 4 5 6 7 8  typeof 42 // 'number' typeof 'hello' // 'string' typeof true // 'boolean' typeof undefined // 'undefined' typeof null // 'object' typeof [] // 'object' typeof {} // 'object' typeof function(){} // 'function'   Es ist wichtig zu beachten, dass typeof nicht immer genau den Datentyp zurückgibt, den man erwartet. Insbesondere gibt typeof null “object” zurück, obwohl null eigentlich kein Objekt ist. Es ist daher oft besser, zusätzlich zu typeof andere Überprüfungen durchzuführen, um sicherzustellen, dass eine Variable den erwarteten Datentyp hat.\ninstanceof Operator Auch der instanceof Operator wird verwendet, um festzustellen, ob ein Objekt von einem bestimmten Typ ist. Er gibt ein boolesches Ergebnis zurück, das angibt, ob das übergebene Objekt eine Instanz des angegebenen Typs ist.\nZu beachten ist das instanceof bei primitive Datentypen nicht geeignet, da sie keine Objekte sind, ist um festzustellen, ob die Variable von diesem Datentyp ist, dazu würde sich typeof besser eignen.\n1 2 3 4 5 6 7 8 9  const numberVar = 1 const stringVar = 'abc' const arrayVar = [1,2,3] const objectVar = {name: 'Max', age: 20} console.log(numberVar instanceof Number) // false console.log(stringVar instanceof String) // false console.log(arrayVar instanceof Array) // true console.log(objectVar instanceof Object) // true   Man kann jedoch instanceof und typeof kombinieren um sicherstellen, dass die Variable sowohl den erwarteten Datentyp als auch den Wertebereich entspricht.\n1 2 3 4 5 6 7 8 9  const numberVar = 1 const stringVar = 'abc' const arrayVar = [1,2,3] const objectVar = {name: 'Max', age: 20} console.log(numberVar instanceof Number || typeof numberVar === 'number') // true console.log(stringVar instanceof String || typeof stringVar === 'string') // true console.log(arrayVar instanceof Array) // true console.log(objectVar instanceof Object) // true   typeof vs. instanceof typeof ist besser geeignet, um primitive Datentypen wie Strings, Numbers und Booleans zu überprüfen.\ninstanceof ist hingegen besser geeignet, um den Datentyp von Objekten zu überprüfen, einschließlich Arrays, Funktionen und benutzerdefinierten Objekten. Oder auch zum Prüfen ein Objekt von einer bestimmten Klasse erstellt wurde.\nDestructuring Assignment In JavaScript siehst du sehr oft, dass mehrere Variablen auf einmal definiert werden.\nWie in anderen Programmiersprachen kannst du Variablen in einem einzigen Statement definieren (das ist kein Destructuring Assignment):\n1  const a = \"A\", b = \"B\";   Nun kommt es oft vor, dass du in einem einzigen Methodenaufruf mehrere Werte zurückbekommst - in Form eines Arrays/Liste oder in Form eines Objekts. Oft willst du dann die einzelnen Werte in eigene Variablen speichern. Wie du das machen kannst, wird in den nächsten zwei Unterkapitel behandelt:\nDestructuring Arrays Bekommst du ein Array und willst du z.B. den ersten und zweiten Wert aus einem Array je einer Variablen zuweisen, dann würdest du das normalerweise tun:\n1 2  const array = ['A', 'B']; const a = array[0], b = array[1];   Diese Schreibweise kannst du mit folgender Syntax vereinfachen:\n1  const [a, b] = ['A', 'B'];   Ist z.B. das erste Element ein Index/Key/Zeilen- bzw. Spaltenname/… und der Rest das eigentliche Array, dann hilft dir vielleicht diese Schreibweise:\n1  const [name, ...values] = [\"ColumnName\", 1, 2, 3, 4];   Hier hat name den Wert “ColumnName” und values ist das Array [1, 2, 3, 4].\nObject Destructuring Diese Schreibweise ist dir sicher schon einmal aufgefallen:\n1  const {a, b} = anotherObject;   Das ist auch ein ganz einfaches Prinzip. Wenn du nachfolgenden Code verstanden hast, dann weisst du alles, was du zu diesem Thema wissen musst:\n1 2 3 4 5 6  const object = {a: \"A\", b: \"B\", c: \"C\", d: \"D\"}; const {a: one, d, b} = object; console.log(one, b, d); \u003e\u003e\u003e A B D   In diesem Beispiel haben wir den Wert für a in die Variable one kopiert.\nWie du siehst, spielt hier die Reihenfolge der Variablen keine Rolle.\n Schritt-für-Schritt-Erklärung zum Beispiel Die ersten zwei Anweisungen könnten auch in einer zusammengefasst werden:\n1  const {a: one, d, b} = {a: \"A\", b: \"B\", c: \"C\", d: \"D\"};   Ignorieren wir zuerst die Variable a bzw. one.\n Auf der linken Seite deklarieren wir die Variablen d und b. Die Felder d und b aus dem Objekt auf der rechten Seite werden in die Variablen d und b auf der linken Seite kopiert.  Die Variablen auf der linken Seite müssen nicht zwingend in der gleichen Reihenfolge stehen wie auf der rechten Seite. Sie müssen lediglich gleich heissen.   Auf der linken Seite sieht a: one vielleicht noch verwirrend aus, vor allem wenn du bereits TypeScript kennst.  Diese bedeutet nur, dass du die Variable a von der rechten Seite in eine Variable mit einem anderen Namen one kopierst. Folglich hast du eine Variable one deklariert und zugewiesen. Eine Variable a hast du hier NICHT deklariert.   Anschliessend gibts du die Werte von one, b und d aus mit console.log(one, b, d);.  Hätten wir versucht, eine Variable a auszugeben, hätte das einen Fehler verursacht, weil keine solche Variable definiert wurde. Das Gleiche mit c.     ","categories":"","description":"Modul #F4 - JavaScript - Seit ES2015 (ES6) gibt es in JavaScript weitere neue Möglichkeiten, wie Variablen definiert werden können. Hier schauen wir uns einige davon an.\n","excerpt":"Modul #F4 - JavaScript - Seit ES2015 (ES6) gibt es in JavaScript …","ref":"/docs/web/javascript/19_variables/","tags":"","title":"ES6: Variablen deklarieren"},{"body":"Bist du bereit für das Exam? Wenn nein, dann darfst du gerne den CSS-Teil aus dem Intro to HTML and CSS - Udacity-Kurs anschauen.\nWenn du bereit bist, dann prüfe dein Wissen mit dem Exam.\nAnschliessend darfst du dich mit dem CSS-Framework Bootstrap vertraut machen. Dieses bietet sehr viele CSS-Klassen an, die nur darauf warten, von dir gebraucht zu werden. Diese reduzieren den Aufwand, den du ins Styling stecken müsstest, erheblich, und andere Entwickler:innen werden bei den Klassennamen auch besser verstehen, wofür sie gebraucht werden.\n","categories":"","description":"Modul #F3 - HTML und CSS - Genug Theorie! Wage dich ans Exam!\n","excerpt":"Modul #F3 - HTML und CSS - Genug Theorie! Wage dich ans Exam!\n","ref":"/docs/web/html_css/19_css_finish/","tags":"","title":"Abschluss"},{"body":"Motivation Seit ES2015 (ES6) gibt es in JavaScript die Möglichkeit, Exporte aus anderen JavaScript-Dateien zu importieren.\nZiele  Du weisst, wann du in JavaScript das Keyword import brauchen kannst. Du weisst, wie du exports importieren kannst. Du weisst, welche Variablen, Klassen, Methoden usw. in einer Datei “public” sind. Du kennst die Unterschiede zwischen default und named Exports/Imports.  Basics Was ist der Einfluss, wenn ein Browser eine JavaScript-Datei mit folgendem Inhalt ladet?\n1  var x = \"Gugus\";   Diese Datei bewirkt, dass in allen anderen Dateien evlt. auch diese omniöse Variable x verfügbar ist (natürlich abhängig davon, was zuerst geladen wird).\nDas kann in sehr vielen Hinsichten schlecht sein:\n Was, wenn in mehreren Dateien eine Variable x deklariert wird? Was, wenn wir diese Variable eigentlich gar nicht veröffentlichen wollten? Diese Variable ist möglicherweise in den Entwicklungstools ([F12]-Taste) in der Konsole direkt ohne Aufwand ersichtlich, ausles- und manipulierbar. Was, wenn du eine gleichnamige Variable aus einer anderen Datei benötigst?  Um viele solche Probleme aus dem Weg zu gehen, wurde in ES6 (ECMAScript 2015, JavaScript Standard) JavaScript Modules eingeführt.\nHast du in einer JavaScript-Datei Variablen, Funktionen oder Klassen, die du in einer anderen Datei brauchen willst, dann kannst du das wie folgt tun:\n1 2 3 4 5 6 7  export const a = \"A\"; export const b = \"B\"; export class Person { name; constructor(name) { this.name = name;} }   Nun kannst du diese Variablen in einer anderen JavaScript-Datei wie folgt importieren:\n1  import { a, b, Person } from \"./path/to/your/file.js\";   Imports in HTML-Dateien Vielleicht kommst du mal aus irgendeinem Grund in die Situation, in welcher du im Browser ohne JS-Framework wie React oder Angular ein JavaScript-Modul laden musst. Das kannst du das im HTML wie folgt ganz einfach machen:\n1 2 3 4 5 6  \u003cscript type=\"module\"\u003e import {a, b, Person } from \"./file.js\"; console.log(a, b, new Person('Monkey Puppet')); \u003c/script\u003e   Beachte, dass die type-Angabe im \u003cscript\u003e-Tag zwingend ist und dass die Imports nur innerhalb dieses \u003cscript\u003e-Tags verfügbar sind.\nMöchtest du ohne die Angabe von type=\"module\" Variablen importieren (z.B. in den Browser-DevTools), dann kannst du das import-Keyword nicht wie gewöhnlich benutzen. Importieren kannst du auf folgende Art und Weise:\n1  const {a, b, Person } = await import('./file.js');   Hier hast du import(...) wie eine Funktion verwendet. Weil diese “Funktion” ein Promise zurückgibt (da sie das Modul asynchron lädt), sollte hier der Import awaited werden. So kann sichergestellt werden, dass der später folgende Code erst aufgerufen wird, nachdem das Modul komplett geladen wurde. Falls du dich nicht mit async und await auskennst, solltes du den Abschnitt “Asynchrone Anfragen” noch einmal anschauen.\ndefault Ex- und Importe Das ES6-Modul-System unterscheidet zwischen default und “named” Exporten:\n Eine Datei kann mehrere named-Exporte haben. Alle Exporte bis hier auf der Seite sind named Exporte. Eine Datei kann aber nur einen default Export besitzen. Wenn eine Datei z.B. nur etwas exportieren soll, dann eignet sich ein default-Export hierfür.  Angenommen, wir haben z.B. eine Datei “person.js”, die eine Klasse und ein paar Utility-Funktionen zu dieser Klasse anbietet, dann könnten die Exporte wie folgt aussehen:\n1 2 3 4 5 6 7 8 9 10 11  export default class Person { name; constructor(name) { this.name = name;} } export function personFromJson(jsonString){ const obj = JSON.parse(jsonString); return new Person(obj.name); } export function getNameOfPerson(person){ return person.name; };   Dies wiederum könnte z.B. wie folgt importiert werden:\n1 2 3 4 5 6 7 8  import ClassForPerson, { personFromJson, getNameOfPerson } from \"./person.js\"; const person = personFromJson('{\"name\": \"Mr. Incredible\"}'); console.log(getNameOfPerson(person)); \u003e\u003e\u003e Mr. Incredible console.log(person instanceof ClassForPerson); \u003e\u003e\u003e true   Wie du hier sehen kannst, können wir den default-Export mit irgendeinem Namen importieren, der nicht mit dem Namen in der Export-Datei übereinstimmen muss.\n","categories":"","description":"Modul #F4 - JavaScript - Von anderen JavaScript-Dateien importieren\n","excerpt":"Modul #F4 - JavaScript - Von anderen JavaScript-Dateien importieren\n","ref":"/docs/web/javascript/20_imports/","tags":"","title":"ES6: Importe"},{"body":"In Frontend-Projekten wirst du dich immer wieder fragen, ob bereits ein Objekt gleich gestylt wurde wie eines, welches du gerade stylen möchtest. Du wirst es aber vielleicht nicht finden oder du schreibst die genau gleiche Regel ein weiteres Mal. Das führt dazu, dass im Code sehr viele CSS-Leichen zu finden sein werden.\nUm diesem Problem entgegenzuwirken, verwendet man oft eine CSS-Datei, die für das ganze Projekt gelten soll.\nWenn du aber oft das Projekt wechselst, wirst du aber nicht den Überblick haben oder bekommen, was für ein Konzept früher im CSS-Code versucht wurde umzusetzen.\nAus diesem Grund kann es Sinn machen, projekt-übergreifend ein gleiches CSS-Framework zu verwenden, wo die gleichen CSS-Klassen immer gleich heissen.\nHier kommt Bootstrap ins Spiel: Es bietet viele CSS-Klassen bereits an und vereinfacht komplexes Styling teilweise extrem. Z.B. kannst du komplett mühelos Accordions (bzw. Tabs) erstellen, die dann beim Klick auf deren Titel ihren Inhalt dann anzeigen/verstecken inkl. Animation.\nBootstrap Bootstrap wird in sehr vielen Projekten bereits benutzt. Und so einfach kannst du es auch in deine HTML-Dateien einbinden:\n1 2 3 4 5  \u003c!-- Latest compiled and minified CSS --\u003e \u003clink href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\u003e \u003c!-- Latest compiled JavaScript --\u003e \u003cscript src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\"\u003e\u003c/script\u003e   Eine grosse Stärke von Bootstrap ist es, dass sich deine Seite ‘responsive’ verhält: Du kannst mit einer CSS-Klasse (col-md-4 z.B.) definieren, dass ein Element im Normalfall 4/12 der Breite einnimmt (4 ist in der Klasse angegeben, Bootstrap arbeitet mit 12 Spalten). Ist dein Browser weniger breit als eine bestimmte Weite (md -\u003e medium), so werden dann die Elemente automatisch untereinander angezeigt.\nDa wir vermehrt Bootstrap einsetzen möchten, empfehlen wir dir, Bootstrap anzuschauen. Hier findest du ein Tutorial zur aktuellen Version: https://www.w3schools.com/bootstrap5/index.php.\nBitte probiere folgendes so aus, dass du es anwenden kannst:\n GET Started Containers Grid Basic Tables Buttons Collapse Flex  Bei den folgenden solltest du einfach wissen, dass Bootstrap hierfür auch eine Lösung bereitstellt:\n Colors Images Alerts Button Groups Badges Progress Bars \u0026 Spinners Pagination List Groups Cards Dropdowns Navbar Carousel Modal Tooltip Popover Toast Scrollspy Utilities alles unter Forms  Hierzu findest du eine Aufgabe im Lab.\n","categories":"","description":"Modul #F3 - HTML und CSS - Einmal CSS schreiben genügt! Brauch ein CSS-Framework, damit wir nicht immer wieder die gleichen CSS-Regeln schreiben.\n","excerpt":"Modul #F3 - HTML und CSS - Einmal CSS schreiben genügt! Brauch ein …","ref":"/docs/web/html_css/20_css_bootstrap/","tags":"","title":"Bootstrap"},{"body":"Ziele  Du kennst, die verschiedenen Angular Data Bindings und kannst diese umsetzen.  Angular Data Bindings Interpolation  Anhand von diesem One-Way Binding kann man Properties des Components im Template anzeigen. Wenn sich das Property im Component ändert, wird das Template aktualisiert, um die neuen Änderungen anzuzeigen.  1 2 3 4 5 6 7 8 9 10  import { Component } from '@angular/core'; @Component({ selector: 'app-greeting', templateUrl: './app-greeting.component.html', styleUrls: ['./app-greeting.component.scss'] }) export class GreetingComponent { name: string = 'Dragon Warrior'; }   1 2  \u003c!--app-greeting.component.html--\u003e \u003ch1\u003eHello, {{ name }}!\u003c/h1\u003e   Event Binding  Event Binding ist definiert als das Aktualisieren/Senden des Werts/der Information einer bestimmten Variablen vom Template zum Component.\nZum Beispiel das Klicken eines Buttons.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  import { Component } from '@angular/core'; import { WeaponService } from 'src/app/services/weapon.service'; @Component({ // .. }) export class WeaponComponent { chosenWeapon: string = ''; weapons: string[] = []; constructor(private weaponService: WeaponService) {} ngOnInit() { this.weapons = this.weaponService.getWeapons(); const index = Math.floor(Math.random() * this.weapons.length); this.chosenWeapon = this.weapons[index]; } choseNewWeapon() { const index = Math.floor(Math.random() * this.weapons.length); this.chosenWeapon = this.weapons[index]; } }   1 2 3  \u003c!--app-weapon.component.html--\u003e \u003cbutton (click)=\"choseNewWeapon()\"\u003eChoose New Weapon\u003c/button\u003e   Property Binding  Anhand von Property Bindings können wir einen Wert unseres Components auf eine Eigenschaft eines Elements binden. Wenn sich also der bestimmte Wert im Component verändern sollte, wird dies im Template aktualisiert.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import { Component } from '@angular/core'; import { WeaponService } from 'src/app/services/weapon.service'; @Component({ // .. }) export class WeaponComponent { // ..  isButtonDisabled: boolean = false; // ..  toggleButtonDisabled() { this.isButtonDisabled = !this.isButtonDisabled; } }   1 2 3  \u003c!--app-weapon.component.html--\u003e \u003cbutton (click)=\"chooseNewWeapon()\" [disabled]=\"isButtonDisabled\"\u003eChoose New Weapon\u003c/button\u003e \u003cbutton (click)=\"toggleButtonDisabled()\"\u003eToggle Button Disabled\u003c/button\u003e   Two-Way-Binding  Two-Way-Binding ist eine Kombination aus Property- und Eventbinding. Daten werden kontinuierlich synchronisiert: vom Template zum Component und vom Component zum Template. Dies bedeutet also, dass Änderungen, die an den Daten des Components vorgenommen wurden, werden mit dem Template synchronisiert und sofort aktualisiert. Umgekehrt funktioniert es auf dieselbe Weise, daher auch der Name “Two-Way-Binding”.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import { Component } from '@angular/core'; @Component({ selector: 'app-ng-model', templateUrl: './app-ng-model.component.html', styleUrls: ['./app-ng-model.component.scss'] }) export class TriumphsComponent { @Input() title: string = \"\"; // ..  getValue(event: Event): string { return (event.target as HTMLInputElement).value; } }   1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u003c!--app-triumphs.component.html--\u003e \u003cdiv\u003e \u003cp\u003e \u003cinput [value]=\"title\" (input)=\"title = getValue($event)\" /\u003e \u003c/p\u003e \u003cp\u003e \u003cinput [(ngModel)]=\"title\" /\u003e \u003c/p\u003e \u003cp\u003e \u003cinput [ngModel]=\"title\" (ngModelChange)=\"title = $event\" /\u003e \u003c/p\u003e \u003c/div\u003e   Wichtig im app.module.ts muss man das FormsModule bei den imports hinzufügen damit man ngModelverwenden kann\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  import { BrowserModule } from '@angular/platform-browser'; import { NgModule } from '@angular/core'; import { FormsModule } from '@angular/forms'; // \u003c--- import FormsModule  import { AppComponent } from './app.component'; import { NgModelComponent } from './ng-model.component'; @NgModule({ declarations: [ AppComponent, NgModelComponent ], imports: [ BrowserModule, FormsModule // \u003c--- import into the NgModule  ], providers: [], bootstrap: [AppComponent] }) export class AppModule { }   ","categories":"","description":"Modul #F6 - Angular - Data Bindings\n","excerpt":"Modul #F6 - Angular - Data Bindings\n","ref":"/docs/web/angular/03_1_angular_data_binding/","tags":"","title":"Data Bindings"},{"body":"Motivation Seit ES2015 (ES6) gibt es in JavaScript die Möglichkeit, den Parametern von Methoden einen Default-Wert zu geben.\nZiele  Du weisst, wie du in JavaScript optionale Argumente in einem Parameter einen Default-Wert zuweisen kannst. Du weisst, wie du Named Arguments in Parameter verwenden kannst.  Basics Methoden (und daher auch Konstruktore) besitzen oft Werte, die zwingend übergeben werden müssen und welche, die optional sind.\nBeim nächsten Beispiel wäre z.B. der Name bei einer Person zwingend, das Alter, Geschlecht und sein/ihr Verhältnis zu JavaScript optional:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  class Person { name; age; gender; lovesJavaScript; constructor(name, age = undefined, gender = undefined, lovesJavaScript = true) { this.name = name; this.age = age; this.gender = gender; this.lovesJavaScript = lovesJavaScript; } } // Hier wollen wir eine Person erstellen, kennen aber das Alter, Geschlecht und seine Beziehung zu JS nicht: new Person(\"Colonel Toad\"); \u003e\u003e\u003e Person {name: 'Colonel Toad', age: undefined, gender: undefined, lovesJavaScript: true} // Hier wollen wir neben dem Namen nur das Alter setzen: new Person(\"Sweating Towel Guy\", 44); \u003e\u003e\u003e Person {name: 'Sweating Towel Guy', age: 44, gender: undefined, lovesJavaScript: true} /// Möchtest du das letzte Argument setzen, dann musst du die vorherigen Variablen auch setzen: new Person(\"Man Ray\", null, null, false); \u003e\u003e\u003e Person {name: 'Man Ray', age: null, gender: null, lovesJavaScript: false}   Mit dieser Lösung hast du zwar eine Lösung, das die Präferenz einer Person bez. JavaScript speichert, auch wenn nur ein Name angebeben wird. Aber was wäre, wenn du Eine Person erstellen möchtest mit einem Geschlecht, aber das Alter nicht angeben möchtest?\nHierfür bieten sich dann Named Parameters an:\nNamed Parameters Dank dem Object Destructuring aus ES6 kannst du alle optionale Argument einzeln zuweisen bzw. überspringen. Das könnte wie folgt aussehen:\n1 2 3 4 5 6 7 8 9 10 11 12  class Person { constructor(name, {age = undefined, gender = undefined, lovesJavaScript = true}) { this.name = name; this.age = age; this.gender = gender; this.lovesJavaScript = lovesJavaScript; } } new Person(\"Steven Crowder\", {gender: \"male\"}); \u003e\u003e\u003e Person {name: 'Steven Crowder', age: undefined, gender: 'male', lovesJavaScript: true}   ","categories":"","description":"Modul #F4 - JavaScript - Funktionen mit optionalen Argumenten\n","excerpt":"Modul #F4 - JavaScript - Funktionen mit optionalen Argumenten\n","ref":"/docs/web/javascript/21_optional_args/","tags":"","title":"ES6: Optionale Argumente in Methoden und Konstruktoren"},{"body":"Ziele  Du weisst, was Pipes sind und wozu man sie benötigt. Du kennst, die verschiedenen Arten von Pipes und wie man sie anwendet. Du kannst, selbst Custom Pipes erstellen.  Pipes Jede Anwendung beginnt mit einer scheinbar einfachen Aufgabe: Daten abrufen, transformieren und Benutzern zeigen. Das Abrufen von Daten kann so einfach wie das Erstellen einer lokalen Variablen oder so komplex wie das Streamen von Daten über ein WebSocket sein. Sobald Daten eingehen, könnte man ihre rohen toString-Werte direkt in die View übertragen. Dies führt jedoch selten zu einer guten user experience. In den meisten Anwendungsfällen bevorzugen Benutzer beispielsweise die Anzeige eines Datums in einem einfachen Format wie 15. January 1929 anstelle des rohen Stringformats Tu 15. January 1929 00:00:00 GMT-0700 (Pacific Daylight Time).\nEs ist klar, dass einige Werte von etwas Bearbeitung profitieren. Viele der Transformationen werden sowohl innerhalb als auch zwischen Anwendungen wiederholt. Dazu sind Pipes sehr praktisch. Man kann sie sich fast als Stile vorstellen.\nEine Pipe nimmt Daten als Eingabe auf und wandelt sie in eine gewünschte Ausgabe um. In diesem Beispiel verwenden wir Pipes, um das Datum der Geburtstage eines Components in ein leserliches Datum umzuwandeln.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import {Component} from '@angular/core'; @Component({ // .. }) export class BirthdaysComponent { // ..  datesOfBirth: Date[] = [ new Date(1412, 0, 23), new Date(1823, 2, 12), new Date(1945, 3, 20), new Date(2023, 10, 20), ]; // .. }   1 2 3  \u003cdiv *ngFor=\"let birthday of birthdays; let i = index\"\u003e \u003cp\u003e{{ birthday }}, {{ datesOfBirth[i] | date }}\u003c/p\u003e \u003c/div\u003e   Parametrisierte Pipes Eine Pipe kann eine beliebige Anzahl optionaler Parameter akzeptieren, um ihre Ausgabe zu optimieren. Um einer Pipe Parameter hinzuzufügen, fügen wir nach dem Pipe-Namen einen Doppelpunkt (:) und danach den Parameterwert (z. B. date: MMM/dd/yy) hinzu. Wenn die Pipe mehrere Parameter akzeptiert, trennen wir die Werte durch Doppelpunkte (z. B. Slice: 1: 5).\nUnser Beispiel von vorher könnten wir z.B. so ausgeben:\n1 2 3  \u003cdiv *ngFor=\"let birthday of birthdays; let i = index\"\u003e \u003cp\u003e{{ birthday }}, {{ datesOfBirth[i] | date:\"MMM/dd/yy\" }}\u003c/p\u003e \u003c/div\u003e   Chaining Pipes Wir können Pipes in nützlichen Kombinationen miteinander verketten. Im folgenden Beispiel wird der Geburtstag an die DatePipe und an die UpperCasePipe angekettet, um den Geburtstag in Grossbuchstaben anzuzeigen.\n1 2 3  \u003cdiv *ngFor=\"let birthday of birthdays; let i = index\"\u003e \u003cp\u003e{{ birthday }}, {{ datesOfBirth[i] | date: \"MMM/dd/yy\" | uppercase }}\u003c/p\u003e \u003c/div\u003e   Das Datum wird nun so angezeigt: APR/20/45\nAsyncPipe Die AsyncPipe wird verwendet, um Observables oder Promises im Template zu subscriben und automatisch zu aktualisieren, sobald neue Werte verfügbar sind.\n1 2 3  \u003cp\u003e{{ myObservableData$ | async }}\u003c/p\u003e \u003cp\u003e{{ myPromiseData | async }}\u003c/p\u003e \u003cp\u003e{{ myObservableData$ | async | uppercase }}\u003c/p\u003e   Custom Pipes Für spezielle Anwendungsfälle können wir auch unsere eigenen Pipes schreiben.\nWir können Beispielsweise die Schreibweise eines Strings anhand einer Custom Pipe im Template verändern.\n1  \u003cli *ngFor=\"let birthday of birthdays\"\u003e{{ birthday | capitalize }}\u003c/li\u003e   Der Code für die Custom Pipe dieses Beispiels würde so aussehen:\n1 2 3 4 5 6 7 8 9 10 11 12 13  import { Pipe, PipeTransform } from '@angular/core'; @Pipe({ name: 'capitalize' }) export class CapitalizePipe implements PipeTransform { transform(value: string): string { if (value) { return value.charAt(0).toUpperCase() + value.slice(1); } return ''; } }    Um Angular mitzuteilen, dass dies eine Pipe ist, wenden wir den @Pipe Decorator an, welchen wir aus @angular/core importieren. Die Pipe-Klasse implementiert die Methode transform des PipeTransform Interface, die einen Eingabewert gefolgt von optionalen Parametern akzeptiert und den transformierten Wert zurückgibt. Für jeden an die Pipe übergebenen Parameter gibt es ein zusätzliches Argument für die Methode transform. Unsere Pipe hat einen solchen Parameter: die extension. Mit dem @Pipe Decorator können wir den Pipe-Namen definieren, welchen wir im Template verwenden.  ","categories":"","description":"Modul #F6 - Angular - Pipes\n","excerpt":"Modul #F6 - Angular - Pipes\n","ref":"/docs/web/angular/03_2_angular_pipes/","tags":"","title":"Pipes"},{"body":"Ziele  Du weisst, was Decorators in Angular sind. Du kennst, die verschiedenen Decorators von Angular und kannst diese anwenden.  Decorators Decorators sind spezielle Funktionen, die verwendet werden, um zusätzliche Informationen zu einer Klasse, Methode oder Eigenschaft hinzuzufügen oder das Verhalten davon zu ändern. Sie helfen dabei, den Code besser zu organisieren und bestimmte Aufgaben automatisch auszuführen.\nFolgende sieben Decorators sind in Angular die meistverwendeten:\n  @Component: Der @Component-Decorator wird verwendet, um den Component zu definieren.\n  @Directive: Der @Directive-Decorator wird verwendet, um eine Directives zu definieren.\n  @Injectable: Der @Injectable-Decorator wird verwendet, um einen Service zu definieren, er wird aber auch bei Dependency Injection verwendet.\n  @Input: Der @Input-Decorator wird verwendet, um eine Eingabeeigenschaft in eines Components oder Directive zu definieren.\n  @Output: Der @Output-Decorator wird verwendet, um eine Ausgabeeigenschaft in eines Components oder Directive zu definieren.\n  @ViewChild: Der @ViewChild-Decorator wird verwendet, um auf ein Child-Element in eines Components zuzugreifen.\n  @ViewChildren: Der @ViewChildren-Decorator wird verwendet, um auf eine Liste von Child-Elementen in einen Component zuzugreifen.\n  @Component Der @Component-Decorator wird verwendet, um einen Component zu definieren. Er ist einer der wichtigsten Decorators und enthält Metadaten, die Angular dabei helfen, den Component zu verstehen und zu rendern.\nEr wird über der Klassen-Deklaration platziert und enthält ein Objekt mit verschiedenen Eigenschaften:\n  selector: Der selector gibt an, wie der Component in HTML-Dateien referenziert wird. Im folgenden Beispiel wäre das \u003capp-my-component\u003e\u003c/app-my-component\u003e, damit kann man den Components in anderen Templates verwenden.\n  templateUrl (oder template): Der templateUrl-Eigenschaftswert gibt den Pfad zur HTML-Datei an, die das Template des Components enthält. Alternativ kann man auch die template-Eigenschaft verwenden, um das Template direkt innerhalb des @Component-Decorators zu definieren, das sollte jedoch vermieden werden.\n  styleUrls (oder styles): Die styleUrls-Eigenschaft gibt ein Array von CSS-Dateipfaden an, die für den Component gelten sollen. Man kann auch die styles-Eigenschaft verwenden, um den CSS-Code direkt im @Component-Decorator einzufügen, dies sollte jedoch vermieden werden.\n  1 2 3 4 5 6 7 8 9 10  import { Component } from '@angular/core'; @Component({ selector: 'app-greeting', templateUrl: './greeting.component.html', styleUrls: ['./greeting.component.scss'] }) export class GreetingComponent { // gesamte Compoenentlogik }   @Input Der @Input-Decorator ermöglicht es, Daten von einem übergeordneten Component (Parent) an einen untergeordnete Component (Child) zu übergeben. Somit wird die Kommunikation zwischen den Components erleichtern\n1 2 3 4 5 6 7 8 9  import { Component, Input } from '@angular/core'; @Component({ // .. }) export class TriumphsComponent { @Input() title: string = \"\"; @Input() triumphs: string[] = []; }   Um die Eingabeeigenschaft zu verwenden und Daten vom Parent zu erhalten, verwendet man die Property-Bindingsyntax im Parent.\n1  \u003capp-triumphs *ngIf=\"hasTriumphs\" [title]=\"'Triumphs'\" [triumphs]=\"triumphs\"\u003e\u003c/app-triumphs\u003e   required Seit Angular 17 bietet @Input die Möglichkeit ein Input als benötigt zu markieren. Der Required-Status wird dadurch dann durch den Compiler geprüft und ein Fehler geworfen, falls der Input nicht angegeben wird.\n1 2 3 4 5 6 7 8 9  import { Component, Input } from '@angular/core'; @Component({ // .. }) export class TriumphsComponent { @Input({ required: true }) title: string; @Input() triumphs: string[] | null; }   Somit wäre hier der Input triumphs nicht nötig, title hingegen schon.\n1  \u003capp-triumphs *ngIf=\"hasTriumphs\" [title]=\"'Triumphs'\"\u003e\u003c/app-triumphs\u003e   transform Auch mit Angular 17 wurde auch transform hinzugefügt, diese Option kann den eingegebenen Wert ähnlich wie eine Pipe umwandeln. Ein gutes Beispiel dafür ist, wenn eine Grössenangabe gemacht werden muss. Hier kann einfach die Zahl angegeben werden und der Input wird automatisch in Pixel umgewandelt.\n1 2 3 4 5 6 7  @Component({...}) export class CustomSlider { @Input({transform: appendPx}) widthPx: string = ''; } function appendPx(value: number) { return `${value}px`; }   @Output Mit dem @Output-Decorator kann ein Component Ereignisse an den übergeordneten Component (Parent) senden und mitteilen, dass etwas im Component (Child) geschehen ist.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import { Component, Output, EventEmitter } from '@angular/core'; @Component({ // .. }) export class TriumphsComponent { // ..  @Output() titleChange: EventEmitter\u003cstring\u003e = new EventEmitter\u003cstring\u003e(); // ..  onTitleChange(value: string) { this.title = value; this.titleChange.emit(value); } }   1  \u003cinput [ngModel]=\"title\" (ngModelChange)=\"onTitleChange($event)\" /\u003e   Um das Ereignis im Parent zu empfangen und darauf zu reagieren, wird das Event-Binding verwendet.\n1 2  \u003cp\u003e Triumphpage Titel: {{ triumphTitel }}\u003c/p\u003e \u003capp-triumphs *ngIf=\"hasTriumphs\" [title]=\"'Triumphs'\" [triumphs]=\"triumphs\" (titleChange)=\"handleTitleChange($event)\"\u003e\u003c/app-triumphs\u003e   @ViewChild @ViewChild wird verwendet, um auf ein Element oder ein Directive in der View eines Components zuzugreifen. Der @ViewChild-Decorator wird normalerweise zusammen mit einer Template-Referenzvariable verwendet, um das gewünschte Element oder das gewünschte Directive zu identifizieren.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import { Component, ViewChild, ElementRef } from '@angular/core'; @Component({ // .. }) export class GreetingComponent implements AfterViewInit { @ViewChild('triumphsComponent') triumphsComponent!: TriumphsComponent; ngAfterViewInit() { this.triumphsComponent.datesOfTriumph.forEach((date) =\u003e { console.log(date); }) } }   1  \u003capp-triumphs #triumphsComponent *ngIf=\"hasTriumphs\" [title]=\"'Triumphs'\" [triumphs]=\"triumphs\" (titleChange)=\"handleTitleChange($event)\"\u003e\u003c/app-triumphs\u003e   Auf das Element sollte dann erst in der ngAfterViewInit-Lifecycle-Hook-Methode zugegriffen werden, da dieser Hook erst ausgelöst wird wenn die View initialisiert wurde.\n@ViewChildren Es gibt auch den @ViewChildren-Decorator, der ähnlich wie der @ViewChild-Decorator funktioniert, jedoch verwendet wird, um auf mehrere Elemente oder Directives in der View eines Components zuzugreifen.\nDer @ViewChildren-Decorator wird normalerweise zusammen mit einem Selektor oder einer Klasse verwendet, um die gewünschten Elemente oder Directives zu identifizieren. Das Ergebnis ist eine QueryList, die eine Sammlung der gefundenen Elemente oder Directives darstellt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  import { Component, ViewChildren, QueryList, ElementRef } from '@angular/core'; @Component({ // .. }) export class TriumphsComponent implements AfterViewInit { @ViewChildren('triumphElements') triumphElements!: QueryList\u003cElementRef\u003e; // ..  datesOfTriumph: Date[] = [ new Date(1412, 0, 23), new Date(1823, 2, 12), new Date(1945, 3, 20), new Date(2023, 10, 20), ]; // ..  ngAfterViewInit(): void { this.triumphElements.forEach((triumph) =\u003e { console.log(triumph.nativeElement); }); } // .. }   1  \u003cdiv *ngFor=\"let element of elements\" #element\u003e{{ element }}\u003c/div\u003e   ","categories":"","description":"Modul #F6 - Angular - Decorators.\n","excerpt":"Modul #F6 - Angular - Decorators.\n","ref":"/docs/web/angular/03_3_angular_decorator/","tags":"","title":"Decorators"},{"body":"Motivation Wenn du existierende Funktionen benutzen möchtest, dann wäre es praktisch, wenn deine IDE dir mitteilt, was die Funktion tut und welche Typen die Parameter haben. Dies kannst du mit JSDoc erreichen.\nZiele  Du weisst, wie du in JavaScript bei Klassen und Funktionen eine Beschreibung hinzufügen kannst, die dir deine Entwicklungsumgebung anzeigt, wenn du mittels Auto-Completion diese Variable auswählst. Du weisst, wie du in JavaScript eine Typ-Angabe machen kannst (die aber zur Laufzeit nichts tut).  Basics In TypeScript kannst du jeder Variable einen Typ, jeder Funktion einen Rückgabewert zuweisen. Dies kannst du in JavaScript nicht so einfach.\nTrotzdem kannst du dank dem JSDoc-Projekt (https://jsdoc.app/about-getting-started.html) Typ-Angaben machen, damit deine Entwicklungsumbegung reklamiert, wenn z.B. in einer Funktion ein Wert eines falschen Types übergeben wird.\nIn nächsten Beispiel siehst du, wie du in einer Funktion die Typen spezifizieren kannst:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  /** * Diese Funktion leitet die Argumente dem Konstruktor der Klasse `Person` weiter. * @param {string} name Der Name der Person * @param {Object} namedArgs (Eigentlich unnötig, wird aber als Label für Referenz auf die named Parameter benötigt) * @param {number} [namedArgs.age] Alter * @param {string} [namedArgs.gender] Geschlecht, darf irgend ein String sein. * @returns {Person} Ein Personen-Objekt mit den übergebenen Werten. */ function createPerson(name, { age = undefined, gender = undefined }) { return new Person(name, { age: age, gender: gender, }) }   Deine Entwicklungsumgebung könnte diese Informationen nun auch anzeigen:\nTags Im vorherigen JSDoc wurden viele Tags verwendet. Hier eine Übersicht zu den wichtigsten:\n @param: Damit wird ein Parameter beschrieben @returns: Damit wird der Rückgabewert beschrieben {number}: Das ist eine Typangabe. Hier musste das Argument eine Zahl sein. [namedArgs.gender]: Die eckigen Klammern spezifizieren das Argument als optional (nullable). Ansonsten sollten die Argument nicht den Wert undefined oder null haben.  Eine Auflistung von JSDoc-Tags findest du auch hier: https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html\nFehler anzeigen, wenn Typen falsch sind In VS Code gibt es die Möglichkeit, dass die IDE reklamiert, wenn du Werte des falschen Typs übergibst.\nUm hiervon Gebrauch zu machen, kann im Projekt-Verzeichnis eine jsconfig.json-Datei angelegt werden. Folgende Konfiguration könnte für Browser-Anwendungen Sinn ergeben, wenn sich die JS-Dateinen im Ordner “${workspaceFolder}/static/js/” (nur ein Beispiel, kann natürlich auch etwas anderes Sein) befinden:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  { \"compilerOptions\": { \"module\": \"commonjs\", \"target\": \"es6\", \"baseUrl\": \".\", \"checkJs\": true, \"importHelpers\": true, \"lib\": [ \"DOM\", \"ES2021\", \"DOM.Iterable\" ] }, \"exclude\": [ \"node_modules\" ], \"include\": [ \"static/js/*\" ] }   Dank dieser Konfiguration würde dir VS Code nun einen Fehler anzeigen, wenn du statt einem string eine number übergeben würdest:\n","categories":"","description":"Modul #F4 - JavaScript - Funktionen mit einer Beschreibung versehen.\n","excerpt":"Modul #F4 - JavaScript - Funktionen mit einer Beschreibung versehen.\n","ref":"/docs/web/javascript/22_jsdoc/","tags":"","title":"JSDoc"},{"body":"Ziele  Du weisst was Angular Reactive Forms sind. Du weisst, wozu FormsControl, -Group und -Array sind und kannst sie anwenden. Du weisst, was der FormBuilder ist und kannst ihn anwenden. Du kennst, die Validators und kannst sie verwenden und eigene schrieben.  Angular Reactive Forms Angular Reactive Forms sind ein leistungsstarkes Feature von Angular, mit dem Entwickler Formulare erstellen, validieren und mit ihnen interagieren können. Im Gegensatz zu Template-driven Forms, bei denen die Formularlogik hauptsächlich im HTML-Template liegt, wird bei Reactive Forms die Formularlogik in den Components selbst geschrieben.\nDoch wieso sollte man Forms verwenden? Dies hört sich nun sehr ähnlich an wie ngModel, doch wieso sollte man besser Reactive Forms verwenden? Dazu gibt es folgende Gründe:\n Reactive Forms ermöglichen eine klare Trennung zwischen Datenmodell und View. Man erstellt ein separates FormGroup-Objekt, das die Struktur und Validierung der Formulardaten definiert. Dieses Datenmodell kann unabhängig von dem View-Components existieren und ermöglicht eine bessere Organisation und Wiederverwendbarkeit des Codes. Mit Reactive Forms hat man volle Kontrolle über die Formulare, da man FormControls und FormGroups programmatisch erstellen und manipulieren kann. Man kann dynamisch Formularfelder hinzufügen, entfernen oder ändern, Validierungsregeln anpassen und auf Ereignisse reagieren. Reactive Forms bieten eine umfangreichere Unterstützung für komplexe Validierungsszenarien. Man kann benutzerdefinierte Validatoren erstellen oder viele bereits existierende verwenden.  Insgesamt bietet die Verwendung von Reactive Forms eine flexiblere, leistungsfähigere und besser strukturierte Möglichkeit, Formulare in Angular zu verwalten. Es ermöglicht eine bessere Kontrolle, erweiterte Validierungsoptionen und eine klarere Trennung zwischen Datenmodell und View-Komponente.\nImportieren in Module Bevor man Reactive Forms verwenden kann muss man die ReactiveFormsModule in das Modul, in dem man Reactive Forms verwenden möchte importieren.\n1 2 3 4 5 6 7  import { ReactiveFormsModule } from '@angular/forms'; @NgModule({ imports: [ReactiveFormsModule], // .. }) export class AppModule { }   Forms Control Ein FormControl ein Objekt, das ein einzelnes Formularelement repräsentiert und steuert. Es ermöglicht die Verwaltung des Werts, der Validierung und des Zustands des Formularelements.\nWenn man ein FormControl verwenden möchte kann man dieses mittels new FormControl('') einer Variable zuweisen. Dadurch ist die Variabel nun das FormControl. Damit man es nun im HTML verwenden kann um es zu Binden muss man bei einem input-tag [formControl]=\"\" verwenden in die \"\" kommt dann der Variabelname des FormControls.\n1 2 3 4 5 6 7 8 9 10 11 12 13  import { Component } from '@angular/core'; import { FormControl } from '@angular/forms'; @Component({ // .. }) export class TriumphsComponent implements AfterViewInit { // ..  triumphForm: FormControl = new FormControl(''); // .. }   1 2 3 4 5  \u003cdiv\u003e \u003clabel for=\"triumph\"\u003eTitel: \u003c/label\u003e \u003cinput id=triumph type=\"text\" [formControl]=\"triumphForm\"\u003e \u003cp\u003eValue: {{ triumphForm.value }}\u003c/p\u003e \u003c/div\u003e   Man kann dem FormControl auch einen Defaultwert geben, dazu einfach innerhalb der runden Klammern anstelle von einem leeren String den Defaultwert einfügen. Auch der Value kann man manuel im Typescript verändern mittels der setValue() Methode.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import { Component } from '@angular/core'; import { FormControl } from '@angular/forms'; @Component({ // .. }) export class TriumphsComponent implements AfterViewInit { // ..  triumphForm: FormControl = new FormControl('default Title'); // ..  updateTitle() { this.triumphForm.setValue('Triumphs'); } }   1 2 3 4 5 6  \u003cdiv\u003e \u003clabel for=\"triumph\"\u003eTitel: \u003c/label\u003e \u003cinput id=triumph type=\"text\" [formControl]=\"triumphForm\"\u003e \u003cp\u003eValue: {{ triumphForm.value }}\u003c/p\u003e \u003cbutton type=\"button\" (click)=\"updateTitle()\"\u003eUpdate Title\u003c/button\u003e \u003c/div\u003e   Wenn man im Typescript auch direkt auf Änderungen im FormControl subscriben möchte, damit man immer den aktuellen Value des FormControls hat, kann man valueChanges benutzen. Somit hat man im Typescript die gleiche aktuelle Value wie im HTML mittels {{ name.value }}.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  import { Component } from '@angular/core'; import { FormControl } from '@angular/forms'; @Component({ // .. }) export class TriumphsComponent implements AfterViewInit { // ..  triumphForm: FormControl = new FormControl('default Title'); constructor() { this.triumphForm.valueChanges.subscribe((value) =\u003e { console.log(value); }) } // .. }   1 2 3 4 5  \u003cdiv\u003e \u003clabel for=\"triumph\"\u003eTitel: \u003c/label\u003e \u003cinput id=triumph type=\"text\" [formControl]=\"triumphForm\"\u003e \u003cp\u003eValue: {{ triumphForm.value }}\u003c/p\u003e \u003c/div\u003e   Froms Group Da eine Form normalerweise aus mehr als einem Controls besteht, kann all die FormControls zu einer gruppieren.\nFür die FormGroup erstellt man auch eine neue Instanz des FormGroup in welcher sich die FormControl’s befinden. Die FormGroup wird in einer Variabel gespeichert, die FormControls werden mit eindeutigem Key-Value Prinzip definiert. Man kann auch hier auf die Group mittels valueChanges subscriben, nur das man hier dann nicht einfach den Value des Inputs erhaltet, sondern ein Objekt mit den Controls als Key-Value. Um eine FormGroup im HTML zu verwenden, sollte man den form-tag. In diesem muss man die FormGroup mittels [formGroup]=\"\" angeben, auch hier kommt in die \"\" der Variabelname der FormGroup. Um nun die FormControls anzugeben verwendet man nicht mehr [formControl]=\"\", sondern formControlName=\"\", hier kommt in die \"\" der Key der FormControl.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  import { Component } from '@angular/core'; import { FormGroup, FormControl } from '@angular/forms'; @Component({ // .. }) export class TriumphsComponent implements AfterViewInit { // ..  triumphForm: FormGroup = new FormGroup({ name: new FormControl(''), yearOfAchieving: new FormControl('') }); constructor() { this.triumphForm.valueChanges.subscribe((value) =\u003e { console.log(value); // {name: '', yearOfAchieving: ''}  }) } // .. }   1 2 3 4 5 6 7 8 9  \u003cform [formGroup]=\"triumphForm\"\u003e \u003clabel for=\"name\"\u003eTitle Name: \u003c/label\u003e \u003cinput id=\"name\" type=\"text\" formControlName=\"name\"\u003e \u003clabel for=\"yearOfAchieving\"\u003eYear of Achieving: \u003c/label\u003e \u003cinput id=\"yearOfAchieving\" type=\"number\" formControlName=\"yearOfAchieving\"\u003e \u003c/form\u003e \u003cp\u003eValue Title Name: {{ triumphForm.value.name }}\u003c/p\u003e \u003cp\u003eValue Year of Achieving: {{ triumphForm.value.yearOfAchieving }}\u003c/p\u003e   Es ist auch möglich FormGroup innerhalb einer FormGroup zu verwenden und so das gesamte verschachteln, um komplexe Forms mit hierarchischer Struktur zu erstellen. Dies funktioniert genau gleich hier muss dann einfach die zweite FormGroup auch als Key-Value angegeben werden. Die zweite FormGroup muss dann mit formGroupName=\"\" angegeben werden und nicht mehr mit [formGroup]=\"\", innerhalb der \"\" kommt hier dann auch der Key der zweiten FormGroup. Man sollte für die zweite FormGroup dann ein div-tag verwenden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  import { Component } from '@angular/core'; import { FormGroup, FormControl } from '@angular/forms'; @Component({ // .. }) export class TriumphsComponent implements AfterViewInit { // ..  triumphForm: FormGroup = new FormGroup({ name: new FormControl(''), yearOfAchieving: new FormControl(''), placeOfAchieving: new FormGroup({ street: new FormControl(''), city: new FormControl(''), state: new FormControl(''), zip: new FormControl('') }) }); constructor() { this.triumphForm.valueChanges.subscribe((value) =\u003e { console.log(value); // {name: '', yearOfAchieving: '', placeOfAchieving: {...}}  }) } // .. }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  \u003cform [formGroup]=\"triumphForm\"\u003e \u003clabel for=\"name\"\u003eTitle Name: \u003c/label\u003e \u003cinput id=\"name\" type=\"text\" formControlName=\"name\"\u003e \u003clabel for=\"yearOfAchieving\"\u003eYear of Achieving: \u003c/label\u003e \u003cinput id=\"yearOfAchieving\" type=\"number\" formControlName=\"yearOfAchieving\"\u003e \u003cdiv formGroupName=\"placeOfAchieving\"\u003e \u003ch2\u003ePlace of Achieving\u003c/h2\u003e \u003clabel for=\"street\"\u003eStreet: \u003c/label\u003e \u003cinput id=\"street\" type=\"text\" formControlName=\"street\"\u003e \u003clabel for=\"city\"\u003eCity: \u003c/label\u003e \u003cinput id=\"city\" type=\"text\" formControlName=\"city\"\u003e \u003clabel for=\"state\"\u003eState: \u003c/label\u003e \u003cinput id=\"state\" type=\"text\" formControlName=\"state\"\u003e \u003clabel for=\"zip\"\u003eZip Code: \u003c/label\u003e \u003cinput id=\"zip\" type=\"number\" formControlName=\"zip\"\u003e \u003c/div\u003e \u003c/form\u003e \u003cp\u003eValue Title Name: {{ triumphForm.value.name }}\u003c/p\u003e \u003cp\u003eValue Year of Achieving: {{ triumphForm.value.yearOfAchieving }}\u003c/p\u003e \u003cp\u003eValue Street: {{ triumphForm.value.placeOfAchieving.street }}\u003c/p\u003e \u003cp\u003eValue City: {{ triumphForm.value.placeOfAchieving.city }}\u003c/p\u003e \u003cp\u003eValue State: {{ triumphForm.value.placeOfAchieving.state }}\u003c/p\u003e \u003cp\u003eValue Zip: {{ triumphForm.value.placeOfAchieving.zip }}\u003c/p\u003e   Wenn man eine so grosse FormGroup hat und nun ein Wert ändern möchte über das Typescript, kann man dies auch mittels setValue() tun. Das kann jedoch mühsam sein da man bei dieser Methode alle Values (FormControls) der FormGroup angeben muss. Wenn man aber nur einzelne anpassen möchte, kann man die Methode patchValue() verwenden. Denn diese Methode erlaubt es das man nur einzelne der Values (FormControls) angeben muss.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  import { Component } from '@angular/core'; import { FormGroup, FormControl } from '@angular/forms'; @Component({ // .. }) export class TriumphsComponent implements AfterViewInit { // ..  triumphForm: FormGroup = new FormGroup({ name: new FormControl(''), yearOfAchieving: new FormControl(''), placeOfAchieving: new FormGroup({ street: new FormControl(''), city: new FormControl(''), state: new FormControl(''), zip: new FormControl('') }) }); constructor() { this.triumphForm.valueChanges.subscribe((value) =\u003e { console.log(value); // {name: '', yearOfAchieving: '', placeOfAchieving: {...}}  }) } // ..  updateTriumph() { this.triumphForm.patchValue({ name: 'Assably', placeOfAchieving: { street: '123 Down Street' } }); } }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  \u003cform [formGroup]=\"triumphForm\"\u003e \u003clabel for=\"name\"\u003eTitle Name: \u003c/label\u003e \u003cinput id=\"name\" type=\"text\" formControlName=\"name\"\u003e \u003clabel for=\"yearOfAchieving\"\u003eYear of Achieving: \u003c/label\u003e \u003cinput id=\"yearOfAchieving\" type=\"number\" formControlName=\"yearOfAchieving\"\u003e \u003cdiv formGroupName=\"placeOfAchieving\"\u003e \u003ch2\u003ePlace of Achieving\u003c/h2\u003e \u003clabel for=\"street\"\u003eStreet: \u003c/label\u003e \u003cinput id=\"street\" type=\"text\" formControlName=\"street\"\u003e \u003clabel for=\"city\"\u003eCity: \u003c/label\u003e \u003cinput id=\"city\" type=\"text\" formControlName=\"city\"\u003e \u003clabel for=\"state\"\u003eState: \u003c/label\u003e \u003cinput id=\"state\" type=\"text\" formControlName=\"state\"\u003e \u003clabel for=\"zip\"\u003eZip Code: \u003c/label\u003e \u003cinput id=\"zip\" type=\"number\" formControlName=\"zip\"\u003e \u003c/div\u003e \u003c/form\u003e \u003cbutton type=\"button\" (click)=\"updateTriumph()\"\u003eUpdate Triumph\u003c/button\u003e \u003cp\u003eValue Title Name: {{ triumphForm.value.name }}\u003c/p\u003e \u003cp\u003eValue Year of Achieving: {{ triumphForm.value.yearOfAchieving }}\u003c/p\u003e \u003cp\u003eValue Street: {{ triumphForm.value.placeOfAchieving.street }}\u003c/p\u003e \u003cp\u003eValue City: {{ triumphForm.value.placeOfAchieving.city }}\u003c/p\u003e \u003cp\u003eValue State: {{ triumphForm.value.placeOfAchieving.state }}\u003c/p\u003e \u003cp\u003eValue Zip: {{ triumphForm.value.placeOfAchieving.zip }}\u003c/p\u003e   Form Array FormArray ist eine Alternative zu FormGroup, wird jedoch verwendet, wenn man eine unbestimmte Anzahl von FormControls, FormGroups oder weiteren FormArrays haben möchte. Durch das hat man die Möglichkeit dynamisch Formularelement während der Laufzeit hinzuzufügen oder löschen. Praktisch ist das man keinen Key für die Formularelemente definieren muss und man nicht weiss wie viele Elemente es am Schluss sein werden.\nUm auf das FormArray zugreifen zu können muss man eine get-Methode schreiben, diese findet man im folgenden Code.\nWie man Elemente in das FormArray hinzufügt und löscht ist auch im untenstehenden Code zu finden.\nIm HTML muss man das FormArray mittels formArrayName=\"\" angeben, auch hier kommt innerhalb der \"\" der Key des FormArrays. Um an die einzelnen Elemente zu gelangen, muss man mittels einem *ngFor darüber iterieren. Im folgenden Beispiel wird die ID des Inputs dynamisch mittels des Index des Elements erstellt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  import { Component } from '@angular/core'; import { FormGroup, FormControl, FormArray } from '@angular/forms'; @Component({ // .. }) export class TriumphsComponent implements AfterViewInit { // ..  triumphForm: FormGroup = new FormGroup({ name: new FormControl(''), yearOfAchieving: new FormControl(''), placeOfAchieving: new FormGroup({ street: new FormControl(''), city: new FormControl(''), state: new FormControl(''), zip: new FormControl('') }), aliases: new FormArray([ new FormControl('') ]) }); constructor() { this.triumphForm.valueChanges.subscribe((value) =\u003e { console.log(value); // {name: '', yearOfAchieving: '', placeOfAchieving: {...}, aliases: Array[]}  }) } get aliases() { return this.triumphForm.get('aliases') as FormArray; } addAlias() { this.aliases.push(new FormControl('')); } removeAlias(index: number): void { this.aliases.removeAt(index); } // .. }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  \u003cform [formGroup]=\"triumphForm\"\u003e \u003clabel for=\"name\"\u003eTitle Name: \u003c/label\u003e \u003cinput id=\"name\" type=\"text\" formControlName=\"name\"\u003e \u003clabel for=\"yearOfAchieving\"\u003eYear of Achieving: \u003c/label\u003e \u003cinput id=\"yearOfAchieving\" type=\"number\" formControlName=\"yearOfAchieving\"\u003e \u003cdiv formGroupName=\"placeOfAchieving\"\u003e \u003ch2\u003ePlace of Achieving\u003c/h2\u003e \u003clabel for=\"street\"\u003eStreet: \u003c/label\u003e \u003cinput id=\"street\" type=\"text\" formControlName=\"street\"\u003e \u003clabel for=\"city\"\u003eCity: \u003c/label\u003e \u003cinput id=\"city\" type=\"text\" formControlName=\"city\"\u003e \u003clabel for=\"state\"\u003eState: \u003c/label\u003e \u003cinput id=\"state\" type=\"text\" formControlName=\"state\"\u003e \u003clabel for=\"zip\"\u003eZip Code: \u003c/label\u003e \u003cinput id=\"zip\" type=\"number\" formControlName=\"zip\"\u003e \u003c/div\u003e \u003cdiv formArrayName=\"aliases\"\u003e \u003ch2\u003eAliases\u003c/h2\u003e \u003cdiv *ngFor=\"let alias of aliases.controls; let i=index\"\u003e \u003c!-- The repeated alias template --\u003e \u003clabel for=\"alias-{{ i }}\"\u003eAlias:\u003c/label\u003e \u003cinput id=\"alias-{{ i }}\" type=\"text\" [formControlName]=\"i\"\u003e \u003cbutton type=\"button\" (click)=\"removeAlias(i)\"\u003e- Remove alias\u003c/button\u003e \u003c/div\u003e \u003cbutton type=\"button\" (click)=\"addAlias()\"\u003e+ Add another alias\u003c/button\u003e \u003c/div\u003e \u003c/form\u003e \u003cp\u003eValue Title Name: {{ triumphForm.value.name }}\u003c/p\u003e \u003cp\u003eValue Year of Achieving: {{ triumphForm.value.yearOfAchieving }}\u003c/p\u003e \u003cp\u003eValue Street: {{ triumphForm.value.placeOfAchieving.street }}\u003c/p\u003e \u003cp\u003eValue City: {{ triumphForm.value.placeOfAchieving.city }}\u003c/p\u003e \u003cp\u003eValue State: {{ triumphForm.value.placeOfAchieving.state }}\u003c/p\u003e \u003cp\u003eValue Zip: {{ triumphForm.value.placeOfAchieving.zip }}\u003c/p\u003e   Form Builder Wie man bei der verschachtelten FormGroup gesehen hat, ist zum Teil der Code sehr duplikat. Um dies zu vermeiden, kann man beim Erstellen einer Form einen Hilfsservice namens FormBuilder benutzen. Diesen muss man auch importieren und dann im constructor injecten. Anstelle von new FormGroup() schreibt man nun this.formBuilder.group(), bei FormArray schreibt man mittels FormBuilder noch this.formBuilder.array() und bei den Controls kann man jedoch einfach nur das Key-Value Paar angeben.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  import { Component } from '@angular/core'; import { FormBuilder } from '@angular/forms'; @Component({ // .. }) export class TriumphsComponent implements AfterViewInit { // ..  triumphForm = this.formBuilder.group({ name: [''], yearOfAchieving: [''], placeOfAchieving: this.formBuilder.group({ street: [''], city: [''], state: [''], zip: [''] }), aliases: this.formBuilder.array([ this.formBuilder.control('') ]) }); constructor(private formBuilder: FormBuilder) { this.triumphForm.valueChanges.subscribe((value) =\u003e { console.log(value); // {name: '', yearOfAchieving: '', placeOfAchieving: {...}, aliases: Array[]}  }) } // .. }   Validators Es gibt eine Vielzahl von Validators, die man verwenden kann, um die Eingaben der Benutzer zu überprüfen und sicherzustellen, dass sie den gewünschten Anforderungen entsprechen. Die häufigst verwendeten Validators sind:\n  Validators.required: Dieser Validator stellt sicher, dass das Formularelement einen Wert enthält und nicht leer ist.\n  Validators.minLength(minLength): Dieser Validator überprüft, ob der Value des Formularelements eine Mindestlänge hat, die durch den Parameter minLength festgelegt wird.\n  Validators.maxLength(maxLength): Dieser Validator überprüft, ob der Value des Formularelements eine Maximallänge hat, die durch den Parameter maxLength festgelegt wird.\n  Validators.pattern(pattern): Dieser Validator überprüft den Value des Formularelements anhand eines regulären Ausdrucks, der durch den Parameter pattern definiert wird. Man kann damit bestimmte Muster wie z.B. eine gültige E-Mail-Adresse, Telefonnummer etc. überprüfen. Das pattern ist wie ein Regex und kann in diesem Format angegeben werden z:B. [a-zA-Z0-9]\n  Validators.email: Dieser Validator überprüft, ob der Value des Formularelements eine gültige E-Mail-Adresse ist.\n  Validators.min(min): Dieser Validator überprüft, ob der Value des Formularelements grösser oder gleich dem angegebenen Minimum (min) ist. Dies wird oft für numerische Eingabefelder verwendet.\n  Validators.max(max): Dieser Validator überprüft, ob der Value des Formularelements kleiner oder gleich dem angegebenen Maximum (max) ist. Auch dies wird häufig für numerische Eingabefelder verwendet.\n  Es können auch mehrere Validators eingesetzt werden, dazu muss man diese einfach in einem Array angeben.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  import { Component } from '@angular/core'; import { FormBuilder, Validators } from '@angular/forms'; @Component({ // .. }) export class TriumphsComponent implements AfterViewInit { // ..  triumphForm = this.formBuilder.group({ name: [''], yearOfAchieving: ['', Validators.required], placeOfAchieving: this.formBuilder.group({ street: ['', Validators.required], city: ['', Validators.required], state: ['', Validators.required], zip: ['', [Validators.required, Validators.minLength(4)]] }), aliases: this.formBuilder.array([ this.formBuilder.control('', Validators.required) ]) }); constructor(private formBuilder: FormBuilder) { this.triumphForm.valueChanges.subscribe((value) =\u003e { console.log(value); // {name: '', yearOfAchieving: '', placeOfAchieving: {...}, aliases: Array[]}  }) } // .. }   Custom Validators Man hat zudem die Möglichkeit, benutzerdefinierte Validators zu erstellen, um spezifische Validierungslogik für Formularelements zu implementieren.\nDer Ausdruck /bob/i wird verwendet, um nach dem Namen “Bob” im Eingabewert zu suchen, und das “i” am Ende steht für “case insensitive” (Gross- und Kleinschreibung wird ignoriert).\n1 2 3 4 5 6  export function forbiddenNameValidator(nameRe: RegExp): ValidatorFn { return (control: AbstractControl): ValidationErrors | null =\u003e { const forbidden = nameRe.test(control.value); return forbidden ? {forbiddenName: {value: control.value}} : null; }; }   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  import { Component } from '@angular/core'; import { FormBuilder, Validators } from '@angular/forms'; @Component({ // .. }) export class TriumphsComponent implements AfterViewInit { // ..  triumphForm = this.formBuilder.group({ name: ['', [Validators.required, forbiddenNameValidator(/bob/i)]], yearOfAchieving: ['', Validators.required], placeOfAchieving: this.formBuilder.group({ street: ['', Validators.required], city: ['', Validators.required], state: ['', Validators.required], zip: ['', [Validators.required, Validators.minLength(4)]] }), aliases: this.formBuilder.array([ this.formBuilder.control('', Validators.required) ]) }); constructor(private formBuilder: FormBuilder) { this.triumphForm.valueChanges.subscribe((value) =\u003e { console.log(value); // {name: '', yearOfAchieving: '', placeOfAchieving: {...}, aliases: Array[]}  }) } // .. }   ","categories":"","description":"Modul #F6 - Angular - Reactive Forms\n","excerpt":"Modul #F6 - Angular - Reactive Forms\n","ref":"/docs/web/angular/03_4_angular_forms/","tags":"","title":"Reactive Forms"},{"body":"Motivation Die JavaScript-Konsole bietet viele hilfreiche Tools an, um Text zu loggen. Diese Möglichkeiten schauen wir uns hier an.\nZiele  Du kennst Alternativen zu console.log(...).  Basics Das console.log(...) in JavaScript ist das Äquivalent zu System.out.println(...) in Java, das Console.WriteLine(...) in C#, das print(...) in Python oder das puts ... in Ruby.\nEs gibt aber noch sehr viele Alternativen zu console.log(...), die sehr nützlich sind.\nZ.B. kannst du den Logs noch eine Kategorie zuordnen und werden in unterschiedlichen Farben geloggt:\n console.info(...) (neutral) console.warn(...) (gelb/orange/grün) console.error(...) (rot) console.debug(...) (blau, aber nur sichtbar, wenn “Alle [Log-]Ebenen” in der Konsole angezeigt werden)  Nie mehr Counter-Variablen für Debugging-Zwecke!! Wenn du z.B. feststellen möchtest, wie oft etwas aufgerufen wird, hilft dir vielleicht console.count(\"\") weiter:\n1 2  console.count(\"alarm\"); \u003e\u003e\u003e alarm: 3   Objekte loggen Wenn du Objekte mit ihren Attributen und Werten loggen möchtest, dann bietet sich die console.dir(...)-Funktion an:\n1 2 3 4 5 6 7  console.dir(person); \u003e\u003e\u003e Person { name: 'Confused Nick Young', age: undefined, gender: 'male', lovesJavaScript: true }   Tabelle loggen 1 2 3 4 5 6 7 8 9 10  console.table( [person1, person2] ) \u003e\u003e\u003e ┌─────────┬────────────────────────┬───────────┬───────────┬─────────────────┐ │ (index) │ name │ age │ gender │ lovesJavaScript │ ├─────────┼────────────────────────┼───────────┼───────────┼─────────────────┤ │ 0 │ 'Confused Nick Young' │ undefined │ 'male' │ false │ │ 1 │'Tuxedo Winnie the Pooh'│ undefined │ undefined │ true │ └─────────┴────────────────────────┴───────────┴───────────┴─────────────────┘   Log stylen Mit einem %c im Log kannst du den Text stylen:\n1  console.log('%cHello World', 'color: blue; font-weight: bolder; background-color: white; border-radius: 2em; padding: 1em;')   Falsche Werte loggen Als Entwickler bist du informiert werden, wenn irgendwo falsche Werte zurückgegeben wurden (z.B. Rückgabe-Wert einer Funktion).\nHierfür bietet sich console.assert(...) an:\n1 2 3 4 5 6 7 8 9 10 11 12  let connectionToDatabase = connectToDatabase(); // returns `null` if connection fails. console.assert( connectionToDatabase != null, { connectionToDatabase: connectionToDatabase, errorMsg: \"Es konnte keine Verbindung zur Datenbank hergestellt werden. ¯\\_(ツ)_/¯\" }); \u003e\u003e\u003e Assertionsfehler: { connectionToDatabase: null, errorMsg: 'Es konnte keine Verbindung zur Datenbank hergestellt werden. ¯_(ツ)_/¯' }   ","categories":"","description":"Modul #F4 - JavaScript - Die Browser-Konsole\n","excerpt":"Modul #F4 - JavaScript - Die Browser-Konsole\n","ref":"/docs/web/javascript/23_console.logs/","tags":"","title":"Advanced console.log(...)'s"},{"body":"Ziele  Du weisst, wofür Internationalisierung ist. Du kannst diese in deinen Projekten anwenden.  Wofür ist Internationalisierung Internationalisierung (i18n) bezieht sich auf die Anpassung einer Anwendung, um sie für verschiedene Sprachen und Regionen weltweit zugänglich und benutzbar zu machen. Durch Internationalisierung wird die Anwendung so gestaltet, dass sie leicht in verschiedene Sprachen übersetzt werden kann, um eine breitere Benutzerbasis anzusprechen.\nMeistens wird die Internationalisierung mit JSON und einer Translate-Pipe umgesetzt. Dabei werden JSON-Dateien verwendet, um die übersetzten Texte zu speichern, und die Translate-Pipe wird verwendet, um die entsprechenden Übersetzungen abzurufen und anzuzeigen.\nInternationalisierung mit JSON und einer Translate-Pipe einrichten  Zuerst muss man JSON-Dateien erstellen für die Übersetzungen: Für jede Sprache, die man unterstützen möchte, sollte man ein eigenes JSON erstellen. Diese sollten in einen neuen Ordner names i18n in den assets abgelegt werden. Die JSON-Dateien werden meistens [kürzel].json benannt. Also zum Beispiel für Deutsch de.json. Inhalt einfügen: Nun kann man die Wörter und Texte, die man dynamisch übersetzen, lassen möchte in die JSON-Dateien eintragen. Diese werden nach dem Key-Value Prinzip eingetragen, wobei der Key in Capslock ist. Zudem müssen die Keys in allen JSONs immer gleich sein für den gleichen Text, ansonsten funktionierts nicht. Man kann einem Key auch mehrere weitere Key-Value Paare geben, dies wird getan, wenn sie zueinander gehören.  1 2 3 4 5 6 7 8 9 10 11  // de.json { \"TITEL\": \"Hallo, \", \"TEXT\": { \"DRAGONWARRIOR\": { \"WELCOME\": \"Willkommen im Kampf gegen den Feind Angular!\", \"OTHER\": \"Möge dein Weg von Ruhm und Triumph erfüllt sein!\" }, \"OTHER\": \"Du bist nicht der wahre Drachenkrieger. Du bist dieses Kampfes nicht würdig.\" } }   1 2 3 4 5 6 7 8 9 10 11  // en.json { \"TITEL\": \"Hello, \", \"TEXT\": { \"DRAGONWARRIOR\": { \"WELCOME\": \"Welcome to the battle against the enemy Angular!\", \"OTHER\": \"May your path be filled with glory and triumph!\" }, \"OTHER\": \"You are not the true Dragon Warrior. You are not worthy of this battle.\" } }   Library installieren: Nun muss man eine Library installieren um die Pipe verwenden zu können. Dazu kann man den Befehl npm install @ngx-translate/core benutzen, um die @ngx-translate/core-Library zu installieren. Und den Befehl npm install @ngx-translate/http-loader damit man die Library @ngx-translate/http-loader verwenden kann, diese wird verwendet damit man HTTPLoader in ngx-translate verwenden kann. TranslateModule konfigurieren: Das TranslateModule aus @ngx-translate/core muss man in das app.module.ts importieren. Danach muss man es in den imports konfiguriere. Nun muss man die Konfiguration entsprechend den Dateipfaden und Einstellungen anpassen.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  import { TranslateModule, TranslateLoader } from '@ngx-translate/core'; import { TranslateHttpLoader } from '@ngx-translate/http-loader'; // ...  export function createTranslateLoader(http: HttpClient) { // Pfad der JSON-Datein mit den übersetzungen  return new TranslateHttpLoader(http, './../assets/i18n/', '.json'); } @NgModule({ imports: [ // ...  HttpClientModule, TranslateModule.forRoot({ loader: { provide: TranslateLoader, useFactory: createTranslateLoader, deps: [HttpClient] } }) ], // ... }) export class AppModule { }   Falls es noch kein environment-File im Projekt gibt muss man dieses erstellen. Dazu im src einen Ordner environments erstellen und darin das File `environment.ts  1 2 3 4  export const environment = { // ...  languages: ['de', 'en'] };   Sprachlokalisierung aktivierung: Mithilfe des TranslateService kann man die gewünschte Sprache einstellen und die übersetzten Texte in der entsprechenden Sprache anzeigen. Man kann die Sprache basierend auf Benutzervorlieben oder anderen Kriterien festlegen. Dies wird immer im app.components.ts getan.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  import { TranslateService } from '@ngx-translate/core'; import { environment } from 'src/environments/environments'; @Component({ // ... }) export class AppComponent implements OnInit { // ..  constructor(private translateService: TranslateService) {} ngOnInit() { this.translateService.addLangs(environment.languages); this.setLanguage('en') } setLanguage(lang: string) { this.translateService.use(lang); } }   Translate-Pipe in den HTML-Dateien: In den HTML-Dateien der Components kann man die Translate-Pipe verwenden, um die lokalisierten Texte anzuzeigen. Dazu die Pipe translate mit dem Übersetzungs-Key verwenden, um die Übersetzungen abzurufen. Wurden einem Key mehrere neue Key-Value Paare geben so ruft man den äussersten Schlüssel auf und fügt ihn mittels eines Punktes (.) mit dem nächsten Key zusammen.  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u003ch1\u003e{{ 'TITEL' | translate }}{{ name }}!\u003c/h1\u003e \u003cng-container *ngIf=\"name === 'Dragon Warrior'; else otherName\"\u003e \u003cng-container *ngTemplateOutlet=\"dragonWarrior\"\u003e\u003c/ng-container\u003e \u003c/ng-container\u003e \u003cng-template #dragonWarrior\u003e \u003cp\u003e{{ 'TEXT.DRAGONWARRIOR.WELCOME' | translate }}\u003c/p\u003e \u003cp\u003e{{ 'TEXT.DRAGONWARRIOR.OTHER' | translate }}\u003c/p\u003e \u003c/ng-template\u003e \u003cng-template #otherName\u003e \u003cp\u003e{{ 'TEXT.OTHER' | translate }}\u003c/p\u003e \u003c/ng-template\u003e   ","categories":"","description":"Modul #F6 - Angular - Internationalization\n","excerpt":"Modul #F6 - Angular - Internationalization\n","ref":"/docs/web/angular/03_5_angular_internationalization/","tags":"","title":"Internationalization (i18n)"},{"body":"Ziele  Du weisst, wie du in VSCode JavaScript Code debuggen kannst. Du weisst, wie du in IntelliJ JavaScript Code debuggen kannst.  Wieso ist debuggen wichtig? Es gibt eine Vielzahl von Gründen, warum JavaScript-Anwendungen Fehler enthalten können. Typische Fehler sind zum Beispiel unerwartete Nutzereingaben, Netzwerkprobleme, inkonsistente Daten oder eine fehlerhafte Logik innerhalb des Codes. Debugging kann dazu beitragen, diese Fehler zu identifizieren und zu beseitigen.\nEin weiterer wichtiger Grund, warum Debuggen in JavaScript wichtig ist, ist, dass JavaScript eine dynamisch typisierte Sprache ist. Das bedeutet, dass Typfehler während der Laufzeit auftreten können, wenn eine Variable unbeabsichtigt einen anderen Datentyp zugewiesen bekommt, als erwartet. Typfehler können schwer zu finden sein, da sie nicht immer sofort zu offensichtlichen Fehlern führen und zu unerwartetem Verhalten führen können.\nIst es nun schlau zum debuggen console.log() zu verwenden? Die Antwort ist Ja und Nein.\nEs ist zwar eine der gängigsten Methoden, die verwendet wird, da sie es sehr schnell und einfach ist. Jedoch beeinträchtigen zu viele davon die Leistung des Codes, was dann zum Problem wird, wenn man sie beim git push vergisst, herauszunehmen und sie dann auf produktiven Umgebungen landen könnten. So passiert es dann schnell, dass die Konsole überfüllt mit sinnlosen Logs ist. Ausserdem können sie auch zu Sicherheitsproblemen führen, wenn sensible Daten geloggt werden.\nSomit ist es besser mit Tools von VSCode oder IntelliJ zu debuggen.\nDebugging nach alter Schule Es gibt eine Möglichkeit, die immer funktioniert, wenn du JavaScript-Code im Browser debuggen möchtest.\nPraktisch jeder Browser (sogar der Internet Explorer) bietet Debugging-Tools an.\nMöchtest du an einer bestimmten Stelle im Code einen Breakpoint anbringen und die Ausführung pausieren, wenn dieser erreicht ist, dann kannst du das mit folgender Anweisung erreichen:\n1  debugger;   Wenn nun diese Stelle erreicht wird, dann pausiert der Browser automatisch. Vielleicht musst du hierfür die Entwickler-Tools je nach Browser geöffnet haben.\nIn der Debugging-Ansicht siehst du dann den aktuellen Code:\nFolgende Dinge siehst du:\n Das Script ist pausiert an der Stelle, an welcher debugger; steht. Du kannst dir die Werte der Variablen anschauen, indem du mit der Maus darüberhoverst. Hier siehst du z.B., was in der Variable browser gespeichert ist. Auf der rechten Seite oben kannst du die Ausführung wie gewöhnlich fortsetzen lassen, oder auch Schritt-für-Schritt weiterdebuggen. Weiter unten sind die Breakpoints aufgelistet. Du kannst im Browser direkt weitere Breakpoints hinzufügen, indem du auf eine Zeilennummer klickst. Bei den Breakpoints siehst du auch die Möglichkeit, dass das Script automatisch einen Breakpoint aktivieren soll, wenn ein Fehler geworfen wird (auch wenn er später gecatched wird).  Das Schöne an dieser Möglichkeit ist, dass sie praktisch immer funktioniert, egal welches Framework du für deine HTML-Seiten verwendest.\nWenn dir aber deine Entwicklungsumgebung eine Lösung anbietet, dann verwende diese! Verwendest du das debugger-Keyword im Code, so musst du immer wieder daran denken, es vor dem Teilen wieder zu entfernen.\nDebuggen in VSCode HTML-Datei mit JavaScript debuggen (Client-seitig) Möchtest du JavaScript-Code in einer lokalen HTML-Datei debuggen, dann kannst du das wie folgt tun:\nKlicke auf “Run and Debug” im Debugging-Tab:\nDann solltest du gefragt werden, auf welche Art du debuggen möchtest:\nDort wählst du den Browser aus, mit dem du Debuggen möchtest.\nNun ist Debugging in HTML- und JavaScript-Dateien möglich, indem du Breakpoints setzt:\nMöchtest du das Debugging auf Knopfdruck starten?\n Dann Klicke im “Run and Debug”-Tag auf “create a launch.json file” statt auf “Run and Debug”. Wähle wieder den richtigen Browser aus. In der Datei “.vscode/launch.json” wurde eine Konfiguration erstellt. Du kannst sie wie folgt generalisieren:  1 2 3 4 5 6 7 8 9 10 11  { \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"msedge\", // bzw. chrome. \"request\": \"launch\", \"name\": \"Open current html\", \"file\": \"${file}\" } ] }   Wenn du nun deine Datei ausgewählt hast und [F5] klickst, wird automatisch ein Browser geöffnet, der die aktuelle Seite im Browser anzeigt. Ausserdem sollten alle Breakpoints direkt funktionieren.\nDebuggen in VSCode mit LiveServer (Client-seitig) Wenn du die Extension Live Server verwendest, dann muss das Debugging ein bisschen anders konfiguriert werden.\nAls Erstes muss man das launch.json erweitern, denn es muss einen neue Configuration hinzugefügt werden (innerhalb des Arrays configurations).\n1 2 3 4 5 6 7 8 9 10  { \"name\": \"Live Server: Chrome\", \"type\": \"chrome\", \"request\": \"launch\", \"url\": \"http://localhost:5500/${relativeFile}\", \"webRoot\": \"${workspaceFolder}\", \"sourceMapPathOverrides\": { \"webpack:///./src/*\": \"${webRoot}/*\" } }    Für Microsoft Edge gibst du natürlich \"type\": \"edge\" an. Achte darauf, dass du den gleichen Port verwendest wie der Live Server. Normalerweise ist der 5500. Es kann aber auch vorkommen, dass sich der Port ändert. Den Port siehst du unten rechts im VS Code (in meinem Fall 5501), wenn der Live Server läuft:  Nun sollte man die gewünschten Breakpoints setzen bevor man dann startet.\nUm zu Debuggen\n musst du zuerst den Live Server starten (z.B. einen Rechtsklick auf die entsprechende HTML-Datei, dann “Open with Live Server”) Danach beim Debuggen den Eintrag “Live Server: Chrome” im Dropdown wählen und mit dem daneben befindenden grünen Startbutton das gesamte starten. Man kann jedoch auch nur im Dropdown das Gewollte auswählen und mit F5 starten:  Es öffnet sich ein Chrome Fenster mit den Ordnern, dort kann man dann in das gewollte File navigieren. Wird nun eine Aktion ausgeführt, die ein Breakpoint beinhaltet, kann man wie gewohnt Debuggen.\nJavaScript-Dateien mit NodeJS (Server-seitig) debuggen Damit man in VSCode Server-seitigen JavaScript-Code mit NodeJS debuggen kann, muss man zuerst ein launch.json erstellen. Dies geht am besten in dem man rechts in der Menüleiste auf das vierte Icon klickt:\nMan muss natürlich auch den Debugger aussuchen, den man verwenden möchte: Nun muss man den Code im launch.json mit dem folgenden ersetzen:\n1 2 3 4 5 6 7 8 9 10 11 12 13  { \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"node\", \"request\": \"launch\", \"name\": \"Launch Program\", \"skipFiles\": [\"\u003cnode_internals\u003e/**\"], \"program\": \"${file}\", \"cwd\": \"${workspaceFolder}\" } ] }   Nun kann man den Debugger mittels F5 starten.\nDamit dieser jedoch etwas bringt, muss man auch Breakpoints setzen. Dafür kann man links neben der Zeilenzahl mittels Links-Klick einen normalen Breakpoint setzen oder mit Rechts-Klick die Optionen ansehen:\nBreakpoints Die Optionen zeigen folgende drei Breakpoints:\n Breakpoints: Breakpoints sind die am häufigsten verwendeten. Sie ermöglichen es, den Programmfluss an einer bestimmten Zeile zu unterbrechen und den Code schrittweise zu debuggen. Logpoints: Logpoints ermöglichen es, während des Debuggings eine Nachricht in der Konsole auszugeben, ohne den Programmfluss zu unterbrechen. Conditional Breakpoints: Conditional Breakpoints ermöglichen es, einen Breakpoint zu setzen, der nur unter bestimmten Bedingungen ausgelöst wird.  Setzt man einen Logpoint oder Conditional Breakpoint, kann man im Dropdown noch zwei weitere auswählen.\n Exception Breakpoints: Exception Breakpoints ermöglichen es, den Programmfluss an der Stelle zu unterbrechen, an der eine Ausnahme (Exception) auftritt. Hit count breakpoint: Hit count Breakpoints ermöglichen es, eine Pause im Code an einer bestimmten Stelle einlegt, wenn eine bestimmte Bedingung erfüllt ist. Der “Hit count” bezieht sich dabei auf die Anzahl der Male, die dieser Breakpoint erreicht wurde.  Wenn man im Debug-Modus ist, kann man links ein Panel sehen mit drei Unterteilungen:\n Watch: Die “Watch”-Funktion ermöglicht es, die Werte von Variablen, Objekten und Ausdrücken in Echtzeit zu überwachen. Man kann Variablen hinzufügen, um ihre Werte zu verfolgen und sie zu überprüfen, während man durch den Code gehen. Dies ist besonders nützlich, wenn man einen Fehler vermuten und den Wert einer bestimmten Variable überprüfen möchten. Call Stack: Die “Call Stack”-Funktion zeigt die Aufrufliste der Codezeilen an. Man kann sehen, welche Funktionen aufgerufen wurden und in welcher Reihenfolge. Dies ist hilfreich, um zu verstehen, wie der Code funktioniert und wo Fehler auftreten können. Man kann auch zurückgehen und zu einem bestimmten Punkt in der Liste springen, um den Code von diesem Punkt aus zu überprüfen. Variables: Die “Variables”-Funktion zeigt eine Liste der Variablen an, die im aktuellen Kontext verfügbar sind. Man kann den Wert jeder Variable überprüfen und sie ändern, um zu sehen, wie sich der Code verhält. Diese Funktion ist besonders nützlich, wenn man eine Variable suchen und ihren Wert überprüfen müssen, um einen Fehler zu finden.  Die Debugging Actions Die Debugging Actions sind wichtig zum während des Debuggen zu navigieren. Die Icons auf dem folgenden Bild werden darunter von links nach rechts erklärt:\n  Fortsetzen/Pause (F5): Fortsetzen: Setzt die normale Programm- oder Skriptausführung fort (bis zum nächsten Breakpoint). Pause: Ermöglicht die Inspektion des Codes, der gerade ausgeführt wird.\n  Schritt über (F10): Führt die nächste Anweisung aus, ohne ihre Bestandteile zu inspizieren.\n  Schritt in (F11): Betritt die nächste Methode, um ihre Ausführung Zeile für Zeile zu verfolgen.\n  Schritt zurück (⇧F11): Wenn man sich innerhalb einer Methode oder Unterprozedur befinden, kehrt man zum früheren Ausführungskontext zurück, indem man die verbleibenden Zeilen der aktuellen Methode als einzelnen Befehl ausführt.\n  Neu starten (Ctr+⇧+F5 bzw. ⇧⌘F5): Beendet die aktuelle Programmausführung und startet das Debuggen erneut mit der aktuellen Ausführungskonfiguration.\n  Stoppen (⇧F5): Beendet die aktuelle Programmausführung.\n  Die Debugging-Konsole Während dem Debugging bietet VS Code die Debugging-Konsole an:\nHier erscheinen die gleichen Logs wie in der Browser-Konsole. Ausserdem kannst du hier auch Ausdrücke testen (ob z.B. browser.includes(\"Chrome\") wahr ist) und Code ausführen lassen.\nIm Zusammenhang mit dem Browser klingt das vielleicht sehr unspektakulär, ist aber sehr praktisch, wenn du eine server-seitige Anwendung (Backend) laufen lässt mit NodeJS, Java, Python oder so ähnlich.\nDebuggen in IntelliJ Um in IntelliJ zu debuggen, muss man nicht zuerst ein File erstellen oder eine Extension haben. Es reicht, bereits wenn man die Breakpoints setzt. Dafür kann man, wie bei VSCode, links neben der Zeilenzahl mittels Links-Klick einen normalen Breakpoint setzen oder mit Rechts-Klick die Optionen ansehen:\nHier gibt es neben dem normalen Breakpoint den Conditional Breakpoint. Dieser ist für das gleich wie bei VSCode.\nHier gibt es dann die Möglichkeit, noch mehrere Optionen zu sehen. Dazu muss man auf more klicken und es öffnet sich ein Popup.\nHier kann man, wie bei VSCode, auch einen Log machen und der Breakpoint ist nun das gleiche wie der Logpoint in VSCode. Man kann auch einstellen, dass der Breakpoint entfernt werden soll, sobald er einmal aufgerufen wurde. Oder das er solang inaktiv sein soll bis ein anderer Breakpoint ausgelöst wurde.\nUm den Debug-Modus zu starten, kann man in IntelliJ oben rechts das Icon das wie ein Käfer aussieht verwenden:\nDas Debugging-Panel unten auf der Benutzeroberfläche besitzt verschiedene nützliche Tools:\n Debugger Controls Debug Console Frames Variables Watches  Debugger Controls:   Rerun: Dieser Button startet das Programm im Debug-Modus neu.\n  Stop: Mit diesem Button stoppt man den Debug-Modus.\n  Pause: Dieser Button unterbricht den Programmablauf und hält den Debugger an. Man benutzt es, um das Programm zu pausieren und den aktuellen Zustand der Variablen und Objekte zu überprüfen.\n  Resume Program: Mit diesem Button kann man das Programm im Debug-Modus fortsetzen, nachdem es unterbrochen wurde.\n  Step Over: Dieser Button führt das aktuelle Statement im Code aus und hält an der nächsten Zeile an. Wenn das Statement eine Methode aufruft, wird die Methode ausgeführt und der Debugger hält an der nächsten Zeile an.\n  Step Into: Diese Schaltfläche führt das aktuelle Statement im Code aus und hält an der nächsten Zeile an. Wenn das Statement eine Methode aufruft, wird der Debugger in die Methode hineinspringen und an der ersten Zeile der Methode anhalten.\n  Step Out: Mit dieser Schaltfläche kann man aus einer Methode heraus zurückkehren und den Debugger an der nächsten Zeile nach der Methode anhalten.\n  View Breakpoints: Mit diesem Button kann man alle Breakpoints anzeigen und konfigurieren, einschliesslich Bedingungen und Aktionen, die bei der Unterbrechung ausgelöst werden sollen.\n  Mute Breakpoint: Mit diesem Button kann man einen Breakpoint stumm schalten, ohne ihn zu entfernen. Dies ist nützlich, wenn man schnell durch den Code navigieren möchten, ohne dass der Debugger bei jedem Breakpoint stoppt.\n  Debug Console: Hier kann man interaktiv mit dem Code interagieren, indem man JS-Befehle eingibt und ihre Ausgabe sieht. Man kann auch Fehlermeldungen oder Ausnahmen sehen, die während der Ausführung des Codes auftreten.\nFrames: In diesem Bereich werden die Stack-Frames angezeigt, die den aktuellen Programmablauf darstellen. Man kann durch die Frames navigieren, indem man auf den Namen des Frames klicken.\nVariables: Hier kann man die Werte von Variablen während des Debugging-Prozesses überwachen. Man kann die Variablen auswählen, um ihre aktuellen Werte anzuzeigen, oder man kann Ausdrücke eingeben, um ihre Werte zu berechnen.\nWatches: Man kann eine Liste von Variablen erstellen, die man überwachen möchten. Man kann Variablen zur Watcherlist hinzufügen, indem man mit der rechten Maustaste auf die Variable klicken und “Add to Watches” auswählen. Die Variable kann man auch im Inputfeld eingeben und auf das Plusicon am Ende klicken, um sie in die Watcherlist hinzuzufügen:\nDie Watcher werden dann über den Variablen aufgelistet:\nGenau wie beim Hinzufügen kann man einen Watcher entfernen, indem man einem rechten Mausklick auf die Variabel tätigt und “Remove Watch” anklickt.\n","categories":"","description":"Modul #F4 - JavaScript - Debuggen ist in jeder Programmiersprache wichtig und die IDE hat dazu viele nützliche Tools, welche hier angeschaut werden.\n","excerpt":"Modul #F4 - JavaScript - Debuggen ist in jeder Programmiersprache …","ref":"/docs/web/javascript/24_debugging/","tags":"","title":"Debugging"},{"body":"Ziele  Du weisst, das es Material in Angular gibt und wie du es verwendest.  Was ist Material Material Design ist eine Designsprache, die für das neue Betriebssystem von Google Android entwickelt wurde, das im Sommer 2014 angekündigt wurde. Obwohl sich die Material Design hauptsächlich auf das Touch-Based-Design mobiler Apps konzentriert, ist es möglich, dieselben Ideen in das Webdesign zu übertragen.\nMaterial in Angular Für Angular gibt es eine spezifische Version von Material Design.\nAuf der offiziellen Website von Angular Material sehen wir welche Components uns zur Verfügung gestellt werden.\nWenn wir zum Beispiel den “Slider” in unsere Applikation implementieren möchten, gibt es einige Schritte, welche wir beachten müssen. Jeder Component wird auf der Website wie folgt beschrieben:\n Overview: Auf der Übersicht wird beschrieben, wie und wozu man den Component anwenden kann. Oftmals werden hier auch erweiterte Funktionen eines Components aufgelistet. Daher gilt: Immer aufmerksam durchlesen! API: In diesem Abschnitt ist für uns vor allem der Import wichtig. Für jeden Component muss erst das dazugehörige Modul importiert werden:  1 2 3 4 5 6 7 8 9 10  import { MatSliderModule } from '@angular/material/slider'; ... @NgModule({ imports: [ // ..  MatSliderModule, // ..  ], // .. })    Examples: Hier werden Anwendungsbeispiele aufgezeigt, von welchen wir unseren Code ableiten können.  1 2 3 4 5 6 7 8 9 10 11 12 13  \u003cmat-slider class=\"example-margin\" [disabled]=\"disabled\" [invert]=\"invert\" [max]=\"max\" [min]=\"min\" [step]=\"step\" [thumbLabel]=\"thumbLabel\" [tickInterval]=\"getSliderTickInterval()\" [(ngModel)]=\"value\" [vertical]=\"vertical\" aria-labelledby=\"example-name-label\"\u003e \u003c/mat-slider\u003e   Wie Ihr Material in Eurer Angular-Applikation installiert, wird auf der offiziellen Website ausführlich beschrieben.\nMaterial Theming Material Design unterstützt Theming. Ein Theme ist eine Farbpalette, welche für jeden Angular Material Component angewendet wird.\nEin Theme besteht aus:\n Primärfarbe Akzentfarbe Warnung Vordergrund Hintergrund  Es gibt verschiedene pre-built Themes in Material Design, sodass man sich das Erstellen eines Themes von Hand ersparen kann:\n deeppurple-amber.css indigo-pink.css pink-bluegrey.css purple-green.css  Um ein solches Theme zu verwenden, müssen wir dies in unserem globalen Stylesheet importieren:\n1  @import '@angular/material/prebuilt-themes/deeppurple-amber.css';   Natürlich kann man auch sein eigene Theme für Angular Material erstellen. Wie ihr dies machen könnt, wird hier ausführlich beschrieben (Für diejenigen, die mit den Übungen frühzeitig fertig sind).\n","categories":"","description":"Modul #F6 - Angular - Angular Material\n","excerpt":"Modul #F6 - Angular - Angular Material\n","ref":"/docs/web/angular/04_1_angular_material/","tags":"","title":"Angular Material, Responsive Web Design und Accessibility"},{"body":"Ziele  Du weisst, was RxJS ist und welches Konzept es besitzt. Du kennst, Observable, Observer und Subscription und kannst diese anwenden.  RxJS RxJS (Reactive Extensions for JavaScript) ist eine Library für funktionale, reaktive Programmierung in JavaScript. Das Konzept von RxJS basiert auf der Idee, dass alles in der Welt um uns herum ständig Veränderungen unterworfen ist und dass wir diese Veränderungen durch die Verarbeitung von Ereignissen und Strömen von Daten verwalten können.\nRxJS bietet eine Reihe von Tools und Operatoren, mit denen man Ereignisse und Ströme von Daten auf eine reaktive und deklarative Weise verarbeiten kann. Dabei wird der Fokus auf die Verarbeitung der Daten selbst gelegt, anstatt auf den Ablauf des Codes.\nRxJS bietet verschiedene Arten von Observables und Subjects an, um Daten innerhalb deiner Anwendung zu verwalten und zu teilen. Diese können verwendet werden, um Daten zwischen verschiedenen Komponenten zu übertragen oder um globale Ereignisse zu verwalten.\nKonzept Das zentrale Konzept von RxJS ist das Observable-Pattern. Ein Observable ist eine Art von Datenstrom, der Ereignisse oder Werte über einen Zeitraum hinweg ausgibt. Ein Observable kann auf Ereignisse wie Benutzerinteraktionen, Datenbankabfragen, API-Aufrufe und mehr reagieren und diese verarbeiten.\nMit RxJS kannst du Observable-Ströme transformieren, filtern, kombinieren und verwalten, indem du eine Kette von Operatoren auf die Observable anwendest. Das Ergebnis dieser Verarbeitung ist ein neuer Observable-Strom, der die transformierten Daten oder Ereignisse ausgibt.\nInstallation Um RxJS in ein Angular-Projekt zu installieren, kann man die folgenden Schritte ausführen:\n Sicherstelle, dass Node.js und npm (Node Package Manager) auf dem Computer installiert ist. (Kann mit npm -verledigt werden.) Nun ein Terminal öffnen oder eine andere Shell und navigiere zum Hauptverzeichnis des Projekts. Folgenden Befehl ausführen, um NgRx zu installieren:  1  npm install rxjs   Observables Wie schon ein wenig erwähnt ist ein Observable eine Art von Datenstrom, der Werte oder Ereignisse asynchron und über einen bestimmten Zeitraum hinweg ausgibt. Ein Observable kann auf Ereignisse wie Benutzerinteraktionen, Datenbankabfragen, API-Aufrufe und mehr reagieren und diese verarbeiten.\nEin Observable ist im Grunde genommen eine Funktion, die einen Datenstrom definiert und zurückgibt. Diese Funktion kann dann durch verschiedene Operatoren transformiert werden, um den Datenstrom auf verschiedene Weise zu bearbeiten.\nBeispiel für ein Observable zu erstellen:\n1 2 3 4 5 6 7 8 9 10  import { Observable } from 'rxjs'; const myObservable$ = new Observable((observer) =\u003e { // einiger Wert des Observable  // mit next() wird der Wert an die Subscriber gesendet  observer.next('Hello Dragon Warrior!'); // schliesst das Observable ab  observer.complete(); });   Observer In RxJS ist ein Observer ein Objekt, das eine Funktion oder eine Reihe von Funktionen definiert, um auf Werte oder Ereignisse zu reagieren, die von einem Observable ausgegeben werden. Ein Observer wird in der Regel beim Subscriben eines Observables verwendet, um die ausgegebenen Werte zu verarbeiten.\nEin Observer-Objekt in RxJS muss mindestens eine der folgenden Funktionen implementieren:\n next(value: T): Wird aufgerufen, wenn ein neuer Wert von einem Observable ausgegeben wird. Der Parameter value enthält den ausgegebenen Wert. error(error: any): Wird aufgerufen, wenn ein Fehler bei der Ausgabe eines Wertes auftritt. Der Parameter error enthält den Fehler. complete(): Wird aufgerufen, wenn das Observable abgeschlossen ist und keine weiteren Werte ausgegeben werden.  Ein Observer wird normalerweise durch eine subscribe Methode an das Observable angehängt, um den Output des Observables zu empfangen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  import { Observable } from 'rxjs'; const myObservable$ = new Observable((observer) =\u003e { observer.next('Hello Dragon Warrior!'); observer.complete(); }); const myObserver = { next: (value) =\u003e console.log(value), error: (error) =\u003e console.error(error), complete: () =\u003e console.log('Observable completed'), }; myObservable$.subscribe(myObserver);   Es ist möglich, einen Observer als Callback (Subscription) zu verwenden. Dies ist die gängigste Verwendungsmöglichkeit von Observers.\n1 2 3 4 5 6 7 8 9 10 11 12  import { Observable } from 'rxjs'; const myObservable$ = new Observable((observer) =\u003e { observer.next('Hello Dragon Warrior!'); observer.complete(); }); myObservable$.subscribe( (value) =\u003e console.log('Received value:', value), (error) =\u003e console.error('Error:', error), () =\u003e console.log('Completed') );   Es ist wichtig zu beachten, dass jede dieser Funktionen optional ist und weggelassen werden kann, wenn sie nicht benötigt wird.\n1 2 3 4 5 6 7 8 9  import { Observable } from 'rxjs'; const myObservable$ = new Observable((observer) =\u003e { observer.next('Hello Dragon Warrior!'); }); myObservable$.subscribe((value) =\u003e { console.log(value); });   Subscription Eine Subscription kann durch die subscribe Methode auf einem Observable erstellt werden. Wenn eine Subscription erstellt wird, wird eine Verbindung zwischen dem Observable und dem Observer hergestellt und der Datenfluss wird gestartet. Die Subscription gibt ein Objekt zurück, das eine Methode unsubscribe enthält. Diese Methode kann aufgerufen werden, um die Subscription zu beenden und den Datenfluss zu stoppen. Sie wird verwendet um den Datenfluss kontrollieren und den Speicherbedarf reduzieren, indem man ungenutzte Datenströme stoppt.\nIn dem folgenden Beispiel ist mySubscription die Subscription, diese wird erstellt durch myObservable.subscribe.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  import { Observable } from 'rxjs'; const myObservable$ = new Observable((observer) =\u003e { observer.next('Hello Dragon Warrior!'); observer.complete(); }); const mySubscription = myObservable$.subscribe( (value) =\u003e { console.log('Received value:', value); }, (error) =\u003e { console.log('Error:', error); }, () =\u003e { console.log('Observable completed.'); } ); mySubscription.unsubscribe();   ","categories":"","description":"Modul #F6 - Angular - RxJS\n","excerpt":"Modul #F6 - Angular - RxJS\n","ref":"/docs/web/angular/05_1_angular_rxjs/","tags":"","title":"RxJS"},{"body":"Ziele  Du weisst, was RxJS-Subjects sind. Du kennst, die vier Arten von Subjects und kannst diese erläutern und anwenden.  RxJS-Subjects sind spezielle Arten von Observables, die sowohl als Observables als auch als Observer fungieren können. Mit anderen Worten, sie ermöglichen das Senden und Empfangen von Werten und Ereignissen und das Weiterleiten dieser Werte und Ereignisse an andere Observable-Subscriber.\nEs gibt vier Arten von Subjects:\n Subject: Ein einfacher Subject, das die neuesten Werte an seine Abonnenten weiterleitet. BehaviorSubject: Ein Subject, das den letzten Wert beibehält, der an ihn gesendet wurde, und ihn an jeden neuen Abonnenten sofort weitergibt. ReplaySubject: Ein Subject, das alle Werte an seine neuen Abonnenten weiterleitet, unabhängig davon, wann sie das Abonnement starten. AsyncSubject: Ein Subject, das nur den letzten Wert weiterleitet, wenn es vollständig abgeschlossen ist.  Subjects sind besonders nützlich, wenn du eine zentrale Stelle benötigst, um Daten innerhalb deiner Anwendung zu verwalten und zu teilen. Zum Beispiel könntest du ein Subject verwenden, um Benutzerinteraktionen zu verfolgen und diese Daten an verschiedene Komponenten deiner Anwendung weiterzuleiten, um sie zu aktualisieren oder anzuzeigen.\nSubject Das Subject speichert keine Werte, die vor der Registrierung/Abonnierung (Subscription) der Observer gesendet wurden. Wenn ein Observer sich später registriert, empfängt er nur die Werte, die nach seiner Registrierung/Abonnierung gesendet wurden.\nEs ist zu beachten, dass die Observer in der Reihenfolge registriert werden, in der sie subscribe aufrufen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  import { Subject } from 'rxjs'; const mySubject = new Subject(); mySubject.subscribe((value) =\u003e { console.log('Observer 1 received value:', value); }); mySubject.next('Hello Dragon Warrior!'); mySubject.subscribe((value) =\u003e { console.log('Observer 2 received value:', value); }); mySubject.next('Another value'); // Observer 1 received value: Hello Dragon Warrior! // Observer 1 received value: Another value // Observer 2 received value: Another value   BehaviorSubject Im Gegensatz zum normalen Subject speichert das BehaviorSubject den letzten gesendeten Wert, sodass er ihn an neue Observer weitergeben kann. Wenn keine Werte zuvor gesendet wurden, gibt das BehaviorSubject den initialen Wert zurück, der ihm während der Initialisierung zugewiesen wurde.\nEin BehaviorSubject kann nützlich sein, wenn man einen Wert benötigt, auf den man jederzeit zugreifen kann, auch wenn es keine neuen Ereignisse gibt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import { BehaviorSubject } from 'rxjs'; const myBehaviorSubject = new BehaviorSubject('initial value'); myBehaviorSubject.subscribe((value) =\u003e { console.log('Observer 1 received value:', value); }); mySubject.next('Hello Dragon Warrior!'); myBehaviorSubject.subscribe((value) =\u003e { console.log('Observer 2 received value:', value); }); myBehaviorSubject.next('Another value'); // Observer 1 received value: initial value // Observer 1 received value: Hello Dragon Warrior! // Observer 2 received value: Hello Dragon Warrior! // Observer 1 received value: Another value // Observer 2 received value: Another value   ReplaySubject Im Gegensatz zum BehaviorSubject, welches nur den letzten Wert speichert, speichert das ReplaySubject eine definierte Anzahl von Werten, die es an neue Observer weitergibt. Wenn ein neuer Observer sich beim ReplaySubject registriert, erhält er die gespeicherten Werte in der Reihenfolge, in der sie gesendet wurden, bevor er auf zukünftige Werte wartet.\nEin ReplaySubject kann nützlich sein, wenn man eine feste Anzahl von Werten benötigen, auf die man jederzeit zugreifen kann, auch wenn es keine neuen Ereignisse gibt.\nZu beachten ist, dass die Größe des ReplaySubject bei der Initialisierung angegeben wird und die maximale Anzahl der gespeicherten Werte definiert. Wenn mehr Werte gesendet werden, als die Größe des ReplaySubject zulässt, werden ältere Werte entfernt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  import { ReplaySubject } from 'rxjs'; const myReplaySubject = new ReplaySubject(2); myReplaySubject.next('Value 1'); myReplaySubject.next('Value 2'); myReplaySubject.next('Value 3'); myReplaySubject.subscribe((value) =\u003e { console.log('Observer 1 received value:', value); }); myReplaySubject.next('Value 4'); myReplaySubject.subscribe((value) =\u003e { console.log('Observer 2 received value:', value); }); // Observer 1 received value: Value 2 // Observer 1 received value: Value 3 // Observer 1 received value: Value 4 // Observer 2 received value: Value 3 // Observer 2 received value: Value 4   AsyncSubject Im Gegensatz zu anderen Typen von Subjects speichert das AsyncSubject nur den letzten Wert, der von einem Observable gesendet wird, wenn das Observable vollständig abgeschlossen (complete()) ist, selbst wenn die next() Methode aufgerufen wurde. Wurde das Observable vollständig abgeschlossen, wird der letzte Wert an alle Observer weitergegeben, die auf das AsyncSubject subscriben. Ansonsten wird der letzte Wert nicht weitergegeben.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  import { AsyncSubject } from 'rxjs'; const myAsyncSubject = new AsyncSubject(); myAsyncSubject.subscribe((value) =\u003e { console.log('Observer 1 received value:', value); }); myAsyncSubject.next('Value 1'); myAsyncSubject.next('Value 2'); myAsyncSubject.subscribe((value) =\u003e { console.log('Observer 2 received value:', value); }); myAsyncSubject.next('Value 3'); myAsyncSubject.complete(); myAsyncSubject.subscribe((value) =\u003e { console.log('Observer 3 received value:', value); }); // Observer 1 received value: Value 3 // Observer 2 received value: Value 3 // Observer 3 received value: Value 3   ","categories":"","description":"Modul #F6 - Angular - RxJS Subjects\n","excerpt":"Modul #F6 - Angular - RxJS Subjects\n","ref":"/docs/web/angular/05_2_angular_rxjs_subjects/","tags":"","title":"RxJS Subjects"},{"body":"Ziele  Du weisst, was und wozu NgRx ist, und kennst das Kernkonzept davon. Du kannst, es bei dir installieren.  NgRx NgRx ist ein beliebtes State-Management-Framework für Angular-Anwendungen, das auf der Redux-Architektur basiert. Es bietet eine zentrale Datenquelle, den sogenannten Store, um den Anwendungsstatus zu verwalten. Mit NgRx kann man den Zustand einer Anwendung zentralisieren, die Datenflüsse vereinfachen und eine bessere Skalierbarkeit und Testbarkeit erreichen.\nNgRx besteht aus verschiedenen Kernkonzepten:\n  Store: Der Store ist der zentrale Speicherort für den Anwendungsstatus. Er enthält den globalen Zustand deiner Anwendung in einem einheitlichen JavaScript-Objekt. Du kannst den Zustand lesen und ihn mit Aktionen ändern.\n  Actions: Actions repräsentieren Ereignisse oder Absichten, die in einer Anwendung auftreten können. Sie sind einfache JavaScript-Objekte, die eine Typ-Eigenschaft haben, um den Typ der Aktion zu definieren. Actions werden verwendet, um Änderungen im Zustand anzufordern.\n  Reducers: Reducers sind pure Funktionen, die den vorherigen Zustand und eine Aktion als Eingabe erhalten und den neuen Zustand zurückgeben. Sie definieren, wie sich der Zustand der Anwendung basierend auf den empfangenen Aktionen ändert.\n  Selectors: Selectors sind Funktionen, die den Zustand aus dem Store abrufen und bestimmte Teile des Zustands extrahieren. Sie werden verwendet, um Daten aus dem Store zu lesen und an die Components weiterzugeben.\n  Effects: Effects ermöglichen die asynchrone Datenverarbeitung und die Interaktion mit externen APIs. Sie reagieren auf bestimmte Aktionen und führen Nebenwirkungen aus, wie z.B. das Abrufen von Daten von einem Server oder das Auslösen weiterer Aktionen.\n  Installation Um NgRx in einem Angular-Projekt zu verwenden, werden folgende Schritte benötigt:\n Stelle sicher, dass Node.js und npm (Node Package Manager) auf dem Computer installiert sind. (Kann mit npm -v geprüft werden.) Öffne ein Terminal oder eine andere Shell und navigiere zum Hauptverzeichnis des Projekts. Folgenden Befehl ausführen, um NgRx zu installieren:  1  npm install @ngrx/store   Dieser installiert das NgRx Store-Paket, das den zentralen Store und andere wichtige Funktionen für das State-Management bereitstellt. 4. Optional: Je nachdem, welche NgRx-Features man verwenden möchte, kann man weitere NgRx-Pakete installieren. Hier sind einige gängige Pakete:\n1 2 3  npm install @ngrx/effects // Für die Verwendung von Effects npm install @ngrx/entity // Für die Verwendung von Entity State npm install @ngrx/router-store // Für die Integration von Router-Status mit dem Store   Sobald die Installation abgeschlossen ist, können die NgRx-Features im Projekt verwenden werden, indem die entsprechenden Module importiert und konfiguriert werden:   NgRx Store: Um den NgRx Store zu verwenden, muss das StoreModule importiert und im app.module.ts konfiguriert werden.  1 2 3 4 5 6 7 8 9 10  import { StoreModule } from '@ngrx/store'; @NgModule({ imports: [ // ...  StoreModule.forRoot(reducers) // Hier 'reducers' durch den eigenen Reducer ersetzen  ], // ... }) export class AppModule { }    Optional NgRx Effects: Um den NgRx Effects zu verwenden, muss das EffectsModule importiert und im app.module.ts konfiguriert werden.  1 2 3 4 5 6 7 8 9 10 11  import { EffectsModule } from '@ngrx/effects'; import { MyEffects } from './my-effects'; // Hier die eigenen Effects importieren  @NgModule({ imports: [ // ...  EffectsModule.forRoot([MyEffects]) // Hier die eigenen Effects registrieren  ], // ... }) export class AppModule { }    Optional NgRx Entity State: Um den NgRx Entity State zu verwenden, muss das EntityStateModule importiert und im app.module.ts konfiguriert werden.  1 2 3 4 5 6 7 8 9 10  import { EntityStateModule } from '@ngrx/entity'; @NgModule({ imports: [ // ...  EntityStateModule.forRoot(entityConfig) // Hier 'entityConfig' durch die eigene Konfiguration ersetzen  ], // ... }) export class AppModule { }   Debugging Tool Damit man das gesamte auch gut debuggen kann, gibt es eine Chrome Extension, welche dabei hilft. Die Extension bietet eine Vielzahl von Funktionen, um den Zustand des Redux-Stores zu überwachen, Aktionen zu verfolgen und den Ablauf der Anwendung besser zu verstehen.\n","categories":"","description":"Modul #F7 - Angular NgRx - Übersicht\n","excerpt":"Modul #F7 - Angular NgRx - Übersicht\n","ref":"/docs/web/angular_ngrx/06_1_angular_ngrx/","tags":"","title":"(Zusatz) NgRx"},{"body":"Ziele  Du weisst, was NgRx Actions sind und kannst diese anwenden.  NgRx Actions Actions sind einfache JS-Objekte, die eine bestimmte Aktion beschreiben, die in einer Anwendung ausgeführt werden soll. Jede Action hat einen Typ und optional zusätzliche Daten.\nActions spielen eine zentrale Rolle in der Redux-Architektur und dienen als Auslöser für Zustandsänderungen im Store. Durch die Verwendung von Actions, kann man den Zustand der Anwendung eindeutig beschreiben und die Auswirkungen dieser Aktionen auf den Zustand zentral verwalten.\nDie Action Typen werden meistens in einem Enum definiert, so hat man eine bessere Übersicht welche Actions die Anwendung besitzt. Die Typen werden in eckigen Klammern mit einem präfix, der den Kontext der Aktion angibt, geschrieben.\nHier ein Beispiel:\n1 2 3 4 5  export enum ActionTypes { GETABILITIES = '[Dragon Warrior] Get Abilities', ADDABILITY ='[Dragon Warrior] Add Ability', DELETEABILITY= '[Dragon Warrior] Delete Ability' }   Als Nächstes muss man die Typen in einer Action-Creator-Funktion verwenden. Dazu muss diese Funktion zuerst erstellt werden. Mithilfe der createAction-Funktion aus dem @ngrx/store-Package kann man Action-Creator-Funktionen erstellen. Die Funktion createAction akzeptiert den Action-Typ und optional zusätzliche Daten (Props) und gibt eine Action zurück.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import { createAction, props } from '@ngrx/store'; export const getAbilities = createAction( ActionTypes.GETABILITIES ); export const addAbility = createAction( ActionTypes.ADDABILITY, props\u003c{ ability: string }\u003e() ); export const deleteAbility = createAction( ActionTypes.DELETEABILITY, props\u003c{ ability: string }\u003e() );   Diese Action-Creator-Funktionen kann man nun in den Components verwenden und sie auslösen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  import { Component, OnInit } from '@angular/core'; import { FormControl } from '@angular/forms'; import { select, Store } from '@ngrx/store'; import { Observable } from 'rxjs'; import { addAbility, deleteAbility } from 'src/app/actions/ability.actions'; @Component({ // .. }) export class AbilityComponent implements OnInit { ability$: Observable\u003c{ abilities: string[]; }\u003e = new Observable\u003c{ abilities: string[]; }\u003e(); abilities$: Observable\u003cstring[]\u003e = new Observable\u003cstring[]\u003e(); abilityForm: FormControl = new FormControl(''); constructor(private store: Store\u003c{ ability: {abilities: string[]} }\u003e) {} ngOnInit(): void { this.ability$ = this.store.select('ability'); this.abilities$ = this.ability$.pipe(map(x =\u003e { return x.abilities })) } addAbility() { this.store.dispatch(addAbility({ ability: this.abilityForm.value ?? '' })); } deleteAbility(ability: string) { this.store.dispatch(deleteAbility({ ability: ability })); } }   Die Actions werden dann von den Reducer-Funktionen behandelt, um den Zustand zu aktualisieren und auf die Aktionen zu reagieren.\n","categories":"","description":"Modul #F7 - Angular NgRx - Actions\n","excerpt":"Modul #F7 - Angular NgRx - Actions\n","ref":"/docs/web/angular_ngrx/06_2_angular_ngrx_actions/","tags":"","title":"NgRx Actions"},{"body":"Ziele  Du kennst, die viele verschiedenen RxJS-Operatoren und kannst diese auch anwenden.  Operators RxJS bietet eine Vielzahl von Operatoren, die auf Observables angewendet werden können, um sie zu transformieren, zu filtern, zu kombinieren und vieles mehr. Folgend werden die wichtigsten vorgestellt.\nPiping Piping ist ein wichtiger Operator, der es ermöglicht, eine Observable-Kette zu erstellen, indem verschiedene Operatoren nacheinander angewendet werden. Der Piping-Operator wird verwendet, um die Lesbarkeit und Wartbarkeit von Observable-Ketten zu verbessern, indem man sie in kleinere und leichter zu verstehende Abschnitte unterteilt. Wie map funktioniert kann man hier nachlesen.\n1 2 3 4 5 6 7 8 9  import { of, map } from 'rxjs'; of(1, 2, 3) .pipe(map((x) =\u003e x * x)) .subscribe((v) =\u003e console.log(`value: ${v}`)); // value: 1 // value: 4 // value: 9   Creation Operators from Der from Operator, wandelt eine Reihe von Werten oder ein Iterable in ein Observable um. Er akzeptiert eine Quelle von Werten, wie beispielsweise ein Array oder eine Map, und gibt ein Observable zurück, das die Werte dieser Quelle nacheinander emittiert.\n1 2 3 4 5 6 7 8 9 10 11  import { from } from 'rxjs'; const source = from([1, 2, 3, 4, 5]); source.subscribe((value) =\u003e console.log(value)); // 1 // 2 // 3 // 4 // 5   of Der of Operator, wandelt wie der from Operator auch eine feste Anzahl von Werten in ein Observable um. Der Operator akzeptiert jedoch eine beliebige Anzahl von Argumenten und gibt ein Observable zurück, das diese Argumente in der Reihenfolge ihres Auftretens emittiert.\nDer Operator ist besonders nützlich, um eine feste Anzahl von Werten zu emittieren, die bekannt sind, bevor das Observable abonniert wird. Wenn man eine Quelle von Werten hat, die dynamisch generiert werden, ist es wahrscheinlich sinnvoller, den from Operator zu verwenden.\n1 2 3 4 5 6 7 8 9 10 11  import { of } from 'rxjs'; const source = of(1, 2, 3, 4, 5); source.subscribe((value) =\u003e console.log(value)); // 1 // 2 // 3 // 4 // 5   Join Creation Operators Info: In RxJS bezieht sich “Emission” auf den Wert, der von einem Observable emittiert oder ausgegeben wird.\nforkJoin forkJoin ist ein Kombinationsoperator, der ein Array von Observables akzeptiert und wartet, bis alle Observables ihre Emissionen abgeschlossen haben, bevor er ein neues Observable zurückgibt. Das zurückgegebene Observable gibt ein Array von Werten zurück, das den letzten Wert jedes Observables enthält, das dem forkJoin Operator übergeben wurde.\nDieser Operator ist besonders nützlich, wenn man mehrere Quellen von Daten hat, die parallel verarbeitet werden können, und man auf alle Ergebnisse warten muss, bevor man mit der nächsten Phase der Verarbeitung fortfahren kann.\nZu beachten ist, dass der Operator fehlschlägt, wenn eines der übergebenen Observables einen Fehler emittiert, bevor es seine Emissionen abgeschlossen hat.\n1 2 3 4 5 6 7 8 9 10  import { forkJoin, of } from 'rxjs'; const source1 = of('Hello'); const source2 = of('World!'); forkJoin([source1, source2]).subscribe(([value1, value2]) =\u003e { console.log(value1 + ' ' + value2); }); // \"Hello World!\"   concat Der concat Operator kombiniert mehrere Observables sequentiell, indem er die Emissionen des ersten Observables vollständig verarbeitet, bevor er mit dem nächsten Observable fortfährt. Dies bedeutet, dass das zweite Observable erst dann subscribed wird, wenn das erste Observable seine Emissionen vollständig abgeschlossen hat, und so weiter.\nDieser Operator ist besonders nützlich, wenn man sicherstellen muss, dass bestimmte Aktionen in einer bestimmten Reihenfolge ausgeführt werden müssen, oder wenn man die Emissionen von Observables in einer bestimmten Sequenz verarbeiten muss.\nZu beachten gilt jedoch, dass der Operator blockierend ist und erst dann zur nächsten Phase der Verarbeitung übergeht, wenn das vorherige Observable abgeschlossen wurde.\n1 2 3 4 5 6 7 8 9 10 11  import { concat, of } from 'rxjs'; const source1 = of('Hello'); const source2 = of('Dragon Warrior!'); concat(source1, source2).subscribe((value) =\u003e { console.log(value); }); // \"Hello\" // \"Dragon Warrior!\"   merge Der merge Operator kombiniert auch mehrere Observables, indem er die Emissionen aller Observables in einem einzigen Observable zusammenführt. Im Gegensatz zum concat Operator führt merge die Emissionen parallel aus, unabhängig davon, welches Observable die Emissionen zuerst ausgibt.\nBeachten muss man jedoch, dass dieser Operator keine Garantie für die Reihenfolge der Emissionen gibt und dass es möglich ist, dass die Emissionen der Observables sich gegenseitig überschneiden.\n1 2 3 4 5 6 7 8 9 10 11  import { merge, of } from 'rxjs'; const source1 = of('Hello'); const source2 = of('Dragon Warrior!'); merge(source1, source2).subscribe((value) =\u003e { console.log(value); }); // \"Hello\" // \"Dragon Warrior!\"   zip Der zip Operator kombiniert die Emissionen mehrerer Observables zu einer einzelnen Emission. Dabei werden die Emissionen jedes Observables zu einer Gruppe kombiniert, und sobald alle Observables eine Emission abgegeben haben, wird diese Gruppe als Emission des resultierenden Observables ausgegeben.\nDieser Operator ist besonders nützlich, wenn man mehrere Datenströme kombiniert und sicherstellen muss, dass alle Daten synchronisiert sind. Man muss jedoch beachten, dass der Operator die Emissionen jedes Observables zu einer Gruppe kombiniert, was bedeutet, dass die Grösse jeder Emission vom Observable mit der geringsten Anzahl an Emissionen begrenzt wird.\nAuch zu beachten ist, dass der Operator darauf wartet, dass alle Observables eine Emission abgeben, bevor er eine Emission ausgibt. Wenn ein Observable keine Emission abgibt, wird das resultierende Observable keine Emissionen ausgeben.\n1 2 3 4 5 6 7 8 9 10 11 12  import { zip, of } from 'rxjs'; const source1 = of('Hello'); const source2 = of('Dragon'); const source3 = of('Warrior'); zip(source1, source2, source3).subscribe((value) =\u003e { console.log(value); }); // [\"Hello\", \"Dragon\", \"Warrior\"]    Transformation Operators map Der meist verwendete RxJS-Operator ist der map Operator wird verwendet, um die Werte eines Observables zu transformieren. Es gibt viele Anwendungsfälle für diesen Operator, einschliesslich der Umwandlung von Daten in ein anderes Format, der Extraktion von bestimmten Werten aus einem Datenstrom oder der Anwendung einer Funktion auf jeden Wert in einem Observable.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import { of } from 'rxjs'; import { map } from 'rxjs/operators'; const source = of(1, 2, 3, 4, 5); const doubled = source.pipe( map((value) =\u003e value * 2) ); doubled.subscribe((value) =\u003e console.log(value)); // 2 // 4 // 6 // 8 // 10   mergeALL/mergeMap Es kann passieren das man Observable eine Methode aufruft, die ein weiteres Observable zurückgibt, das ist vielfach der Fall bei API-Abfrage. Somit hat man dann ein äusseres und inneres Observable, um nun an die Daten zu gelangen, müsste man auf beide subscriben was auch möglich ist:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import { of, from, map } from 'rxjs'; const getData = (param) =\u003e { return of(`retrieved new data with param ${param}`); }; from([1, 2, 3, 4]) .pipe(map((param) =\u003e getData(param))) .subscribe((value) =\u003e value.subscribe((data) =\u003e console.log(data))); // retrieved new data with param 1 // retrieved new data with param 2 // retrieved new data with param 3 // retrieved new data with param 4    Dies ist aber alles andere als optimal, weshalb man mergeMap benutzen kann. mergeMap ist eine kombination von mergeAll und map. mergeAll erledigt die subscription auf das innere Observable so muss man dann nicht mehr zweimal subscriben zudem merged es das innere Observable in das äussere.\nBeispiel mit mergeAll:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import { of, from, map, mergeAll } from 'rxjs'; const getData = (param) =\u003e { return of(`retrieved new data with param ${param}`); }; from([1, 2, 3, 4]) .pipe( map((param) =\u003e getData(param)), mergeAll() ) .subscribe((value) =\u003e console.log(value)); // retrieved new data with param 1 // retrieved new data with param 2 // retrieved new data with param 3 // retrieved new data with param 4   Beispiel mit mergeMap:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  import { of, from, mergeMap } from 'rxjs'; const getData = (param) =\u003e { return of(`retrieved new data with param ${param}`); }; from([1, 2, 3, 4]) .pipe(mergeMap((param) =\u003e getData(param))) .subscribe((value) =\u003e console.log(value)); // retrieved new data with param 1 // retrieved new data with param 2 // retrieved new data with param 3 // retrieved new data with param 4   switchAll/switchMap switchMap ist ähnlich wie das mergeMap, es subscribed auch das innere Observable. Auch hier ist switchMap eine Kombination, und zwar von switchAll und map. switchAll canceled die vorherige Subscription und subscribed auf die neue, wenn ein neues Observable reinkommt.\nWie delay funktioniert kann man hier nachlesen.\nBeispiel mit switchAll:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  import { of, from, map, switchAll ,delay } from 'rxjs'; const getData = (param) =\u003e { return of(`retrieved new data with param ${param}`).pipe(delay(1000)); }; from([1, 2, 3, 4]) .pipe( map((param) =\u003e getData(param)), switchAll() ) .subscribe((value) =\u003e console.log(value)); // retrieved new data with param 4   Beispiel mit switchMap:\n1 2 3 4 5 6 7 8 9 10 11  import { of, from, switchMap, delay } from 'rxjs'; const getData = (param) =\u003e { return of(`retrieved new data with param ${param}`).pipe(delay(1000)); }; from([1, 2, 3, 4]) .pipe(switchMap((param) =\u003e getData(param))) .subscribe((value) =\u003e console.log(value)); // retrieved new data with param 4   concatMap Auch concatMap subscribed auf das innere Observable. Der Unterschied zum switchMap ist das concatMap nicht die Subscription canceled, wenn ein neues Observable reinkommt, sondern es subscribed solange nicht auf das nächste Observable bis das momentan fertig ist.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  import { of, from, delay, concatMap } from 'rxjs'; const getData2 = (param) =\u003e { return of(`2 retrieved new data with param ${param}`).pipe(delay(1000)); }; from([1, 2, 3, 4]) .pipe(concatMap((param) =\u003e getData2(param))) .subscribe((value) =\u003e console.log(value)); // [wait 1s] // retrieved new data with param 1 // [wait 1s] // retrieved new data with param 2 // [wait 1s] // retrieved new data with param 3 // [wait 1s] // retrieved new data with param 4   groupBy Die groupBy() Methode ermöglicht es, ein Observable in mehrere Observables aufzuteilen, die auf der Grundlage eines bestimmten Schlüssels gruppiert sind.\nDer Prozess besteht darin, die ursprünglichen Emissionen in Gruppen aufzuteilen, die jeweils auf einen eindeutigen Schlüssel abgebildet werden. Jede Gruppe ist ein eigenes Observable, das alle Emissionen enthält, die diesem Schlüssel zugeordnet sind.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  import { from } from 'rxjs'; import { groupBy, mergeMap, toArray } from 'rxjs/operators'; interface Person { name: string; age: number; } const people: Person[] = from([ { name: 'John', age: 30 }, { name: 'Jane', age: 25 }, { name: 'Bob', age: 30 }, { name: 'Alice', age: 25 } ]); people .pipe( groupBy(person =\u003e person.age), mergeMap(group =\u003e group.pipe(toArray())) ) .subscribe(group =\u003e console.log(group)); // [ { name: 'Jane', age: 25 }, { name: 'Alice', age: 25 } ] // [ { name: 'John', age: 30 }, { name: 'Bob', age: 30 } ]   Filtering Operators elementAt elementAt() wir benutzt um, ein Element eines Observable an der angegebenen Indexposition auszugeben und das Observable zu schliessen. Der Operator gibt ein Observable zurück, das nur das angeforderte Element emittiert und dann vollständig schliesst.\nMan kann nach der Indexposition auch einen Defaultwert angeben, welcher zurückgegeben wird, wenn das Element an der angegebenen Indexposition nicht gefunden wurde.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  import { of } from 'rxjs'; import { elementAt } from 'rxjs/operators'; const source$ = of('A', 'B', 'C', 'D', 'E'); // ohne Defaultwert source$.pipe( elementAt(2) // 'C' ).subscribe(console.log); // mit Defaultwert source$.pipe( elementAt(10, 'F') // 'F' ).subscribe(console.log);   filter filter wird verwendet, um Observable-Elemente zu filtern, die nicht den Bedingungen entsprechen, die in der übergebenen Funktion definiert sind. Die Filterfunktion gibt ein neues Observable zurück, das nur Elemente enthält, die die Bedingungen der Filterfunktion erfüllen.\n1 2 3 4 5 6 7 8 9  import { of } from 'rxjs'; import { filter } from 'rxjs/operators'; const source = of(1, 2, 3, 4, 5); const filtered = source.pipe(filter((x) =\u003e x % 2 === 0)); filtered.subscribe((x) =\u003e console.log(x)); // 2 // 4    first Der first Operator gibt nur das erste Element aus einem Observable zurück. Man kann den Operator aber auch mittels einer Funktion ergänzen, um eine Bedienung zu schaffen, somit wird dann das erste Element zurückgegeben, welches nach dieser Bedingung zutrifft. Nach der Funktion kann man auch einen Defaultwert hinzufügen, welcher zurückgegeben werden soll, wenn kein Element gefunden wird. Gibt man keinen Defaultwert an und die Bedingung trifft nicht zu, so wird ein fehler ausgegeben.\n1 2 3 4 5 6 7 8 9 10  import { of } from 'rxjs'; import { first } from 'rxjs/operators'; const source = of(1, 2, 3); source.pipe(first()).subscribe((value) =\u003e console.log(value)); // 1  source.pipe(first((x) =\u003e x \u003e 2)).subscribe((value) =\u003e console.log(value)); // 3  source.pipe(first((x) =\u003e x \u003e 3, null)).subscribe((value) =\u003e console.log(value)); // null   last Der last Operator funktioniert genau gleich wie der first Operator. Nur das hier immer das letzte Element zurückgegeben wird.\n1 2 3 4 5 6 7 8 9 10  import { of } from 'rxjs'; import { first, last } from 'rxjs/operators'; const source = of(1, 2, 3); source.pipe(last()).subscribe((value) =\u003e console.log(value)); // 3  source.pipe(last((x) =\u003e x \u003e 2)).subscribe((value) =\u003e console.log(value)); // 3  source.pipe(last((x) =\u003e x \u003e 3, null)).subscribe((value) =\u003e console.log(value)); // null   skip Der skip Operator gibt an, wie viele Ereignisse in einem Observable übersprungen werden sollen, bevor sie an einen Subscriber weitergegeben werden. Es wird verwendet, um den Startpunkt eines Observables zu verschieben.\n1 2 3 4 5 6 7 8  import { of } from 'rxjs'; import { skip } from 'rxjs/operators'; const source = of(1, 2, 3, 4, 5); const result = source.pipe(skip(3)); result.subscribe((value) =\u003e console.log(value)); // 4 // 5   take Der take() Operator gibt eine bestimmte Anzahl von Werten eines Observables aus und schliesst es dann ab. Der Operator akzeptiert als Parameter die Anzahl der Werte, die ausgegeben werden sollen. Wenn der Parameter nicht angegeben wird, wird standardmässig nur ein Wert ausgegeben. Sind weniger Werte verfügbar asl angegeben, gibt der Operator die Anzahl Werte, die er zur Verfügung hat aus.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  import { of } from 'rxjs'; import { take } from 'rxjs/operators'; const source = of(1, 2, 3, 4, 5); source.pipe(take(3)).subscribe((value) =\u003e console.log(value)); // 1 // 2 // 3  source.pipe(take(10)).subscribe((value) =\u003e console.log(value)); // 1 // 2 // 3 // 4 // 5   takeUntil takeUntil ist ein Operator, der ein Observable subscribed, bis ein anderes Observable ein Ereignis ausgibt. Es wird verwendet, um das Subscriben eines Observables zu beenden, basierend auf einem anderen Observable.\nDas zweite Observable wird als “Abbruch- oder Trigger-Observable” bezeichnet. Sobald das Trigger-Observable ein Ereignis ausgibt, wird das Subscriben des ersten Observables beendet und das Observable gibt keine weiteren Werte mehr aus.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  import { interval, Subject } from 'rxjs'; import { takeUntil } from 'rxjs/operators'; const stop$: Subject\u003cvoid\u003e = new Subject\u003cvoid\u003e(); // ein Observable, das jede Sekunde eine Zahl sendet const observable$ = interval(1000).pipe(takeUntil(stop$)); observable$.subscribe((val) =\u003e console.log(val)); // Observable nach 5 Sekunden stoppen setTimeout(() =\u003e { stop$.next(); stop$.complete(); }, 5000); // 0 // 1 // 2 // 3 // 4   In der Praxis wird es häufig in Nomination von ngOnDestroy verwendet. Den ngOnDestroy()ist eine Lifecycle-Methode welche aufgerufen wird, bevor eine Komponente aus dem DOM entfernt wird. Somit kann man takeUntil verwenden, um Subscriptions zu beenden und somit Ressourcen freizugeben und Speicherlecks zu vermeiden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  import { Component, OnInit, OnDestroy } from '@angular/core'; import { interval, Subject } from 'rxjs'; import { takeUntil } from 'rxjs/operators'; @Component({ // .. }) export class WeaponComponent implements OnInit, OnDestroy { private destroy$: Subject\u003cvoid\u003e = new Subject\u003cvoid\u003e(); // Ein Subject erstellen, das das Zerstören des Observable signalisiert  ngOnInit() { interval(1000) .pipe(takeUntil(this.destroy$)) // Das Observable subscriben und es beenden, wenn das destroy$-Subject ein Ereignis auslöst  .subscribe(value =\u003e console.log(value)); } ngOnDestroy() { this.destroy$.next(); // Das destroy$-Subject ein Ereignis auslösen, um das Observable zu beenden  this.destroy$.complete(); // Das destroy$-Subject komplett schliessen, um Speicherlecks zu vermeiden  } }   Error Handling Operators catchError catchError ist ein Operator, der verwendet wird, um Fehler in Observables zu verarbeiten. Er erlaubt es, einen alternativen Observable zurückzugeben oder eine andere Aktion auszuführen, wenn ein Fehler im ursprünglichen Observable auftritt.\nDenn normalerweise, wenn ein Fehler in einem Observable auftritt, wird das gesamte Observable abgebrochen und keine weiteren Werte emittiet. Wenn man jedoch catchError verwendet, kann man eine Funktion angeben, die den Fehler verarbeitet und ein alternatives Observable zurückgibt. Dadurch kann man das Observable weiterlaufen lassen, anstatt es abzubrechen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  import { of } from 'rxjs'; import { catchError, map } from 'rxjs/operators'; const source = of(1, 2, 3, 4, 5); const result = source.pipe( map((value) =\u003e { if (value === 3) { throw new Error('Value cannot be 3'); } return value; }), catchError((error) =\u003e { console.log(`Caught error: ${error}`); return of('one', 'two'); }) ); result.subscribe({ next: (value) =\u003e { console.log(`Result: ${value}`); }, error: (error) =\u003e { console.log(`Error: ${error}`); }, complete: () =\u003e { console.log('Complete'); }, }); // Result: 1 // Result: 2 // Caught error: Error: Value cannot be 3 // Result: one // Result: two // Complete   retry retry() versucht, das Observable beim ersten Fehler neu zu starten. Dabei wird das gesamte Observable neu subscribed. Wenn das erneute Subscriben wieder einen Fehler erzeugt, wird das Observable erneut neu gestartet und so weiter, bis das erneute Subscriben erfolgreich ist.\nWenn man dies aber nicht unendlich machen möchte, bis man erfolgreich ist, kann man die Anzahl der Wiederholungen als Parameter dem retry() mitgeben.\nIn der Praxis verwendet man es viel, um API-Request zu wiederholen, wenn sie fehlschlagen, da sie evtl. zu lange hatten.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  import { interval } from 'rxjs'; import { retry, map } from 'rxjs/operators'; const result = interval(1000).pipe( map((value) =\u003e { if (Math.random() \u003c 0.5) { throw new Error('Something went wrong'); } return value; }), retry(2) ); result.subscribe( (value) =\u003e console.log('Value: ', value), (error) =\u003e console.log('Error: ', error) );   Utility Operators tap Das tap Operator ermöglicht es, “side actions” auf den Werten auszuführen, die von einem Observable emittiert werden, ohne die emittierten Werte zu verändern. Man kann es verwenden, um die emittierten Werte zu debuggen und zu untersuchen oder um eine Aktion auf Grundlage dieser Werte auszulösen, ohne die Observable-Pipeline zu beeinflussen.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  import { tap } from 'rxjs/operators'; import { of } from 'rxjs'; const source = of(1, 2, 3); source .pipe( tap((value) =\u003e console.log(`Value before: ${value}`)), tap((value) =\u003e value * 2), tap((value) =\u003e console.log(`Value after: ${value}`)) ) .subscribe((value) =\u003e console.log(value)); // Value before: 1 // Value after: 1 // 1 // Value before: 2 // Value after: 2 // 2 // Value before: 3 // Value after: 3 // 3   delay delay verzögert das Weiterleiten von Werten eines Observable um eine bestimmte Zeitspanne. Dadurch kann man eine Verzögerung in der Ausführung von Aktionen erzielen, was besonders nützlich ist, wenn man z.B. Animationen oder Zeitabhängigkeiten implementiert.\n1 2 3 4 5 6 7  import { delay, of } from 'rxjs'; const source = of(1, 2, 3, 4, 5); const delayedSource = source.pipe(delay(1000)); // dauert eine Sekunde bis alle Werte ausgegben werden delayedSource.subscribe((value) =\u003e console.log(value));   Conditional and Boolean Operators every Der every Operator prüft, ob alle Werte, die von einem Observable emittiert werden, eine bestimmte Bedingung erfüllen. Wenn die Bedingung für alle Werte true zurückgibt, gibt der Operator true zurück. Wenn die Bedingung für mindestens einen Wert false zurückgibt, gibt auch der Operator false zurück.\n1 2 3 4 5 6 7 8 9 10  import { from } from 'rxjs'; import { every } from 'rxjs/operators'; const source = from([1, 2, 3, 4, 5]); const resultTrue = source.pipe(every((value) =\u003e value \u003c 6)); const resultFalse = source.pipe(every((value) =\u003e value \u003c 5)); resultTrue.subscribe(console.log); // Output: true resultFalse.subscribe(console.log); // Output: false   find find ist ein Operator, welcher es ermöglicht, in einem Observable nach dem ersten Element zu suchen, das eine angegebene Bedingung erfüllt. Wenn das Element gefunden wird, wird es in einem Observable zurückgegeben und die Suche wird beendet.\n1 2 3 4 5 6 7 8 9 10 11 12  import { from } from 'rxjs'; import { find } from 'rxjs/operators'; const numbers = from([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); numbers.pipe(find((x) =\u003e x \u003e 5)).subscribe( (value) =\u003e console.log(value) // 6 ); numbers.pipe(find((x) =\u003e x \u003e 10)).subscribe( (value) =\u003e console.log(value) // undefined );   findIndex Der findIndex Operator gibt den Index des ersten Elements in eines Observables zurück, das die angegebene Bedingung erfüllt. Sie funktioniert ähnlich wie find, aber gibt den Index des Elements statt des Elements selbst zurück.\n1 2 3 4 5 6 7 8 9 10 11  import { findIndex, from } from 'rxjs'; const numbers = from([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); numbers.pipe(findIndex((x) =\u003e x \u003e 5)).subscribe( (value) =\u003e console.log(value) // 5 ); numbers.pipe(findIndex((x) =\u003e x \u003e 10)).subscribe( (value) =\u003e console.log(value) // -1 );   isEmpty isEmpty ist ein Operator, welcher prüft, ob eine Observable leer ist oder nicht. Wenn das Observable leer ist, gibt der Operator true zurück, andernfalls false.\n1 2 3 4 5 6 7 8 9 10 11  import { of } from 'rxjs'; import { isEmpty } from 'rxjs/operators'; const emptySource = of(); const fullSource = of(1, 2, 3, 4, 5); const emptyObservable = emptySource.pipe(isEmpty()); const fullObseravle = fullSource.pipe(isEmpty()); emptyObservable.subscribe((value) =\u003e console.log(value)); // true fullObseravle.subscribe((value) =\u003e console.log(value)); // false   ","categories":"","description":"Modul #F6 - Angular - RxJS Operators\n","excerpt":"Modul #F6 - Angular - RxJS Operators\n","ref":"/docs/web/angular/05_3_angular_rxjs_operators/","tags":"","title":"RxJS Operators"},{"body":"Signals Signals sind etwas Ähnliches wie Observable von RxJs. Es ist ein Wrapper um einen Wert, welcher Konsumenten benachrichtigen kann, wenn sich der Wert ändert. Signals gibt es als Read-Only oder als Writable. Der Wert eines Signals wird immer durch eine getter-function gelesen. Wenn man ein Signal aufruft, wird der Wert darin gelesen. Man kann in Signals von primitiven bis hin zu komplexen Datenstrukturen wrappen\nWritable Signals Ein writable Signal kann ganz simple erstellt werden, in dem man die signal() funktion aufruft mit dem initialen Wert.\n1 2 3 4  const count = signal(0); // Signals are getter functions - calling them reads their value. console.log('The count is: ' + count());   Wenn man den gesamten Wert unabhängig vom momentanen ändern möchte, kann man .set() aufrufen.\n1  count.set(3);   Möchte man jedoch mithilfe des momentanen Wertes was machen möchte, muss man .update() aufrufen.\n1 2  // Increment the count by 1. count.update(value =\u003e value + 1);   Die Variabel count hat automatisch den Type WritableSignal.\nComputed signals (Read-Only) Ein Computed Signal erhält seinen Wert von einem andern Signal, meist ein Writable Signal. Möchte man ein Computed Signal erstellen so die computed() Funktion verwenden.\n1 2  const count: WritableSignal\u003cnumber\u003e = signal(0); const doubleCount: Signal\u003cnumber\u003e = computed(() =\u003e count() * 2);   Bei einem Computed Signal kann man nicht direkt einen wert mit .set() setzen wie bei den Writable. Es wird einen Compilation Error geben.\nlazily evaluated and memoized Der Wert des Computed Signals wird so lange nicht berechnet bis man es aufruft, danach wird der Wert gecached. Wenn man nun den Wert des Computed Signals erneut liest, wird es nicht neu berechnet, sondern nimmt den Wert aus dem Cache. Wenn man jedoch das Writable Signal, welches im Computed Signal verwendet wird ändert, weiss angular das der Wert im Cache für das Computed Signal nicht mehr valid ist. Somit wird der Wert neu berechnet wenn man das Computed Signal das nächste Mal aufruft und wieder gespeichert.\nComputed signal dependencies are dynamic Es werden nur die Signals getracked, die während der Ableitung auch gelesen werden.\nZum Beispiel wird im folgenden Beispiel das Signal “count” nur gelesen, wenn das Signal “showCount” wahr ist\n1 2 3 4 5 6 7 8 9  const showCount = signal(false); const count = signal(0); const conditionalCount = computed(() =\u003e { if (showCount()) { return `The count is ${count()}.`; } else { return 'Nothing to see here!'; } });   Beim Lesen von conditionalCount wird, wenn showCount false ist, die Nachricht “Hier gibt es nichts zu sehen!” zurückgegeben, ohne das Signal count zu lesen. Das bedeutet, dass eine spätere Aktualisierung von count nicht dazu führt, dass conditionalCount neu berechnet wird.\nWenn showCount auf true setzen und dann erneut conditionalCount lesen, wird die Ableitung erneut ausgeführt und der Zweig ausgeführt, in dem showCount wahr ist. Es wird die Nachricht zurückgegeben, die den Wert von count anzeigt. Eine Änderung von count würde dann den zwischengespeicherten Wert von `conditionalCount ungültig machen.\nZu beachten ist, dass dependencies während einer Ableitung sowohl hinzugefügt als auch entfernt werden können. Wenn showCount später wieder auf false gesetzen wird, wird count nicht mehr als dependencies von conditionalCount betrachtet.\nEffects Signals sind ein interessanter Aspekt in Angular, da sie consumers benachrichtigen, wenn sie sich ändern. Der effect ist eine Operation, welche ausgeführt wird sobald ein oder mehrere Werte eines Signals ändern. effect werden folgendermassen erstellt:\n1 2 3  effect(() =\u003e { console.log(`The current count is: ${count()}`); });   effect werden im minimum immer einmal ausgeführt. Wenn ein effect ausgeführt wird, verfolgt er alle gelesenen Werte des Signals. Immer wenn sich einer dieser Werte ändert, wird der effect erneut ausgeführt. Ähnlich wie bei computed signal verfolgen effect ihre dependencies dynamisch und erfassen nur Signals, die in der aktuellsten Ausführung gelesen wurden. effect werden immer asynchron während des change detection process ausgeführt.\neffect werden in den meisten Anwendungsfällen selten benötigt, können jedoch in speziellen Situationen nützlich sein. Hier sind einige Beispiele von Situationen, in denen ein effect eine gute Lösung sein könnte:\n Logging von angezeigten Daten und deren Änderungen, entweder für Analysezwecke oder als Debugging-Tool. Synchronisierung von Daten mit window.localStorage. Hinzufügen von benutzerdefiniertem DOM-Verhalten, das nicht mit der Template-Syntax ausgedrückt werden kann. Durchführung von benutzerdefinierter rendering auf einem \u003ccanvas\u003e, in einer Diagrammbibliothek oder einer anderen UI-library von Drittanbietern.  Advanced topics Signal equality functions Wenn man ein Signal (egal ob Writable oder computed) erstellt, kann man optional eine equality function angeben. Diese wird verwendet um zu prüfen, ob ein neuer Wert sich zum vorherigen unterscheidet.\n1 2 3 4 5 6 7  import _ from 'lodash'; const data = signal(['test'], {equal: _.isEqual}); // Even though this is a different array instance, the deep equality // function will consider the values to be equal, and the signal won't // trigger any updates. data.set(['test']);   Reading without tracking dependencies Vereinzelt ist es erforderlich, Code auszuführen, der möglicherweise Signale innerhalb einer reaktiven Funktion wie computed oder effect liest, ohne eine dependency zu erstellen.\nBeispielsweise, nehmen wir an, dass bei einer Änderung von currentUser der Wert eines counter protokolliert werden soll. Es kann ein Effekt erstellen werden, der beide Signale liest:\n1 2 3  effect(() =\u003e { console.log(`User set to ${currentUser()}and the counter is ${untracked(counter)}`); });   Dieses Beispiel gibt eine Meldung aus, wenn sich entweder currentUser oder counter ändert. Wenn der Effekt jedoch nur dann ausgeführt werden soll, wenn sich currentUser ändert, ist das Lesen von counter nur zufällig, und Änderungen an counter sollten keine neue Meldung protokollieren.\nMan kann verhindern, dass ein Signal-Lesen verfolgt wird, indem man seinen Getter mit `untracked aufrufen:\n1 2 3  effect(() =\u003e { console.log(`User set to ${currentUser()}and the counter is ${untracked(counter)}`); });   untracked ist auch nützlich, wenn ein Effekt externen Code aufrufen muss, der nicht als dependency behandelt werden soll:\n1 2 3 4 5 6 7 8  effect(() =\u003e { const user = currentUser(); untracked(() =\u003e { // If the `loggingService` reads signals, they won't be counted as  // dependencies of this effect.  this.loggingService.log(`User set to ${user}`); }); });   Effect cleanup functions Effekte können lang laufende Operationen starten, die abgebrochen werden sollten, wenn der Effekt zerstört wird oder bevor die erste Operation abgeschlossen ist und der Effekt erneut gestartet wird. Wenn man einen Effekt erstellt, kann die Funktion optional eine onCleanup-Funktion als ihren ersten Parameter akzeptieren. Diese onCleanup-Funktion ermöglicht es, einen callback zu registrieren, welcher aufgerufen wird, bevor der nächste Durchlauf des Effekts beginnt oder wenn der Effekt zerstört wird.\n1 2 3 4 5 6 7 8 9  effect((onCleanup) =\u003e { const user = currentUser(); const timer = setTimeout(() =\u003e { console.log(`1 second ago, the user became ${user}`); }, 1000); onCleanup(() =\u003e { clearTimeout(timer); }); });   ","categories":"","description":"Modul #F6 - Angular - Signals in Angular\n","excerpt":"Modul #F6 - Angular - Signals in Angular\n","ref":"/docs/web/angular/05_4_angular_signals/","tags":"","title":"Signals"},{"body":"Ziele  Du weisst, was NgRx Reducers sind und kannst diese anwenden. Du weisst, wie und warum die Reducers beim Root registriert werden.  NgRx Reducers Reducers sind Funktionen in NgRx, die den aktuellen Zustand des Stores und eine Action als Parameter entgegennehmen und den neuen Zustand des Stores zurückgeben. Sie sind dafür verantwortlich, den Zustand basierend auf den eingehenden Aktionen zu aktualisieren.\nReducers in NgRx folgen dem Redux-Muster und sollten immer eine rein funktionale Programmierung befolgen. Das bedeutet, dass sie den aktuellen Zustand nicht verändern, sondern einen neuen Zustand erstellen und zurückgeben.\nFür jeden State, der in der Applikation verwendet werden soll, wird ein Interface erstellt. Diese Interfaces werden dazu verwendet mindestens einen weiteren State zu definieren, nämlich den Initialen State. Mit dem Initialen State wird vermieden, dass der State undefined sein kann.\nDa meistens mehrere Actions vorhanden sind, müssen diese auch unterschieden werden. Dazu ist die on-Funktion da, diese kann einen Fallunterschied zwischen den Actions erstellen. Durch die Verwendung der props in den Action-Creator-Funktionen kann man die relevanten Daten an die Reducer-Funktion übergeben und im Reducer-Zustand verwenden.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  import { createReducer, on } from '@ngrx/store'; import { addAbility, deleteAbility, getAbilities } from '../actions/ability.actions'; export interface AbilityState { abilities: string[] } export const initialState: AbilityState = { abilities: [], }; export const abilityReducer = createReducer( initialState, on(getAbilities, (state) =\u003e state), on(addAbility, (state, { ability }) =\u003e ({ ...state, abilities: [...state.abilities, ability] })), on(deleteAbility, (state, { ability }) =\u003e ({ ...state, abilities: state.abilities.filter((existingAbility) =\u003e existingAbility !== ability), })) );   Root State Registrieren Der State muss registriert werden, damit er im NgRx Store verwaltet und von den Komponenten deiner Angular-Anwendung genutzt werden kann.\nBesitzt man nur einen Reducer in der Anwendung so kann man diesen einfach im app.module.ts angeben.\nWichtig ist das der Key im forRoot() gleich ist wie der Key vom Reducername (z.B. auth: authReducer oder userProfile: userProfileReducer).\n1 2 3 4 5 6 7 8 9 10 11 12  import { NgModule } from '@angular/core'; import { StoreModule } from '@ngrx/store'; @NgModule({ // ..  imports: [ StoreModule.forRoot({ ability: abilityReducer }) // ..  ], // .. }) export class AppModule {}   Wenn man mehr als einen Reducer besitzt, muss man eine Root-Reducer erstellen. Dieser kombiniert alle Reducer und definiert den Gesamtzustand einer Anwendung. Durch die Registrierung des States im app.module.ts mit StoreModule.forRoot(rootReducer) wird der Root-Reducer als zentrale Instanz für das Verwalten des Zustands festgelegt.\n1 2 3 4 5 6 7 8 9 10  import { ActionReducerMap } from '@ngrx/store'; import { AppState } from './app-state'; import { reducer1 } from './reducer1'; import { reducer2 } from './reducer2'; export const rootReducer: ActionReducerMap\u003cAppState\u003e = { prop1: reducer1, prop2: reducer2, // Weitere Reducer für andere Zustandseigenschaften };   1 2 3 4 5 6 7 8 9 10 11 12  import { NgModule } from '@angular/core'; import { StoreModule } from '@ngrx/store'; import { rootReducer } from './reducers'; // Hier muss man den Root-Reducer importieren  @NgModule({ imports: [ StoreModule.forRoot({ root: rootReducer }) // ..  ], // .. }) export class AppModule {}   ","categories":"","description":"Modul #F7 - Angular NgRx - Reducers sind\n","excerpt":"Modul #F7 - Angular NgRx - Reducers sind\n","ref":"/docs/web/angular_ngrx/06_3_angular_ngrx_reducers/","tags":"","title":"NgRx Reducers"},{"body":"Ziele  Du weisst, was NgRx Selectors sind und kannst diese anwenden. Du weisst, was das AppState ist.  AppState In einer typischen NgRx-Anwendung kann die AppState-Datei verwendet werden, um den gesamten Anwendungsstatus zu definieren und zu typisieren. Sie enthält normalerweise eine Schnittstelle oder ein Interface, das alle Teilzustände oder Slices des Anwendungsstatus definiert und zu einem Gesamtzustand kombiniert.\n1 2 3  export interface AppState { ability: AbilityState; }   NgRx Selectors Selectors sind Funktionen, die dazu dienen, bestimmte Teile des Zustands aus dem Store abzurufen. Sie ermöglichen es, den Zustand zu filtern, zu transformieren und zu kombinieren, um spezifische Daten abzurufen, die von den Components verwendet werden.\nIn unserem Beispiel vereinfachen wir das Beispiel aus den Actions da man dort nur mühsam zu den abilities gekommen ist.\n1 2 3 4 5 6 7 8  import { createSelector } from \"@ngrx/store\"; import { AbilityState, AppState } from \"../reducer/ability.reducer\"; export const getAbilities = createSelector( (state: AppState) =\u003e state.ability, (abilityState: AbilityState) =\u003e abilityState.abilities );   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  import { Component, OnInit } from '@angular/core'; import { Store, select } from '@ngrx/store'; import { addAbility, deleteAbility } from 'src/app/actions/ability.actions'; import { AppState } from 'src/app/reducer/ability.reducer'; import { getAbilities } from 'src/app/selectors/ability.selectors'; @Component({ // .. }) export class AbilityComponent implements OnInit { abilities$: Observable\u003cstring[]\u003e = new Observable\u003cstring[]\u003e(); constructor(private store: Store\u003cAppState\u003e) {} ngOnInit(): void { this.abilities$ = this.store.pipe(select(getAbilities)); } // .. }   ","categories":"","description":"Modul #F7 - Angular NgRx - Selectors\n","excerpt":"Modul #F7 - Angular NgRx - Selectors\n","ref":"/docs/web/angular_ngrx/06_4_angular_ngrx_selectors/","tags":"","title":"NgRx Selectors"},{"body":"Ziele  Du weisst, was ein JWT ist und wie dieser zusammengesetzt ist.  Exkurs JWT JWT ist ein offener Standard (RFC 7519) zur sicheren Übermittlung eines JSON-Objekts. In der Regel muss sich der Benutzer anmelden und erhält dann einen Token für API-Calls. Der Token besteht aus drei Teilen: Header, Payload und Signatur. Da der Payload alle erforderlichen Informationen enthält, ist für die Authentifizierung keine Datenbankabfrage erforderlich. Das ist besonders für die Skalierung zustandsloser Backend-Architekturen super!\nEs ist jedoch wichtig, JWT mit Vorsicht zu verwenden und Sicherheitsvorkehrungen zu treffen, um Angriffe wie Token-Entführung oder Token-Manipulation zu verhindern. Dazu gehören Massnahmen wie die sichere Speicherung von geheimen Schlüsseln, die Verwendung von HTTPS für die Token-Übertragung und die Implementierung von Ablaufzeiten und erneuerbaren Tokens.\nSichere Kommunikation mit JSON Web Token Ein JWT kann von jedem dekodiert und gelesen werden. Tatsächlich ist das für den Client und das Debuggen nützlich. Die Payload wird nicht verschlüsselt (für Verschlüsselung s. JWE), aber gültige Signaturen können nur erstellt werden, wenn man ein Geheimnis kennt. Jedes Mal, wenn ein Token empfangen wird, muss eine Integritätsprüfung die Signatur bestätigen. So wird sichergestellt, dass der Token nicht manipuliert wurde. Danach wird sein Inhalt als vertrauenswürdig eingestuft.\nDie Gültigkeitsdauer des Token kann begrenzt werden, indem zeitbezogene Claims wie iat (“Issued At”), nbf (“Not Before”) und exp (“Expiration Time”) einbezogen werden. Ein abgelaufener JWT ist zwar weiterhin gültig, da es jedoch nicht möglich ist, Einträge zu manipulieren, ohne die Signatur zu zerstören, wird bei der serverseitigen Integritätsprüfung das Ablaufdatum des Tokens gelesen und der Zugriff verweigert.\nEin Nachteil ist das sehr komplizierte Widerrufen eines Tokens. Eine gängige Lösung ist das Blacklisting. Außerdem helfen kurze Gültigkeitsdauern.\nBeispiel für die Erstellung eines JSON Web Token\nEin typisches JWT sieht folgendermassen aus (Header, Payload, Signature):\nxxxxx.yyyyyy.zzzzzz\nHeader Der Header ist typischerweise in zwei Parts aufgeteilt: der erste Part ist der benötigte Algorythmus und der zweite der Typ des Tokens. Unten ein Beispiel dazu:\n1 2 3 4  { \"alg\": \"HS256\", \"typ\": \"JWT\" }   Payload Der zweite Teil des Tokens der Payload, welche die erstellten Forderungen enthält. Forderungen sind Aussagen über eine Entität (normalerweise den Benutzer) und zusätzliche Daten. Es gibt drei Arten von Forderungen : registrierte, öffentliche und private.\n Registrierte: Reihe vordefinierter Forderungen die nicht obligatorisch aber empfohlen sind; iss(Emittent), exp(Ablaufzeit), sub(Betreff) und aud(Publikum) Öffentliche: Können nach Belieben definiert werden. Um Kollisionen zu vermeiden, sollten sie jedoch in der IANA JSON Web Token Registry definiert sein. Private: Hierbei handelt es sich um benutzerdefinierte Forderungen, die erstellt wurden, um Informationen zwischen Parteien auszutauschen, die sich auf deren Verwendung einigen und weder registrierte noch öffentliche Forderungen sind  1 2 3 4 5  { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"admin\": true }   Signatur Um den Signaturteil zu erstellen, muss man den codierten Header, den codierten Payload, ein Secret und den im Header angegebenen Algorithmus verwenden und diesen signieren. Wenn man beispielsweise den HMAC SHA256-Algorithmus verwenden möchte, wird die Signatur folgendermaßen erstellt:\n1 2 3 4  HMACSHA256( base64UrlEncode(header) + \".\" + base64UrlEncode(payload), secret)   Die Signatur wird verwendet, um zu überprüfen, ob die Nachricht unterwegs nicht geändert wurde. Bei Token, die mit einem privaten Schlüssel signiert wurden, kann auch überprüft werden, ob der Absender des JWT derjenige ist, für den er sich ausgibt.\nAlles zusammenführen Wie man nun ein solches JWT erstellt und im Frontend verwendet wird folgend erklärt.\nDazu muss man als Erstes das JWT zusammenstellen, wie es oben erklärt wurde. Und dieses dann in den SessionStorage speichern. Beseitz man nun sein JWT so kann man es bei den HTTP-Anfragen verwenden und an das Backend mitsenden, wo man es dann verifizieren muss.\nToken erstellen und speichern:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  const header = { \"alg\": \"HS256\", \"typ\": \"JWT\" }; const payload = { \"sub\": \"1234567890\", \"name\": \"John Doe\", \"admin\": true }; const secret = \"mysecretkey\"; // Header und Payload zu JSON-Strings konvertieren const encodedHeader = btoa(JSON.stringify(header)); const encodedPayload = btoa(JSON.stringify(payload)); // Signatur erstellen const signature = btoa(encodedHeader + \".\" + encodedPayload + secret); // JWT-Token erstellen const token = encodedHeader + \".\" + encodedPayload + \".\" + signature; // Token im Local Storage speichern sessionStorage.setItem('token', token);   Token bei HTTP-Anfragen mitsenden:\n1 2 3 4 5 6 7 8 9 10 11 12  import { HttpClient, HttpHeaders } from '@angular/common/http'; // Token aus dem Local Storage abrufen const token = sessionStorage.getItem('token'); // HTTP-Header mit dem Token erstellen const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`); // HTTP-Anfrage mit dem Header senden this.http.get('/api/data', { headers }).subscribe((response) =\u003e { // Verarbeitung der Serverantwort });   ","categories":"","description":"In diesem Exkurs ist zu sehen was ein JSON Web Token (JWT) ist und wie dieser funktioniert.\n","excerpt":"In diesem Exkurs ist zu sehen was ein JSON Web Token (JWT) ist und wie …","ref":"/docs/web/angular_ngrx/07_1_angular_exkurs_jwt/","tags":"","title":"Json Web Token Authorisation (JWT)"},{"body":" IT Ninjas Freie Plattform für IT Berufsbildung.        SBB  Puzzle ITC  Nexplore     ","categories":"","description":"","excerpt":" IT Ninjas Freie Plattform für IT Berufsbildung.        SBB  Puzzle …","ref":"/about/","tags":"","title":"About"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"Übersicht ","categories":"","description":"","excerpt":"Übersicht ","ref":"/challenges/","tags":"","title":"Challenges"},{"body":"Übersicht Ausbildungsprogramm \nDas Ausbildungsprogramm 2023/2024 besteht aus diversen einzelnen Ausbildungs-Modulen. Das Wissen aus jedem Modul wird durch Selbst-Studium erworben und bei Bedarf eigenständig durch zusätzlich gesuchtes Wissen ergänzt. Nahezu jedes Modul bringt seine eigenen Übungen (Labs) mit. Einige der Module müssen durch ein Exam abgeschlossen werden. Die Resultate deiner Übungen und Exams besprichst du am Besten mit einem Coach oder einem erfahrenen Software-Entwickler. Er wird dir Feedback geben und dir idealerweise die Freigabe für das nächste Modul erteilen. Module mit einem Stern bieten freiwillige Challenges an, bei denen du dein Wissen mit anderen messen kannst. Je nach Qualität deiner Lösung erhältst du einen entsprechenden Stern von deinem Coach.\nDas Ziel des Ausbildungsprogramms ist\n das Erlernen der Programmiersprache Java das Erwerben von Kenntnissen zu Maven und Testing das Erwerben von Kenntnissen zum Spring Framework und zu Spring Boot das Erlernen von HTML/CSS und JavaScript das Erlernen der Programmiersprache Typescript/Angular  im begleiteten Selbst-Studium innerhalb des ersten Lehr-/Studienjahres\n","categories":"","description":"","excerpt":"Übersicht Ausbildungsprogramm \nDas Ausbildungsprogramm 2023/2024 …","ref":"/docs/","tags":"","title":"Docs"},{"body":"Übersicht ","categories":"","description":"","excerpt":"Übersicht ","ref":"/exams/","tags":"","title":"Exams"},{"body":"  #td-cover-block-0 { background-image: url(/featured-background_hua78cf53242ecb05212510c7bc04884e8_219671_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/featured-background_hua78cf53242ecb05212510c7bc04884e8_219671_1920x1080_fill_q75_catmullrom_top.jpg); } }  IT Ninjas Docs   Labs   Exams   Challenges             Docs Read the documentation to learn java and web technologies.\nRead more …\n   Labs Start with labs to reinforce theory and gain experience.\nRead more …\n   Exams Take an exam to test your knowledge and complete a block of training.\nRead more …\n   Challenges Participate in volunteer challenges and give your best for the perfect solution.\nRead more …\n    ","categories":"","description":"","excerpt":"  #td-cover-block-0 { background-image: …","ref":"/","tags":"","title":"IT Ninjas Labs"},{"body":"Übersicht ","categories":"","description":"","excerpt":"Übersicht ","ref":"/labs/","tags":"","title":"Labs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"}]