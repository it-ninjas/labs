<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IT Ninjas – Angular</title><link>/docs/web/angular/</link><description>Recent content in Angular on IT Ninjas</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="/docs/web/angular/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Javascript Frameworks</title><link>/docs/web/angular/02_javascript_frameworks/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/02_javascript_frameworks/</guid><description>
&lt;h2 id="was-ist-ein-framework">Was ist ein Framework?&lt;/h2>
&lt;p>Das Wort Frontend deutet schon darauf hin, worum es sich handelt. Es ist das, was der Nutzer sieht.
Bei einer Webapplikation ist es das, was dem Besucher im Browser angezeigt wird: die Benutzeroberfläche.&lt;/p>
&lt;p>Es ist der Teil der Software, den der Benutzer sieht und über den er die Software anwendet.&lt;br>
&lt;img src="../js_frameworks/frontend.png" alt="Framework">&lt;/p>
&lt;h2 id="js-frameworks">JS Frameworks&lt;/h2>
&lt;p>JavaScript-Frameworks sind eine Art Tool, das die Arbeit mit JavaScript einfacher und reibungsloser macht.&lt;br>
Durch verschiedensteFrameworks wird die Gestaltung von Websites sehr flexibel, daher bevorzugen es die meisten Entwickler.&lt;br>
Die bekanntesten JS-Frameworks:&lt;br>&lt;/p>
&lt;h3 id="angular">Angular&lt;/h3>
&lt;p>Eines der leistungsstärksten, effizientesten und Open-Source-JavaScript-Frameworks ist Angular.&lt;br>
Google betreibt dieses Framework, welches für die Entwicklung einer Single Page Application (SPA) verwendet wird.&lt;/p>
&lt;p>&lt;img src="/images/angular.png" alt="Angular">&lt;/p>
&lt;h3 id="react">React&lt;/h3>
&lt;p>Das von Facebook erstellte Framework React hat innerhalb kurzer Zeit an Popularität gewonnen.&lt;br>
Es wird verwendet, um die dynamische Benutzeroberfläche der Webseiten mit hohem eingehenden Datenverkehr zu entwickeln und zu betreiben.&lt;/p>
&lt;p>&lt;img src="../js_frameworks/react.png" alt="React">&lt;/p>
&lt;h3 id="vuejs">Vue.js&lt;/h3>
&lt;p>Obwohl dieses JavaScript-Framework erst im Jahr 2016 entwickelt wurde, hat es bereits seinen Weg in den Markt gefunden und sich durch verschiedene Funktionen bewährt. Es ist sehr zuverlässig um Cross-Plattform zu entwickeln.&lt;/p>
&lt;p>&lt;img src="../js_frameworks/vue.png" alt="Vuejs">&lt;/p></description></item><item><title>Docs: Einführung in TypeScript</title><link>/docs/web/angular/03_1_intro_typescript/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/03_1_intro_typescript/</guid><description>
&lt;h2 id="was-ist-typescript">Was ist TypeScript&lt;/h2>
&lt;p>Die Programmiersprache wurde von Microsoft entwickelt und wurde im Jahr 2012 mit der ersten Version veröffentlicht.
Seitdem wird die Programmiersprache kontinuierlich weiterentwickelt. Zahlreiche JavaScript-Frameworks setzen heute auf die Verwendung von TypeScript.
Dazu gehören zum Beispiel Angular 2+ und React.&lt;/p>
&lt;p>TypeScript bildet eine Obermenge von JavaScript, erweitert also JavaScript um bestimmte Features.
Es handelt sich dabei also um ein sogenanntes Superset von JavaScript.&lt;/p>
&lt;p>Da Quellcode geschrieben in TypeScript zu JavaScript transpiliert wird, ist der Code in jedem Browser lauffähig.&lt;/p>
&lt;h2 id="vorteile-von-typescript">Vorteile von TypeScript&lt;/h2>
&lt;ul>
&lt;li>TypeScript hebt Fehler während der Kompilierung hervor, während JavaScript - zur Laufzeit.&lt;/li>
&lt;li>TypeScript unterstützt statische Typisierung.&lt;/li>
&lt;li>Ermöglicht bessere Code-Strukturierung und Objekt-Orientierte Programmiertechniken.&lt;/li>
&lt;li>TypeScript ist in jedem Browser oder JS Engine lauffähig.&lt;/li>
&lt;li>Hervorragendes &amp;ldquo;Tooling&amp;rdquo; mit IntelliSense, das beim Hinzufügen des Codes aktive Hinweise liefert.&lt;/li>
&lt;/ul>
&lt;h2 id="grundlegende-syntax">Grundlegende Syntax&lt;/h2>
&lt;p>Da es sich bei TypeScript um ein Superset von JavaScript handelt, ist JavaScript-Code auch gültiger TypeScript-Code. Jedoch fügt TypeScript darüber hinaus viele neue Funktionen hinzu.&lt;/p>
&lt;p>Mit TypeScript wird JavaScript mehr wie eine stark typisierte, objektorientierte Sprache, die C # und Java ähnelt. Dies bedeutet, dass TypeScript-Code für grosse Projekte leichter zu verwenden ist und dass Code leichter zu verstehen und zu verwalten ist. Die starke Typisierung bedeutet auch, dass die Sprache vorkompiliert werden kann und dass Variablen keine Werte zugewiesen werden können, die ausserhalb ihres angegebenen Bereichs liegen. Wenn zum Beispiel eine TypeScript-Variable als Zahl deklariert ist, kann man dieser Variable keinen Textwert zuweisen.&lt;/p>
&lt;h2 id="typanmeldungen">Typanmeldungen&lt;/h2>
&lt;p>Typdeklarationen können zu Variablen, Funktionsparametern und Funktionsrückgabetypen hinzugefügt werden.
Der Typ folgt jeweils nach einem Doppelpunkt hinter dem Variablennamen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript"> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Compiler überprüft dann die Typen während des Kompilierens und meldet allfällige Typfehler.&lt;/p>
&lt;p>Die verschiedenen Grundtypen von TypeScript sind &lt;a href="https://www.typescriptlang.org/docs/handbook/basic-types.html">hier&lt;/a> ersichtlich.&lt;/p>
&lt;h2 id="der-objektorientierte-ansatz">Der Objektorientierte Ansatz&lt;/h2>
&lt;p>Bei der objektorientierten Programmierung handelt es sich um einen Programmierstil / eine Denkweise.&lt;/p>
&lt;p>Man kann sich das so vorstellen, dass alles in der objektorientierten Programmierung durch Objekte abgebildet wird.
Jedes &amp;ldquo;Teil&amp;rdquo; eines Programmes wird durch ein Objekt beschrieben.&lt;/p>
&lt;p>Ein Beispiel:&lt;/p>
&lt;blockquote>
&lt;p>In einer Spielewelt gibt es einen frei herumlaufenden Hund.
Dann wäre dieser Hund nichts anderes als ein Objekt.
Nun könnte man sich fragen, wie man diesen Hund wahrnimmt, denn nicht jeder Hund ist gleich.
Sie könnten sich in Rasse, Gattung etc. unterscheiden. Ein Objekt kann also verschiedene Eigenschaften besitzen,
diese werden auch Attribute genannt.&lt;/p>
&lt;/blockquote>
&lt;p>Nun kann sich unser Hund von Anderen unterscheiden, jedoch kann er noch nicht bellen. Deshalb haben
Objekte auch Funktionen (Methoden). In unserem Beispiel könnte der Hund z.B. über die Methode &amp;ldquo;bark()&amp;rdquo; verfügen,
welche ihm erlaubt zu bellen.&lt;/p>
&lt;p>In unserem Beispiel handelt es sich bei dem Hund um eine Klasse. Klassen sind also wie Baupläne für Objekte.&lt;/p>
&lt;p>Nun sagen wir, dass es in unserer Spielwelt auch Katzen gibt.
An dieser Stelle kommt dann die Vererbung ins Spiel.&lt;/p>
&lt;p>Hunde sowie Katzen sind beides Tiere. In der Objektorientierten Programmierung würde man dazu also eine Klasse &amp;ldquo;Animal&amp;rdquo; erstellen.
Die beiden Klassen &amp;ldquo;Cat&amp;rdquo; und &amp;ldquo;Dog&amp;rdquo; würden dann die Klasse &amp;ldquo;Animal&amp;rdquo; erben. Dies Bedeutet, dass sie die Eigenschaften der Klasse &amp;ldquo;Animal&amp;rdquo; übernehmen
und durch ihre eigenen Eigenschaften erweitern.&lt;/p>
&lt;p>Da sich beide Tiere fortbewegen, könnte man also der Klasse &amp;ldquo;Animal&amp;rdquo; die Funktion &amp;ldquo;move()&amp;rdquo; geben, welche dann von den beiden anderen Klassen geerbt werden würde.
Dadurch hat man verhindert, dass sich die Funktion zum bewegen mehrmals im Quellcode befindet.&lt;/p>
&lt;p>&lt;img src="../Vererbung.png" alt="Vererbung" title="Vererbung">&lt;/p>
&lt;h2 id="klassen">Klassen&lt;/h2>
&lt;p>Ein einfaches Beispiel einer Klasse:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span> {
&lt;span style="color:#a6e22e">greeting&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span>;
&lt;span style="color:#a6e22e">constructor&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">greeting&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>;
}
&lt;span style="color:#a6e22e">greet&lt;/span>() {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">greeting&lt;/span>;
}
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">greeter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In diesem Beispiel wird eine neue Klasse &amp;ldquo;Greeter&amp;rdquo; deklariert. Die Klasse enthält 3 Member:&lt;/p>
&lt;ul>
&lt;li>Das Property &amp;ldquo;greeting&amp;rdquo;&lt;/li>
&lt;li>Den Konstruktor&lt;/li>
&lt;li>Die Methode &amp;ldquo;greet&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>Wenn wir in einer Klasse auf ein Member innerhalb der Klasse referenzieren, verwenden wir &lt;code>this.&lt;/code>.&lt;/p>
&lt;p>Auf der letzten Zeile erstellen wir eine neue Instanz der Klasse &lt;code>Greeter&lt;/code> mit &lt;code>new&lt;/code>.&lt;/p>
&lt;h3 id="vererbung">Vererbung&lt;/h3>
&lt;p>In TypeScript können wir allgemeine objektorientierte Muster verwenden. Eines der grundlegendsten Muster in der klassenbasierten Programmierung ist die Möglichkeit, vorhandene Klassen durch Vererbung zu erweitern, um neue Klassen zu erstellen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Animal moved &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">m.`&lt;/span>);
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Dog&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#a6e22e">bark&lt;/span>(){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Woof!&amp;#34;&lt;/span>);
}
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">dog&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Dog&lt;/span>();
&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#a6e22e">bark&lt;/span>();
&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>);
&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#a6e22e">bark&lt;/span>();
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dieses Beispiel zeigt die grundlegendste Vererbungsfunktion: Klassen erben Eigenschaften und Methoden von Basisklassen. &lt;code>Dog&lt;/code> ist hier eine abgeleitete Klasse, die mit dem Schlüsselwort &lt;code>extends&lt;/code> von der Basisklasse Animal abgeleitet wird. Abgeleitete Klassen werden häufig als Unterklassen bezeichnet, und Basisklassen als Superklassen.&lt;/p>
&lt;p>Da &lt;code>Dog&lt;/code> die Funktionalität von &lt;code>Animal&lt;/code> erweitert, konnten wir eine Instanz von &lt;code>Dog&lt;/code> erstellen, die sowohl &lt;code>bark()&lt;/code> als auch &lt;code>move()&lt;/code> ausführen konnte.&lt;/p>
&lt;p>&lt;strong>Ein komplexeres Beispiel zur Vertiefung:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>;
}
&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Animal moved &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">m.`&lt;/span>);
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Snake&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
}
&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Slithering...&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>);
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Horse&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
}
&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">45&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Galloping...&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>);
}
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">sammy&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Snake&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Sammy the Python&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">tom&lt;/span>: &lt;span style="color:#66d9ef">Animal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Horse&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Tom the Palomino&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">sammy&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>();
&lt;span style="color:#a6e22e">tom&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#ae81ff">35&lt;/span>);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In diesem Beispiel werden 2 neue Subklassen von &lt;code>Animal&lt;/code> erstellt: &lt;code>Horse&lt;/code> und &lt;code>Snake&lt;/code>.&lt;/p>
&lt;p>Ein Unterschied zum vorherigen Beispiel besteht darin, dass jede abgeleitete Klasse, die eine Konstruktorfunktion enthält, &lt;code>super()&lt;/code> aufrufen muss, wodurch der Konstruktor der Basisklasse ausgeführt wird. Ausserdem müssen wir &lt;code>super()&lt;/code> aufrufen, damit wir im Konstruktorkörper auf &lt;code>name&lt;/code> mit &lt;code>this&lt;/code> zugreifen können.&lt;/p>
&lt;p>Konsolenausgabe des Beispiels:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Slithering...
Sammy the Python moved 5m.
Galloping...
Tom the Palomino moved 34m.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="public">Public&lt;/h3>
&lt;p>In den gezeigten Beispielen konnten wir frei auf die Eigenschaften und Methoden einer Klasse (Member) zugreifen, die wir deklariert hatten. Jedoch mussten wir dazu &lt;code>public&lt;/code> nie verwenden. Dies liegt daran, dass in TypeScript jedes Member stantardmässig &lt;code>public&lt;/code> ist.&lt;/p>
&lt;p>Ein Member können wir trotzdem als &lt;code>public&lt;/code> markieren. Wir hätten die Klasse &lt;code>Animal&lt;/code> aus dem vorherigen Abschnitt folgendermassen schreiben können:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Animal moved &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">m.`&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="private">Private&lt;/h3>
&lt;p>Wenn ein Member einer Klasse als &lt;code>private&lt;/code> markiert ist, kann von ausserhalb der Klasse nicht darauf zugegriffen werden.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>;
}
}
&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Cat&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">name&lt;/span>; &lt;span style="color:#75715e">// Error: &amp;#39;name&amp;#39; is privae;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="protected">Protected&lt;/h3>
&lt;p>Der Modifikator &lt;code>protected&lt;/code> verhält sich ähnlich wie der Modifikator &lt;code>private&lt;/code>, mit der Ausnahme, dass auf als &lt;code>protected&lt;/code> deklarierte Member auch innerhalb von abgeleiteten Klassen zugegriffen werden kann.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>;
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">departement&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">departement&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">departement&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">departement&lt;/span>;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">getElevatorPitch&lt;/span>(){
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">`Hello, my name is &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> and I work in &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">departement&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.`&lt;/span>;
}
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">john&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Howard&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Sales&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">john&lt;/span>.&lt;span style="color:#a6e22e">getElevatorPitch&lt;/span>());
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">john&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>); &lt;span style="color:#75715e">// Error
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>name&lt;/code> können wir ausserhalb von &lt;code>Person&lt;/code> nicht verwenden, jedoch innerhalb einer Instanzmethode von &lt;code>Employee&lt;/code>. Dies funktioniert, da &lt;code>Employee&lt;/code> von &lt;code>Person&lt;/code> abgeleitet ist.&lt;/p>
&lt;h3 id="readonly">Readonly&lt;/h3>
&lt;p>Mit &lt;code>readonly&lt;/code> können wir Eigenschaften schreibgeschützt machen. Schreibgeschützte Eigenschaften müssen bei ihrer Deklaration oder im Konstruktor initialisiert werden.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Octopus&lt;/span> {
&lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#a6e22e">numberOfLegs&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>;
}
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">dad&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Octopus&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Man with the 8 strong legs&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">dad&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Man with the 3-piece suit&amp;#34;&lt;/span>; &lt;span style="color:#75715e">// Error: name is readonly
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="arrow-functions">Arrow Functions&lt;/h2>
&lt;p>Die ES6-Version von TypeScript bietet eine arrow-function, die die Kurzform für die Definition der anonymen Funktion darstellt.
In anderen Sprachen auch bekannt als Lambda-Function.&lt;/p>
&lt;p>Wieso werden Arrow-Functions benutzt?&lt;/p>
&lt;ul>
&lt;li>Man muss nicht ständig &amp;ldquo;function&amp;rdquo; schreiben&lt;/li>
&lt;li>Es erfasst die Bedeutung des Schlüsselworts &amp;ldquo;this&amp;rdquo;&lt;/li>
&lt;li>Es erfasst die Bedeutung von Argumenten&lt;/li>
&lt;/ul>
&lt;p>Eine Arrow Function können wir in 3 Teile aufteilen:&lt;/p>
&lt;ul>
&lt;li>Parameter&lt;/li>
&lt;li>Die arrow-notation &lt;code>=&amp;gt;&lt;/code>&lt;/li>
&lt;li>Statements&lt;/li>
&lt;/ul>
&lt;p>Schauen wir uns ein Beispiel an:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// ES5: Without arrow function
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">getResult&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">unsername&lt;/span>, &lt;span style="color:#a6e22e">points&lt;/span>){
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">username&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;scored&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">points&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; points!&amp;#39;&lt;/span>;
}
&lt;span style="color:#75715e">// ES6: With arrow function
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">getResult&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">unsername&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">points&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">username&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> scored &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">points&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> points!&amp;#39;`&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Arrow-functions benötigen natürlich nicht unbedingt Parameter.
Ein Beispiel mit Parameter würde so aussehen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span>:&lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span>{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>;
}
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">sum&lt;/span>(&lt;span style="color:#ae81ff">20&lt;/span>,&lt;span style="color:#ae81ff">30&lt;/span>)); &lt;span style="color:#75715e">// returns 50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ein Beispiel ohne Parameter:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">Print&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello TypeScript&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">Print&lt;/span>() &lt;span style="color:#75715e">// returns &amp;#34;Hello TypeScript&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="async--await">Async / Await&lt;/h2>
&lt;h3 id="async-requests">Async Requests&lt;/h3>
&lt;p>&amp;lsquo;Asynchronität&amp;rsquo; in der Computerwelt bedeutet, dass der Programmfluss unabhängig erfolgt. Es wird nicht darauf gewartet, dass eine Aufgabe erledigt wird, sondern der nächste Task wird ausgeführt.&lt;/p>
&lt;p>Doch was passiert mit der Aufgabe, die noch nicht abgeschlossen ist? Stellt euch vor ein Mitarbeiter erledigt die noch nicht erledigten Aufgaben
im Hintergrund und sendet die Daten zurück, sobald sie erledigt sind.&lt;/p>
&lt;p>Nun ergibt sich die Frage, wie wir mit den zurückgegebenen Daten umgehen. Die Antwort lautet: Promises, Observables, Callbacks und weitere.
Bei einer asynchronen Anforderung wartet der Client nicht auf die Antwort. Nichts ist blockiert. Schauen wir uns dieses Konzept anhand eines häufigen Szenarios an.&lt;/p>
&lt;p>In der Web-Welt wird häufig auf den Server zugegriffen, um Daten wie die Details eines Benutzers, eine Liste usw. abzurufen. Wir wissen, dass dieses Szenario einige Zeit dauern kann.
In diesem Fall werden die Daten nicht abgewartet, sondern asynchron verarbeitet (kein Warten), damit unsere Anwendung nicht blockiert wird. Solche Anfragen sind asynchrone Anfragen.&lt;/p>
&lt;p>Schauen wir uns also an, wie wir mit diesen asynchronen Anforderungen umgehen können.&lt;/p>
&lt;h3 id="callbacks">Callbacks&lt;/h3>
&lt;p>Callback-Funktionen werden aufgerufen wenn die Anforderung abgeschlossen ist und die Daten oder einen Error zurückgegeben wird. Code zum besseren Verständnis:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">request&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;request&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">request&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https://www.example.com&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">response&lt;/span>, &lt;span style="color:#a6e22e">body&lt;/span>){
&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>){
&lt;span style="color:#75715e">// Error handling
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
&lt;span style="color:#66d9ef">else&lt;/span>{
&lt;span style="color:#75715e">// Success
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
});
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In diesem Beispiel wird nun ein Request verarbeitet. Wie sieht es jedoch aus, falls wir nach dem erfolgreichen Erhalten von Daten nochmals einen Request durchführen wollen?
Bevor Promises in JavaScript integriert wurden, war dies ein mühseliges Problem. &lt;a href="https://hsto.org/getpro/habr/post_images/ad5/c3f/e3b/ad5c3fe3bf0f7a68a4d3444614c3133e.png">Callback-hell Beispiel&lt;/a>.&lt;/p>
&lt;h3 id="promises">Promises&lt;/h3>
&lt;p>Im Wesentlichen ist ein &lt;code>Promise&lt;/code> in JavaScript einem Versprechen im wirklichen Leben sehr ähnlich. Versprechen werden im wirklichen Leben entweder eingehalten oder gebrochen werden, in JavaScript werden &lt;code>Promises&lt;/code> entweder aufgelöst oder abgelehnt.&lt;/p>
&lt;p>Als Beispiel schauen wir, wie ein kleines Kind, das seinen Eltern verspricht, sein Zimmer zu reinigen, in JavaScript aussieht.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">promiseToCleanTheRoom&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">resolve&lt;/span>, &lt;span style="color:#a6e22e">reject&lt;/span>){
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">isClean&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">trueM&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">isClean&lt;/span>){
&lt;span style="color:#a6e22e">resolve&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Clean&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">else&lt;/span>{
&lt;span style="color:#a6e22e">reject&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;not Clean&amp;#34;&lt;/span>);
}
});
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In JavaScript werden in einem Promise zwei Rückrufe berücksichtigt: &lt;code>resolve&lt;/code> und &lt;code>reject&lt;/code>. Wenn wir den obigen Code durchlesen, ist es offensichtlich, dass unser kleines Kind sein Versprechen, sein Zimmer zu
putzen, erfüllt hat. Daher wird unser Promise-Objekt hier - sobald es aufgerufen wurde - als Antwort &lt;code>Clean&lt;/code> zurückzugeben. Nehmen wir an, unser Kind hat es nicht geschafft, das Schnäppchen zu machen, dann würde &lt;code>isClean&lt;/code> auf &lt;code>false&lt;/code> gesetzt. Dann wird unser Versprechen hier abgelehnt und als Antwort &lt;code>not Clean&lt;/code> zurückgegeben.&lt;/p>
&lt;p>Wir können jetzt unsere Funktion &lt;code>promiseToCleanTheRoom&lt;/code> ausführen, indem wir Folgendes schreiben:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">promiseToCleanTheRoom&lt;/span>.&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the room is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>);
}).&lt;span style="color:#66d9ef">catch&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the room is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>);
})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Sobald &lt;code>promiseToCleanTheRoom&lt;/code> ausgeführt wird, wird unsere then-Funktion nur dann ausgelöst, wenn das Promise resolved wird.
Ebenso wird unsere catch-Funktion nur ausgelöst, wenn das Promise rejected wird.&lt;/p>
&lt;h2 id="observables">Observables&lt;/h2>
&lt;p>Ein Observable ermöglicht die Übergabe von null oder mehr Ereignissen, bei denen der Rückruf für jedes Ereignis aufgerufen wird.&lt;/p>
&lt;p>Bei Observables spielt es keine Rolle, ob man 0, 1 oder mehrere Ereignisse behandeln möchte. Sie können jeweils die gleiche API verwenden.&lt;/p>
&lt;p>Observable hat gegenüber Promise den Vorteil, stornierbar zu sein. Wenn das Ergebnis einer HTTP-Anforderung an einen Server oder eines anderen kostspieligen asynchronen Vorgangs nicht mehr benötigt wird,
kann man mit der Subscription einer Observable das Abonnement abbrechen.&lt;/p>
&lt;p>Codebeispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Observable&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;rxjs/Obvervable&amp;#39;&lt;/span>;
&lt;span style="color:#75715e">// Create a new Obvervable, providing the subscribe function.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">observable&lt;/span>: &lt;span style="color:#66d9ef">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">string&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Obvervable&lt;/span>(&lt;span style="color:#a6e22e">observer&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">interval&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">setInterval&lt;/span>(() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#a6e22e">observer&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello from Obvervableland!&amp;#34;&lt;/span>);
}, &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;span style="color:#75715e">// teardown
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#a6e22e">clearInterval&lt;/span>(&lt;span style="color:#a6e22e">interval&lt;/span>);
}
});
&lt;span style="color:#75715e">// Subscribe to Notifications.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">observable&lt;/span>.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span>));
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Zunächst müssen wir die Observable-Klasse aus dem RxJS-Modul importieren, da Observables noch nicht Teil von ECMAScript (JavaScript) sind.
Anschliessend erstellen wir ein neues Observable und stellen die Abonnementfunktion bereit, die aufgerufen wird, wenn ein Observer das Observable abonniert.&lt;/p>
&lt;p>Wir verwenden die &lt;code>next()&lt;/code>-Methode für ein Observer-Objekt, um Werte an den Observer zu senden. Das Observer-Interface enthält 3 Methoden: &lt;code>next()&lt;/code>, &lt;code>catch()&lt;/code> and &lt;code>complete()&lt;/code>.
Um asynchrone Ereignisse zu faken, verwenden wir in diesem Beispiel die Funktion &lt;code>setInterval()&lt;/code>, die im Laufe der Zeit Werte ausgibt. Jede Sekunde geben wir den String &lt;code>Hello from Observableland!&lt;/code> aus.
Wir geben dann eine Funktion zurück, die aufgerufen wird, wenn sich alle Observer vom Observable abgemeldet haben.&lt;/p>
&lt;p>Schliesslich rufen wir die Methode &lt;code>subscribe()&lt;/code> auf, die eine Funktion bereitstellt, die jedes Mal aufgerufen wird, wenn der Wert &lt;code>next()&lt;/code> an alle Observer gesendet wird.&lt;/p>
&lt;h2 id="teste-dein-wissen">Teste dein Wissen&lt;/h2>
&lt;p>Du hast nun viel Neues über TypeScript gelernt. Teste &lt;a href="../../../../exams/web/angular/03_2_intro_typescript_exam">hier&lt;/a>, ob du das Wichtigste verstanden hast.&lt;/p></description></item><item><title>Docs: Einführung Angular</title><link>/docs/web/angular/04_1_einf%C3%BChrung_angular/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_1_einf%C3%BChrung_angular/</guid><description>
&lt;h2 id="architektur">Architektur&lt;/h2>
&lt;p>Angular wird für Frontend-Applikationen verwendet. Oft wird ein Backend via HTTP(s) angebunden.
&lt;img src="/images/angular/angular_einf%C3%BChrung.png" alt="Angular">&lt;br>
&lt;img src="/images/angular/architektur.png" alt="Angular">&lt;/p>
&lt;h2 id="angular-data-bindings">Angular Data Bindings&lt;/h2>
&lt;h3 id="interpolation">Interpolation&lt;/h3>
&lt;ul>
&lt;li>Anhand von diesem One-Way Binding kann man Properties des Components im Template anzeigen.&lt;br>
Wenn sich das Property im Component ändert, wird das Template aktualisiert, um die neuen Änderungen anzuzeigen.&lt;/li>
&lt;/ul>
&lt;h3 id="property-binding">Property Binding&lt;/h3>
&lt;ul>
&lt;li>Anhand von Property Bindings können wir einen Wert unseres Components auf eine Eigenschaft eines Elements binden.&lt;br>
Wenn sich also der bestimme Wert im Component verändern sollte, wird dies im Template aktualisiert.&lt;/li>
&lt;/ul>
&lt;h3 id="event-binding">Event Binding&lt;/h3>
&lt;ul>
&lt;li>Event Binding ist definiert als das Aktualisieren/Senden des Werts/der Information einer bestimmten Variablen vom Template zum Component.&lt;br>
Zum Beispiel das Klicken eines Buttons.&lt;/li>
&lt;/ul>
&lt;h3 id="two-way-binding">Two-Way-Binding&lt;/h3>
&lt;ul>
&lt;li>Two-Way-Binding ist eine Kombination aus Property- und Eventbinding. Daten werden kontinuierlich synchronisiert: vom Template zum Component und vom Component zum Template.&lt;br>
Dies bedeutet also, dass Änderungen, die an den Daten des Components vorgenommen wurden, werden mit dem Template synchronisiert und sofort aktualisiert.&lt;br>
Umgekehrt funktioniert es auf dieselbe Weise, daher auch der Name &amp;ldquo;Two-Way-Binding&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images/angular/component-of-Data-Binding.png" alt="Databinding">&lt;/p></description></item><item><title>Docs: Components und Templates</title><link>/docs/web/angular/04_2_components_und_templates/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_2_components_und_templates/</guid><description>
&lt;img src="/images/angular/angular_components_description.png" alt="Components" style="width:60%"/>
&lt;p>Ein Angular Component setzt sich aus 4 Dateien zusammen:&lt;/p>
&lt;ul>
&lt;li>Template&lt;/li>
&lt;li>Unit Test File&lt;/li>
&lt;li>Stylesheet&lt;/li>
&lt;li>Component (Class)&lt;/li>
&lt;/ul>
&lt;img src="/images/angular/componentDesc.png" alt="Components Description" style="width:50%"/>
&lt;h2 id="templates">Templates&lt;/h2>
&lt;h3 id="was-ist-ein-template">Was ist ein Template?&lt;/h3>
&lt;ul>
&lt;li>Templates definieren die Views der Components.&lt;/li>
&lt;li>Ein Template ist ein HTML Dokument, das Angular Elemente zum Rendern des Components enthält&lt;/li>
&lt;li>Dank Angular kann unser HTML Dokument anhand von Direktiven mehr Logik beinhalten.&lt;br>
Beispielsweise können wir im Template eine if-Kontrollstruktur wie folgt anwenden:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngIf&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;condition; else elseBlock&amp;#34;&lt;/span>&amp;gt;Content to render when condition is true.&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ng-template&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>&lt;span style="color:#a6e22e">elseBlock&lt;/span>&amp;gt;Content to render when condition is false.&amp;lt;/&lt;span style="color:#f92672">ng-template&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Welche weiteren Direktiven es gibt, könnt ihr in der &lt;a href="https://angular.io/api/common">offiziellen Dokumentation&lt;/a> unter dem Abschnitt &lt;code>Directives&lt;/code> nachlesen.&lt;/p></description></item><item><title>Docs: Services und Dependency Injection</title><link>/docs/web/angular/04_3_services_und_dependency_injection/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_3_services_und_dependency_injection/</guid><description>
&lt;h2 id="services">Services&lt;/h2>
&lt;p>Services implementieren Daten oder Logik, die in den verschiedenen Components verwendet werden, z.B.:&lt;/p>
&lt;ul>
&lt;li>Domain-Spezifische Berechnungen&lt;/li>
&lt;li>Applikationsweiter Datencache&lt;/li>
&lt;li>Kommunikation mit der Backendapplikation&lt;/li>
&lt;/ul>
&lt;h2 id="dependency-injection">Dependency Injection&lt;/h2>
&lt;h3 id="was-is-eine-dependency-injection">Was is eine Dependency Injection&lt;/h3>
&lt;p>Dependency Injection ist ein Coding pattern, bei welchem Klassen alle Abhängigkeiten von externen Quellen erhalten, anstatt sie selbst zu erstellen.&lt;/p>
&lt;h3 id="dependency-injection-in-angular">Dependency Injection in Angular&lt;/h3>
&lt;p>Der Angular Dependency Injector liefert uns Vorteile wie Skalierbarkeit, Testbarkeit und eine klare Trennung von Aufgaben.&lt;/p>
&lt;p>Um den Dependency Injector in Angular zu nutzen müssen wir 3 Schritte erledigen&lt;/p>
&lt;p>Den &lt;code>@Injectable()&lt;/code> Decorator der Klasse/ dem Service hinzufügen.
Den Injector davon erzählen, indem wir es als Provider aufzählen.
Die Dependency injecten&lt;/p>
&lt;ol>
&lt;li>@Injectable importieren und nutzen:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> {&lt;span style="color:#a6e22e">Injectable&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Injectable&lt;/span>()
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Auto&lt;/span>{
&lt;span style="color:#75715e">//....
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>Das Auto als Provider registrieren (in &lt;code>main.ts&lt;/code>):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> {&lt;span style="color:#a6e22e">Auto&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./auto&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#a6e22e">declatations&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [],
&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">bootstrap&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">AppComponent&lt;/span>],
&lt;span style="color:#a6e22e">providers&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">Auto&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppModule&lt;/span>{ }
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>Dependency injecten wo (in unserem Beispiel) das Auto genutzt wird:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> {&lt;span style="color:#a6e22e">Auto&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./auto&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AutoNutzer&lt;/span>{
&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">menschen&lt;/span>: &lt;span style="color:#66d9ef">Menschen&lt;/span>[];
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">auto&lt;/span>: &lt;span style="color:#66d9ef">Auto&lt;/span>){ }
&lt;span style="color:#a6e22e">ngOnInit&lt;/span>(){
&lt;span style="color:#75715e">// Jetzt kann man das Auto hier einfach benutzen
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">menschen&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">auto&lt;/span>.&lt;span style="color:#a6e22e">getInsassen&lt;/span>()&lt;span style="color:#f92672">:&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das Minibeispiel soll lediglich die 3 wichtigen Schritte etwas besser darstellen.&lt;/p>
&lt;p>In Euren Projekten werdet ihr dieses Verfahren für die Services anwenden.&lt;/p></description></item><item><title>Docs: Pipes</title><link>/docs/web/angular/04_4_pipes/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_4_pipes/</guid><description>
&lt;p>Sobald Daten eingehen, könnte man ihre rohen toString-Werte direkt in die View übertragen. Dies führt jedoch selten zu einer guten user experience. In den meisten Anwendungsfällen
bevorzugen Benutzer beispielsweise die Anzeige eines Datums in einem einfachen Format wie &lt;code>15. January 1929&lt;/code> anstelle des rohen Stringformats &lt;code>Tu 15. January 1929 00:00:00 GMT-0700 (Pacific Daylight Time)&lt;/code>.&lt;/p>
&lt;p>Es ist klar, dass einige Werte von etwas Bearbeitung profitieren. Viele der Transformationen werden sowohl innerhalb als auch zwischen Anwendungen wiederholt.
Dazu sind Pipes sehr praktisch. Man kann sie sich fast als Stile vorstellen.&lt;/p>
&lt;p>Eine Pipe nimmt Daten als Eingabe auf und wandelt sie in eine gewünschte Ausgabe um.
In diesem Beispiel verwenden wir Pipes, um das Geburtstags-Property eines Components in ein leserfreundliches Datum umzuwandeln.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> {&lt;span style="color:#a6e22e">Component&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-birthday&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">template&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">`&amp;lt;p&amp;gt;The birthday is {{birthday | date}}&amp;lt;/p&amp;gt;`&lt;/span>
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BirthdayComponent&lt;/span>{
&lt;span style="color:#a6e22e">birthday&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Date(&lt;span style="color:#ae81ff">1929&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#75715e">// Month start by 0 =&amp;gt; January 15, 1929
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="parametrisierte-pipes">Parametrisierte Pipes&lt;/h2>
&lt;p>Eine Pipe kann eine beliebige Anzahl optionaler Parameter akzeptieren, um ihre Ausgabe zu optimieren. Um einer Pipe Parameter hinzuzufügen,
fügen wir nach dem Pipe-Namen einen Doppelpunkt (:) und danach den Parameterwert (z. B. currency: &lt;code>EUR&lt;/code>) hinzu.
Wenn die Pipe mehrere Parameter akzeptiert, trennen wir die Werte durch Doppelpunkte (z. B. Slice: 1: 5).&lt;/p>
&lt;p>Unser Beispiel von vorher könnten wir z.B. so ausgeben:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;The birthday of Martin Luther King Jr is {{ birthday | date:&amp;#34;mm/dd/yy&amp;#34; }} &amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="chaining-pipes">Chaining Pipes&lt;/h2>
&lt;p>Wir können Pipes in nützlichen Kombinationen miteinander verketten. Im folgenden Beispiel wird der Geburtstag an die DatePipe und an die UpperCasePipe
ngekettet, um den Geburtstag in Grossbuchstaben anzuzeigen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;The chained birthday of Martin Luther King Jr is {{ birthday | date | uppercase }} &amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Geburtstag wird nun so angezeigt: APR 15, 1988&lt;/p>
&lt;h2 id="custom-pipes">Custom Pipes&lt;/h2>
&lt;p>Für spezielle Anwendungsfälle können wir auch unsere eigenen Pipes schreiben.&lt;/p>
&lt;p>Wir können Beispielsweise das size eines Files anhand einer custom Pipe im Template darstellen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">{{ file.size | filesize: &amp;#34;megabyte&amp;#34; }}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Code für die custom Pipe dieses Beispiels würde so aussehen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> {&lt;span style="color:#a6e22e">Pipe&lt;/span>, &lt;span style="color:#a6e22e">PipeTransform&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Pipe&lt;/span>({ &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;filesize&amp;#39;&lt;/span> })
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FileSizePipe&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">PipeTransform&lt;/span>{
&lt;span style="color:#a6e22e">transform&lt;/span>(&lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">extensions&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;MB&amp;#34;&lt;/span>){
&lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">/&lt;/span> (&lt;span style="color:#ae81ff">1024&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1024&lt;/span>)).&lt;span style="color:#a6e22e">toFixed&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">extension&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Um Angular mitzuteilen, dass dies eine Pipe ist, wenden wir den &lt;code>@Pipe&lt;/code> Decorator an, welchen wir aus &lt;code>@angular/core&lt;/code> importieren.&lt;/li>
&lt;li>Die Pipe-Klasse implementiert die Methode &lt;code>transform&lt;/code> des PipeTransform Interface, die einen Eingabewert gefolgt von optionalen Parametern akzeptiert und den transformierten Wert zurückgibt.&lt;/li>
&lt;li>Für jeden an die Pipe übergebenen Parameter gibt es ein zusätzliches Argument für die Methode &lt;code>transform&lt;/code>. Unsere Pipe hat einen solchen Parameter: die &lt;code>extension&lt;/code>.&lt;/li>
&lt;li>Mit dem &lt;code>@Pipe&lt;/code> Decorator können wir den Pipe-Namen definieren, welchen wir im Template verwenden.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Interceptors</title><link>/docs/web/angular/04_6_interceptors/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_6_interceptors/</guid><description>
&lt;p>Dies ist sehr praktisch wenn wir Authentifizierungs Token konfigurieren, Protokolle der Requests erstellen und benutzerdefinierte Header hinzufügen wollen.&lt;/p>
&lt;p>&lt;img src="/images/angular/interceptor.PNG" alt="Interceptor">&lt;/p>
&lt;p>Um einen Interceptor zu implementieren, müssen wir eine Klasse erstellen, die die &amp;ldquo;Intercept&amp;rdquo;-Methode des &amp;ldquo;HttpInterceptor&amp;rdquo;-Interface implementiert.&lt;/p>
&lt;p>Der folgende Interceptor ist sehr simpel gehalten. Er gibt einfach jeden Request in der Konsole aus:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">@Injectable&lt;/span>()
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RequestLogInterceptor&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">HttpInterceptor&lt;/span> {
&lt;span style="color:#a6e22e">intercept&lt;/span>(
&lt;span style="color:#a6e22e">request&lt;/span>: &lt;span style="color:#66d9ef">HttpRequest&lt;/span>&amp;lt;&lt;span style="color:#f92672">any&lt;/span>&amp;gt;, &lt;span style="color:#a6e22e">next&lt;/span>: &lt;span style="color:#66d9ef">HttpHandler&lt;/span>
) &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">HttpEvent&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">any&lt;/span>&amp;gt;&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">request&lt;/span>.&lt;span style="color:#a6e22e">url&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">handle&lt;/span>(&lt;span style="color:#a6e22e">request&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Intercept-Methode wandelt jeden Request in Observables um, die später durch Aufrufen von next.handle() aufgelöst werden.
Für unsere Implementierung ist es also ganz einfach: Wir nehmen den Request entgegen, protokollieren den URL und rufen next.handle() auf, um den Request an den Server zu senden, ohne Änderungen daran vorzunehmen.&lt;/p>
&lt;h2 id="interceptors-providen">Interceptors Providen&lt;/h2>
&lt;p>Da Interceptors Dependencies des HttpClient sind, müssen wir sie den Providern im selben Injektor hinzufügen, der den HttpClient bereitstellt.
Angenommen, wir haben unser HttpClientModule in das AppModule importiert, müssen wir die Interceptors auch dort zu den Providern hinzufügen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HTTP_INTERCEPTORS&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/common/http&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">RequestLogInterceptor&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;...&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">HttpClientModule&lt;/span>,
...
],
&lt;span style="color:#a6e22e">providers&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
{
&lt;span style="color:#a6e22e">provide&lt;/span>: &lt;span style="color:#66d9ef">HTTP_INTERCEPTORS&lt;/span>,
&lt;span style="color:#a6e22e">useClass&lt;/span>: &lt;span style="color:#66d9ef">RequestLogInterceptor&lt;/span>,
&lt;span style="color:#a6e22e">mutli&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
},
...
],
...
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppModule&lt;/span>{ }
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Option &lt;code>multi: true&lt;/code> teilt Angular mit, dass Wir mehrere Interceptors bereitstellen, und ist erforderlich, wenn dies das Szenario ist.
In unserem Beispielszenario wäre dies nicht erforderlich, da wir nur einen Interceptor implementiert haben.&lt;/p>
&lt;p>Es ist auch wichtig zu berücksichtigen, dass Angular Interceptors in der Reihenfolge anwendet, in der sie bei den Providers des Moduls angegeben sind.&lt;/p></description></item><item><title>Docs: Angular Material, Responsive Web Design und Accessibility</title><link>/docs/web/angular/04_7_angular_material/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_7_angular_material/</guid><description>
&lt;h2 id="material-in-angular">Material in Angular&lt;/h2>
&lt;p>Für Angular gibt es eine spezifische Version von Material Design.&lt;/p>
&lt;p>Auf der offiziellen Website von Angular Material sehen wir welche Components uns zur Verfügung gestellt werden.&lt;/p>
&lt;p>Wenn wir zum Beispiel den &amp;ldquo;Slider&amp;rdquo; in unsere Applikation implementieren möchten, gibt es einige Schritte welche wir beachten müssen.
Jeder Component wird auf der Website wie folgt beschrieben:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Overview&lt;/strong>: Auf der Übersicht wird beschrieben, wie und wozu man den Component anwenden kann.
Oftmals werden hier auch erweiterte Funktionen eines Components aufgelistet. Daher gilt: &lt;strong>Immer aufmerksam durchlesen!&lt;/strong>&lt;/li>
&lt;li>&lt;strong>API&lt;/strong>: In diesem Abschnitt ist für uns vor allem der Import wichtig. Für jeden Component muss erst das dazugehörige Modul importiert werden:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">MatSliderModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/material/slider&amp;#39;&lt;/span>;
...
&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
...,
&lt;span style="color:#a6e22e">MatSliderModule&lt;/span>,
...
],
...
})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>Examples&lt;/strong>: Hier werden Anwendungsbeispiele aufgezeigt, von welchen wir unseren Code ableiten können.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">mat-slider&lt;/span>
&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;example-margin&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">disabled&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">disabled&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">invert&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">invert&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">max&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">max&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">min&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">min&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">step&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">step&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">thumbLabel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">thumbLabel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">tickInterval&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">getSliderTickInterval&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">()&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">vertical&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">vertical&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">aria-labelledby&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;example-name-label&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">mat-slider&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wie Ihr Material in Eurer Angular-Applikation installiert, wird auf der &lt;a href="https://material.angular.io/guide/getting-started">offiziellen Website&lt;/a> ausführlich beschrieben.&lt;/p>
&lt;h2 id="material-theming">Material Theming&lt;/h2>
&lt;p>Material Design unterstützt Theming. Ein Theme ist eine Farbpalette, welche für jeden Angular Material Component angewendet wird.&lt;/p>
&lt;p>Ein Theme besteht aus:&lt;/p>
&lt;ul>
&lt;li>Primärfarbe&lt;/li>
&lt;li>Akzentfarbe&lt;/li>
&lt;li>Warnung&lt;/li>
&lt;li>Vordergrund&lt;/li>
&lt;li>Hintergrund&lt;/li>
&lt;/ul>
&lt;p>Es gibt verschiedene pre-built Themes in Material Design, sodass man sich das Erstellen eines Themes von Hand ersparen kann:&lt;/p>
&lt;ul>
&lt;li>deeppurple-amber.css&lt;/li>
&lt;li>indigo-pink.css&lt;/li>
&lt;li>pink-bluegrey.css&lt;/li>
&lt;li>purple-green.css&lt;/li>
&lt;/ul>
&lt;p>Um ein solches Theme zu verwenden, müssen wir dies in unserem globalen Stylesheet importieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">@import&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/material/prebuilt-themes/deeppurple-amber.css&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Natürlich kann man auch sein eigene Theme für Angular Material erstellen.
Wie ihr dies machen könnt wird &lt;a href="https://material.angular.io/guide/theming#defining-a-custom-theme">hier&lt;/a> ausführlich beschrieben (Für diejenigen, die mit den Übungen frühzeitig fertig sind).&lt;/p></description></item><item><title>Docs: Lazy Loading</title><link>/docs/web/angular/04_8_lazy_loading/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_8_lazy_loading/</guid><description>
&lt;p>&lt;img src="/images/angular/lazy_loading.png" alt="Lazy loading">&lt;/p>
&lt;h2 id="lazy-loading-in-angular">Lazy Loading in Angular&lt;/h2>
&lt;p>Standardmässig lädt der Browser alle Angular-Module, bevor der Benutzer mit ihnen arbeiten kann.&lt;br>
Natürlich gibt es auch einige, die nicht oder zumindest nicht sofort benötigt werden.&lt;br>
Genau hier setzt das Lazy Loading an, um die Startgeschwindigkeit zu optimieren: Es stellt sicher, dass nur die wichtigsten Anwendungsbestandteile
im Browser landen, der Rest wird später bei Bedarf angefordert. Hierfür werden einfach Routen mit der Eigenschaft &amp;ldquo;loadChildren&amp;rdquo; verwendet&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">routes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [
{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;login&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">component&lt;/span>: &lt;span style="color:#66d9ef">LoginComponent&lt;/span> },
{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;admin&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">loadChildren&lt;/span>&lt;span style="color:#f92672">:&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">import&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;./admintools/admintools.module&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">AdmintoolsModule&lt;/span>)},
{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;profile&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">canActivate&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">AuthGuard&lt;/span>], &lt;span style="color:#a6e22e">loadChildren&lt;/span>&lt;span style="color:#f92672">:&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">import&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;./profile/profile.module&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">ProfileModule&lt;/span>)},
...
]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="lazy-loading-mit-angular-material">Lazy Loading mit Angular Material&lt;/h2>
&lt;p>Einige Components von Angular Material unterstützen Lazy Loading.&lt;/p>
&lt;p>Ein Beispiel hierzu ist das Expansion-Panel.&lt;/p>
&lt;p>&lt;img src="/images/angular/expansion_panel.png" alt="Expansion Panel">&lt;/p>
&lt;p>Die Inhalte des Expansion Panels werden geladen, auch wenn das Expansion-Panel geschlossen ist.
Wenn man auf einer Ansicht beispielsweise 30 dieser Expansion-Panels anzeigt und den jeweiligen Inhalt lädt, kann dies zu Performance-Problemen führen.&lt;/p>
&lt;p>Jedoch unterstützt dieser Component Lazy Loading, wodurch man die Performance-Probleme sehr einfach umgehen kann.&lt;br>
Inhalte werden erst geladen wenn sich das Expansion-Panel öffnet.&lt;/p>
&lt;p>In den meisten Fällen ist das Anwenden von Lazy Loading in Angular Material Components auch kein grosser Aufwand.&lt;/p>
&lt;p>Schaut also auf der Angular Material Website in &amp;ldquo;Overview&amp;rdquo; des Components immer &lt;strong>gut&lt;/strong> nach, ob der Component Lazy Loading unterstützt.&lt;/p></description></item><item><title>Docs: Projekt aufsetzen</title><link>/docs/web/angular/05_1_tour_of_heroes/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/05_1_tour_of_heroes/</guid><description>
&lt;h1 id="ein-neues-projekt-erstellen">Ein neues Projekt erstellen&lt;/h1>
&lt;p>In diesem Teil des Tutorials werden Sie Folgendes tun:&lt;/p>
&lt;ol>
&lt;li>Richten Sie Ihre Umgebung ein.&lt;/li>
&lt;li>Erstellen Sie einen neuen Arbeitsbereich und ein erstes Anwendungsprojekt.&lt;/li>
&lt;li>Stellen Sie die Anwendung bereit.&lt;/li>
&lt;li>Nehmen Sie Änderungen an der Anwendung vor.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Die Beispielanwendung, die auf dieser Seite beschrieben wird, finden Sie unter &lt;a href="https://angular.io/generated/live-examples/toh-pt0/stackblitz.html">dieser Seite&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="richten-sie-ihre-umgebung-ein">Richten Sie Ihre Umgebung ein&lt;/h2>
&lt;p>Um Ihre Entwicklungsumgebung einzurichten, folgen Sie den Anweisungen in &lt;a href="https://angular.io/guide/setup-local">Local Environment Setup&lt;/a>.&lt;/p>
&lt;h2 id="erstellen-sie-einen-neuen-arbeitsbereich-und-eine-erste-anwendung">Erstellen Sie einen neuen Arbeitsbereich und eine erste Anwendung&lt;/h2>
&lt;p>Sie entwickeln Anwendungen im Kontext eines Angular-&lt;a href="https://angular.io/guide/glossary#workspace">Workspace&lt;/a>. Ein Arbeitsbereich enthält die Dateien für ein oder mehrere &lt;a href="https://angular.io/guide/glossary#project">Projekte&lt;/a>. Ein Projekt ist eine Gruppe von Dateien, die eine Anwendung oder eine Bibliothek bilden. Für dieses Tutorial werden Sie einen neuen Arbeitsbereich erstellen.&lt;/p>
&lt;p>So erstellen Sie einen neuen Arbeitsbereich und ein erstes Anwendungsprojekt:&lt;/p>
&lt;ol>
&lt;li>Stellen Sie sicher, dass Sie sich nicht bereits in einem Angular-Arbeitsbereich-Ordner befinden. Wenn Sie beispielsweise zuvor den Arbeitsbereich Erste Schritte erstellt haben, wechseln Sie in den übergeordneten Ordner dieses Ordners.&lt;/li>
&lt;li>Führen Sie den CLI-Befehl &lt;code>ng new&lt;/code> aus und geben Sie den Namen &lt;code>angular-tour-of-heroes&lt;/code> ein, wie hier gezeigt:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">ng new angular-tour-of-heroes
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>Der Befehl &amp;ldquo;ng new&amp;rdquo; fordert Sie auf, Informationen zu den Funktionen einzugeben, die in das ursprüngliche Anwendungsprojekt aufgenommen werden sollen. Akzeptieren Sie die Standardeinstellungen, indem Sie die Enter- oder Return-Taste drücken.&lt;/li>
&lt;/ol>
&lt;p>Die Angular-CLI installiert die notwendigen Angular-&amp;ldquo;npm&amp;rdquo;-Pakete und andere Abhängigkeiten. Dies kann ein paar Minuten dauern.&lt;/p>
&lt;p>Außerdem werden die folgenden Dateien für den Arbeitsbereich und das Starterprojekt erstellt:&lt;/p>
&lt;ul>
&lt;li>Einen neuen Arbeitsbereich mit einem Stammordner namens &amp;ldquo;angular-tour-of-heroes&amp;rdquo;.&lt;/li>
&lt;li>Ein erstes Skelettprojekt im Unterordner &lt;code>src/app&lt;/code>.&lt;/li>
&lt;li>Zugehörige Konfigurationsdateien.&lt;/li>
&lt;/ul>
&lt;p>Das anfängliche App-Projekt enthält eine einfache Willkommensanwendung, die sofort ausgeführt werden kann.&lt;/p>
&lt;h2 id="serve-the-application">Serve the application&lt;/h2>
&lt;p>Wechseln Sie in das Verzeichnis workspace und starten Sie die Anwendung.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback"> cd angular-tour-of-heroes
ng serve --open
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="/images/hint.png" alt="asset">&lt;/p>
&lt;blockquote>
&lt;p>Der Befehl &lt;code>ng serve&lt;/code> baut die App, startet den Entwicklungsserver,
überwacht die Quelldateien und baut die Anwendung neu auf, wenn Sie Änderungen an diesen Dateien vornehmen.&lt;br>
Das &lt;code>--open&lt;/code> Flag öffnet einen Browser auf &lt;code>http://localhost:4200/&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>Sie sollten die Anwendung in Ihrem Browser laufen sehen.&lt;/p>
&lt;h2 id="angular-komponenten">Angular-Komponenten&lt;/h2>
&lt;p>Die Seite, die Sie sehen, ist die &lt;em>Anwendungsshell&lt;/em>.
Die Shell wird von einer Angular &lt;strong>Komponente&lt;/strong> namens &lt;code>AppComponent&lt;/code> gesteuert.&lt;/p>
&lt;p>&lt;em>Komponenten&lt;/em> sind die grundlegenden Bausteine von Angular-Anwendungen.
Sie zeigen Daten auf dem Bildschirm an, warten auf Benutzereingaben und führen Aktionen basierend auf diesen Eingaben aus.&lt;/p>
&lt;h2 id="änderungen-an-der-anwendung-vornehmen">Änderungen an der Anwendung vornehmen&lt;/h2>
&lt;p>Öffnen Sie das Projekt in Ihrem bevorzugten Editor oder IDE und navigieren Sie zum Ordner &lt;code>src/app&lt;/code>, um einige Änderungen an der Starter-Anwendung vorzunehmen.&lt;/p>
&lt;p>Sie werden die Implementierung der Shell &lt;code>AppComponent&lt;/code> über drei Dateien verteilt finden:&lt;/p>
&lt;ol>
&lt;li>&lt;code>app.component.ts&lt;/code> der Code der Komponentenklasse, geschrieben in TypeScript.&lt;/li>
&lt;li>&lt;code>app.component.html&lt;/code> das Komponententemplate, geschrieben in HTML.&lt;/li>
&lt;li>&lt;code>app.component.css&lt;/code> die privaten CSS-Stile der Komponente.&lt;/li>
&lt;/ol>
&lt;h3 id="ändern-sie-den-titel-der-anwendung">Ändern Sie den Titel der Anwendung&lt;/h3>
&lt;p>Öffnen Sie die Klassendatei der Komponente (&lt;code>app.component.ts&lt;/code>) und ändern Sie den Wert der Eigenschaft &lt;code>title&lt;/code> in &amp;lsquo;Tour of Heroes&amp;rsquo;.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">title&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tour of Heroes&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Öffnen Sie die Komponententemplatendatei (&lt;code>app.component.html&lt;/code>) und
löschen Sie die von der Angular CLI generierte Standardtemplate.
Ersetzen Sie es durch die folgende HTML-Zeile.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die doppelten geschweiften Klammern sind Angulars Syntax für die &lt;em>Interpolationsbindung&lt;/em>.
Diese Interpolationsbindung stellt den Eigenschaftswert &lt;code>title&lt;/code> der Komponente
innerhalb des HTML-Header-Tags.&lt;/p>
&lt;p>Der Browser aktualisiert sich und zeigt den neuen Anwendungstitel an.&lt;/p>
&lt;h3 id="hinzufügen-von-anwendungsstilen">Hinzufügen von Anwendungsstilen&lt;/h3>
&lt;p>Die meisten Anwendungen streben ein einheitliches Aussehen in der gesamten Anwendung an.
Das CLI generiert zu diesem Zweck eine leere &lt;code>styles.css&lt;/code>.
Legen Sie dort Ihre anwendungsweiten Stile ab.&lt;/p>
&lt;p>Öffnen Sie &lt;code>src/styles.css&lt;/code> und fügen Sie den folgenden Code in die Datei ein.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#75715e">/* Application-wide Styles */&lt;/span>
&lt;span style="color:#f92672">h1&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#369&lt;/span>;
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">250&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
}
&lt;span style="color:#f92672">h2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h3&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#444&lt;/span>;
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
&lt;span style="color:#66d9ef">font-weight&lt;/span>: &lt;span style="color:#66d9ef">lighter&lt;/span>;
}
&lt;span style="color:#f92672">body&lt;/span> {
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
}
&lt;span style="color:#f92672">body&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">input&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#f92672">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>&lt;span style="color:#f92672">],&lt;/span> &lt;span style="color:#f92672">button&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#333&lt;/span>;
&lt;span style="color:#66d9ef">font-family&lt;/span>: Cambria, Georgia, &lt;span style="color:#66d9ef">serif&lt;/span>;
}
&lt;span style="color:#75715e">/* everywhere else */&lt;/span>
&lt;span style="color:#f92672">*&lt;/span> {
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="abschliessende-überprüfung-des-codes">Abschliessende Überprüfung des Codes&lt;/h2>
&lt;p>Hier sind die auf dieser Seite besprochenen Codedateien.&lt;/p>
&lt;ol>
&lt;li>src/app/app.components.ts&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-root&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./app.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./app.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppComponent&lt;/span> {
&lt;span style="color:#a6e22e">title&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tour of Heroes&amp;#39;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>src/app/app.components.html&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>src/styles.css&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#75715e">/* Application-wide Styles */&lt;/span>
&lt;span style="color:#f92672">h1&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#369&lt;/span>;
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">250&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
}
&lt;span style="color:#f92672">h2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h3&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#444&lt;/span>;
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
&lt;span style="color:#66d9ef">font-weight&lt;/span>: &lt;span style="color:#66d9ef">lighter&lt;/span>;
}
&lt;span style="color:#f92672">body&lt;/span> {
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
}
&lt;span style="color:#f92672">body&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">input&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#f92672">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>&lt;span style="color:#f92672">],&lt;/span> &lt;span style="color:#f92672">button&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#333&lt;/span>;
&lt;span style="color:#66d9ef">font-family&lt;/span>: Cambria, Georgia, &lt;span style="color:#66d9ef">serif&lt;/span>;
}
&lt;span style="color:#75715e">/* everywhere else */&lt;/span>
&lt;span style="color:#f92672">*&lt;/span> {
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;ul>
&lt;li>Sie haben die erste Anwendungsstruktur mit dem Angular CLI erstellt.&lt;/li>
&lt;li>Sie haben gelernt, dass Angular-Komponenten Daten anzeigen.&lt;/li>
&lt;li>Sie haben die doppelten geschweiften Klammern der Interpolation verwendet, um den Titel der Anwendung anzuzeigen.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Editor</title><link>/docs/web/angular/05_2_editor/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/05_2_editor/</guid><description>
&lt;h1 id="der-helden-editor">Der Helden-Editor&lt;/h1>
&lt;blockquote>
&lt;p>Die Beispielanwendung, die auf dieser Seite beschrieben wird, finden Sie unter &lt;a href="https://angular.io/generated/live-examples/toh-pt1/stackblitz.html">dieser Seite&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="erstellen-sie-die-komponente-heroes">Erstellen Sie die Komponente heroes&lt;/h2>
&lt;p>Erzeugen Sie mit der Angular CLI eine neue Komponente mit dem Namen &lt;code>heroes&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback"> ng generate component heroes
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das CLI erstellt einen neuen Ordner, &lt;code>src/app/heroes/&lt;/code>, und generiert
die drei Dateien der &lt;code>HeroesComponent&lt;/code> zusammen mit einer Testdatei.&lt;/p>
&lt;p>Die Klassendatei &lt;code>HeroesComponent&lt;/code> sieht wie folgt aus:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-heroes&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./heroes.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Man importiert immer das &lt;a href="https://angular.io/api/core/Component">Component&lt;/a>-Symbol aus der Angular-Kernbibliothek
und annotieren die Komponentenklasse mit &lt;a href="https://angular.io/api/core/Component">@Component&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://angular.io/api/core/Component">@Component&lt;/a> ist eine Decorator-Funktion, die die Angular-Metadaten für die Komponente spezifiziert.&lt;/p>
&lt;p>Das CLI generiert drei Metadaten-Eigenschaften:&lt;/p>
&lt;ol>
&lt;li>&lt;code>selektor&lt;/code> der CSS-Elementselektor der Komponente&lt;/li>
&lt;li>&lt;code>templateUrl&lt;/code>— der Ort der Template-Datei der Komponente.&lt;/li>
&lt;li>&lt;code>styleUrls&lt;/code>— der Speicherort der privaten CSS-Stile der Komponente.&lt;/li>
&lt;/ol>
&lt;p>Der &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors">CSS-Elementselektor&lt;/a>,
&lt;code>'app-heroes'&lt;/code>, entspricht dem Namen des HTML-Elements, das diese Komponente im Template einer übergeordneten Komponente identifiziert.&lt;/p>
&lt;p>Das &lt;code>ngOnInit()&lt;/code> ist ein &lt;a href="https://angular.io/guide/lifecycle-hooks#oninit">lifecyle hook&lt;/a>.
Angular ruft &lt;code>ngOnInit()&lt;/code> kurz nach der Erstellung einer Komponente auf.
Es ist ein guter Ort, um die Initialisierungslogik zu platzieren.&lt;/p>
&lt;p>Die Komponentenklasse immer &lt;code>export&lt;/code>, damit man sie an anderer Stelle &lt;code>import&lt;/code> kann &amp;hellip; wie im &lt;code>AppModule&lt;/code>.&lt;/p>
&lt;h3 id="hinzufügen-einer-hero-eigenschaft">Hinzufügen einer Hero-Eigenschaft&lt;/h3>
&lt;p>Fügen Sie der &lt;code>HeroesComponent&lt;/code> eine &lt;code>Helden&lt;/code>-Eigenschaft für einen Helden namens &amp;ldquo;Windstorm&amp;rdquo; hinzu.&lt;/p>
&lt;p>&lt;code>heroes.component.ts (hero property)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">hero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Windstorm&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="den-helden-anzeigen">Den Helden anzeigen&lt;/h3>
&lt;p>Öffnen Sie die Templatedatei &amp;ldquo;heroes.component.html&amp;rdquo;.
Löschen Sie den von der Angular CLI generierten Standardtext und
ersetzen Sie ihn durch eine Datenbindung an die neue &lt;code>hero&lt;/code> Eigenschaft.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{hero}}&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="die-ansicht-heroescomponent-anzeigen">Die Ansicht &lt;code>HeroesComponent&lt;/code> anzeigen&lt;/h2>
&lt;p>Um die &lt;code>HeroesComponent&lt;/code> anzuzeigen, müssen Sie sie zum Template der Shell &lt;code>AppComponent&lt;/code> hinzufügen.&lt;/p>
&lt;p>Denken Sie daran, dass &lt;code>app-heroes&lt;/code> der &lt;a href="#selector">Element-Selektor&lt;/a> für die &lt;code>HeroesComponent&lt;/code> ist.
Fügen Sie also ein &lt;code>&amp;lt;app-heroes&amp;gt;&lt;/code>-Element in die &lt;code>AppComponent&lt;/code>-Templatdatei ein, direkt unter dem Titel.&lt;/p>
&lt;p>&lt;code>src/app/app.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">app-heroes&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-heroes&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Unter der Annahme, dass der CLI-Befehl &lt;code>ng serve&lt;/code> noch ausgeführt wird,
sollte der Browser aktualisiert werden und sowohl den Titel der Anwendung als auch den Namen des Helden anzeigen.&lt;/p>
&lt;h2 id="erstellen-einer-hero-interface">Erstellen einer Hero-Interface&lt;/h2>
&lt;p>Ein echter Held ist mehr als nur ein Name.&lt;/p>
&lt;p>Erstellen Sie eine &lt;code>Hero&lt;/code>-Schnittstelle in einer eigenen Datei im Ordner &lt;code>src/app&lt;/code>.
Gib ihr die Eigenschaften &lt;code>id&lt;/code> und &lt;code>name&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/hero.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Hero&lt;/span> {
&lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Kehren Sie zur Klasse &lt;code>HeroesComponent&lt;/code> zurück und importieren Sie die Schnittstelle &lt;code>Hero&lt;/code>.&lt;/p>
&lt;p>Refaktorieren Sie die Eigenschaft &lt;code>hero&lt;/code> der Komponente, so dass sie vom Typ &lt;code>Hero&lt;/code> ist.
Initialisieren Sie sie mit einer &lt;code>id&lt;/code> von &lt;code>1&lt;/code> und dem Namen &lt;code>Windstorm&lt;/code>.&lt;/p>
&lt;p>Die überarbeitete Klassendatei &lt;code>HeroesComponent&lt;/code> sollte wie folgt aussehen:&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-heroes&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./heroes.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">hero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">1&lt;/span>,
&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Windstorm&amp;#39;&lt;/span>
};
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Seite wird nicht mehr richtig angezeigt, weil Sie den Helden von einer Zeichenkette in ein Objekt geändert haben.&lt;/p>
&lt;h2 id="zeigen-sie-das-hero-objekt-an">Zeigen Sie das Hero-Objekt an&lt;/h2>
&lt;p>Aktualisieren Sie die Bindung im Template, um den Namen des Helden anzuzeigen
und zeigen Sie sowohl &lt;code>id&lt;/code> als auch &lt;code>name&lt;/code> in einem Detail-Layout wie diesem:&lt;/p>
&lt;p>&lt;code>heroes.component.html (HeroesComponent's template)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{hero.name}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;id: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;name: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{hero.name}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Browser aktualisiert sich und zeigt die Informationen über den Helden an.&lt;/p>
&lt;h2 id="formatieren-mit-der-_uppercasepipe_">Formatieren mit der &lt;em>UppercasePipe&lt;/em>&lt;/h2>
&lt;p>Ändern Sie die Bindung &lt;code>hero.name&lt;/code> wie folgt.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{hero.name | uppercase}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Browser aktualisiert sich und der Name des Helden wird nun in Großbuchstaben angezeigt.&lt;/p>
&lt;p>Das Wort &lt;a href="https://angular.io/api/common/UpperCasePipe">&lt;code>uppercase&lt;/code>&lt;/a> in der Interpolationsbindung,
direkt nach dem Pipe-Operator ( | ),
aktiviert die eingebaute &lt;code>UppercasePipe&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://angular.io/guide/pipes">Pipes&lt;/a> sind ein guter Weg, um Strings, Währungsbeträge, Daten und andere Anzeigedaten zu formatieren.
Angular wird mit mehreren eingebauten Pipes ausgeliefert und Sie können Ihre eigenen erstellen.&lt;/p>
&lt;h2 id="den-helden-bearbeiten">Den Helden bearbeiten&lt;/h2>
&lt;p>Die Benutzer sollten den Namen des Helden in einem Textfeld &amp;ldquo;&lt;input>&amp;rdquo; bearbeiten können.&lt;/p>
&lt;p>Das Textfeld sollte sowohl die Eigenschaft &amp;ldquo;Name&amp;rdquo; des Helden anzeigen
und diese Eigenschaft während der Eingabe des Benutzers aktualisieren.
Das heißt, die Daten fließen von der Komponentenklasse nach draußen auf den Bildschirm und
vom Bildschirm zurück zur Klasse.&lt;/p>
&lt;p>Um diesen Datenfluss zu automatisieren, richten Sie eine zweiseitige Datenbindung zwischen dem Formularelement &lt;code>&amp;lt;input&amp;gt;&lt;/code> und der Eigenschaft &lt;code>hero.name&lt;/code> ein.&lt;/p>
&lt;h3 id="zwei-wege-bindung">Zwei-Wege-Bindung&lt;/h3>
&lt;p>Überarbeiten Sie den Detailbereich im Template &lt;code>HeroesComponent&lt;/code> so, dass er wie folgt aussieht:&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.html (HeroesComponent's template)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>[(ngModel)]&lt;/strong> ist Angulars Syntax für die Zwei-Wege-Datenbindung.&lt;/p>
&lt;p>Hier bindet sie die Eigenschaft &lt;code>hero.name&lt;/code> an die HTML-Textbox, so dass Daten in beide Richtungen fließen können: von der Eigenschaft &lt;code>hero.name&lt;/code> zur Textbox und von der Textbox zurück zum &lt;code>hero.name&lt;/code>.&lt;/p>
&lt;h3 id="das-fehlende-_formsmodule_">Das fehlende &lt;em>FormsModule&lt;/em>&lt;/h3>
&lt;p>Beachten Sie, dass die Anwendung nicht mehr funktioniert, wenn Sie &lt;code>[(ngModel)]&lt;/code> hinzufügen.&lt;/p>
&lt;p>Um den Fehler zu sehen, öffnen Sie die Browser-Entwicklungswerkzeuge und suchen Sie in der Konsole
nach einer Meldung wie&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">Template parse errors:
Can&lt;span style="color:#e6db74">&amp;#39;t bind to &amp;#39;&lt;/span>ngModel&lt;span style="color:#e6db74">&amp;#39; since it is not a known property of &amp;#39;&lt;/span>input&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Obwohl &lt;a href="https://angular.io/api/forms/NgModel">ngModel&lt;/a> eine gültige Angular-Direktive ist, ist sie standardmäßig nicht verfügbar.&lt;/p>
&lt;p>Sie gehört zum optionalen &lt;a href="https://angular.io/api/forms/FormsModule">FormsModule&lt;/a> und man muss sich &lt;em>opt-in&lt;/em>, um sie zu verwenden.&lt;/p>
&lt;h2 id="_appmodule_">&lt;em>AppModule&lt;/em>&lt;/h2>
&lt;p>Angular muss wissen, wie die Teile Ihrer Anwendung zusammenpassen
und welche anderen Dateien und Bibliotheken die Anwendung benötigt.
Diese Informationen werden &lt;em>Metadaten&lt;/em> genannt.&lt;/p>
&lt;p>Einige der Metadaten befinden sich in den &lt;code>@Component&lt;/code>-Dekoratoren, die Sie zu Ihren Komponentenklassen hinzugefügt haben.
Andere wichtige Metadaten befinden sich in &lt;a href="https://angular.io/guide/ngmodules">&lt;code>@NgModule&lt;/code>&lt;/a> Dekoratoren.&lt;/p>
&lt;p>Der wichtigste &lt;a href="https://angular.io/guide/ngmodules">&lt;code>@NgModule&lt;/code>&lt;/a> Dekorator annotiert die Top-Level &lt;strong>AppModule&lt;/strong> Klasse.&lt;/p>
&lt;p>Das Angular CLI generierte eine &lt;code>AppModule&lt;/code> Klasse in &lt;code>src/app/app.module.ts&lt;/code> als es das Projekt erstellte.
Dies ist der Ort, an dem Sie das &lt;a href="https://angular.io/api/forms/FormsModule">FormsModule&lt;/a> einfügen.&lt;/p>
&lt;h3 id="importieren-sie-_formsmodule">Importieren Sie _FormsModule&lt;/h3>
&lt;p>Öffnen Sie &lt;code>AppModule&lt;/code> (&lt;code>app.module.ts&lt;/code>) und importieren Sie das Symbol &lt;code>FormsModule&lt;/code> aus der Bibliothek &lt;code>@angular/forms&lt;/code>.&lt;/p>
&lt;p>&lt;code>app.module.ts (FormsModule symbol import)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">FormsModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/forms&amp;#39;&lt;/span>; &lt;span style="color:#75715e">// &amp;lt;-- NgModel lives here
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Fügen Sie dann &lt;code>FormsModule&lt;/code> zum &lt;code>@NgModule&lt;/code>-Metadaten-Array &lt;code>imports&lt;/code> hinzu, das eine Liste der externen Module enthält, die die Anwendung benötigt.&lt;/p>
&lt;p>&lt;code>app.module.ts (@NgModule imports)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">BrowserModule&lt;/span>,
&lt;span style="color:#a6e22e">FormsModule&lt;/span>
],
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn der Browser aktualisiert wird, sollte die Anwendung wieder funktionieren. Sie können den Namen des Helden bearbeiten und sehen, dass die Änderungen sofort in der &lt;code>&amp;lt;h2&amp;gt;&lt;/code> oberhalb des Textfeldes angezeigt werden.&lt;/p>
&lt;h3 id="deklarieren-sie-heroescomponent">Deklarieren Sie &lt;code>HeroesComponent&lt;/code>&lt;/h3>
&lt;p>Jede Komponente muss in &lt;em>exakt einem&lt;/em> &lt;a href="guide/ngmodules">NgModule&lt;/a> deklariert werden.&lt;/p>
&lt;p>&lt;em>Du&lt;/em> hast die &lt;code>HeroesComponent&lt;/code> nicht deklariert.
Warum hat die Anwendung dann funktioniert?&lt;/p>
&lt;p>Sie funktionierte, weil das Angular CLI &lt;code>HeroesComponent&lt;/code> im &lt;code>AppModule&lt;/code> deklarierte, als es diese Komponente generierte.&lt;/p>
&lt;p>Öffnen Sie &lt;code>src/app/app.module.ts&lt;/code> und finden Sie &lt;code>HeroesComponent&lt;/code>, das ganz oben importiert wurde.&lt;/p>
&lt;p>&lt;code>src/app/app.module.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes/heroes.component&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die &lt;code>HeroesComponent&lt;/code> wird in dem Array &lt;code>@NgModule.declarations&lt;/code> deklariert.
&lt;code>src/app/app.module.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">declarations&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">AppComponent&lt;/span>,
&lt;span style="color:#a6e22e">HeroesComponent&lt;/span>
],
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Beachten Sie, dass &lt;code>AppModule&lt;/code> beide Anwendungskomponenten, &lt;code>AppComponent&lt;/code> und &lt;code>HeroesComponent&lt;/code>, deklariert.&lt;/p>
&lt;h2 id="abschließende-überprüfung-des-codes">Abschließende Überprüfung des Codes&lt;/h2>
&lt;p>Hier sind die auf dieser Seite besprochenen Codedateien.&lt;/p>
&lt;ol>
&lt;li>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-heroes&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./heroes.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">hero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">1&lt;/span>,
&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Windstorm&amp;#39;&lt;/span>
};
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>&lt;code>src/app/heroes/heroes.component.html&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{hero.name | uppercase}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;id: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>&lt;code>src/app/app.module.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">BrowserModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/platform-browser&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">NgModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">FormsModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/forms&amp;#39;&lt;/span>; &lt;span style="color:#75715e">// &amp;lt;-- NgModel lives here
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">AppComponent&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./app.component&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes/heroes.component&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#a6e22e">declarations&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">AppComponent&lt;/span>,
&lt;span style="color:#a6e22e">HeroesComponent&lt;/span>
],
&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">BrowserModule&lt;/span>,
&lt;span style="color:#a6e22e">FormsModule&lt;/span>
],
&lt;span style="color:#a6e22e">providers&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [],
&lt;span style="color:#a6e22e">bootstrap&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">AppComponent&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppModule&lt;/span> { }
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>&lt;code>src/app/app.component.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-root&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./app.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./app.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppComponent&lt;/span> {
&lt;span style="color:#a6e22e">title&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tour of Heroes&amp;#39;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="5">
&lt;li>&lt;code>src/app/app.component.html&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">app-heroes&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-heroes&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="6">
&lt;li>&lt;code>src/app/hero.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Hero&lt;/span> {
&lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;ul>
&lt;li>Sie haben die CLI verwendet, um eine zweite &lt;code>HeroesComponent&lt;/code> zu erstellen.&lt;/li>
&lt;li>Sie haben die &lt;code>HeroesComponent&lt;/code> angezeigt, indem Sie sie der &lt;code>AppComponent&lt;/code>-Shell hinzugefügt haben.&lt;/li>
&lt;li>Sie haben die &lt;code>UppercasePipe&lt;/code> angewendet, um den Namen zu formatieren.&lt;/li>
&lt;li>Du hast die Zwei-Wege-Datenbindung mit der &lt;code>ngModel&lt;/code>-Direktive benutzt.&lt;/li>
&lt;li>Du hast etwas über das &lt;code>AppModule&lt;/code> gelernt.&lt;/li>
&lt;li>Du hast das &lt;code>FormsModule&lt;/code> in das &lt;code>AppModule&lt;/code> importiert, so dass Angular die &lt;code>ngModel&lt;/code>-Direktive erkennen und anwenden konnte.&lt;/li>
&lt;li>Du hast gelernt, wie wichtig es ist, Komponenten im &lt;code>AppModule&lt;/code> zu deklarieren
und schätzt es, dass die CLI sie für dich deklariert.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Auswahlliste</title><link>/docs/web/angular/05_3_selection_list/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/05_3_selection_list/</guid><description>
&lt;h1 id="eine-auswahlliste-anzeigen">Eine Auswahlliste anzeigen&lt;/h1>
&lt;blockquote>
&lt;p>Die Beispielanwendung, die auf dieser Seite beschrieben wird, finden Sie unter &lt;a href="hhttps://angular.io/generated/live-examples/toh-pt2/stackblitz.html">dieser Seite&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="mock-heroes-erstellen">Mock Heroes erstellen&lt;/h2>
&lt;p>Sie benötigen einige Helden, die angezeigt werden sollen.&lt;/p>
&lt;p>Letztendlich werden Sie diese von einem entfernten Datenserver erhalten.
Für den Moment werden Sie einige &lt;em>mock heroes&lt;/em> erstellen und so tun, als kämen sie vom Server.&lt;/p>
&lt;p>Erstelle eine Datei namens &lt;code>mock-heroes.ts&lt;/code> im Ordner &lt;code>src/app/&lt;/code>.
Definiere eine &lt;code>HEROES&lt;/code> Konstante als Array von zehn Helden und exportiere sie.
Die Datei sollte wie folgt aussehen.&lt;/p>
&lt;p>&lt;code>src/app/mock-heroes.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">HEROES&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">11&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr Nice&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">12&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Narco&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">13&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Bombasto&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">14&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Celeritas&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">15&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magneta&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">16&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;RubberMan&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">17&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dynama&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">18&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr IQ&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">19&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magma&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">20&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tornado&amp;#39;&lt;/span> }
];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="anzeige-der-helden">Anzeige der Helden&lt;/h2>
&lt;p>Öffnen Sie die Klassendatei &lt;code>HeroesComponent&lt;/code> und importieren Sie das Mock &lt;code>HEROES&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts (import HEROES)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">HEROES&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">11&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr Nice&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">12&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Narco&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">13&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Bombasto&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">14&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Celeritas&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">15&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magneta&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">16&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;RubberMan&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">17&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dynama&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">18&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr IQ&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">19&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magma&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">20&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tornado&amp;#39;&lt;/span> }
];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Definieren Sie in derselben Datei (Klasse &lt;code>HeroesComponent&lt;/code>) eine Komponenteneigenschaft namens &lt;code>heroes&lt;/code>, um das Array &lt;code>HEROES&lt;/code> zur Bindung freizugeben.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">HEROES&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="auflisten-von-helden-mit-ngforhttpsangularioapicommonngforof">Auflisten von Helden mit &lt;a href="https://angular.io/api/common/NgForOf">*ngFor&lt;/a>&lt;/h3>
&lt;p>Öffnen Sie die Templatedatei &lt;code>HeroesComponent&lt;/code> und nehmen Sie die folgenden Änderungen vor:&lt;/p>
&lt;ul>
&lt;li>Fügen Sie ein &lt;code>&amp;lt;h2&amp;gt;&lt;/code> am Anfang ein,&lt;/li>
&lt;li>Darunter fügen Sie eine ungeordnete HTML-Liste (&lt;code>&amp;lt;ul&amp;gt;&lt;/code>) ein.&lt;/li>
&lt;li>Fügen Sie ein &lt;code>&amp;lt;li&amp;gt;&lt;/code> innerhalb des &lt;code>&amp;lt;ul&amp;gt;&lt;/code> ein, das die Eigenschaften eines &lt;code>Helden&lt;/code> anzeigt.&lt;/li>
&lt;li>Streuen Sie einige CSS-Klassen für die Gestaltung ein (Sie werden die CSS-Stile in Kürze hinzufügen).&lt;/li>
&lt;/ul>
&lt;p>Das Ganze soll so aussehen:&lt;/p>
&lt;p>&lt;code>heroes.component.html (heroes template)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;My Heroes&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ul&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;heroes&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;badge&amp;#34;&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; {{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Es wird ein Fehler angezeigt, da die Eigenschaft &amp;ldquo;hero&amp;rdquo; nicht existiert. Um Zugriff auf jeden einzelnen Helden zu haben und sie alle aufzulisten, fügen Sie ein &lt;code>*ngFor&lt;/code> zum &lt;code>&amp;lt;li&amp;gt;&lt;/code> hinzu, um die Liste der Helden zu durchlaufen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die &lt;code>*ngFor&lt;/code> ist Angulars Direktive &lt;em>repeater&lt;/em>.
Sie wiederholt das Host-Element für jedes Element in einer Liste.&lt;/p>
&lt;p>Die Syntax in diesem Beispiel ist wie folgt:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;li&amp;gt;&lt;/code> ist das Host-Element.&lt;/li>
&lt;li>&lt;code>heroes&lt;/code> enthält die Mock-Helden-Liste der Klasse &lt;code>HeroesComponent&lt;/code>, die Mock-Helden-Liste.&lt;/li>
&lt;li>&lt;code>hero&lt;/code> enthält das aktuelle Heldenobjekt für jede Iteration durch die Liste.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images/hint.png" alt="asset"> Vergessen Sie nicht das Sternchen (*) vor &lt;code>ngFor&lt;/code>. Es ist ein wichtiger Teil der Syntax.&lt;/p>
&lt;p>Nachdem der Browser aktualisiert wurde, erscheint die Liste der Helden.&lt;/p>
&lt;h3 id="a-idstylesastil-der-helden">&lt;a id="styles">&lt;/a>Stil der Helden&lt;/h3>
&lt;p>Die Heldenliste sollte ansprechend sein und visuell reagieren, wenn der Benutzer
mit dem Mauszeiger einen Helden aus der Liste auswählen.&lt;/p>
&lt;p>Im &lt;a href="https://angular.io/tutorial/toh-pt0#app-wide-styles">ersten Tutorial&lt;/a> haben Sie die grundlegenden Stile für die gesamte Anwendung in &lt;code>styles.css&lt;/code> festgelegt.
Dieses Stylesheet enthielt keine Stile für diese Liste von Helden.&lt;/p>
&lt;p>Sie könnten weitere Stile zu &lt;code>styles.css&lt;/code> hinzufügen und das Stylesheet mit dem Hinzufügen von Komponenten weiter ausbauen.&lt;/p>
&lt;p>Vielleicht ziehen Sie es stattdessen vor, private Stile für eine bestimmte Komponente zu definieren und alles, was eine Komponente braucht, zu behalten— den Code, das HTML,
und das CSS —zusammen an einem Ort.&lt;/p>
&lt;p>Dieser Ansatz macht es einfacher, die Komponente an anderer Stelle wiederzuverwenden
und das beabsichtigte Erscheinungsbild der Komponente zu erhalten, selbst wenn die globalen Stile unterschiedlich sind.&lt;/p>
&lt;p>Sie definieren private Stile entweder inline im Array &lt;code>@Component.styles&lt;/code> oder
als Stylesheet-Datei(en), die im &lt;code>@Component.styleUrls&lt;/code> Array identifiziert werden.&lt;/p>
&lt;p>Als die CLI die &lt;code>HeroesComponent&lt;/code> generierte, erstellte sie ein leeres &lt;code>heroes.component.css&lt;/code> Stylesheet für die &lt;code>HeroesComponent&lt;/code>
und verwies in &lt;code>@Component.styleUrls&lt;/code> wie folgt darauf.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts (@Component)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-heroes&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./heroes.component.css&amp;#39;&lt;/span>]
})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Öffnen Sie die Datei &lt;code>heroes.component.css&lt;/code> und fügen Sie die privaten CSS-Stile für die &lt;code>HeroesComponent&lt;/code> ein.
Sie finden sie in der &lt;a href="#final-code-review">finalen Code-Übersicht&lt;/a> am Ende dieser Anleitung.&lt;/p>
&lt;p>&lt;img src="/images/hint.png" alt="asset">
Stile und Stylesheets, die in &lt;code>@Component&lt;/code>-Metadaten identifiziert werden, sind auf diese spezifische Komponente beschränkt.
Die &lt;code>heroes.component.css&lt;/code>-Stile gelten nur für die &lt;code>HeroesComponent&lt;/code> und haben keine Auswirkungen auf das äußere HTML oder das HTML in anderen Komponenten.&lt;/p>
&lt;h2 id="anzeigen-von-details">Anzeigen von Details&lt;/h2>
&lt;p>Wenn der Benutzer auf einen Helden in der Liste klickt, sollte die Komponente die Details des ausgewählten Helden unten auf der Seite anzeigen.&lt;/p>
&lt;p>In diesem Abschnitt werden Sie auf das Klick-Ereignis für das Heldenelement warten
und aktualisieren die Heldendetails.&lt;/p>
&lt;h3 id="hinzufügen-einer-klick-ereignisbindung">Hinzufügen einer Klick-Ereignisbindung&lt;/h3>
&lt;p>Fügen Sie eine Klick-Ereignis-Bindung zu &lt;code>&amp;lt;li&amp;gt;&lt;/code> wie folgt hinzu:&lt;/p>
&lt;p>&lt;code>heroes.component.html (template excerpt)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">onSelect&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dies ist ein Beispiel für die &lt;a href="https://angular.io/guide/event-binding">Ereignisbindung&lt;/a>-Syntax von Angular.&lt;/p>
&lt;p>Die Klammern um &lt;code>click&lt;/code> sagen Angular, dass es auf das &lt;code>click&lt;/code>-Ereignis des &lt;code>&amp;lt;li&amp;gt;&lt;/code>-Elements warten soll.
Wenn der Benutzer auf das Element &lt;code>&amp;lt;li&amp;gt;&lt;/code> klickt, führt Angular den Ausdruck &lt;code>onSelect(hero)&lt;/code> aus.&lt;/p>
&lt;p>Im nächsten Abschnitt definieren Sie eine &lt;code>onSelect()&lt;/code> Methode in &lt;code>HeroesComponent&lt;/code> um
um den Helden anzuzeigen, der in der &lt;code>*ngFor&lt;/code> Expression definiert wurde.&lt;/p>
&lt;h3 id="fügen-sie-den-click-event-handler-hinzu">Fügen Sie den Click-Event-Handler hinzu&lt;/h3>
&lt;p>Benennen Sie die Eigenschaft &lt;code>hero&lt;/code> der Komponente in &lt;code>selectedHero&lt;/code> um, aber weisen Sie sie nicht zu.
Es gibt keinen &lt;em>selected hero&lt;/em>, wenn die Anwendung startet.&lt;/p>
&lt;p>Fügen Sie die folgende Methode &lt;code>onSelect()&lt;/code> hinzu, die den angeklickten Helden aus dem Template
dem &lt;code>selectedHero&lt;/code> der Komponente zuweist.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts (onSelect)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">selectedHero?&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>;
&lt;span style="color:#a6e22e">onSelect&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">selectedHero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">hero&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="hinzufügen-eines-detailbereichs">Hinzufügen eines Detailbereichs&lt;/h3>
&lt;p>Derzeit haben Sie eine Liste in dem Komponententemplate. Um auf einen Helden in der Liste zu klicken
zu klicken und Details über diesen Helden anzuzeigen, benötigen Sie einen Abschnitt für die Details, der im
Template. Fügen Sie folgendes zu &lt;code>heroes.component.html&lt;/code> unter dem Listenabschnitt hinzu:&lt;/p>
&lt;p>&lt;code>heroes.component.html (selected hero details)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{selectedHero.name | uppercase}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;id: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{selectedHero.id}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Nach dem Aktualisieren des Browsers ist die Anwendung fehlerhaft.&lt;/p>
&lt;p>Öffnen Sie die Entwicklerwerkzeuge des Browsers und suchen Sie in der Konsole nach einer Fehlermeldung wie dieser:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">HeroesComponent.html:3 ERROR TypeError: Cannot read property &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span> of undefined
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="was-ist-passiert">Was ist passiert?&lt;/h4>
&lt;p>Wenn die Anwendung startet, ist die Eigenschaft &lt;code>selectedHero&lt;/code> &amp;ldquo;undefiniert&amp;rdquo; &lt;em>durch Design&lt;/em>.&lt;/p>
&lt;p>Bindungsausdrücke im Template, die sich auf Eigenschaften von &lt;code>selectedHero&lt;/code> beziehen—Ausdrücke wie &lt;code>{{selectedHero.name}}&lt;/code>—&lt;em>müssen fehlschlagen&lt;/em>, weil es keinen ausgewählten Helden gibt.&lt;/p>
&lt;h4 id="die-lösung---leere-details-mit-_ngif_-ausblenden">Die Lösung - leere Details mit &lt;em>*ngIf&lt;/em> ausblenden&lt;/h4>
&lt;p>Die Komponente sollte die ausgewählten Heldendetails nur anzeigen, wenn der &lt;code>selectedHero&lt;/code> existiert.&lt;/p>
&lt;p>Wickeln Sie das HTML der Heldendetails in ein &lt;code>&amp;lt;div&amp;gt;&lt;/code>.
Fügen Sie die &lt;code>*ngIf&lt;/code>-Direktive von Angular in das &lt;code>&amp;lt;div&amp;gt;&lt;/code> ein und setzen Sie es auf &lt;code>selectedHero&lt;/code>.&lt;/p>
&lt;p>&lt;img src="/images/hint.png" alt="asset"> Vergessen Sie nicht das Sternchen (*) vor &lt;code>ngIf&lt;/code>. Das ist ein wichtiger Teil der Syntax.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.html (*ngIf)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngIf&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;selectedHero&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{selectedHero.name | uppercase}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;id: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{selectedHero.id}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Nach dem Aktualisieren des Browsers wird die Liste der Namen wieder angezeigt.
Der Detailbereich ist leer.
Klicken Sie auf einen Helden in der Liste der Helden und seine Details erscheinen.
Die Anwendung scheint wieder zu funktionieren.
Die Helden werden in einer Liste angezeigt und die Details zu dem angeklickten Helden erscheinen unten auf der Seite.&lt;/p>
&lt;h4 id="warum-es-funktioniert">Warum es funktioniert&lt;/h4>
&lt;p>Wenn &lt;code>selectedHero&lt;/code> undefiniert ist, entfernt das &lt;code>ngIf&lt;/code> die Heldendetails aus dem DOM. Es gibt keine &lt;code>selectedHero&lt;/code> Bindungen zu berücksichtigen.&lt;/p>
&lt;p>Wenn der Benutzer einen Helden auswählt, hat &lt;code>selectedHero&lt;/code> einen Wert und
ngIf&amp;quot; setzt das Heldendetail in das DOM.&lt;/p>
&lt;h3 id="den-ausgewählten-helden-gestalten">Den ausgewählten Helden gestalten&lt;/h3>
&lt;p>Um den ausgewählten Helden zu identifizieren, können Sie die CSS-Klasse &lt;code>.selected&lt;/code> in den &lt;a href="#styles">Stilen, die Sie zuvor hinzugefügt haben&lt;/a> verwenden.
Um die Klasse &lt;code>.selected&lt;/code> auf das &lt;code>&amp;lt;li&amp;gt;&lt;/code> anzuwenden, wenn der Benutzer darauf klickt, verwenden Sie die Klassenbindung.&lt;/p>
&lt;p>&lt;img src="/images/angular/heroes-list-selected.png" alt="Ausgewählter Held mit dunklem Hintergrund und hellem Text, der ihn von nicht ausgewählten Listenelementen unterscheidet">&lt;/p>
&lt;p>Angulars &lt;a href="https://angular.io/guide/attribute-binding#class-binding">class-binding&lt;/a> kann eine CSS-Klasse bedingt hinzufügen und entfernen.
Fügen Sie &lt;code>[class.some-css-class]=&amp;quot;some-condition&amp;quot;&lt;/code> zu dem Element hinzu, das Sie gestalten möchten.&lt;/p>
&lt;p>Fügen Sie die folgende &lt;code>[class.selected]&lt;/code> Bindung zum &lt;code>&amp;lt;li&amp;gt;&lt;/code> im &lt;code>HeroesComponent&lt;/code> Template hinzu:&lt;/p>
&lt;p>&lt;code>heroes.component.html (toggle the 'selected' CSS class)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">[&lt;span style="color:#66d9ef">class&lt;/span>.&lt;span style="color:#a6e22e">selected&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero === selectedHero&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn der aktuelle Zeilenheld derselbe ist wie der &lt;code>selectedHero&lt;/code>, fügt Angular die CSS-Klasse &lt;code>selected&lt;/code> hinzu. Wenn die beiden Helden unterschiedlich sind, entfernt Angular die Klasse.&lt;/p>
&lt;p>Das fertige &lt;code>&amp;lt;li&amp;gt;&lt;/code> sieht wie folgt aus:&lt;/p>
&lt;p>&lt;code>heroes.component.html (list item hero)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">selected&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero &lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">==&lt;/span> &lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">onSelect&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;badge&amp;#34;&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; {{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="div-idfinal-code-reviewdivabschließende-code-überprüfung">&lt;div id="final-code-review">&lt;/div>Abschließende Code-Überprüfung&lt;/h2>
&lt;p>Hier sind die auf dieser Seite besprochenen Codedateien, einschließlich der &lt;code>HeroesComponent&lt;/code>-Stile.&lt;/p>
&lt;ol>
&lt;li>&lt;code>src/app/mock-heroes.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">HEROES&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">11&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr Nice&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">12&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Narco&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">13&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Bombasto&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">14&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Celeritas&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">15&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magneta&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">16&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;RubberMan&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">17&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dynama&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">18&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr IQ&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">19&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magma&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">20&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tornado&amp;#39;&lt;/span> }
];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HEROES&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../mock-heroes&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-heroes&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./heroes.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">HEROES&lt;/span>;
&lt;span style="color:#a6e22e">selectedHero?&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
&lt;span style="color:#a6e22e">onSelect&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">selectedHero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">hero&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>&lt;code>src/app/heroes/heroes.component.html&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;My Heroes&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ul&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;heroes&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">selected&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero &lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">==&lt;/span> &lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">onSelect&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;badge&amp;#34;&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; {{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngIf&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;selectedHero&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{selectedHero.name | uppercase}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;id: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{selectedHero.id}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>&lt;code>src/app/heroes/heroes.component.css&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#75715e">/* HeroesComponent&amp;#39;s private CSS styles */&lt;/span>
.&lt;span style="color:#a6e22e">heroes&lt;/span> {
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">list-style-type&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">15&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">li&lt;/span> {
&lt;span style="color:#66d9ef">cursor&lt;/span>: &lt;span style="color:#66d9ef">pointer&lt;/span>;
&lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">relative&lt;/span>;
&lt;span style="color:#66d9ef">left&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#EEE&lt;/span>;
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">.5&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">.3&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">1.6&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">li&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#2c3a41&lt;/span>;
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#e6e6e6&lt;/span>;
&lt;span style="color:#66d9ef">left&lt;/span>: &lt;span style="color:#ae81ff">.1&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">li&lt;/span>.&lt;span style="color:#a6e22e">selected&lt;/span> {
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">black&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">white&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">li&lt;/span>.&lt;span style="color:#a6e22e">selected&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span> {
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#505050&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">white&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">li&lt;/span>.&lt;span style="color:#a6e22e">selected&lt;/span>:&lt;span style="color:#a6e22e">active&lt;/span> {
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">black&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">white&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes&lt;/span> .&lt;span style="color:#a6e22e">badge&lt;/span> {
&lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">inline&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#66d9ef">block&lt;/span>;
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#66d9ef">small&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">white&lt;/span>;
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">0.8&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span> &lt;span style="color:#ae81ff">0.7&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0.7&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">background-color&lt;/span>:&lt;span style="color:#ae81ff">#405061&lt;/span>;
&lt;span style="color:#66d9ef">line-height&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">relative&lt;/span>;
&lt;span style="color:#66d9ef">left&lt;/span>: &lt;span style="color:#ae81ff">-1&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">top&lt;/span>: &lt;span style="color:#ae81ff">-4&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">1.8&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">margin-right&lt;/span>: &lt;span style="color:#ae81ff">.8&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
}
&lt;span style="color:#f92672">input&lt;/span> {
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">.5&lt;/span>&lt;span style="color:#66d9ef">rem&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;ul>
&lt;li>Die Anwendung &amp;ldquo;Tour of Heroes&amp;rdquo; zeigt eine Liste von Helden mit einer Detailansicht an.&lt;/li>
&lt;li>Der Benutzer kann einen Helden auswählen und dessen Details sehen.&lt;/li>
&lt;li>Sie haben &lt;code>*ngFor&lt;/code> verwendet, um eine Liste anzuzeigen.&lt;/li>
&lt;li>Sie haben &lt;code>*ngIf&lt;/code> verwendet, um einen HTML-Block bedingt ein- oder auszuschließen.&lt;/li>
&lt;li>Sie können eine CSS-Stilklasse mit einer &lt;code>class&lt;/code>-Bindung umschalten.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Komponenten</title><link>/docs/web/angular/05_4_feature_component/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/05_4_feature_component/</guid><description>
&lt;h1 id="erstellen-sie-eine-feature-komponente">Erstellen Sie eine Feature-Komponente&lt;/h1>
&lt;p>Im Moment zeigt die Komponente &lt;code>HeroesComponent&lt;/code> sowohl die Liste der Helden als auch die Details des ausgewählten Helden an.&lt;/p>
&lt;p>Auf dieser Seite werden Sie den ersten Schritt in diese Richtung machen, indem Sie die Heldendetails in eine separate, wiederverwendbare &lt;code>HeroDetailComponent&lt;/code> verschieben.&lt;/p>
&lt;p>Die &lt;code>HeroesComponent&lt;/code> wird nur die Liste der Helden darstellen.
Die &lt;code>HeroDetailComponent&lt;/code> wird die Details eines ausgewählten Helden anzeigen.&lt;/p>
&lt;blockquote>
&lt;p>Die Beispielanwendung, die auf dieser Seite beschrieben wird, finden Sie unter &lt;a href="https://angular.io/generated/live-examples/toh-pt3/stackblitz.html">dieser Seite&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="erstellen-sie-die-herodetailcomponent">Erstellen Sie die &lt;code>HeroDetailComponent&lt;/code>&lt;/h2>
&lt;p>Verwenden Sie das Angular CLI, um eine neue Komponente mit dem Namen &lt;code>hero-detail&lt;/code> zu erstellen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> ng generate component hero-detail
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Befehl führt die folgenden Schritte aus:&lt;/p>
&lt;ul>
&lt;li>Erzeugt ein Verzeichnis &lt;code>src/app/hero-detail&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Innerhalb dieses Verzeichnisses werden vier Dateien generiert:&lt;/p>
&lt;ul>
&lt;li>Eine CSS-Datei für die Stile der Komponente.&lt;/li>
&lt;li>Eine HTML-Datei für die Komponententemplate.&lt;/li>
&lt;li>Eine TypeScript-Datei mit einer Komponentenklasse namens &lt;code>HeroDetailComponent&lt;/code>.&lt;/li>
&lt;li>Eine Testdatei für die Klasse &lt;code>HeroDetailComponent&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Der Befehl fügt auch die &lt;code>HeroDetailComponent&lt;/code> als Deklaration in den &lt;code>@NgModule&lt;/code> Dekorator der &lt;code>src/app/app.module.ts&lt;/code> Datei ein.&lt;/p>
&lt;h3 id="schreiben-sie-das-template">Schreiben Sie das Template&lt;/h3>
&lt;p>Schneiden Sie das HTML für das Heldendetail aus dem unteren Teil der &lt;code>HeroesComponent&lt;/code>- aus und fügen Sie es über die generierte Boilerplate in das &lt;code>HeroDetailComponent&lt;/code>-Template ein.&lt;/p>
&lt;p>Das eingefügte HTML bezieht sich auf einen &lt;code>selectedHero&lt;/code>.
Die neue &lt;code>HeroDetailComponent&lt;/code> kann &lt;em>jeden&lt;/em> Helden darstellen, nicht nur einen ausgewählten Helden.
Ersetzen Sie also &amp;ldquo;selectedHero&amp;rdquo; durch &amp;ldquo;hero&amp;rdquo; überall im Template.&lt;/p>
&lt;p>Wenn Sie fertig sind, sollte das &lt;code>HeroDetailComponent&lt;/code>-Template wie folgt aussehen:&lt;/p>
&lt;p>&lt;code>src/app/hero-detail/hero-detail.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngIf&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{hero.name | uppercase}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;id: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="hinzufügen-der-inputhttpsangularioapicoreinput-hero-eigenschaft">Hinzufügen der &lt;a href="https://angular.io/api/core/Input">&lt;code>@Input()&lt;/code>&lt;/a> Hero-Eigenschaft&lt;/h3>
&lt;p>das Template &lt;code>HeroDetailComponent&lt;/code> bindet sich an die Eigenschaft &lt;code>Hero&lt;/code> der Komponente
die vom Typ &lt;code>Hero&lt;/code> ist.&lt;/p>
&lt;p>Öffnen Sie die Klassendatei &lt;code>HeroDetailComponent&lt;/code> und importieren Sie das Symbol &lt;code>Hero&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/hero-detail/hero-detail.component.ts (import Hero)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Eigenschaft &lt;code>hero&lt;/code>
&lt;a href="https://angular.io/guide/inputs-outputs">muss eine &lt;em>Input&lt;/em>-Eigenschaft sein&lt;/a>,
annotiert mit dem &lt;code>@Input()&lt;/code> Dekorator,
denn die &lt;em>externe&lt;/em> &lt;code>HeroesComponent&lt;/code> &lt;a href="#heroes-component-template">wird sich wie folgt daran binden&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">app-hero-detail&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-hero-detail&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ändern Sie die Importanweisung &lt;code>@angular/core&lt;/code>, um das Symbol &lt;code>Input&lt;/code> aufzunehmen.&lt;/p>
&lt;p>&lt;code>src/app/hero-detail/hero-detail.component.ts (import Input)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span>, &lt;span style="color:#a6e22e">Input&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Fügen Sie eine Eigenschaft &amp;ldquo;hero&amp;rdquo; hinzu, der der Dekorator &amp;ldquo;@Input()&amp;rdquo; vorangestellt ist.&lt;/p>
&lt;p>&lt;code>src/app/hero-detail/hero-detail.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">@Input&lt;/span>() &lt;span style="color:#a6e22e">hero?&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das ist die einzige Änderung, die Sie an der Klasse &lt;code>HeroDetailComponent&lt;/code> vornehmen sollten.
Es gibt keine weiteren Eigenschaften. Es gibt keine Präsentationslogik.
Diese Komponente empfängt nur ein Heldenobjekt über die Eigenschaft &lt;code>hero&lt;/code> und zeigt es an.&lt;/p>
&lt;h2 id="die-herodetailcomponent-anzeigen">Die &lt;code>HeroDetailComponent&lt;/code> anzeigen&lt;/h2>
&lt;p>Die &lt;code>HeroesComponent&lt;/code> hat die Heldendetails selbständig angezeigt, bevor Sie diesen Teil des Templates entfernt haben.
Dieser Abschnitt führt Sie durch die Delegierung von Logik an die &lt;code>HeroDetailComponent&lt;/code>.&lt;/p>
&lt;p>Die beiden Komponenten haben eine Eltern/Kind-Beziehung.
Die übergeordnete Komponente &lt;code>HeroesComponent&lt;/code> steuert die untergeordnete Komponente &lt;code>HeroDetailComponent&lt;/code>
indem sie ihr einen neuen Helden sendet, der angezeigt wird, wenn
der Benutzer einen Helden aus der Liste auswählt.&lt;/p>
&lt;p>Sie ändern nicht die &lt;em>Klasse&lt;/em> von &lt;code>HeroesComponent&lt;/code>, aber Sie ändern ihr &lt;em>Template&lt;/em>.&lt;/p>
&lt;h3 id="a-idheroes-component-templateaaktualisieren-sie-das-heroescomponent-template">&lt;a id="#heroes-component-template">&lt;/a>Aktualisieren Sie das &lt;code>HeroesComponent&lt;/code>-Template&lt;/h3>
&lt;p>Der &lt;code>HeroDetailComponent&lt;/code> Selektor ist &lt;code>'app-hero-detail'&lt;/code>.
Fügen Sie ein &lt;code>&amp;lt;app-hero-detail&amp;gt;&lt;/code> Element in der Nähe des unteren Endes des &lt;code>HeroesComponent&lt;/code> Template hinzu, wo die Helden-Detailansicht vorher war.&lt;/p>
&lt;p>Binden Sie die &lt;code>HeroesComponent.selectedHero&lt;/code> an die Eigenschaft &lt;code>hero&lt;/code> des Elements wie folgt.&lt;/p>
&lt;p>&lt;code>heroes.component.html (HeroDetail binding)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">app-hero-detail&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-hero-detail&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>[hero]=&amp;quot;selectedHero&amp;quot;&lt;/code> ist eine Angular-&lt;a href="https://angular.io/guide/property-binding">Eigenschaftsbindung(property binding)&lt;/a>.&lt;/p>
&lt;p>Es ist eine &lt;em>einfache&lt;/em> Datenbindung von
der &amp;ldquo;selectedHero&amp;rdquo;-Eigenschaft der &amp;ldquo;HeroComponent&amp;rdquo; an die &amp;ldquo;hero&amp;rdquo;-Eigenschaft des Zielelements, die der &amp;ldquo;hero&amp;rdquo;-Eigenschaft der &amp;ldquo;HeroDetailComponent&amp;rdquo; zugeordnet ist.&lt;/p>
&lt;p>Wenn der Benutzer nun auf einen Helden in der Liste klickt, ändert sich der &lt;code>selectedHero&lt;/code>.
Wenn sich der &lt;code>selectedHero&lt;/code> ändert, aktualisiert die &lt;em>Eigenschaftsbindung&lt;/em> &lt;code>hero&lt;/code>
und die &lt;code>HeroDetailComponent&lt;/code> zeigt den neuen Helden an.&lt;/p>
&lt;p>Das überarbeitete &lt;code>HeroesComponent&lt;/code>-Template sollte wie folgt aussehen:&lt;/p>
&lt;p>&lt;code>heroes.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;My Heroes&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ul&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;heroes&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">selected&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero &lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">==&lt;/span> &lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">onSelect&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;badge&amp;#34;&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; {{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">app-hero-detail&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-hero-detail&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Browser wird aktualisiert und die Anwendung funktioniert wieder wie zuvor.&lt;/p>
&lt;h2 id="was-hat-sich-geändert">Was hat sich geändert?&lt;/h2>
&lt;p>Wie &lt;a href="05_3_Selection_list.md">vorher&lt;/a>, wenn ein Benutzer auf einen Heldennamen klickt,
erscheint das Heldendetail unterhalb der Heldenliste.
Jetzt zeigt die &lt;code>HeroDetailComponent&lt;/code> diese Details anstelle der &lt;code>HeroesComponent&lt;/code> an.&lt;/p>
&lt;p>Das Refactoring der ursprünglichen &lt;code>HeroesComponent&lt;/code> in zwei Komponenten bringt Vorteile, sowohl jetzt als auch in Zukunft:&lt;/p>
&lt;ol>
&lt;li>Sie haben die Verantwortlichkeiten der &lt;code>HeroesComponent&lt;/code> reduziert.&lt;/li>
&lt;li>Sie können die &lt;code>HeroDetailComponent&lt;/code> zu einem umfangreichen Helden-Editor weiterentwickeln
ohne die übergeordnete &lt;code>HeroesComponent&lt;/code> zu berühren.&lt;/li>
&lt;li>Sie können die &lt;code>HeroesComponent&lt;/code> weiterentwickeln, ohne die Helden-Detailansicht zu berühren.&lt;/li>
&lt;li>Sie können die &lt;code>HeroDetailComponent&lt;/code> im Template einer zukünftigen Komponente wiederverwenden.&lt;/li>
&lt;/ol>
&lt;h2 id="abschließende-code-überprüfung">Abschließende Code-Überprüfung&lt;/h2>
&lt;p>Hier sind die auf dieser Seite besprochenen Codedateien.&lt;/p>
&lt;ol>
&lt;li>&lt;code>src/app/hero-detail/hero-detail.component.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span>, &lt;span style="color:#a6e22e">Input&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-hero-detail&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./hero-detail.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./hero-detail.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroDetailComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#66d9ef">@Input&lt;/span>() &lt;span style="color:#a6e22e">hero?&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>&lt;code>src/app/hero-detail/hero-detail.component.html&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngIf&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{hero.name | uppercase}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;id: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>&lt;code>src/app/heroes/heroes.component.html&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;My Heroes&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ul&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;heroes&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">selected&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero &lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">==&lt;/span> &lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">onSelect&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;badge&amp;#34;&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; {{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">app-hero-detail&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-hero-detail&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>&lt;code>src/app/app.module.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">BrowserModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/platform-browser&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">NgModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">FormsModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/forms&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">AppComponent&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./app.component&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes/heroes.component&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroDetailComponent&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./hero-detail/hero-detail.component&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#a6e22e">declarations&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">AppComponent&lt;/span>,
&lt;span style="color:#a6e22e">HeroesComponent&lt;/span>,
&lt;span style="color:#a6e22e">HeroDetailComponent&lt;/span>
],
&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">BrowserModule&lt;/span>,
&lt;span style="color:#a6e22e">FormsModule&lt;/span>
],
&lt;span style="color:#a6e22e">providers&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [],
&lt;span style="color:#a6e22e">bootstrap&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">AppComponent&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppModule&lt;/span> { }
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Sie haben eine separate, wiederverwendbare &lt;code>HeroDetailComponent&lt;/code> erstellt.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Sie haben eine &lt;a href="https://angular.io/guide/property-binding">Eigenschaftsbindung&lt;/a> verwendet, um der übergeordneten &lt;code>HeroesComponent&lt;/code> Kontrolle über die untergeordnete &lt;code>HeroDetailComponent&lt;/code> zu geben.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Sie haben den &lt;a href="https://angular.io/guide/inputs-outputs">&lt;code>@Input&lt;/code> decorator&lt;/a>
um die &lt;code>hero&lt;/code> Eigenschaft für die Bindung
durch die externe &lt;code>HeroesComponent&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Services</title><link>/docs/web/angular/05_5_services_hinzuf%C3%BCgen/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/05_5_services_hinzuf%C3%BCgen/</guid><description>
&lt;h1 id="dienste-hinzufügen">Dienste hinzufügen&lt;/h1>
&lt;p>Die Tour of Heroes &lt;code>HeroesComponent&lt;/code> holt sich derzeit falsche Daten und zeigt sie an.&lt;/p>
&lt;p>Nach dem Refactoring in diesem Tutorial wird &lt;code>HeroesComponent&lt;/code> schlank sein und sich auf die Unterstützung der Ansicht konzentrieren.
Es wird auch einfacher sein, Unit-Tests mit einem Mock-Service durchzuführen.&lt;/p>
&lt;blockquote>
&lt;p>Die Beispielanwendung, die auf dieser Seite beschrieben wird, finden Sie unter &lt;a href="https://angular.io/generated/live-examples/toh-pt4/stackblitz.html">dieser Seite&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="warum-dienste">Warum Dienste&lt;/h2>
&lt;p>Komponenten sollten keine Daten direkt abrufen oder speichern und schon gar nicht wissentlich gefälschte Daten präsentieren.
Sie sollten sich auf die Darstellung von Daten konzentrieren und den Datenzugriff an einen Dienst delegieren.&lt;/p>
&lt;p>In diesem Tutorial werden Sie einen &lt;code>HeroService&lt;/code> erstellen, den alle Anwendungsklassen verwenden können, um Helden zu erhalten.
Anstatt diesen Dienst mit dem &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new">Schlüsselwort &lt;code>New&lt;/code>&lt;/a> zu erstellen,
werden Sie sich auf Angular &lt;a href="https://angular.io/guide/dependency-injection">&lt;em>dependency injection&lt;/em>&lt;/a>
um ihn in den &lt;code>HeroesComponent&lt;/code>-Konstruktor zu injizieren.&lt;/p>
&lt;p>Dienste sind eine großartige Möglichkeit, Informationen zwischen Klassen auszutauschen, die sich &lt;em>nicht kennen&lt;/em>.
Sie erstellen einen &lt;code>MessageService&lt;/code> und injizieren ihn an zwei Stellen.&lt;/p>
&lt;ol>
&lt;li>Injektion in HeroService, der den Dienst verwendet, um eine Nachricht zu senden.&lt;/li>
&lt;li>Injizieren in MessagesComponent, das diese Nachricht anzeigt und auch die ID anzeigt
anzeigt, wenn der Benutzer auf einen Helden klickt.&lt;/li>
&lt;/ol>
&lt;h2 id="erstellen-sie-den-heroservice">Erstellen Sie den &lt;code>HeroService&lt;/code>&lt;/h2>
&lt;p>Erstellen Sie mit dem Angular CLI einen Dienst namens &lt;code>Hero&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> ng generate service hero
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Befehl erzeugt eine Skelettklasse &lt;code>HeroService&lt;/code> in &lt;code>src/app/hero.service.ts&lt;/code> wie folgt:&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts (new service)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Injectable&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Injectable&lt;/span>({
&lt;span style="color:#a6e22e">providedIn&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;root&amp;#39;&lt;/span>,
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroService&lt;/span> {
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="injectablehttpsangularioapicoreinjectable-dienste">&lt;a href="https://angular.io/api/core/Injectable">&lt;code>@Injectable()&lt;/code>&lt;/a> Dienste&lt;/h3>
&lt;p>Beachten Sie, dass der neue Dienst das Angular &lt;code>Injectable&lt;/code> Symbol importiert und die Klasse mit dem
die Klasse mit dem Dekorator &lt;code>@Injectable()&lt;/code> annotiert. Dies kennzeichnet die Klasse als eine, die am &lt;em>dependency injection system&lt;/em> teilnimmt. Die Klasse &lt;code>HeroService&lt;/code> wird einen injizierbaren Dienst bereitstellen, und sie kann auch ihre eigenen injizierten Abhängigkeiten haben.
Sie hat noch keine Abhängigkeiten, aber &lt;a href="#inject-message-service">sie wird bald eine haben&lt;/a>.&lt;/p>
&lt;p>Der &lt;code>@Injectable()&lt;/code> Dekorator akzeptiert ein Metadaten Objekt für den Dienst, auf die gleiche Weise wie der &lt;code>@Component()&lt;/code> Dekorator es für Ihre Komponentenklassen tat.&lt;/p>
&lt;h3 id="heldendaten-erhalten">Heldendaten erhalten&lt;/h3>
&lt;p>Der &lt;code>HeroService&lt;/code> kann Hero-Daten von überall her bekommen—ein Web-Service, lokaler Speicher oder eine Mock-Datenquelle.&lt;/p>
&lt;p>Wenn Sie den Datenzugriff aus den Komponenten entfernen, können Sie Ihre Meinung über die Implementierung jederzeit ändern, ohne die Komponenten zu berühren.
Sie wissen nicht, wie der Dienst funktioniert.&lt;/p>
&lt;p>Die Implementierung in &lt;em>diesem&lt;/em> Tutorial wird weiterhin &lt;em>mock heroes&lt;/em> liefern.&lt;/p>
&lt;p>Importieren Sie den &lt;code>Hero&lt;/code> und &lt;code>HEROES&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HEROES&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./mock-heroes&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Fügen Sie eine Methode &lt;code>getHeroes&lt;/code> hinzu, um die &lt;em>mock heroes&lt;/em> zurückzugeben.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Hero&lt;/span>[] {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">HEROES&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="bereitstellen-des-heroservice">Bereitstellen des &lt;code>HeroService&lt;/code>&lt;/h2>
&lt;p>Sie müssen den &lt;code>HeroService&lt;/code> für das Dependency Injection System verfügbar machen
bevor Angular ihn in die &lt;code>HeroesComponent&lt;/code> &lt;em>injizieren&lt;/em> kann, indem ein &lt;em>Provider&lt;/em> registriert wird. Ein Provider ist etwas, das einen Dienst erstellen oder liefern kann; in diesem Fall instanziiert er die &lt;code>HeroService&lt;/code> Klasse, um den Dienst bereitzustellen.&lt;/p>
&lt;p>Um sicherzustellen, dass der &lt;code>HeroService&lt;/code> diesen Dienst bereitstellen kann, registrieren Sie ihn
mit dem &lt;em>injector&lt;/em>, der das Objekt ist, das für die Auswahl des
und die Injektion des Anbieters, wo die Anwendung ihn benötigt.&lt;/p>
&lt;p>Standardmäßig registriert der Angular CLI-Befehl &lt;code>ng generate service&lt;/code> einen Provider mit dem &lt;em>root injector&lt;/em> für Ihren Service, indem er Provider-Metadaten, also &lt;code>providedIn: 'root'&lt;/code> in den &lt;code>@Injectable()&lt;/code> Dekorator einfügt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">@Injectable&lt;/span>({
&lt;span style="color:#a6e22e">providedIn&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;root&amp;#39;&lt;/span>,
})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn man den Dienst auf der Root-Ebene bereitstellt, erstellt Angular eine einzelne, gemeinsame Instanz von &lt;code>HeroService&lt;/code> und injiziert sie in jede Klasse, die danach fragt.
Die Registrierung des Providers in den &lt;code>@Injectable&lt;/code>-Metadaten erlaubt es Angular auch, eine Anwendung zu optimieren, indem der Service entfernt wird, wenn er doch nicht gebraucht wird.&lt;/p>
&lt;blockquote>
&lt;p>Um mehr über Provider zu erfahren, lesen Sie den Abschnitt &lt;a href="https://angular.io/guide/providers">Providers&lt;/a>.
Weitere Informationen über Injektoren finden Sie im &lt;a href="https://angular.io/guide/dependency-injection">Dependency Injection guide&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>Der &lt;code>HeroService&lt;/code> ist nun bereit, in die &lt;code>HeroesComponent&lt;/code> eingebunden zu werden.&lt;/p>
&lt;p>&lt;img src="/images/hint.png" alt="asset"> Sofern Git Bash nicht gewählt werden kann, könnte es daran liegen, dass du die IDE neustarten musst.
Dies ist ein vorläufiges Codebeispiel, das es Ihnen ermöglicht, den &lt;code>HeroService&lt;/code> bereitzustellen und zu verwenden. An diesem Punkt wird sich der Code vom &lt;code>HeroService&lt;/code> in der &lt;a href="#final-code-review">&amp;ldquo;final code review&amp;rdquo;&lt;/a> unterscheiden.&lt;/p>
&lt;h2 id="update-heroescomponent">Update &lt;code>HeroesComponent&lt;/code>&lt;/h2>
&lt;p>Öffnen Sie die Klassendatei &lt;code>HeroesComponent&lt;/code>.&lt;/p>
&lt;p>Löschen Sie den &lt;code>HEROES&lt;/code>-Import, da Sie diesen nicht mehr benötigen.
Importieren Sie stattdessen den &lt;code>HeroService&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts (import HeroService)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroService&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero.service&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ersetzen Sie die Definition der Eigenschaft &amp;ldquo;heroes&amp;rdquo; durch eine Deklaration.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">heroes&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="a-idinject-message-serviceainject-the-heroservice">&lt;a id="#inject-message-service">&lt;/a>Inject the &lt;code>HeroService&lt;/code>&lt;/h3>
&lt;p>Fügen Sie einen privaten &lt;code>heroService&lt;/code> Parameter vom Typ &lt;code>HeroService&lt;/code> zum Konstruktor hinzu.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">heroService&lt;/span>: &lt;span style="color:#66d9ef">HeroService&lt;/span>) {}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Parameter definiert gleichzeitig eine private &lt;code>heroService&lt;/code>-Eigenschaft und identifiziert sie als &lt;code>HeroService&lt;/code>-Injektionsstelle.&lt;/p>
&lt;p>Wenn Angular eine &lt;code>HeroesComponent&lt;/code> erstellt, setzt das &lt;code>Dependency Injection&lt;/code> System
setzt den &lt;code>heroService&lt;/code> Parameter auf die Singleton Instanz von &lt;code>HeroService&lt;/code>.&lt;/p>
&lt;h3 id="hinzufügen-von-getheroes">Hinzufügen von &lt;code>getHeroes()&lt;/code>&lt;/h3>
&lt;p>Erstellen Sie eine Methode, um die Helden aus dem Service abzurufen.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>();
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="aufruf-in-ngoninit">Aufruf in &lt;code>ngOnInit()&lt;/code>&lt;/h3>
&lt;p>Obwohl Sie &lt;code>getHeroes()&lt;/code> im Konstruktor aufrufen könnten, ist das nicht die beste Praxis.&lt;/p>
&lt;p>Reservieren Sie den Konstruktor für eine minimale Initialisierung, wie z.B. die Verknüpfung von Konstruktorparametern mit Eigenschaften.
Der Konstruktor sollte &lt;em>nichts&lt;/em> tun.
Er sollte sicherlich keine Funktion aufrufen, die HTTP-Anfragen an einen entfernten Server stellt, wie es ein &lt;em>echter&lt;/em> Datendienst tun würde.&lt;/p>
&lt;p>Rufen Sie stattdessen &lt;code>getHeroes()&lt;/code> innerhalb des &lt;a href="https://angular.io/guide/lifecycle-hooks">&lt;em>ngOnInit lifecycle hook&lt;/em>&lt;/a> auf und
Angular &lt;code>ngOnInit()&lt;/code> zu einem geeigneten Zeitpunkt &lt;em>nach&lt;/em> der Erstellung einer &lt;code>HeroesComponent&lt;/code>-Instanz aufrufen lassen.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>();
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="sehen-sie-wie-es-läuft">Sehen Sie, wie es läuft&lt;/h3>
&lt;p>Nachdem der Browser aktualisiert wurde, sollte die Anwendung wie zuvor laufen,
Sie zeigt eine Liste der Helden und eine Detailansicht des Helden an, wenn Sie auf den Namen eines Helden klicken.&lt;/p>
&lt;h2 id="beobachtbare-daten">Beobachtbare Daten&lt;/h2>
&lt;p>Die Methode &lt;code>HeroService.getHeroes()&lt;/code> hat eine &lt;em>synchrone Signatur&lt;/em>,
was bedeutet, dass der &lt;code>HeroService&lt;/code> Helden synchron abrufen kann.
Die &lt;code>HeroesComponent&lt;/code> verbraucht das &lt;code>getHeroes()&lt;/code> Ergebnis
als ob Helden synchron geholt werden könnten.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>();
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dies wird in einer echten Anwendung nicht funktionieren.
Im Moment kommen Sie noch damit durch, weil der Dienst derzeit &lt;em>mock heroes&lt;/em> zurückgibt.
Aber bald wird die Anwendung Helden von einem entfernten Server abrufen,
was von Natur aus ein &lt;em>asynchroner&lt;/em> Vorgang ist.&lt;/p>
&lt;p>Der &lt;code>HeroService&lt;/code> muss auf die Antwort des Servers warten,
&lt;code>getHeroes()&lt;/code> kann nicht sofort mit Heldendaten zurückkehren,
und der Browser wird nicht blockieren, während der Dienst wartet.&lt;/p>
&lt;p>Die Funktion &lt;code>HeroService.getHeroes()&lt;/code> muss eine &lt;em>asynchrone Signatur&lt;/em> irgendeiner Art haben.&lt;/p>
&lt;p>In diesem Tutorial wird &lt;code>HeroService.getHeroes()&lt;/code> ein &lt;code>Observable&lt;/code> zurückgeben
zurück, weil es schließlich die Angular-Methode &lt;code>HttpClient.get&lt;/code> verwenden wird, um die Helden zu holen
und &lt;a href="https://angular.io/guide/http">&lt;code>HttpClient.get()&lt;/code> gibt ein &lt;code>Observable&lt;/code> zurück&lt;/a>.&lt;/p>
&lt;h3 id="observable-heroservice">Observable &lt;code>HeroService&lt;/code>&lt;/h3>
&lt;p>Observable&amp;quot; ist eine der Schlüsselklassen in der &lt;a href="https://rxjs.dev/">RxJS-Bibliothek&lt;/a>.&lt;/p>
&lt;p>In einem &lt;a href="05_7_Data_Server.md">späteren Tutorial über HTTP&lt;/a> werden Sie lernen, dass die &lt;code>HttpClient&lt;/code>-Methoden von Angular RxJS &lt;code>Observable&lt;/code> zurückgeben.
In diesem Tutorial werden Sie das Abrufen von Daten vom Server mit der RxJS-Funktion &amp;ldquo;of()&amp;rdquo; simulieren.&lt;/p>
&lt;p>Öffnen Sie die Datei &lt;code>HeroService&lt;/code> und importieren Sie die Symbole &lt;code>Observable&lt;/code> und &lt;code>of&lt;/code> von RxJS.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts (Observable imports)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Observable&lt;/span>, &lt;span style="color:#66d9ef">of&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;rxjs&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ersetzen Sie die Methode &lt;code>getHeroes()&lt;/code> durch die folgende:&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span>(&lt;span style="color:#a6e22e">HEROES&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>of(HEROES)&lt;/code> gibt ein &lt;code>Observable&amp;lt;Hero[]&amp;gt;&lt;/code> zurück, das &lt;em>einen einzelnen Wert&lt;/em>, das Array der Mock-Helden, ausgibt.&lt;/p>
&lt;blockquote>
&lt;p>Im &lt;a href="05_7_Data_Server.md">HTTP-Tutorial&lt;/a> rufen Sie &lt;code>HttpClient.get&amp;lt;Hero[]&amp;gt;()&lt;/code> auf, das ebenfalls ein &lt;code>Observable&amp;lt;Hero[]&amp;gt;&lt;/code> zurückgibt, das &lt;em>einen einzelnen Wert&lt;/em>, ein Array von Helden aus dem Body der HTTP-Antwort, ausgibt.&lt;/p>
&lt;/blockquote>
&lt;h3 id="abonnieren-in-heroescomponent">Abonnieren in &lt;code>HeroesComponent&lt;/code>&lt;/h3>
&lt;p>Die Methode &lt;code>HeroService.getHeroes&lt;/code> gab früher einen &lt;code>Hero[]&lt;/code> zurück.
Jetzt gibt sie ein &lt;code>Observable&amp;lt;Hero[]&amp;gt;&lt;/code> zurück.&lt;/p>
&lt;p>Sie müssen sich an diesen Unterschied in &lt;code>HeroesComponent&lt;/code> anpassen.&lt;/p>
&lt;p>Suchen Sie die Methode &lt;code>getHeroes&lt;/code> und ersetzen Sie sie durch den folgenden Code.
&lt;code>heroes.component.ts (Observable)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>()
.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>heroes.component.ts (Original)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>();
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>Observable.subscribe()&lt;/code> ist der entscheidende Unterschied.&lt;/p>
&lt;p>Die bisherige Version weist der Eigenschaft &lt;code>heroes&lt;/code> der Komponente ein Array von Helden zu.
Die Zuweisung erfolgt &lt;em>synchron&lt;/em>, als ob der Server die Helden sofort zurückgeben könnte
oder der Browser könnte die Benutzeroberfläche einfrieren, während er auf die Antwort des Servers wartete.&lt;/p>
&lt;p>Das &lt;em>funktioniert&lt;/em> aber nicht, wenn der &lt;code>HeroService&lt;/code> tatsächlich Anfragen an einen entfernten Server stellt.&lt;/p>
&lt;p>Die neue Version wartet darauf, dass der &lt;code>Observable&lt;/code> das Array der Helden ausgibt—was
könnte jetzt oder in einigen Minuten geschehen.
Die Methode &lt;code>subscribe()&lt;/code> übergibt das ausgegebene Array an den Callback,
der die Eigenschaft &lt;code>Helden&lt;/code> der Komponente setzt.&lt;/p>
&lt;p>Dieser asynchrone Ansatz wird &lt;em>funktionieren&lt;/em> wenn
der &lt;code>HeroService&lt;/code> Helden vom Server anfordert.&lt;/p>
&lt;h2 id="nachrichten-anzeigen">Nachrichten anzeigen&lt;/h2>
&lt;p>Dieser Abschnitt führt Sie durch die folgenden Schritte:&lt;/p>
&lt;ul>
&lt;li>Hinzufügen einer &lt;code>MessagesComponent&lt;/code>, die Anwendungsnachrichten am unteren Rand des Bildschirms anzeigt&lt;/li>
&lt;li>Erstellen eines injizierbaren, app-weiten &lt;code>MessageService&lt;/code> zum Senden von Nachrichten, die angezeigt werden sollen&lt;/li>
&lt;li>Injizieren von &lt;code>MessageService&lt;/code> in den &lt;code>HeroService&lt;/code>.&lt;/li>
&lt;li>Anzeige einer Nachricht, wenn &lt;code>HeroService&lt;/code> erfolgreich Helden holt&lt;/li>
&lt;/ul>
&lt;h3 id="erstellen-der-messagescomponent">Erstellen der &lt;code>MessagesComponent&lt;/code>&lt;/h3>
&lt;p>Verwenden Sie die CLI, um die &lt;code>MessagesComponent&lt;/code> zu erstellen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> ng generate component messages
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das CLI erstellt die Komponentendateien im Ordner &lt;code>src/app/messages&lt;/code> und deklariert die &lt;code>MessagesComponent&lt;/code> im &lt;code>AppModule&lt;/code>.&lt;/p>
&lt;p>Ändern Sie das Template &lt;code>AppComponent&lt;/code>, um die erzeugte &lt;code>MessagesComponent&lt;/code> anzuzeigen.&lt;/p>
&lt;p>&lt;code>src/app/app.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">app-heroes&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-heroes&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">app-messages&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-messages&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Sie sollten den Standardabsatz von &lt;code>MessagesComponent&lt;/code> unten auf der Seite sehen.&lt;/p>
&lt;h3 id="erstellen-sie-den-messageservice">Erstellen Sie den &lt;code>MessageService&lt;/code>&lt;/h3>
&lt;p>Verwenden Sie die CLI, um den &lt;code>MessageService&lt;/code> in &lt;code>src/app&lt;/code> zu erstellen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> ng generate service message
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Öffnen Sie &lt;code>MessageService&lt;/code> und ersetzen Sie dessen Inhalt durch den folgenden.&lt;/p>
&lt;p>&lt;code>src/app/message.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Injectable&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Injectable&lt;/span>({
&lt;span style="color:#a6e22e">providedIn&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;root&amp;#39;&lt;/span>,
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MessageService&lt;/span> {
&lt;span style="color:#a6e22e">messages&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [];
&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">messages&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>);
}
&lt;span style="color:#a6e22e">clear() {&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">messages&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [];
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Dienst stellt seinen Cache von &lt;code>Nachrichten&lt;/code> und zwei Methoden zur Verfügung: eine, um &lt;code>Add()&lt;/code> eine Nachricht zum Cache hinzuzufügen und eine andere, um &lt;code>Clear()&lt;/code> den Cache zu löschen.&lt;/p>
&lt;h3 id="injiziere-ihn-in-den-heroservice">Injiziere ihn in den &lt;code>HeroService&lt;/code>.&lt;/h3>
&lt;p>In &lt;code>HeroService&lt;/code> importieren Sie den &lt;code>MessageService&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts (import MessageService)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">MessageService&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./message.service&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ändern Sie den Konstruktor mit einem Parameter, der eine private Eigenschaft &lt;code>messageService&lt;/code> deklariert.
Angular wird das Singleton &lt;code>MessageService&lt;/code> in diese Eigenschaft injizieren
wenn es den &lt;code>HeroService&lt;/code> erstellt.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">messageService&lt;/span>: &lt;span style="color:#66d9ef">MessageService&lt;/span>) { }
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>Dies ist ein typisches &amp;ldquo;&lt;em>Service-in-Service&lt;/em>&amp;quot;-Szenario:
Man injiziert den &lt;code>MessageService&lt;/code> in den &lt;code>HeroService&lt;/code>, der wiederum in die &lt;code>HeroesComponent&lt;/code> injiziert wird.&lt;/p>
&lt;/blockquote>
&lt;h3 id="senden-einer-nachricht-von-heroservice">Senden einer Nachricht von &lt;code>HeroService&lt;/code>&lt;/h3>
&lt;p>Ändern Sie die Methode &lt;code>getHeroes()&lt;/code>, um eine Nachricht zu senden, wenn die Helden abgeholt werden.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span>(&lt;span style="color:#a6e22e">HEROES&lt;/span>);
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">messageService&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;HeroService: fetched heroes&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="anzeige-der-nachricht-von-heroservice">Anzeige der Nachricht von &lt;code>HeroService&lt;/code>&lt;/h3>
&lt;p>Die &lt;code>MessagesComponent&lt;/code> sollte alle Nachrichten anzeigen,
einschließlich der Nachricht, die vom &lt;code>HeroService&lt;/code> gesendet wird, wenn er Helden holt.&lt;/p>
&lt;p>Öffnen Sie &lt;code>MessagesComponent&lt;/code> und importieren Sie den &lt;code>MessageService&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/messages/messages.component.ts (import MessageService)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">MessageService&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../message.service&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Modifizieren Sie den Konstruktor mit einem Parameter, der eine &lt;strong>öffentliche&lt;/strong> Eigenschaft &lt;code>messageService&lt;/code> deklariert.
Angular wird das Singleton &lt;code>MessageService&lt;/code> in diese Eigenschaft injizieren
wenn es die &lt;code>MessagesComponent&lt;/code> erstellt.&lt;/p>
&lt;p>&lt;code>src/app/messages/messages.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">messageService&lt;/span>: &lt;span style="color:#66d9ef">MessageService&lt;/span>) {}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Eigenschaft &lt;code>messageService&lt;/code> &lt;strong>muss öffentlich sein&lt;/strong>, weil Sie in im Template daran binden werden.&lt;/p>
&lt;p>&lt;img src="/images/hint.png" alt="asset"> Angular bindet nur an &lt;em>öffentliche&lt;/em> Komponenteneigenschaften.&lt;/p>
&lt;h3 id="bindung-an-den-messageservice">Bindung an den &lt;code>MessageService&lt;/code>&lt;/h3>
&lt;p>Ersetzen Sie das CLI-generierte &lt;code>MessagesComponent&lt;/code> Template durch das folgende.&lt;/p>
&lt;p>&lt;code>src/app/messages/messages.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngIf&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;messageService.messages.length&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Messages&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;clear&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">messageService&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">clear&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">()&amp;#34;&lt;/span>&amp;gt;Clear messages&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;let message of messageService.messages&amp;#39;&lt;/span>&amp;gt; {{message}} &amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dieses Template bindet direkt an den &lt;code>messageService&lt;/code> der Komponente.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Das &lt;code>*ngIf&lt;/code> zeigt den Nachrichtenbereich nur an, wenn es Nachrichten zu zeigen gibt.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ein &lt;code>*ngFor&lt;/code> stellt die Liste der Nachrichten in wiederholten &lt;code>&amp;lt;div&amp;gt;&lt;/code> Elementen dar.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Ein Angular &lt;a href="https://angular.io/guide/event-binding">event-binding&lt;/a> bindet das Click-Ereignis der Schaltfläche
an &lt;code>MessageService.clear()&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Die Nachrichten werden besser aussehen, wenn Sie die privaten CSS-Stile zu &lt;code>messages.component.css&lt;/code> hinzufügen
wie in einem der &lt;a href="#final-code-review">&amp;ldquo;final code review&amp;rdquo;&lt;/a> Tabs unten aufgeführt.&lt;/p>
&lt;h2 id="hinzufügen-zusätzlicher-nachrichten-zum-heldendienst">Hinzufügen zusätzlicher Nachrichten zum Heldendienst&lt;/h2>
&lt;p>Das folgende Beispiel zeigt, wie man jedes Mal, wenn der Benutzer auf einen Hero klickt, eine Nachricht sendet und anzeigt.
einen Hero klickt, eine Nachricht sendet und anzeigt, die einen Verlauf der Auswahl des Benutzers anzeigt. Dies wird hilfreich sein, wenn Sie zum
nächsten Abschnitt über &lt;a href="tutorial/toh-pt5">Routing&lt;/a>.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroService&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero.service&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">MessageService&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../message.service&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-heroes&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./heroes.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">selectedHero?&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>;
&lt;span style="color:#a6e22e">heroes&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [];
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">heroService&lt;/span>: &lt;span style="color:#66d9ef">HeroService&lt;/span>, &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">messageService&lt;/span>: &lt;span style="color:#66d9ef">MessageService&lt;/span>) { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>();
}
&lt;span style="color:#a6e22e">onSelect&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">selectedHero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">hero&lt;/span>;
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">messageService&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#e6db74">`HeroesComponent: Selected hero id=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
}
&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>()
.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Aktualisieren Sie den Browser, um die Liste der Helden zu sehen, und scrollen Sie nach unten, um die
Nachrichten vom HeroService zu sehen. Jedes Mal, wenn Sie auf einen Helden klicken, erscheint eine neue Nachricht, die die Auswahl
der Auswahl. Verwenden Sie die Schaltfläche &lt;strong>Nachrichten löschen&lt;/strong>, um den Nachrichtenverlauf zu löschen.&lt;/p>
&lt;h2 id="a-idfinal-code-reviewaabschließende-code-überprüfung">&lt;a id="final-code-review">&lt;/a>Abschließende Code-Überprüfung&lt;/h2>
&lt;p>&lt;a href="../assets/files/05_5.zip" download>Hier&lt;/a> oder &lt;a href="../assets/files/05_5">hier&lt;/a>
sind die auf dieser Seite besprochenen Codedateien.&lt;/p>
&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;ul>
&lt;li>Sie haben den Datenzugriff auf die Klasse &lt;code>HeroService&lt;/code> umstrukturiert.&lt;/li>
&lt;li>Sie haben den &lt;code>HeroService&lt;/code> als &lt;em>Provider&lt;/em> seines Dienstes auf der Root-Ebene registriert, so dass er überall in der Anwendung injiziert werden kann.&lt;/li>
&lt;li>Sie haben &lt;a href="https://angular.io/guide/dependency-injection">Angular Dependency Injection&lt;/a> verwendet, um ihn in eine Komponente zu injizieren.&lt;/li>
&lt;li>Sie haben der &lt;em>get data&lt;/em> Methode von &lt;code>HeroService&lt;/code> eine asynchrone Signatur gegeben.&lt;/li>
&lt;li>Sie haben &lt;code>Observable&lt;/code> und die RxJS &lt;em>Observable&lt;/em> Bibliothek entdeckt.&lt;/li>
&lt;li>Sie haben RxJS &lt;code>of()&lt;/code> benutzt, um ein Observable von Mock-Helden (&lt;code>Observable&amp;lt;Hero[]&amp;gt;&lt;/code>) zurückzugeben.&lt;/li>
&lt;li>Der Lifecycle-Hook &lt;code>ngOnInit&lt;/code> der Komponente ruft die Methode &lt;code>HeroService&lt;/code> auf, nicht den Konstruktor.&lt;/li>
&lt;li>Sie haben einen &lt;code>MessageService&lt;/code> für lose gekoppelte Kommunikation zwischen Klassen erstellt.&lt;/li>
&lt;li>Der &lt;code>HeroService&lt;/code>, der in eine Komponente injiziert wird, wird mit einem anderen injizierten Dienst erstellt,
&lt;code>MessageService&lt;/code>.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Navigation mit Routing hinzufügen</title><link>/docs/web/angular/05_6_navigation_routing/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/05_6_navigation_routing/</guid><description>
&lt;h1 id="navigation-mit-routing-hinzufügen">Navigation mit Routing hinzufügen&lt;/h1>
&lt;p>Es gibt neue Anforderungen für die Tour of Heroes-App:&lt;/p>
&lt;ul>
&lt;li>Hinzufügen einer &lt;em>Dashboard&lt;/em>-Ansicht.&lt;/li>
&lt;li>Hinzufügen der Möglichkeit, zwischen den Ansichten &lt;em>Helden&lt;/em> und &lt;em>Dashboard&lt;/em> zu navigieren.&lt;/li>
&lt;li>Wenn Benutzer auf einen Heldennamen in einer der beiden Ansichten klicken, navigieren sie zu einer Detailansicht des ausgewählten Helden.&lt;/li>
&lt;li>Wenn Benutzer auf einen &lt;em>tiefen Link&lt;/em> in einer E-Mail klicken, wird die Detailansicht für einen bestimmten Helden geöffnet.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Die Beispielanwendung, die auf dieser Seite beschrieben wird, finden Sie unter &lt;a href="https://angular.io/generated/live-examples/toh-pt5/stackblitz.html">dieser Seite&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>Wenn Sie fertig sind, können die Benutzer wie folgt durch die Anwendung navigieren:&lt;/p>
&lt;p>&lt;img src="/images/angular/nav-diagram.png" alt="Navigation">&lt;/p>
&lt;h2 id="hinzufügen-des-approutingmodule">Hinzufügen des &lt;code>AppRoutingModule&lt;/code>&lt;/h2>
&lt;p>In Angular ist es die beste Praxis, den Router in einem separaten Modul auf oberster Ebene zu laden und zu konfigurieren
zu laden und zu konfigurieren, das dem Routing gewidmet ist und von der Wurzel &lt;code>AppModule&lt;/code> importiert wird.&lt;/p>
&lt;p>Konventionell heißt die Modulklasse &lt;code>AppRoutingModule&lt;/code> und gehört in die &lt;code>app-routing.module.ts&lt;/code> im Ordner &lt;code>src/app&lt;/code>.&lt;/p>
&lt;p>Verwenden Sie die CLI, um es zu erzeugen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> ng generate module app-routing --flat --module&lt;span style="color:#f92672">=&lt;/span>app
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;code>--flat&lt;/code> legt die Datei in &lt;code>src/app&lt;/code> statt in ihrem eigenen Ordner ab.&lt;br>
&lt;code>--module=app&lt;/code> weist die CLI an, sie im &lt;code>imports&lt;/code>-Array des &lt;code>AppModule&lt;/code> zu registrieren.&lt;/p>
&lt;/blockquote>
&lt;p>Die generierte Datei sieht wie folgt aus:&lt;/p>
&lt;p>&lt;code>src/app/app-routing.module.ts (generated)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">NgModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">CommonModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/common&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">CommonModule&lt;/span>
],
&lt;span style="color:#a6e22e">declarations&lt;/span>&lt;span style="color:#f92672">:&lt;/span> []
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppRoutingModule&lt;/span> { }
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ersetzen Sie es durch das folgende:&lt;/p>
&lt;p>&lt;code>src/app/app-routing.module.ts (updated)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">NgModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">RouterModule&lt;/span>, &lt;span style="color:#a6e22e">Routes&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/router&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes/heroes.component&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">routes&lt;/span>: &lt;span style="color:#66d9ef">Routes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [
{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;heroes&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">component&lt;/span>: &lt;span style="color:#66d9ef">HeroesComponent&lt;/span> }
];
&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">RouterModule&lt;/span>.&lt;span style="color:#a6e22e">forRoot&lt;/span>(&lt;span style="color:#a6e22e">routes&lt;/span>)],
&lt;span style="color:#a6e22e">exports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">RouterModule&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppRoutingModule&lt;/span> { }
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Zunächst importiert die Datei &amp;ldquo;app-routing.module.ts&amp;rdquo; die Module &lt;a href="https://angular.io/api/router/RouterModule">RouterModule&lt;/a> und &lt;a href="https://angular.io/api/router/Routes">Routes&lt;/a>, damit die Anwendung über Routing-Funktionen verfügt. Der nächste Import, &lt;code>HeroesComponent&lt;/code>, gibt dem Router einen Platz, wo er hingehen kann, sobald Sie die Routen konfiguriert haben.&lt;/p>
&lt;p>Beachten Sie, dass die &lt;code>CommonModule&lt;/code> Referenzen und das &lt;code>declarations&lt;/code> Array unnötig sind, also nicht mehr Teil von
nicht mehr Teil des &lt;code>AppRoutingModule&lt;/code> sind. Die folgenden Abschnitte erklären den Rest des &lt;code>AppRoutingModule&lt;/code> im Detail.&lt;/p>
&lt;h3 id="routes">Routes&lt;/h3>
&lt;p>Im nächsten Teil der Datei konfigurieren Sie Ihre Routen.
&lt;em>Routen&lt;/em> teilen dem Router mit, welche Ansicht angezeigt werden soll, wenn ein Benutzer auf einen Link klickt oder
eine URL in die Adresszeile des Browsers einfügt.&lt;/p>
&lt;p>Da &lt;code>app-routing.module.ts&lt;/code> bereits &lt;code>HeroesComponent&lt;/code> importiert, können Sie es im Array &lt;code>routes&lt;/code> verwenden:&lt;/p>
&lt;p>&lt;code>src/app/app-routing.module.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">routes&lt;/span>: &lt;span style="color:#66d9ef">Routes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [
{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;heroes&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">component&lt;/span>: &lt;span style="color:#66d9ef">HeroesComponent&lt;/span> }
];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Eine typische Angular &lt;code>Route&lt;/code> hat zwei Eigenschaften:&lt;/p>
&lt;ul>
&lt;li>&lt;code>path&lt;/code>: ein String, der mit der URL in der Adressleiste des Browsers übereinstimmt.&lt;/li>
&lt;li>Komponente&amp;quot;: die Komponente, die der Router erstellen soll, wenn er zu dieser Route navigiert.&lt;/li>
&lt;/ul>
&lt;p>Dies weist den Router an, diese URL mit &amp;ldquo;path: &amp;lsquo;heroes&amp;rsquo;&amp;rdquo; abzugleichen
und die &lt;code>HeroesComponent&lt;/code> anzuzeigen, wenn die URL etwa &lt;code>localhost:4200/heroes&lt;/code> lautet.&lt;/p>
&lt;h3 id="routermoduleforroothttpsangularioapirouterroutermoduleforroot">&lt;a href="https://angular.io/api/router/RouterModule#forRoot">&lt;code>RouterModule.forRoot()&lt;/code>&lt;/a>&lt;/h3>
&lt;p>Die &lt;code>@NgModule&lt;/code>-Metadaten initialisieren den Router und lassen ihn auf Standortänderungen des Browsers warten.&lt;/p>
&lt;p>Die folgende Zeile fügt das &lt;code>RouterModule&lt;/code> zum &lt;code>AppRoutingModule&lt;/code> &lt;code>imports&lt;/code> Array hinzu und
konfiguriert es mit den &lt;code>Routen&lt;/code> in einem Schritt durch den Aufruf
&lt;code>RouterModule.forRoot()&lt;/code>:&lt;/p>
&lt;p>&lt;code>src/app/app-routing.module.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [ &lt;span style="color:#a6e22e">RouterModule&lt;/span>.&lt;span style="color:#a6e22e">forRoot&lt;/span>(&lt;span style="color:#a6e22e">routes&lt;/span>) ],
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>Die Methode heißt &lt;code>forRoot()&lt;/code>, weil Sie den Router auf der Root-Ebene der Anwendung konfigurieren.
Die Methode &lt;code>forRoot()&lt;/code> liefert die für das Routing benötigten Service Provider und Direktiven,
und führt die anfängliche Navigation auf der Grundlage der aktuellen Browser-URL durch.&lt;/p>
&lt;/blockquote>
&lt;p>Als nächstes exportiert &lt;code>AppRoutingModule&lt;/code> das &lt;code>RouterModule&lt;/code>, damit es in der gesamten Anwendung verfügbar ist.&lt;/p>
&lt;p>&lt;code>src/app/app-routing.module.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">exports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [ &lt;span style="color:#a6e22e">RouterModule&lt;/span> ]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="hinzufügen-von-routeroutlet">Hinzufügen von &lt;code>RouterOutlet&lt;/code>&lt;/h2>
&lt;p>Öffnen Sie das Template &lt;code>AppComponent&lt;/code> und ersetzen Sie das Element &lt;code>&amp;lt;app-heroes&amp;gt;&lt;/code> durch ein Element &lt;code>&amp;lt;router-outlet&amp;gt;&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/app.component.html (router-outlet)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">router-outlet&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">router-outlet&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">app-messages&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-messages&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das Template &amp;ldquo;AppComponent&amp;rdquo; benötigt kein &lt;code>&amp;lt;app-heroes&amp;gt;&lt;/code> mehr, da die Anwendung die &amp;ldquo;HeroComponent&amp;rdquo; nur anzeigt, wenn der Benutzer zu ihr navigiert.&lt;/p>
&lt;p>Das &lt;code>&amp;lt;router-outlet&amp;gt;&lt;/code> teilt dem Router mit, wo die gerouteten Ansichten angezeigt werden sollen.&lt;/p>
&lt;blockquote>
&lt;p>Das &lt;code>RouterOutlet&lt;/code> ist eine der Router-Direktiven, die für die &lt;code>AppComponent&lt;/code> verfügbar wurden
weil &lt;code>AppModule&lt;/code> &lt;code>AppRoutingModule&lt;/code> importiert, das &lt;code>RouterModule&lt;/code> exportiert hat. Der Befehl &lt;code>ng generate&lt;/code>, den Sie zu Beginn dieses Tutorials ausgeführt haben, fügte diesen Import aufgrund des &lt;code>--module=app&lt;/code> Flags hinzu. Wenn Sie &lt;code>app-routing.module.ts&lt;/code> manuell erstellt haben oder ein anderes Werkzeug als das CLI dafür verwendet haben, müssen Sie &lt;code>AppRoutingModule&lt;/code> in &lt;code>app.module.ts&lt;/code> importieren und es zum &lt;code>imports&lt;/code>-Array des &lt;code>NgModule&lt;/code> hinzufügen.&lt;/p>
&lt;/blockquote>
&lt;h4 id="probieren-sie-es-aus">Probieren Sie es aus.&lt;/h4>
&lt;p>Mit diesem CLI-Befehl sollten Sie immer noch arbeiten.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> ng serve
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Browser sollte aktualisiert werden und den Titel der Anwendung anzeigen, aber nicht die Liste der Helden.&lt;/p>
&lt;p>Sehen Sie sich die Adressleiste des Browsers an.
Die URL endet auf &lt;code>/&lt;/code>.
Der Routenpfad zu &lt;code>HeroesComponent&lt;/code> ist &lt;code>/heroes&lt;/code>.&lt;/p>
&lt;p>Hängen Sie &lt;code>/heroes&lt;/code> an die URL in der Adressleiste des Browsers an.
Sie sollten die bekannte Master-/Detailansicht von Helden sehen.&lt;/p>
&lt;p>Entfernen Sie &amp;ldquo;heroes&amp;rdquo; aus der URL in der Adressleiste des Browsers.
Der Browser sollte aktualisiert werden und den Titel der Anwendung anzeigen, aber nicht die Liste der Helden.&lt;/p>
&lt;h2 id="a-idrouterlinkahinzufügen-eines-navigationslinks-routerlinkhttpsangularioapirouterrouterlink">&lt;a id="routerlink">&lt;/a>Hinzufügen eines Navigationslinks &lt;a href="https://angular.io/api/router/RouterLink">(&lt;code>routerLink&lt;/code>)&lt;/a>&lt;/h2>
&lt;p>Idealerweise sollten die Benutzer auf einen Link klicken können, um zu navigieren, anstatt
als eine Routen-URL in die Adressleiste einzufügen.&lt;/p>
&lt;p>Fügen Sie ein &lt;code>&amp;lt;nav&amp;gt;&lt;/code>-Element und darin ein Ankerelement ein, das, wenn es angeklickt wird,
die Navigation zur &lt;code>HeroesComponent&lt;/code> auslöst.
Das überarbeitete &amp;ldquo;AppComponent&amp;rdquo;-Template sieht wie folgt aus:&lt;/p>
&lt;p>&lt;code>src/app/app.component.html (heroes RouterLink)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">nav&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">routerLink&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/heroes&amp;#34;&lt;/span>&amp;gt;Heroes&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">nav&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">router-outlet&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">router-outlet&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">app-messages&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-messages&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ein &lt;code>routerLink&lt;/code>-Attribut wird auf &lt;code>&amp;quot;/heroes&amp;quot;&lt;/code> gesetzt,
die Zeichenkette, die der Router mit der Route zu &lt;code>HeroesComponent&lt;/code> verbindet.
Der &lt;code>routerLink&lt;/code> ist der Selektor für die &lt;code>RouterLink&lt;/code> Direktive
die Benutzerklicks in Routernavigationen umwandelt.
Es ist eine weitere der öffentlichen Direktiven im &lt;code>RouterModule&lt;/code>.&lt;/p>
&lt;p>Der Browser aktualisiert sich und zeigt den Titel der Anwendung und den Link zu den Helden an,
aber nicht die Heldenliste.&lt;/p>
&lt;p>Klicken Sie auf den Link.
Die Adressleiste wird auf &lt;code>/heroes&lt;/code> aktualisiert und die Liste der Helden erscheint.&lt;/p>
&lt;blockquote>
&lt;p>Verbessern Sie das Aussehen dieses und zukünftiger Navigationslinks, indem Sie private CSS-Stile in &lt;code>app.component.css&lt;/code> hinzufügen
wie in der endgültigen Codeüberprüfungunten aufgeführt.&lt;/p>
&lt;/blockquote>
&lt;h2 id="hinzufügen-einer-dashboard-ansicht">Hinzufügen einer Dashboard-Ansicht&lt;/h2>
&lt;p>Das Routing macht mehr Sinn, wenn es mehrere Ansichten gibt.
Bis jetzt gibt es nur die Heldenansicht.&lt;/p>
&lt;p>Fügen Sie eine &lt;code>DashboardComponent&lt;/code> mit Hilfe der CLI hinzu:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> ng generate component dashboard
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die CLI generiert die Dateien für die &lt;code>DashboardComponent&lt;/code> und deklariert sie in &lt;code>AppModule&lt;/code>.&lt;/p>
&lt;p>Ersetzen Sie den Inhalt der Standarddateien in diesen drei Dateien wie folgt:&lt;/p>
&lt;ol>
&lt;li>&lt;code>src/app/dashboard/dashboard.component.html&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Top Heroes&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;heroes-menu&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>&amp;gt;
{{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>&lt;code>src/app/dashboard/dashboard.component.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroService&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero.service&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-dashboard&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./dashboard.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [ &lt;span style="color:#e6db74">&amp;#39;./dashboard.component.css&amp;#39;&lt;/span> ]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DashboardComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">heroes&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [];
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">heroService&lt;/span>: &lt;span style="color:#66d9ef">HeroService&lt;/span>) { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>();
}
&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>()
.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span>.&lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>));
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>&lt;code>src/app/dashboard/dashboard.component.css&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#75715e">/* DashboardComponent&amp;#39;s private CSS styles */&lt;/span>
&lt;span style="color:#f92672">h2&lt;/span> {
&lt;span style="color:#66d9ef">text-align&lt;/span>: &lt;span style="color:#66d9ef">center&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes-menu&lt;/span> {
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#66d9ef">auto&lt;/span>;
&lt;span style="color:#66d9ef">max-width&lt;/span>: &lt;span style="color:#ae81ff">1000&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#75715e">/* flexbox */&lt;/span>
&lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">flex&lt;/span>;
&lt;span style="color:#66d9ef">flex-direction&lt;/span>: &lt;span style="color:#66d9ef">row&lt;/span>;
&lt;span style="color:#66d9ef">flex-wrap&lt;/span>: &lt;span style="color:#66d9ef">wrap&lt;/span>;
&lt;span style="color:#66d9ef">justify-content&lt;/span>: &lt;span style="color:#66d9ef">space&lt;/span>&lt;span style="color:#f92672">-&lt;/span>around;
&lt;span style="color:#66d9ef">align-content&lt;/span>: &lt;span style="color:#66d9ef">flex&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#66d9ef">start&lt;/span>;
&lt;span style="color:#66d9ef">align-items&lt;/span>: &lt;span style="color:#66d9ef">flex&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#66d9ef">start&lt;/span>;
}
&lt;span style="color:#f92672">a&lt;/span> {
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#3f525c&lt;/span>;
&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">rem&lt;/span>;
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">1.2&lt;/span>&lt;span style="color:#66d9ef">rem&lt;/span>;
&lt;span style="color:#66d9ef">text-decoration&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;
&lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">inline&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#66d9ef">block&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#fff&lt;/span>;
&lt;span style="color:#66d9ef">text-align&lt;/span>: &lt;span style="color:#66d9ef">center&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;span style="color:#66d9ef">min-width&lt;/span>: &lt;span style="color:#ae81ff">70&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">.5&lt;/span>&lt;span style="color:#66d9ef">rem&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span>;
&lt;span style="color:#66d9ef">box-sizing&lt;/span>: &lt;span style="color:#66d9ef">border-box&lt;/span>;
&lt;span style="color:#75715e">/* flexbox */&lt;/span>
&lt;span style="color:#66d9ef">order&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">flex&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">auto&lt;/span>;
&lt;span style="color:#66d9ef">align-self&lt;/span>: &lt;span style="color:#66d9ef">auto&lt;/span>;
}
@&lt;span style="color:#66d9ef">media&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#f92672">min-width&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#f92672">600px&lt;/span>&lt;span style="color:#f92672">)&lt;/span> {
&lt;span style="color:#f92672">a&lt;/span> {
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">18&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;span style="color:#66d9ef">box-sizing&lt;/span>: &lt;span style="color:#66d9ef">content-box&lt;/span>;
}
}
&lt;span style="color:#f92672">a&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span> {
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#000&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das &lt;em>Template&lt;/em> zeigt ein Raster von Heldennamen-Links.&lt;/p>
&lt;ul>
&lt;li>Der &lt;code>*ngFor&lt;/code> Repeater erstellt so viele Links wie im &lt;code>heroes&lt;/code> Array der Komponente enthalten sind.&lt;/li>
&lt;li>Die Links sind als farbige Blöcke in der &lt;code>dashboard.component.css&lt;/code> gestylt.&lt;/li>
&lt;li>Die Links gehen noch nirgendwo hin, aber &lt;a href="#hero-details">sie werden in Kürze&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Die &lt;em>Klasse&lt;/em> ist ähnlich wie die Klasse &lt;code>HeroesComponent&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>Sie definiert eine Array-Eigenschaft &lt;code>Helden&lt;/code>.&lt;/li>
&lt;li>Der Konstruktor erwartet, dass Angular den &lt;code>HeroService&lt;/code> in eine private &lt;code>heroService&lt;/code> Eigenschaft injiziert.&lt;/li>
&lt;li>Der &lt;code>ngOnInit()&lt;/code> Lebenszyklus-Hook ruft &lt;code>getHeroes()&lt;/code> auf.&lt;/li>
&lt;/ul>
&lt;p>Die Methode &lt;code>getHeroes()&lt;/code> gibt die aufgeschnittene Liste der Helden an den Positionen 1 und 5 zurück, wobei nur vier der Top-Helden (2, 3, 4 und 5) zurückgegeben werden.&lt;/p>
&lt;p>&lt;code>src/app/dashboard/dashboard.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>()
.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span>.&lt;span style="color:#a6e22e">slice&lt;/span>(&lt;span style="color:#ae81ff">1&lt;/span>, &lt;span style="color:#ae81ff">5&lt;/span>));
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="hinzufügen-der-dashboard-route">Hinzufügen der Dashboard-Route&lt;/h3>
&lt;p>Um zum Dashboard zu navigieren, benötigt der Router eine entsprechende Route.&lt;/p>
&lt;p>Importieren Sie die &lt;code>DashboardComponent&lt;/code> in die Datei &lt;code>app-routing-module.ts&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/app-routing.module.ts (import DashboardComponent)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">DashboardComponent&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./dashboard/dashboard.component&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Fügen Sie dem Array &lt;code>routes&lt;/code> eine Route hinzu, die einem Pfad zur &lt;code>DashboardComponent&lt;/code> entspricht.&lt;/p>
&lt;p>&lt;code>src/app/app-routing.module.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dashboard&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">component&lt;/span>: &lt;span style="color:#66d9ef">DashboardComponent&lt;/span> },
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="hinzufügen-einer-standard-route">Hinzufügen einer Standard-Route&lt;/h3>
&lt;p>Wenn die Anwendung gestartet wird, zeigt die Adressleiste des Browsers auf das Stammverzeichnis der Website.
Das passt zu keiner bestehenden Route, so dass der Router nirgendwo hin navigiert.
Der Platz unter dem &lt;code>&amp;lt;router-outlet&amp;gt;&lt;/code> ist leer.&lt;/p>
&lt;p>Um die Anwendung automatisch zum Dashboard navigieren zu lassen, fügen Sie die folgende
Route in das Array &lt;code>routes&lt;/code> ein.&lt;/p>
&lt;p>&lt;code>src/app/app-routing.module.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">redirectTo&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/dashboard&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">pathMatch&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;full&amp;#39;&lt;/span> },
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Diese Route leitet eine URL, die vollständig mit dem leeren Pfad übereinstimmt, an die Route um, deren Pfad &amp;ldquo;/dashboard&amp;rdquo; lautet.&lt;/p>
&lt;p>Nachdem der Browser aktualisiert wurde, lädt der Router die &lt;code>DashboardComponent&lt;/code>
und die Adressleiste des Browsers zeigt die URL &lt;code>/dashboard&lt;/code> an.&lt;/p>
&lt;h3 id="dashboard-link-zur-shell-hinzufügen">Dashboard-Link zur Shell hinzufügen&lt;/h3>
&lt;p>Der Benutzer sollte in der Lage sein, zwischen der
&lt;code>DashboardComponent&lt;/code> und der &lt;code>HeroesComponent&lt;/code> hin und her navigieren können, indem er auf Links im
Navigationsbereich am oberen Rand der Seite klicken.&lt;/p>
&lt;p>Fügen Sie einen Dashboard-Navigationslink zum Shell-Template &lt;code>AppComponent&lt;/code> hinzu, direkt über dem Link &lt;em>Heroes&lt;/em>.&lt;/p>
&lt;p>&lt;code>src/app/app.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">nav&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">routerLink&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/dashboard&amp;#34;&lt;/span>&amp;gt;Dashboard&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">routerLink&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/heroes&amp;#34;&lt;/span>&amp;gt;Heroes&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">nav&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">router-outlet&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">router-outlet&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">app-messages&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-messages&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Nach dem Aktualisieren des Browsers können Sie frei zwischen den beiden Ansichten navigieren, indem Sie auf die Links klicken.&lt;/p>
&lt;h2 id="a-idhero-detailsazu-den-heldendetails-navigieren">&lt;a id="#hero-details">&lt;/a>Zu den Heldendetails navigieren&lt;/h2>
&lt;p>Die &lt;code>HeroDetailComponent&lt;/code> zeigt Details zu einem ausgewählten Helden an.
Im Moment ist die &lt;code>HeroDetailComponent&lt;/code> nur am unteren Rand der &lt;code>HeroesComponent&lt;/code> sichtbar.&lt;/p>
&lt;p>Der Benutzer sollte in der Lage sein, diese Details auf drei Arten zu erreichen.&lt;/p>
&lt;ol>
&lt;li>Durch Anklicken eines Helden im Dashboard.&lt;/li>
&lt;li>Durch Anklicken eines Helden in der Heldenliste.&lt;/li>
&lt;li>Durch Einfügen einer &amp;ldquo;Deep Link&amp;rdquo;-URL in die Adressleiste des Browsers, die den anzuzeigenden Helden identifiziert.&lt;/li>
&lt;/ol>
&lt;p>In diesem Abschnitt werden Sie die Navigation zur &lt;code>HeroDetailComponent&lt;/code> aktivieren
und befreien sie von der &lt;code>HeroesComponent&lt;/code>.&lt;/p>
&lt;h3 id="löschen-der-_helden-details_-aus-der-heroescomponent">Löschen der &lt;em>Helden-Details&lt;/em> aus der &lt;code>HeroesComponent&lt;/code>.&lt;/h3>
&lt;p>Wenn der Benutzer auf ein Heldenelement in der &lt;code>HeroesComponent&lt;/code> klickt,
sollte die Anwendung zur &lt;code>HeroDetailComponent&lt;/code> navigieren,
und die Helden-Listenansicht durch die Helden-Detailansicht ersetzen.
Die Ansicht der Heldenliste sollte keine Heldendetails mehr anzeigen, wie es jetzt der Fall ist.&lt;/p>
&lt;p>Öffnen Sie Das Template &lt;code>HeroesComponent&lt;/code> (&lt;code>heroes/heroes.component.html&lt;/code>) und
löschen Sie das Element &lt;code>&amp;lt;app-hero-detail&amp;gt;&lt;/code> von unten.&lt;/p>
&lt;p>Das Anklicken eines Heldenelements bewirkt jetzt nichts.
Sie werden &lt;a href="#heroes-component-links">das in Kürze beheben&lt;/a>, nachdem Sie das Routing zur &lt;code>HeroDetailComponent&lt;/code> aktiviert haben.&lt;/p>
&lt;h3 id="hinzufügen-einer-_heldendetail_-route">Hinzufügen einer &lt;em>Heldendetail&lt;/em>-Route&lt;/h3>
&lt;p>Eine URL wie &lt;code>~/detail/11&lt;/code> wäre eine gute URL, um zur &lt;em>Helden-Detail&lt;/em>-Ansicht des Helden zu navigieren, dessen &lt;code>id&lt;/code> &lt;code>11&lt;/code> ist.&lt;/p>
&lt;p>Öffnen Sie &lt;code>app-routing.module.ts&lt;/code> und importieren Sie &lt;code>HeroDetailComponent&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/app-routing.module.ts (import HeroDetailComponent)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroDetailComponent&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./hero-detail/hero-detail.component&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Fügen Sie dann eine &lt;em>parametrisierte&lt;/em> Route zum Array &lt;code>routes&lt;/code> hinzu, die dem Pfadmuster zur Ansicht &lt;em>hero detail&lt;/em> entspricht.&lt;/p>
&lt;p>&lt;code>src/app/app-routing.module.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;detail/:id&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">component&lt;/span>: &lt;span style="color:#66d9ef">HeroDetailComponent&lt;/span> },
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Doppelpunkt (:) im &amp;ldquo;Pfad&amp;rdquo; zeigt an, dass &amp;ldquo;:id&amp;rdquo; ein Platzhalter für eine bestimmte &amp;ldquo;id&amp;rdquo; des Helden ist.&lt;/p>
&lt;p>Zu diesem Zeitpunkt sind alle Anwendungsrouten vorhanden.&lt;/p>
&lt;p>&lt;code>src/app/app-routing.module.ts (all routes)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">routes&lt;/span>: &lt;span style="color:#66d9ef">Routes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [
{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">redirectTo&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/dashboard&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">pathMatch&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;full&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;dashboard&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">component&lt;/span>: &lt;span style="color:#66d9ef">DashboardComponent&lt;/span> },
{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;detail/:id&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">component&lt;/span>: &lt;span style="color:#66d9ef">HeroDetailComponent&lt;/span> },
{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;heroes&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">component&lt;/span>: &lt;span style="color:#66d9ef">HeroesComponent&lt;/span> }
];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="dashboardcomponent-heldenlinks">&lt;code>DashboardComponent&lt;/code> Heldenlinks&lt;/h3>
&lt;p>Die &lt;code>DashboardComponent&lt;/code>-Heldenlinks machen im Moment noch nichts.&lt;/p>
&lt;p>Jetzt, wo der Router eine Route zu &lt;code>HeroDetailComponent&lt;/code> hat,
fixieren Sie die Dashboard-Heldenlinks so, dass sie über die &lt;em>parametrisierte&lt;/em> Dashboard-Route navigieren.&lt;/p>
&lt;p>&lt;code>src/app/dashboard/dashboard.component.html (hero links)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">routerLink&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/detail/{{hero.id}}&amp;#34;&lt;/span>&amp;gt;
{{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Sie verwenden Angular &lt;a href="https://angular.io/guide/interpolation">interpolation binding&lt;/a> innerhalb des &lt;code>*ngFor&lt;/code> Repeaters
um die &lt;code>hero.id&lt;/code> der aktuellen Iteration in jeden
&lt;a href="#routerlink">&lt;code>routerLink&lt;/code>&lt;/a>.&lt;/p>
&lt;h3 id="a-idheroes-component-linksaheroescomponent-helden-links">&lt;a id="heroes-component-links">&lt;/a>&lt;code>HeroesComponent&lt;/code> Helden-Links&lt;/h3>
&lt;p>Die Heldenelemente in der &lt;code>HeroesComponent&lt;/code> sind &lt;code>&amp;lt;li&amp;gt;&lt;/code> Elemente, deren Klick-Ereignisse
an die Methode &lt;code>onSelect()&lt;/code> der Komponente gebunden sind.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.html (list with onSelect)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">ul&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;heroes&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">selected&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero &lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">==&lt;/span> &lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">onSelect&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;badge&amp;#34;&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; {{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Entfernen Sie das &lt;code>&amp;lt;li&amp;gt;&lt;/code> auf sein &lt;code>*ngFor&lt;/code> zurück,
verpacken Sie das Abzeichen und den Namen in ein Ankerelement (&lt;code>&amp;lt;a&amp;gt;&lt;/code>),
und fügen Sie ein &lt;code>routerLink&lt;/code>-Attribut zu dem Anker hinzu, das
dasselbe ist wie im Dashboard-Template&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.html (list with links)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">ul&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;heroes&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">routerLink&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/detail/{{hero.id}}&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;badge&amp;#34;&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; {{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Sie müssen das private Stylesheet (&lt;code>heroes.component.css&lt;/code>) anpassen, damit
damit die Liste wie vorher aussieht.
Die überarbeiteten Styles sind im &lt;a href="#final-code-review">final code review&lt;/a> am Ende dieser Anleitung zu finden.&lt;/p>
&lt;h4 id="entfernen-sie-toten-code-optional">Entfernen Sie toten Code (optional)&lt;/h4>
&lt;p>Während die &lt;code>HeroesComponent&lt;/code> Klasse noch funktioniert,
werden die Methode &lt;code>onSelect()&lt;/code> und die Eigenschaft &lt;code>selectedHero&lt;/code> nicht mehr verwendet.&lt;/p>
&lt;p>Es ist schön, aufzuräumen, und Sie werden sich später selbst dafür dankbar sein.
Hier ist die Klasse, nachdem der tote Code entfernt wurde.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts (cleaned up)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">heroes&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [];
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">heroService&lt;/span>: &lt;span style="color:#66d9ef">HeroService&lt;/span>) { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>();
}
&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>()
.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="routable-herodetailcomponent">Routable &lt;code>HeroDetailComponent&lt;/code>&lt;/h2>
&lt;p>Zuvor setzte die übergeordnete &lt;code>HeroesComponent&lt;/code> die Eigenschaft &lt;code>HeroDetailComponent.hero&lt;/code>
Eigenschaft und die &lt;code>HeroDetailComponent&lt;/code> zeigte den Helden an.&lt;/p>
&lt;p>Die &lt;code>HeroesComponent&lt;/code> macht das nicht mehr.
Jetzt erstellt der Router die &lt;code>HeroDetailComponent&lt;/code> als Antwort auf eine URL wie &lt;code>~/detail/11&lt;/code>.&lt;/p>
&lt;p>Die &lt;code>HeroDetailComponent&lt;/code> braucht einen neuen Weg, um den anzuzeigenden Helden zu erhalten.
Dieser Abschnitt erklärt das Folgende:&lt;/p>
&lt;ul>
&lt;li>Abrufen der Route, die sie erstellt hat&lt;/li>
&lt;li>Extrahieren der &amp;ldquo;ID&amp;rdquo; aus der Route&lt;/li>
&lt;li>Erwerben Sie den Helden mit dieser &amp;ldquo;ID&amp;rdquo; vom Server mit Hilfe des &amp;ldquo;HeroService&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;p>Füge die folgenden Importe hinzu:&lt;/p>
&lt;p>&lt;code>src/app/hero-detail/hero-detail.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">ActivatedRoute&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/router&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Location&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/common&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroService&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero.service&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Injizieren Sie die Dienste &lt;code>ActivatedRoute&lt;/code>, &lt;code>HeroService&lt;/code> und &lt;code>Location&lt;/code>
in den Konstruktor und speichert ihre Werte in privaten Feldern:&lt;/p>
&lt;p>&lt;code>src/app/hero-detail/hero-detail.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">constructor&lt;/span>(
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">route&lt;/span>: &lt;span style="color:#66d9ef">ActivatedRoute&lt;/span>,
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">heroService&lt;/span>: &lt;span style="color:#66d9ef">HeroService&lt;/span>,
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">location&lt;/span>: &lt;span style="color:#66d9ef">Location&lt;/span>
) {}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das &lt;a href="https://angular.io/api/router/ActivatedRoute">&lt;code>ActivatedRoute&lt;/code>&lt;/a> enthält Informationen über die Route zu dieser Instanz von &lt;code>HeroDetailComponent&lt;/code>.
Diese Komponente ist an den Parametern der Route interessiert, die aus der URL extrahiert wurden.
Der &amp;ldquo;id&amp;rdquo; Parameter ist die &amp;ldquo;id&amp;rdquo; des anzuzeigenden Helden.&lt;/p>
&lt;p>Der &lt;a href="05_5_Services_hinzuf%C3%BCgen.md">&lt;code>HeroService&lt;/code>&lt;/a> erhält Heldendaten vom entfernten Server
und diese Komponente wird sie verwenden, um den anzuzeigenden Helden zu erhalten.&lt;/p>
&lt;p>Die &lt;a href="https://angular.io/api/common/Location">&lt;code>location&lt;/code>&lt;/a> ist ein Angular-Dienst für die Interaktion mit dem Browser.
Sie werden ihn &lt;a href="#goback">später&lt;/a> verwenden, um zurück zu der Ansicht zu navigieren, die hierher navigiert hat.&lt;/p>
&lt;h3 id="extrahieren-sie-den-id-routenparameter">Extrahieren Sie den &lt;code>id&lt;/code> Routenparameter&lt;/h3>
&lt;p>In dem &lt;code>ngOnInit()&lt;/code> &lt;a href="https://angular.io/guide/lifecycle-hooks#oninit">Lebenszyklus-Haken&lt;/a>
Rufen Sie &lt;code>getHero()&lt;/code> auf und definieren Sie es wie folgt.&lt;/p>
&lt;p>&lt;code>src/app/hero-detail/hero-detail.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">ngOnInit&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">getHero&lt;/span>();
}
&lt;span style="color:#a6e22e">getHero&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Number(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">route&lt;/span>.&lt;span style="color:#a6e22e">snapshot&lt;/span>.&lt;span style="color:#a6e22e">paramMap&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span>));
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">getHero&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>)
.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">hero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">hero&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der &lt;code>route.snapshot&lt;/code> ist ein statisches Abbild der Routeninformationen kurz nach der Erstellung der Komponente.&lt;/p>
&lt;p>Die &lt;code>paramMap&lt;/code> ist ein Wörterbuch mit Routenparameterwerten, die aus der URL extrahiert wurden.
Der &amp;ldquo;id&amp;rdquo;-Schlüssel gibt die &amp;ldquo;id&amp;rdquo; des abzurufenden Helden zurück.&lt;/p>
&lt;p>Routenparameter sind immer Zeichenketten.
Die JavaScript-Funktion &lt;code>Number&lt;/code> wandelt die Zeichenkette in eine Zahl um,
was die &amp;ldquo;id&amp;rdquo; eines Helden sein sollte.&lt;/p>
&lt;p>Der Browser wird aktualisiert und die Anwendung stürzt mit einem Compilerfehler ab.
&lt;code>HeroService&lt;/code> hat keine &lt;code>getHero()&lt;/code> Methode.
Fügen Sie sie jetzt hinzu.&lt;/p>
&lt;h3 id="hinzufügen-von-heroservicegethero">Hinzufügen von &lt;code>HeroService.getHero()&lt;/code>&lt;/h3>
&lt;p>Öffnen Sie &lt;code>HeroService&lt;/code> und fügen Sie die folgende &lt;code>getHero()&lt;/code> Methode mit der &lt;code>id&lt;/code> nach der &lt;code>getHeroes()&lt;/code> Methode hinzu:&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts (getHero)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">getHero&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&amp;gt; {
&lt;span style="color:#75715e">// Im Moment wird davon ausgegangen, dass ein Held mit der angegebenen `id` immer existiert.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Die Fehlerbehandlung wird im nächsten Schritt des Tutorials hinzugefügt.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">hero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">HEROES&lt;/span>.&lt;span style="color:#a6e22e">find&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>)&lt;span style="color:#f92672">!&lt;/span>;
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">messageService&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#e6db74">`HeroService: fetched hero id=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wie &lt;a href="05_5:Services_hinzuf%C3%BCgen.md">&lt;code>getHeroes()&lt;/code>&lt;/a>,
hat &lt;code>getHero()&lt;/code> eine asynchrone Signatur.
Es gibt einen &lt;em>mock hero&lt;/em> als &lt;code>Observable&lt;/code> zurück, unter Verwendung der RxJS &lt;code>of()&lt;/code> Funktion.&lt;/p>
&lt;p>Sie können &lt;code>getHero()&lt;/code> als echte &lt;code>Http&lt;/code>-Anfrage neu implementieren
ohne die &lt;code>HeroDetailComponent&lt;/code> zu ändern, die sie aufruft.&lt;/p>
&lt;h4 id="versuchen-sie-es">Versuchen Sie es&lt;/h4>
&lt;p>Der Browser aktualisiert sich und die Anwendung funktioniert wieder.
Sie können auf einen Helden im Dashboard oder in der Heldenliste klicken und zur Detailansicht dieses Helden navigieren.&lt;/p>
&lt;p>Wenn Sie &lt;code>localhost:4200/detail/11&lt;/code> in die Adressleiste des Browsers einfügen,
navigiert der Router zur Detailansicht für den Helden mit der &lt;code>id: 11&lt;/code>, &amp;ldquo;Dr. Nice&amp;rdquo;.&lt;/p>
&lt;h3 id="finde-den-weg-zurück">Finde den Weg zurück&lt;/h3>
&lt;p>Mit einem Klick auf den Zurück-Button des Browsers,
können Sie zur Heldenliste oder zur Dashboard-Ansicht zurückkehren,
je nachdem, von wo aus Sie zur Detailansicht gelangt sind.&lt;/p>
&lt;p>Es wäre schön, eine Schaltfläche in der &lt;code>HeroDetail&lt;/code>-Ansicht zu haben, die das kann.&lt;/p>
&lt;p>Fügen Sie eine &lt;em>Zurück&lt;/em>-Schaltfläche am unteren Ende des Komponententemplate hinzu und binden Sie sie
an die Methode &lt;code>goBack()&lt;/code> der Komponente.&lt;/p>
&lt;p>&lt;code>src/app/hero-detail/hero-detail.component.html (back button)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">goBack&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">()&amp;#34;&lt;/span>&amp;gt;go back&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Fügen Sie der Komponentenklasse eine &amp;ldquo;goBack()-Methode&amp;rdquo; hinzu, die einen Schritt zurückgeht
im Verlaufsstapel des Browsers
unter Verwendung des &lt;code>Location&lt;/code>-Dienstes, den Sie zuvor injiziert haben.&lt;/p>
&lt;p>&lt;code>src/app/hero-detail/hero-detail.component.ts (goBack)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">goBack&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">location&lt;/span>.&lt;span style="color:#a6e22e">back&lt;/span>();
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Aktualisieren Sie den Browser und beginnen Sie zu klicken.
Benutzer können in der App navigieren, vom Dashboard zu den Heldendetails und zurück,
von der Heldenliste zu den Minidetails, zu den Heldendetails und wieder zurück zu den Helden.&lt;/p>
&lt;p>Die Details sehen besser aus, wenn Sie die privaten CSS-Stile zu &lt;code>hero-detail.component.css&lt;/code> hinzufügen
wie in einem der &lt;a href="#final-code-review">&amp;ldquo;final code review&amp;rdquo;&lt;/a> Tabs unten aufgeführt.&lt;/p>
&lt;h2 id="a-idfinal-code-reviewafinal-code-review">&lt;a id="final-code-review">&lt;/a>Final code review&lt;/h2>
&lt;p>&lt;a href="../assets/files/05_6.zip" download>Hier&lt;/a> oder &lt;a href="../assets/files/05_6">hier&lt;/a>
sind die auf dieser Seite besprochenen Codedateien.&lt;/p>
&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;ul>
&lt;li>Sie haben den Angular-Router hinzugefügt, um zwischen verschiedenen Komponenten zu navigieren.&lt;/li>
&lt;li>Sie haben die &lt;code>AppComponent&lt;/code> in eine Navigations-Shell mit &lt;code>&amp;lt;a&amp;gt;&lt;/code>-Links und einem &lt;code>&amp;lt;router-outlet&amp;gt;&lt;/code> verwandelt.&lt;/li>
&lt;li>Sie haben den Router in einem &amp;ldquo;AppRoutingModule&amp;rdquo; konfiguriert.&lt;/li>
&lt;li>Sie haben Routen, eine Redirect-Route und eine parametrisierte Route definiert.&lt;/li>
&lt;li>Sie haben die &lt;code>routerLink&lt;/code>-Direktive in Ankerelementen verwendet.&lt;/li>
&lt;li>Sie haben eine eng gekoppelte Master/Detail-Ansicht in eine geroutete Detail-Ansicht umgewandelt.&lt;/li>
&lt;li>Sie haben Router-Link-Parameter verwendet, um zur Detailansicht eines vom Benutzer ausgewählten Helden zu navigieren.&lt;/li>
&lt;li>Sie haben den &lt;code>HeroService&lt;/code> auf mehrere Komponenten verteilt.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Daten von einem Server abrufen</title><link>/docs/web/angular/05_7_data_server/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/05_7_data_server/</guid><description>
&lt;h1 id="daten-von-einem-server-abrufen">Daten von einem Server abrufen&lt;/h1>
&lt;ul>
&lt;li>Der &lt;code>HeroService&lt;/code> holt Heldendaten mit HTTP-Anfragen.&lt;/li>
&lt;li>Benutzer können Helden hinzufügen, bearbeiten und löschen und diese Änderungen über HTTP speichern.&lt;/li>
&lt;li>Benutzer können nach Helden anhand ihres Namens suchen.&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Die Beispielanwendung, die auf dieser Seite beschrieben wird, finden Sie unter &lt;a href="https://angular.io/generated/live-examples/toh-pt6/stackblitz.html">dieser Seite&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="aktivieren-sie-http-dienste">Aktivieren Sie HTTP-Dienste&lt;/h2>
&lt;p>&lt;a href="https://angular.io/api/common/http/HttpClient">&lt;code>HttpClient&lt;/code>&lt;/a> ist Angulars Mechanismus, um mit einem entfernten Server über HTTP zu kommunizieren.&lt;/p>
&lt;p>Machen Sie &lt;code>HttpClient&lt;/code> überall in der Anwendung in zwei Schritten verfügbar. Erstens, fügen Sie es zum Root &lt;code>AppModule&lt;/code> hinzu, indem Sie es importieren:&lt;/p>
&lt;p>&lt;code>src/app/app.module.ts (HttpClientModule import)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HttpClientModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/common/http&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Als Nächstes, immer noch im &lt;code>AppModule&lt;/code>, fügen Sie &lt;code>HttpClientModule&lt;/code> in das &lt;code>imports&lt;/code> Array ein:&lt;/p>
&lt;p>&lt;code>src/app/app.module.ts (imports array excerpt)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">HttpClientModule&lt;/span>,
],
})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="einen-datenserver-simulieren">Einen Datenserver simulieren&lt;/h2>
&lt;p>Dieses Tutorial-Beispiel imitiert die Kommunikation mit einem entfernten Datenserver, indem es die
&lt;a href="https://github.com/angular/angular/tree/master/packages/misc/angular-in-memory-web-api" title="In-memory Web API">In-memory Web API&lt;/a> Modul.&lt;/p>
&lt;p>Nach der Installation des Moduls wird die Anwendung Anfragen an den &lt;code>HttpClient&lt;/code> stellen und Antworten von diesem empfangen
ohne zu wissen, dass die &lt;em>In-memory Web API&lt;/em> diese Anfragen abfängt,
sie auf einen In-Memory-Datenspeicher anwendet und simulierte Antworten zurückgibt.&lt;/p>
&lt;p>Wenn Sie die In-Memory-Web-API verwenden, müssen Sie keinen Server einrichten, um etwas über den &lt;code>HttpClient&lt;/code> zu erfahren.&lt;/p>
&lt;p>Installieren Sie das In-memory Web API Paket von npm mit dem folgenden Befehl:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> npm install angular-in-memory-web-api --save
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Im &lt;code>AppModule&lt;/code> importieren Sie das &lt;code>HttpClientInMemoryWebApiModule&lt;/code> und die Klasse &lt;code>InMemoryDataService&lt;/code>,
die Sie in einem Moment erstellen werden.&lt;/p>
&lt;p>&lt;code>src/app/app.module.ts (In-memory Web API imports)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HttpClientInMemoryWebApiModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;angular-in-memory-web-api&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">InMemoryDataService&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./in-memory-data.service&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Nach dem &lt;code>HttpClientModule&lt;/code> fügen Sie das &lt;code>HttpClientInMemoryWebApiModule&lt;/code>
zum &lt;code>AppModule&lt;/code> &lt;code>imports&lt;/code> Array hinzu und konfigurieren es mit dem &lt;code>InMemoryDataService&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/app.module.ts (imports array excerpt)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">HttpClientModule&lt;/span>,
&lt;span style="color:#75715e">// Das Modul HttpClientInMemoryWebApiModule fängt HTTP-Anfragen ab
&lt;/span>&lt;span style="color:#75715e">// und gibt simulierte Serverantworten zurück.
&lt;/span>&lt;span style="color:#75715e">// Entfernen Sie es, wenn ein echter Server bereit ist, Anfragen zu empfangen.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">HttpClientInMemoryWebApiModule&lt;/span>.&lt;span style="color:#a6e22e">forRoot&lt;/span>(
&lt;span style="color:#a6e22e">InMemoryDataService&lt;/span>, { &lt;span style="color:#a6e22e">dataEncapsulation&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span> }
)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Konfigurationsmethode &amp;ldquo;forRoot()&amp;rdquo; nimmt eine &amp;ldquo;InMemoryDataService&amp;rdquo;-Klasse
die die In-Memory-Datenbank vorbereiten.&lt;/p>
&lt;p>Erzeugen Sie die Klasse &lt;code>src/app/in-memory-data.service.ts&lt;/code> mit dem folgenden Befehl:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> ng generate service InMemoryData
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ersetzen Sie den Standardinhalt von &lt;code>in-memory-data.service.ts&lt;/code> durch den folgenden:&lt;/p>
&lt;p>&lt;code>src/app/in-memory-data.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Injectable&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">InMemoryDbService&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;angular-in-memory-web-api&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Injectable&lt;/span>({
&lt;span style="color:#a6e22e">providedIn&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;root&amp;#39;&lt;/span>,
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">InMemoryDataService&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">InMemoryDbService&lt;/span> {
&lt;span style="color:#a6e22e">createDb() {&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">11&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr Nice&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">12&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Narco&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">13&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Bombasto&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">14&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Celeritas&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">15&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magneta&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">16&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;RubberMan&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">17&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dynama&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">18&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr IQ&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">19&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magma&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">20&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tornado&amp;#39;&lt;/span> }
];
&lt;span style="color:#66d9ef">return&lt;/span> {&lt;span style="color:#a6e22e">heroes&lt;/span>};
}
&lt;span style="color:#75715e">// Overrides the genId method to ensure that a hero always has an id.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// If the heroes array is empty,
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// the method below returns the initial number (11).
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// if the heroes array is not empty, the method below returns the highest
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// hero id + 1.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">genId&lt;/span>(&lt;span style="color:#a6e22e">heroes&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>[])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#f92672">?&lt;/span> Math.&lt;span style="color:#a6e22e">max&lt;/span>(...&lt;span style="color:#a6e22e">heroes&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">hero&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>)) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">1&lt;/span> : &lt;span style="color:#66d9ef">11&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Datei &lt;code>in-memory-data.service.ts&lt;/code> wird die Funktion von &lt;code>mock-heroes.ts&lt;/code> übernehmen.
Löschen Sie die Datei &lt;code>mock-heroes.ts&lt;/code> jedoch noch nicht, da Sie sie noch für einige weitere Schritte dieses Tutorials benötigen.&lt;/p>
&lt;p>Wenn der Server bereit ist, lösen Sie die In-Memory-Web-API, und die Anfragen der Anwendung werden an den Server weitergeleitet.&lt;/p>
&lt;h2 id="helden-und-http">Helden und HTTP&lt;/h2>
&lt;p>Im &lt;code>HeroService&lt;/code> importieren Sie &lt;code>HttpClient&lt;/code> und &lt;code>HttpHeaders&lt;/code>:&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts (import HTTP symbols)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HttpClient&lt;/span>, &lt;span style="color:#a6e22e">HttpHeaders&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/common/http&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Noch im &lt;code>HeroService&lt;/code>, injizieren Sie &lt;code>HttpClient&lt;/code> in den Konstruktor in einer privaten Eigenschaft namens &lt;code>http&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">constructor&lt;/span>(
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>: &lt;span style="color:#66d9ef">HttpClient&lt;/span>,
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">messageService&lt;/span>: &lt;span style="color:#66d9ef">MessageService&lt;/span>) { }
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Beachten Sie, dass Sie den &lt;code>MessageService&lt;/code> weiterhin injizieren, aber da Sie ihn so häufig aufrufen werden, verpacken Sie ihn in eine private &lt;code>log()&lt;/code> Methode:&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">/** Log a HeroService message with the MessageService */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">messageService&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#e6db74">`HeroService: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Definieren Sie die &lt;code>heroesUrl&lt;/code> der Form &lt;code>:base/:collectionName&lt;/code> mit der Adresse der heroes-Ressource auf dem Server.
Dabei ist &lt;code>base&lt;/code> die Ressource, an die Anfragen gestellt werden,
und &lt;code>collectionName&lt;/code> ist das heroes-Datenobjekt in der &lt;code>in-memory-data-service.ts&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">heroesUrl&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;api/heroes&amp;#39;&lt;/span>; &lt;span style="color:#75715e">// URL to web api
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="abrufen-von-helden-mit-httpclient">Abrufen von Helden mit &lt;code>HttpClient&lt;/code>&lt;/h3>
&lt;p>Das aktuelle &lt;code>HeroService.getHeroes()&lt;/code>
verwendet die RxJS-Funktion &lt;code>of()&lt;/code>, um ein Array von Mock-Helden zurückzugeben
als &lt;code>Observable&amp;lt;Hero[]&amp;gt;&lt;/code> zurückzugeben.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts (getHeroes with RxJs 'of()')&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span>(&lt;span style="color:#a6e22e">HEROES&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">heroes&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Konvertieren Sie diese Methode zur Verwendung von &lt;code>HttpClient&lt;/code> wie folgt:&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">/** GET heroes from the server */&lt;/span>
&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroesUrl&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Aktualisieren Sie den Browser. Die Heldendaten sollten erfolgreich vom
Mock-Server geladen werden.&lt;/p>
&lt;p>Sie haben &lt;code>of()&lt;/code> gegen &lt;code>http.get()&lt;/code> ausgetauscht und die Anwendung funktioniert ohne weitere Änderungen
weil beide Funktionen ein &lt;code>Observable&amp;lt;Hero[]&amp;gt;&lt;/code> zurückgeben.&lt;/p>
&lt;h3 id="httpclienthttpsangularioapicommonhttphttpclient-methoden-geben-einen-wert-zurück">&lt;a href="https://angular.io/api/common/http/HttpClient">&lt;code>HttpClient&lt;/code>&lt;/a>-Methoden geben einen Wert zurück&lt;/h3>
&lt;p>Alle &lt;code>HttpClient&lt;/code>-Methoden geben ein RxJS &lt;code>Observable&lt;/code> von etwas zurück.&lt;/p>
&lt;p>HTTP ist ein Anfrage/Antwort-Protokoll.
Man stellt eine Anfrage und erhält eine einzige Antwort zurück.&lt;/p>
&lt;p>Im Allgemeinen _kann eine Observable mehrere Werte im Laufe der Zeit zurückgeben.
Eine Observable von &lt;code>HttpClient&lt;/code> gibt immer einen einzigen Wert aus und beendet sich dann, um nie wieder einen Wert auszugeben.&lt;/p>
&lt;p>Dieser spezielle &lt;code>HttpClient.get()&lt;/code>-Aufruf gibt ein &lt;code>Observable&amp;lt;Hero[]&amp;gt;&lt;/code> zurück; das heißt, &amp;ldquo;&lt;em>ein Observable von Hero-Arrays&lt;/em>&amp;rdquo;. In der Praxis wird nur ein einziges Helden-Array zurückgegeben.&lt;/p>
&lt;h3 id="httpclientget-gibt-antwortdaten-zurück">&lt;code>HttpClient.get()&lt;/code> gibt Antwortdaten zurück&lt;/h3>
&lt;p>HttpClient.get()&amp;quot; gibt standardmäßig den Körper der Antwort als untypisiertes JSON-Objekt zurück.
Die Anwendung des optionalen Typ-Spezifizierers &lt;code>&amp;lt;Hero[]&amp;gt;&lt;/code> fügt TypeScript-Fähigkeiten hinzu, die Fehler während der Kompilierungszeit reduzieren.&lt;/p>
&lt;p>Die Daten-API des Servers bestimmt die Form der JSON-Daten.
Die Daten-API von &lt;em>Tour of Heroes&lt;/em> gibt die Heldendaten als Array zurück.&lt;/p>
&lt;blockquote>
&lt;p>Andere APIs verbergen die gewünschten Daten möglicherweise in einem Objekt.
Sie müssen diese Daten möglicherweise durch Verarbeitung des &lt;code>Observable&lt;/code>-Ergebnisses
mit dem RxJS-Operator &amp;ldquo;map()&amp;rdquo; verarbeiten.&lt;/p>
&lt;/blockquote>
&lt;p>Obwohl hier nicht besprochen, gibt es ein Beispiel für &lt;code>map()&lt;/code> in der &lt;code>getHeroNo404()&lt;/code>
Methode, die im Quellcode des Beispiels enthalten ist.&lt;/p>
&lt;h3 id="fehlerbehandlungerror-handling">Fehlerbehandlung/Error handling&lt;/h3>
&lt;p>Dinge gehen schief, besonders wenn man Daten von einem entfernten Server erhält.
Die Methode &lt;code>HeroService.getHeroes()&lt;/code> sollte Fehler abfangen und etwas Passendes tun.&lt;/p>
&lt;p>Um Fehler abzufangen, &lt;strong>&amp;ldquo;pipen&amp;rdquo; Sie das Observable&lt;/strong> Ergebnis von &lt;code>http.get()&lt;/code> durch einen RxJS &lt;code>catchError()&lt;/code> Operator.&lt;/p>
&lt;p>Importieren Sie das Symbol &lt;code>catchError&lt;/code> aus &lt;code>rxjs/operators&lt;/code>, zusammen mit einigen anderen Operatoren, die Sie später benötigen werden.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">catchError&lt;/span>, &lt;span style="color:#a6e22e">map&lt;/span>, &lt;span style="color:#a6e22e">tap&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;rxjs/operators&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Erweitern Sie nun das Observable Ergebnis mit der Methode &lt;code>pipe()&lt;/code> und
geben Sie ihm einen &lt;code>catchError()&lt;/code> Operator.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroesUrl&lt;/span>)
.&lt;span style="color:#a6e22e">pipe&lt;/span>(
&lt;span style="color:#a6e22e">catchError&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleError&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">&amp;#39;getHeroes&amp;#39;&lt;/span>, []))
);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Operator &lt;code>catchError()&lt;/code> fängt ein &lt;strong>&lt;code>Observable&lt;/code> ab, das fehlgeschlagen ist&lt;/strong>.
Der Operator übergibt dann den Fehler an die Fehlerbehandlungsfunktion.&lt;/p>
&lt;p>Die folgende Methode &lt;code>handleError()&lt;/code> meldet den Fehler und gibt dann ein
unschädliches Ergebnis zurück, so dass die Anwendung weiter funktioniert.&lt;/p>
&lt;h4 id="handleerror">&lt;code>handleError&lt;/code>&lt;/h4>
&lt;p>Die folgende &lt;code>handleError()&lt;/code>-Methode wird von vielen &lt;code>HeroService&lt;/code>-Methoden verwendet
geteilt, also ist sie verallgemeinert, um ihren unterschiedlichen Bedürfnissen gerecht zu werden.&lt;/p>
&lt;p>Anstatt den Fehler direkt zu behandeln, gibt sie eine Fehlerbehandlungsfunktion an &lt;code>catchError&lt;/code> zurück, die sie
mit dem Namen der fehlgeschlagenen Operation und einem sicheren Rückgabewert konfiguriert hat.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Behandelt eine fehlgeschlagene Http-Operation.
&lt;/span>&lt;span style="color:#75715e"> * Lässt die App weiterlaufen.
&lt;/span>&lt;span style="color:#75715e"> * @param operation - Name des fehlgeschlagenen Vorgangs
&lt;/span>&lt;span style="color:#75715e"> * @param result - optionaler Wert, der als beobachtbares Ergebnis zurückgegeben wird
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">handleError&lt;/span>&amp;lt;&lt;span style="color:#f92672">T&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">operation&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;operation&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">result?&lt;/span>: &lt;span style="color:#66d9ef">T&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#a6e22e">error&lt;/span>: &lt;span style="color:#66d9ef">any&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">T&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#75715e">// TODO: den Fehler an die entfernte Logging-Infrastruktur senden
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>); &lt;span style="color:#75715e">// stattdessen auf der Konsole protokollieren
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// TODO: Fehler besser für den Benutzer aufbereiten
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">operation&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> failed: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">error&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>);
&lt;span style="color:#75715e">// Lassen Sie die Anwendung weiterlaufen, indem Sie ein leeres Ergebnis zurückgeben.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>);
};
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Nachdem der Fehler an die Konsole gemeldet wurde, konstruiert der Handler
eine benutzerfreundliche Meldung und gibt einen sicheren Wert an die Anwendung zurück, damit diese weiterarbeiten kann.&lt;/p>
&lt;p>Weil jede Dienstmethode eine andere Art von &lt;code>Observable&lt;/code>-Ergebnis zurückgibt,
handleError()` einen Typ-Parameter, um den sicheren Wert als den von der Anwendung erwarteten Typ zurückgeben zu können.&lt;/p>
&lt;h3 id="tippen-sie-auf-das-observable">Tippen Sie auf das Observable&lt;/h3>
&lt;p>Die &lt;code>HeroService&lt;/code>-Methoden &lt;strong>zapfen&lt;/strong> den Fluss der Observable Werte an
und senden mit der Methode &lt;code>log()&lt;/code> eine Nachricht an den Nachrichtenbereich am unteren Rand der Seite.&lt;/p>
&lt;p>Sie tun dies mit dem RxJS-Operator &amp;ldquo;tap()&amp;rdquo;,
der sich die Observable Werte ansieht, etwas mit diesen Werten macht
und sie weitergibt.
Der &lt;code>tap()&lt;/code> Rückruf berührt die Werte selbst nicht.&lt;/p>
&lt;p>Hier ist die endgültige Version von &amp;ldquo;getHeroes()&amp;rdquo; mit dem &amp;ldquo;tap()&amp;rdquo;, der die Operation protokolliert.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">/** GET heroes from the server */&lt;/span>
&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroesUrl&lt;/span>)
.&lt;span style="color:#a6e22e">pipe&lt;/span>(
&lt;span style="color:#a6e22e">tap&lt;/span>(&lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;fetched heroes&amp;#39;&lt;/span>)),
&lt;span style="color:#a6e22e">catchError&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleError&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">&amp;#39;getHeroes&amp;#39;&lt;/span>, []))
);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="held-nach-id-abrufen">Held nach ID abrufen&lt;/h3>
&lt;p>Die meisten Web APIs unterstützen eine &lt;em>get by id&lt;/em> Anfrage in der Form &lt;code>:baseURL/:id&lt;/code>.&lt;/p>
&lt;p>Hier ist die &lt;em>Basis-URL&lt;/em> die &lt;code>heroesURL&lt;/code>, die im Abschnitt Heroes und HTTP definiert ist (&lt;code>api/heroes&lt;/code>) und &lt;em>id&lt;/em> ist
die Nummer des Helden, den Sie abrufen wollen. Zum Beispiel, &lt;code>api/heroes/11&lt;/code>.&lt;/p>
&lt;p>Aktualisieren Sie die &lt;code>HeroService&lt;/code> &lt;code>getHero()&lt;/code> Methode mit dem Folgenden, um diese Anfrage zu stellen:&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">/** GET hero by id. Will 404 if id not found */&lt;/span>
&lt;span style="color:#a6e22e">getHero&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroesUrl&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">url&lt;/span>).&lt;span style="color:#a6e22e">pipe&lt;/span>(
&lt;span style="color:#a6e22e">tap&lt;/span>(&lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`fetched hero id=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>)),
&lt;span style="color:#a6e22e">catchError&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleError&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">`getHero id=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>))
);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Es gibt drei wesentliche Unterschiede zu &lt;code>getHeroes()&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>getHero()&lt;/code> konstruiert eine Anfrage-URL mit der Id des gewünschten Helden.&lt;/li>
&lt;li>Der Server sollte mit einem einzelnen Helden antworten und nicht mit einem Array von Helden.&lt;/li>
&lt;li>&lt;code>getHero()&lt;/code> gibt ein &lt;code>Observable&amp;lt;Hero&amp;gt;&lt;/code> (&amp;quot;&lt;em>an observable of Hero objects&lt;/em>&amp;quot;)
und nicht ein Observable von Helden &lt;em>Arrays&lt;/em> zurück.&lt;/li>
&lt;/ul>
&lt;h2 id="helden-aktualisieren">Helden aktualisieren&lt;/h2>
&lt;p>Bearbeiten Sie den Namen eines Helden in der Helden-Detailansicht.
Während Sie tippen, wird der Name des Helden in der Überschrift oben auf der Seite aktualisiert.
Wenn Sie jedoch auf die Schaltfläche &amp;ldquo;Zurück&amp;rdquo; klicken, gehen die Änderungen verloren.&lt;/p>
&lt;p>Wenn Sie möchten, dass die Änderungen erhalten bleiben, müssen Sie sie zurück auf den
den Server zurückschreiben.&lt;/p>
&lt;p>Fügen Sie am Ende der Vorlage für die Heldendetails eine Schaltfläche zum Speichern mit einem &amp;ldquo;Klick&amp;rdquo;-Ereignis
Bindung, die eine neue Komponentenmethode namens &lt;code>save()&lt;/code> aufruft.&lt;/p>
&lt;p>&lt;code>src/app/hero-detail/hero-detail.component.html (save)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">save&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">()&amp;#34;&lt;/span>&amp;gt;save&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Fügen Sie in der Komponentenklasse &lt;code>HeroDetail&lt;/code> die folgende &lt;code>save()&lt;/code>-Methode hinzu, die Änderungen des Heldennamens mithilfe des Heldendienstes speichert
&lt;code>updateHero()&lt;/code> Methode und navigiert dann zurück zur vorherigen Ansicht.&lt;/p>
&lt;p>&lt;code>src/app/hero-detail/hero-detail.component.ts (save)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">save&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">hero&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">updateHero&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">hero&lt;/span>)
.&lt;span style="color:#a6e22e">subscribe&lt;/span>(() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">goBack&lt;/span>());
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="hinzufügen-von-heroserviceupdatehero">Hinzufügen von &lt;code>HeroService.updateHero()&lt;/code>&lt;/h4>
&lt;p>Die allgemeine Struktur der &lt;code>updateHero()&lt;/code> Methode ist ähnlich wie die von
&lt;code>getHeroes()&lt;/code>, aber sie verwendet &lt;code>http.put()&lt;/code> um den geänderten Helden
auf dem Server. Fügen Sie das Folgende zum &lt;code>HeroService&lt;/code> hinzu.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts (update)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">/** PUT: update the hero on the server */&lt;/span>
&lt;span style="color:#a6e22e">updateHero&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">any&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroesUrl&lt;/span>, &lt;span style="color:#a6e22e">hero&lt;/span>, &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">httpOptions&lt;/span>).&lt;span style="color:#a6e22e">pipe&lt;/span>(
&lt;span style="color:#a6e22e">tap&lt;/span>(&lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`updated hero id=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>)),
&lt;span style="color:#a6e22e">catchError&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleError&lt;/span>&amp;lt;&lt;span style="color:#f92672">any&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">&amp;#39;updateHero&amp;#39;&lt;/span>))
);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Methode &lt;code>HttpClient.put()&lt;/code> benötigt drei Parameter:&lt;/p>
&lt;ul>
&lt;li>die URL&lt;/li>
&lt;li>die zu aktualisierenden Daten (in diesem Fall der geänderte Held)&lt;/li>
&lt;li>Optionen&lt;/li>
&lt;/ul>
&lt;p>Die URL ist unverändert. Die Web-API von heroes weiß, welcher Held zu aktualisieren ist, indem sie sich die &lt;code>id&lt;/code> des Helden ansieht.&lt;/p>
&lt;p>Die heroes-Web-API erwartet eine spezielle Kopfzeile in HTTP-Speicheranforderungen.
Dieser Header ist in der Konstante &lt;code>httpOptions&lt;/code> im &lt;code>HeroService&lt;/code> definiert. Fügen Sie Folgendes zur Klasse &lt;code>HeroService&lt;/code> hinzu.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">httpOptions&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">headers&lt;/span>: &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">HttpHeaders&lt;/span>({ &lt;span style="color:#e6db74">&amp;#39;Content-Type&amp;#39;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;application/json&amp;#39;&lt;/span> })
};
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Aktualisieren Sie den Browser, ändern Sie einen Heldennamen und speichern Sie Ihre Änderung. Die &lt;code>save()&lt;/code>
Methode in &lt;code>HeroDetailComponent&lt;/code> navigiert zur vorherigen Ansicht.
Der Held erscheint nun in der Liste mit dem geänderten Namen.&lt;/p>
&lt;h2 id="hinzufügen-eines-neuen-helden">Hinzufügen eines neuen Helden&lt;/h2>
&lt;p>Um einen Helden hinzuzufügen, benötigt diese Anwendung nur den Namen des Helden. Man kann ein &lt;code>&amp;lt;input&amp;gt;&lt;/code>
Element gepaart mit einer Hinzufügen-Schaltfläche.&lt;/p>
&lt;p>Fügen Sie das Folgende in die &lt;code>HeroesComponent&lt;/code>-Vorlage ein, nach
der Überschrift ein:&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.html (add)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;new-hero&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;new-hero&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>&lt;span style="color:#a6e22e">heroName&lt;/span> /&amp;gt;
&lt;span style="color:#75715e">&amp;lt;!-- (click) übergibt Eingabewert an add() und löscht dann die Eingabe --&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;add-button&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">heroName&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">);&lt;/span> &lt;span style="color:#a6e22e">heroName&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>&amp;gt;
Add hero
&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Rufen Sie als Reaktion auf ein Klick-Ereignis den Click-Handler der Komponente, &lt;code>add()&lt;/code>, auf und löschen Sie dann
löschen Sie das Eingabefeld, damit es für einen anderen Namen bereit ist. Fügen Sie das Folgende zu der
Klasse &lt;code>HeroesComponent&lt;/code> hinzu:&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts (add)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>.&lt;span style="color:#a6e22e">trim&lt;/span>();
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>) { &lt;span style="color:#66d9ef">return&lt;/span>; }
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">addHero&lt;/span>({ &lt;span style="color:#a6e22e">name&lt;/span> } &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#a6e22e">Hero&lt;/span>)
.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span>);
});
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn der angegebene Name kein Leerzeichen ist, erstellt der Handler ein &lt;code>Hero&lt;/code>-ähnliches Objekt
aus dem Namen (es fehlt nur die &lt;code>id&lt;/code>) und übergibt es an die Methode &lt;code>addHero()&lt;/code> des Dienstes.&lt;/p>
&lt;p>Wenn &lt;code>addHero()&lt;/code> erfolgreich speichert, erhält der &lt;code>subscribe()&lt;/code> Callback
den neuen Helden und schiebt ihn zur Anzeige in die &lt;code>Heldenliste&lt;/code>.&lt;/p>
&lt;p>Fügen Sie die folgende Methode &lt;code>addHero()&lt;/code> zur Klasse &lt;code>HeroService&lt;/code> hinzu.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts (addHero)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">/** POST: Füge einen neuen Hero dem Server hinzu */&lt;/span>
&lt;span style="color:#a6e22e">addHero&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">post&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&amp;gt;(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroesUrl&lt;/span>, &lt;span style="color:#a6e22e">hero&lt;/span>, &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">httpOptions&lt;/span>).&lt;span style="color:#a6e22e">pipe&lt;/span>(
&lt;span style="color:#a6e22e">tap&lt;/span>((&lt;span style="color:#a6e22e">newHero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`added hero w/ id=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">newHero&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>)),
&lt;span style="color:#a6e22e">catchError&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleError&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">&amp;#39;addHero&amp;#39;&lt;/span>))
);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Funktion &lt;code>addHero()&lt;/code> unterscheidet sich von &lt;code>updateHero()&lt;/code> in zweierlei Hinsicht:&lt;/p>
&lt;ul>
&lt;li>Es ruft &lt;code>HttpClient.post()&lt;/code> anstelle von &lt;code>put()&lt;/code> auf.&lt;/li>
&lt;li>Es erwartet, dass der Server eine ID für den neuen Helden erzeugt,
die er in &lt;code>Observable&amp;lt;Hero&amp;gt;&lt;/code> an den Aufrufer zurückgibt.&lt;/li>
&lt;/ul>
&lt;p>Aktualisieren Sie den Browser und fügen Sie einige Helden hinzu.&lt;/p>
&lt;h2 id="einen-helden-löschen">Einen Helden löschen&lt;/h2>
&lt;p>Jeder Held in der Heldenliste sollte einen Löschknopf haben.&lt;/p>
&lt;p>Fügen Sie das folgende Schaltflächenelement in die &lt;code>HeroesComponent&lt;/code>-Vorlage ein, nach dem Helden
Namen in dem wiederholten &lt;code>&amp;lt;li&amp;gt;&lt;/code> Element.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;delete&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;delete hero&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">delete&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span>&amp;gt;x&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der HTML-Code für die Liste der Helden sollte wie folgt aussehen:&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.html (list of heroes)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">ul&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;heroes&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">routerLink&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/detail/{{hero.id}}&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;badge&amp;#34;&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; {{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;delete&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;delete hero&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">delete&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span>&amp;gt;x&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>So positionieren Sie die Schaltfläche zum Löschen ganz rechts im Heldeneintrag,
fügen Sie der Datei &lt;code>heroes.component.css&lt;/code> etwas CSS hinzu. Sie finden dieses CSS
im Überprüfungscode unten.&lt;/p>
&lt;p>Fügen Sie der Komponentenklasse den Handler &lt;code>delete()&lt;/code> hinzu.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts (delete)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">delete&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span>(&lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">h&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#a6e22e">hero&lt;/span>);
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">deleteHero&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>).&lt;span style="color:#a6e22e">subscribe&lt;/span>();
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Obwohl die Komponente das Löschen von Helden an den &lt;code>HeroService&lt;/code> delegiert,
bleibt sie für die Aktualisierung ihrer eigenen Liste von Helden verantwortlich.
Die Methode &lt;code>delete()&lt;/code> der Komponente entfernt den zu löschenden &lt;em>Helden&lt;/em> sofort aus dieser Liste,
in der Erwartung, dass der &lt;code>HeroService&lt;/code> auf dem Server erfolgreich sein wird.&lt;/p>
&lt;p>Es gibt wirklich nichts, was die Komponente mit dem &lt;code>Observable&lt;/code> tun könnte, das von
&lt;code>heroService.delete()&lt;/code> zurückgegeben wird &lt;strong>aber sie muss sich trotzdem anmelden&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="/images/hint.png" alt="asset">&lt;/p>
&lt;pre>&lt;code>Wenn Sie es versäumen, `subscribe()` zu abonnieren, wird der Dienst die Löschanfrage nicht an den Server senden.
In der Regel tut ein `Observable` _nichts_, bis sich etwas anmeldet.
Bestätigen Sie dies selbst, indem Sie `subscribe()` vorübergehend entfernen,
auf &amp;quot;Dashboard&amp;quot; und dann auf &amp;quot;Heroes&amp;quot; klicken.
Sie werden wieder die vollständige Liste der Helden sehen.
&lt;/code>&lt;/pre>
&lt;p>Als nächstes fügen Sie eine Methode &lt;code>deleteHero()&lt;/code> zu &lt;code>HeroService&lt;/code> wie folgt hinzu.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts (delete)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">/** DELETE: lösche der Hero vom Server */&lt;/span>
&lt;span style="color:#a6e22e">deleteHero&lt;/span>(&lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroesUrl&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>;
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#66d9ef">delete&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">url&lt;/span>, &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">httpOptions&lt;/span>).&lt;span style="color:#a6e22e">pipe&lt;/span>(
&lt;span style="color:#a6e22e">tap&lt;/span>(&lt;span style="color:#a6e22e">_&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`deleted hero id=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>)),
&lt;span style="color:#a6e22e">catchError&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleError&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">&amp;#39;deleteHero&amp;#39;&lt;/span>))
);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Beachten Sie die folgenden wichtigen Punkte:&lt;/p>
&lt;ul>
&lt;li>&lt;code>deleteHero()&lt;/code> ruft &lt;code>HttpClient.delete()&lt;/code> auf.&lt;/li>
&lt;li>Die URL ist die Ressourcen-URL des Helden plus die &lt;code>id&lt;/code> des zu löschenden Helden.&lt;/li>
&lt;li>Man sendet keine Daten wie bei &lt;code>put()&lt;/code> und &lt;code>post()&lt;/code>.&lt;/li>
&lt;li>Sie senden immer noch die &lt;code>httpOptions&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Aktualisieren Sie den Browser und probieren Sie die neue Löschfunktion aus.&lt;/p>
&lt;h2 id="suche-nach-namen">Suche nach Namen&lt;/h2>
&lt;p>In dieser letzten Übung lernen Sie, wie man &lt;code>Observable&lt;/code>-Operatoren miteinander verkettet
so dass Sie die Anzahl ähnlicher HTTP-Anfragen minimieren können
und die Netzwerkbandbreite sparsam zu nutzen.&lt;/p>
&lt;p>Sie werden dem Dashboard eine Helden-Suchfunktion hinzufügen.
Wenn der Benutzer einen Namen in ein Suchfeld eingibt,
werden Sie wiederholte HTTP-Anfragen für nach diesem Namen gefilterte Helden stellen.
Ihr Ziel ist es, nur so viele Anfragen wie nötig zu stellen.&lt;/p>
&lt;h4 id="heroservicesearchheroes">&lt;code>HeroService.searchHeroes()&lt;/code>&lt;/h4>
&lt;p>Beginnen Sie mit dem Hinzufügen einer Methode &lt;code>searchHeroes()&lt;/code> zum &lt;code>HeroService&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/hero.service.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">/* GET Heros welche der Name dem term entspechen */&lt;/span>
&lt;span style="color:#a6e22e">searchHeroes&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">term&lt;/span>.&lt;span style="color:#a6e22e">trim&lt;/span>()) {
&lt;span style="color:#75715e">// if not search term, return empty hero array.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span>([]);
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroesUrl&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">/?name=&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">term&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>).&lt;span style="color:#a6e22e">pipe&lt;/span>(
&lt;span style="color:#a6e22e">tap&lt;/span>(&lt;span style="color:#a6e22e">x&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">x&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">?&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`found heroes matching &amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">term&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;`&lt;/span>) &lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`no heroes matching &amp;#34;&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">term&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;`&lt;/span>)),
&lt;span style="color:#a6e22e">catchError&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleError&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">&amp;#39;searchHeroes&amp;#39;&lt;/span>, []))
);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Methode kehrt sofort mit einem leeren Array zurück, wenn es keinen Suchbegriff gibt.
Der Rest der Methode ähnelt stark &lt;code>getHeroes()&lt;/code>, der einzige signifikante Unterschied ist
die URL, die einen Abfrage-String mit dem Suchbegriff enthält.&lt;/p>
&lt;h3 id="suche-zum-dashboard-hinzufügen">Suche zum Dashboard hinzufügen&lt;/h3>
&lt;p>Öffnen Sie die Vorlage &lt;code>DashboardComponent&lt;/code> und
fügen Sie das Hero-Such-Element, &lt;code>&amp;lt;app-hero-search&amp;gt;&lt;/code>, am unteren Ende des Markups hinzu.&lt;/p>
&lt;p>&lt;code>src/app/dashboard/dashboard.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Top Heroes&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;heroes-menu&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">routerLink&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/detail/{{hero.id}}&amp;#34;&lt;/span>&amp;gt;
{{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">app-hero-search&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-hero-search&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Diese Vorlage sieht dem &lt;code>*ngFor&lt;/code>-Repeater in der Vorlage &lt;code>HeroesComponent&lt;/code> sehr ähnlich.&lt;/p>
&lt;p>Damit dies funktioniert, muss im nächsten Schritt eine Komponente mit einem Selektor hinzugefügt werden, der auf &lt;code>&amp;lt;app-hero-search&amp;gt;&lt;/code> passt.&lt;/p>
&lt;h3 id="herosearchcomponent-erstellen">&lt;code>HeroSearchComponent&lt;/code> erstellen&lt;/h3>
&lt;p>Erstellen Sie eine &lt;code>HeroSearchComponent&lt;/code> mit der CLI.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell"> ng generate component hero-search
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das CLI generiert die drei &lt;code>HeroSearchComponent&lt;/code> Dateien und fügt die Komponente zu den &lt;code>AppModule&lt;/code> Deklarationen hinzu.&lt;/p>
&lt;p>Ersetzen Sie die generierte &lt;code>HeroSearchComponent&lt;/code> Vorlage mit einem &lt;code>&amp;lt;input&amp;gt;&lt;/code> und einer Liste von passenden Suchergebnissen, wie folgt.&lt;/p>
&lt;p>&lt;code>src/app/hero-search/hero-search.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;search-component&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;search-box&amp;#34;&lt;/span>&amp;gt;Hero Search&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>&lt;span style="color:#a6e22e">searchBox&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;search-box&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">search&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">searchBox&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ul&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;search-result&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes$ | async&amp;#34;&lt;/span> &amp;gt;
&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">routerLink&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/detail/{{hero.id}}&amp;#34;&lt;/span>&amp;gt;
{{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Fügen Sie private CSS-Stile zu &lt;code>hero-search.component.css&lt;/code> hinzu
wie in der Code-Überprüfung unten aufgeführt.&lt;/p>
&lt;p>Wenn der Benutzer in das Suchfeld eingibt, ruft eine Eingabe-Ereignisbindung die
Komponente die Methode &lt;code>search()&lt;/code> mit dem neuen Wert des Suchfeldes auf.&lt;/p>
&lt;h3 id="asyncpipehttpsangularioapicommonasyncpipe">&lt;a href="https://angular.io/api/common/AsyncPipe">&lt;code>AsyncPipe&lt;/code>&lt;/a>&lt;/h3>
&lt;p>Der &lt;code>*ngFor&lt;/code> wiederholt Heldenobjekte. Beachten Sie, dass &lt;code>*ngFor&lt;/code> über eine Liste namens &lt;code>heroes$&lt;/code> iteriert, nicht &lt;code>heroes&lt;/code>. Das &lt;code>$&lt;/code> ist eine Konvention, die anzeigt, dass &lt;code>heroes$&lt;/code> ein &lt;code>Observable&lt;/code> ist, nicht ein Array.&lt;/p>
&lt;p>&lt;code>src/app/hero-search/hero-search.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes$ | async&amp;#34;&lt;/span> &amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Da &lt;code>*ngFor&lt;/code> nichts mit einem &lt;code>Observable&lt;/code> machen kann, verwenden Sie das
Pipe-Zeichen (&lt;code>|&lt;/code>) gefolgt von &lt;code>async&lt;/code>. Dies identifiziert Angulars &lt;code>AsyncPipe&lt;/code> und abonniert automatisch ein &lt;code>Observable&lt;/code>, so dass Sie dies nicht
in der Komponentenklasse zu tun.&lt;/p>
&lt;h3 id="bearbeiten-sie-die-klasse-herosearchcomponent">Bearbeiten Sie die Klasse &lt;code>HeroSearchComponent&lt;/code>.&lt;/h3>
&lt;p>Ersetzen Sie die generierte &lt;code>HeroSearchComponent&lt;/code> Klasse und die Metadaten wie folgt.&lt;/p>
&lt;p>&lt;code>src/app/hero-search/hero-search.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Observable&lt;/span>, &lt;span style="color:#a6e22e">Subject&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;rxjs&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> {
&lt;span style="color:#a6e22e">debounceTime&lt;/span>, &lt;span style="color:#a6e22e">distinctUntilChanged&lt;/span>, &lt;span style="color:#a6e22e">switchMap&lt;/span>
} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;rxjs/operators&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroService&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero.service&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-hero-search&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./hero-search.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [ &lt;span style="color:#e6db74">&amp;#39;./hero-search.component.css&amp;#39;&lt;/span> ]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroSearchComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">heroes$&lt;/span>&lt;span style="color:#f92672">!:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;;
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">searchTerms&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Subject&lt;/span>&amp;lt;&lt;span style="color:#f92672">string&lt;/span>&amp;gt;();
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">heroService&lt;/span>: &lt;span style="color:#66d9ef">HeroService&lt;/span>) {}
&lt;span style="color:#75715e">// Push a search term into the observable stream.
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">searchTerms&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>);
}
&lt;span style="color:#a6e22e">ngOnInit&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes$&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">searchTerms&lt;/span>.&lt;span style="color:#a6e22e">pipe&lt;/span>(
&lt;span style="color:#75715e">// wait 300ms after each keystroke before considering the term
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">debounceTime&lt;/span>(&lt;span style="color:#ae81ff">300&lt;/span>),
&lt;span style="color:#75715e">// ignore new term if same as previous term
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">distinctUntilChanged&lt;/span>(),
&lt;span style="color:#75715e">// switch to new search observable each time the term changes
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">switchMap&lt;/span>((&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">searchHeroes&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>)),
);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Beachten Sie die Deklaration von &lt;code>heroes$&lt;/code> als &lt;code>Observable&lt;/code>:&lt;/p>
&lt;p>&lt;code>src/app/hero-search/hero-search.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">heroes$&lt;/span>&lt;span style="color:#f92672">!:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Sie werden es in &lt;code>ngOnInit()&lt;/code> einstellen.
Bevor Sie das tun, konzentrieren Sie sich auf die Definition von &lt;code>searchTerms&lt;/code>.&lt;/p>
&lt;h3 id="das-rxjs-subjekt-searchterms">Das RxJS-Subjekt &lt;code>searchTerms&lt;/code>&lt;/h3>
&lt;p>Bei der Eigenschaft &lt;code>searchTerms&lt;/code> handelt es sich um ein RxJS &lt;code>Subject&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/hero-search/hero-search.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">searchTerms&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Subject&lt;/span>&amp;lt;&lt;span style="color:#f92672">string&lt;/span>&amp;gt;();
&lt;span style="color:#75715e">// Push a search term into the observable stream.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">search&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">searchTerms&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ein &lt;code>Subject&lt;/code> ist sowohl eine Quelle von Observable Werten als auch ein &lt;code>Observable&lt;/code> selbst.
Man kann ein &lt;code>Subject&lt;/code> wie jedes &lt;code>Observable&lt;/code> abonnieren.&lt;/p>
&lt;p>Man kann auch Werte in dieses &lt;code>Observable&lt;/code> schieben indem man seine &lt;code>next(value)&lt;/code> Methode aufruft
aufruft, wie es die Methode &lt;code>search()&lt;/code> tut.&lt;/p>
&lt;p>Die Ereignisbindung an das Ereignis &lt;code>input&lt;/code> des Textfeldes ruft die Methode &lt;code>search()&lt;/code> auf.&lt;/p>
&lt;p>&lt;code>src/app/hero-search/hero-search.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>&lt;span style="color:#a6e22e">searchBox&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;search-box&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">input&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">search&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">searchBox&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span> /&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Jedes Mal, wenn der Benutzer in das Textfeld eingibt, ruft die Bindung &lt;code>search()&lt;/code> mit dem Wert des Textfeldes, einem &amp;ldquo;Suchbegriff&amp;rdquo;, auf.
Der &lt;code>searchTerms&lt;/code> wird zu einem &lt;code>Observable&lt;/code>, das einen stetigen Strom von Suchbegriffen ausgibt.&lt;/p>
&lt;h3 id="verkettung-von-rxjs-operatoren">Verkettung von RxJS-Operatoren&lt;/h3>
&lt;p>Die direkte Übergabe eines neuen Suchbegriffs an &lt;code>searchHeroes()&lt;/code> nach jedem Tastendruck des Benutzers würde eine übermäßige Anzahl von HTTP-Anfragen erzeugen,
die die Server-Ressourcen belasten und die Datentarife auslasten.&lt;/p>
&lt;p>Stattdessen leitet die Methode &lt;code>ngOnInit()&lt;/code> die Observable &lt;code>searchTerms&lt;/code> durch eine Reihe von RxJS-Operatoren, die die Anzahl der Aufrufe von &lt;code>searchHeroes()&lt;/code> reduzieren,
und schließlich eine Observable mit zeitnahen Helden-Suchergebnissen (jeweils ein &lt;code>Hero[]&lt;/code>) zurückgibt.&lt;/p>
&lt;p>Hier ist ein genauerer Blick auf den Code.&lt;/p>
&lt;p>&lt;code>src/app/hero-search/hero-search.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes$&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">searchTerms&lt;/span>.&lt;span style="color:#a6e22e">pipe&lt;/span>(
&lt;span style="color:#75715e">// wait 300ms after each keystroke before considering the term
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">debounceTime&lt;/span>(&lt;span style="color:#ae81ff">300&lt;/span>),
&lt;span style="color:#75715e">// ignore new term if same as previous term
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">distinctUntilChanged&lt;/span>(),
&lt;span style="color:#75715e">// switch to new search observable each time the term changes
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">switchMap&lt;/span>((&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">searchHeroes&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>)),
);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Jeder Operator funktioniert wie folgt:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>debounceTime(300)&lt;/code> wartet, bis der Fluss neuer String-Ereignisse für 300 Millisekunden pausiert
bevor er die letzte Zeichenkette weitergibt. Sie werden nie häufiger als 300ms Anfragen stellen.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>distinctUntilChanged()&lt;/code> stellt sicher, dass eine Anfrage nur gesendet wird, wenn sich der Filtertext geändert hat.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>switchMap()&lt;/code> ruft den Suchdienst für jeden Suchbegriff auf, der es durch &lt;code>debounce()&lt;/code> und &lt;code>distinctUntilChanged()&lt;/code> schafft.
Es annulliert und verwirft vorherige Suchbeobachtungen und gibt nur die letzte Suchdienstbeobachtung zurück.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Mit dem &lt;a href="https://www.learnrxjs.io/learn-rxjs/operators/transformation/switchmap">switchMap-Operator&lt;/a>,
kann jedes qualifizierte Schlüsselereignis einen Aufruf der Methode &lt;code>HttpClient.get()&lt;/code> auslösen.
Selbst bei einer Pause von 300 ms zwischen den Anfragen können mehrere HTTP-Anfragen im Umlauf sein
und diese kehren möglicherweise nicht in der gesendeten Reihenfolge zurück.&lt;br>
&lt;code>switchMap()&lt;/code> behält die ursprüngliche Reihenfolge der Anfragen bei und gibt nur die Observable des letzten HTTP-Methodenaufrufs zurück.
Ergebnisse von früheren Aufrufen werden abgebrochen und verworfen.&lt;br>
Beachten Sie, dass das Abbrechen einer vorherigen &lt;code>searchHeroes()&lt;/code> Observable
nicht wirklich eine anhängige HTTP-Anfrage abbricht.
Unerwünschte Ergebnisse werden verworfen, bevor sie Ihren Anwendungscode erreichen.&lt;/p>
&lt;/blockquote>
&lt;p>Denken Sie daran, dass die &lt;em>Klasse&lt;/em> der Komponente nicht die &lt;em>Observable&lt;/em> &amp;ldquo;heroes$&amp;rdquo; abonniert.
Das ist die Aufgabe der &lt;code>AsyncPipe&lt;/code> in der Vorlage.&lt;/p>
&lt;h4 id="versuchen-sie-es">Versuchen Sie es&lt;/h4>
&lt;p>Starten Sie die Anwendung erneut. Geben Sie im &lt;em>Dashboard&lt;/em> einen Text in das Suchfeld ein.
Wenn Sie Zeichen eingeben, die mit einem vorhandenen Heldennamen übereinstimmen, sehen Sie etwas wie das hier.&lt;/p>
&lt;p>&lt;img src="/images/angular/toh-hero-search.png" alt="Helden-Suchfeld mit den Buchstaben &amp;rsquo;m' und &amp;lsquo;a&amp;rsquo; sowie vier Suchergebnissen, die mit der Anfrage übereinstimmen und in einer Liste unterhalb der Sucheingabe angezeigt werden">&lt;/p>
&lt;h2 id="abschließende-überprüfung-des-codes">Abschließende Überprüfung des Codes&lt;/h2>
&lt;p>&lt;a href="../assets/files/05_7.zip" download>Hier&lt;/a> oder &lt;a href="../assets/files/05_7">hier&lt;/a>
sind die auf dieser Seite besprochenen Codedateien.&lt;/p>
&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;p>Sie sind am Ende Ihrer Reise angelangt und haben eine Menge erreicht.&lt;/p>
&lt;ul>
&lt;li>Sie haben die notwendigen Abhängigkeiten hinzugefügt, um HTTP in der Anwendung zu verwenden.&lt;/li>
&lt;li>Sie haben &lt;code>HeroService&lt;/code> umstrukturiert, um Helden von einer Web-API zu laden.&lt;/li>
&lt;li>Du hast &lt;code>HeroService&lt;/code> erweitert, um die Methoden &lt;code>post()&lt;/code>, &lt;code>put()&lt;/code> und &lt;code>delete()&lt;/code> zu unterstützen.&lt;/li>
&lt;li>Sie haben die Komponenten aktualisiert, um das Hinzufügen, Bearbeiten und Löschen von Helden zu ermöglichen.&lt;/li>
&lt;li>Sie haben eine speicherinterne Web-API konfiguriert.&lt;/li>
&lt;li>Sie haben gelernt, wie man Observables verwendet.&lt;/li>
&lt;/ul>
&lt;p>Dies ist der Abschluss des Tutorials &amp;ldquo;Tour of Heroes&amp;rdquo; herzlichen Glückwunsch.&lt;/p></description></item><item><title>Docs: Heroes Tour: Take-aways</title><link>/docs/web/angular/take_aways/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>/docs/web/angular/take_aways/</guid><description>
&lt;p>In diesem Doc sind die wichtigsten Take-aways des Tour of Heroes Tutorials von Angular zusammengefasst.&lt;/p>
&lt;p>Die Dokumentation von Angular und das Tutorial findest du unter &lt;a href="https://angular.io/docs" target="_blank">angular.io/docs&lt;/a>.&lt;/p>
&lt;h3 id="teil-1---angular-components">Teil 1 - Angular components&lt;/h3>
&lt;p>Components sind die Bausteine von Angular-Apps. Eine App besteht normalerweise aus verschiedenen components.&lt;/p>
&lt;p>Das Grundgerüst eines component kannst du mit dem CLI von Angular erstellen.&lt;/p>
&lt;p>Die Implementierung besteht vor allem aus drei Quelldateien: TypeScript-Klasse, HTML-Template und einer Datei mit CSS-Styles.&lt;/p>
&lt;p>&lt;strong>Erstellung eines component&lt;/strong>&lt;/p>
&lt;p>Um einen component mit dem CLI zu erstellen, verwende innerhalb des im Setup erstellten Basisverzeichnis den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ng generate component &amp;lt;component-name&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hier ist &lt;code>&amp;lt;component-name&amp;gt;&lt;/code> die Bezeichnung des Verzeichnis, das für den component erstellt wird. Die Abkürzung&lt;code>ng&lt;/code> steht für Angular.&lt;/p>
&lt;p>&lt;strong>Verzeichnisstruktur eines component&lt;/strong>&lt;/p>
&lt;p>Die Verzeichnisse der einzelnen components befinden sich normalerweise innerhalb des Verzeichnisses &lt;code>&amp;lt;base-directory&amp;gt;/src/app&lt;/code>.&lt;/p>
&lt;p>Die Verzeichnisstruktur eines components &lt;code>&amp;lt;component-name&amp;gt;&lt;/code> sieht folgendermassen aus:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">└── &amp;lt;component-name&amp;gt;
├── &amp;lt;component-name&amp;gt;.component.css
├── &amp;lt;component-name&amp;gt;.component.html
├── &amp;lt;component-name&amp;gt;.component.spec.ts
└── &amp;lt;component-name&amp;gt;.component.ts
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Quellcode eines component&lt;/strong>&lt;/p>
&lt;p>Der vom CLI erstellte Code der TypeScript-Klasse eines component mit der Bezeichnung &lt;code>example&lt;/code> ist unten aufgelistet.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-example&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./example.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./example.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ExampleComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>@Component&lt;/code> ist ein decorator und enthält Metadaten für Angular. Im Code oben sind drei Eigenschaften definiert:&lt;/p>
&lt;ol>
&lt;li>&lt;code>selector&lt;/code>: element selector für den component&lt;/li>
&lt;li>&lt;code>templateUrl&lt;/code>: URL für das HTML-Template des component&lt;/li>
&lt;li>&lt;code>styleUrls&lt;/code>: Liste mit URLs für Dateien mit CSS-Styles für den component&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Element selector eines component&lt;/strong>&lt;/p>
&lt;p>Mit dem element selector eines component kann man den component im HTML-Template eines anderen component einbinden. Der selector ist zusammen mit anderen Metadaten im decorator &lt;code>@Component&lt;/code> definiert.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">app-example&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-example&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Deklaration eines component&lt;/strong>&lt;/p>
&lt;p>Um einen component an einer anderen Stelle mit dem element selector zu verwenden, muss man den component in &lt;code>&amp;lt;base-directory&amp;gt;/src/app/app.module.ts&lt;/code> deklarieren.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#a6e22e">declarations&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">AppComponent&lt;/span>,
&lt;span style="color:#a6e22e">ExampleComponent&lt;/span>
]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Allgemein muss man jeden component in genau einem NgModule deklarieren. Meistens deklariert man components im &lt;code>AppModule&lt;/code>, also in &lt;code>&amp;lt;base-directory&amp;gt;/src/app/app.module.ts &lt;/code>.&lt;/p>
&lt;h3 id="teil-2---property-binding">Teil 2 - Property binding&lt;/h3>
&lt;p>Mit property bindings kann man im HTML-Template eines component auf Eigenschaften der TypeScript-Klasse zugreifen.&lt;/p>
&lt;p>&lt;strong>Interpolation binding und Pipes&lt;/strong>&lt;/p>
&lt;p>Ein Beispiel für interpolation ist unten aufgelistet. Im Beispiel greift man im HTML-Tmplate des component auf eine Eigenschaft der TypeScript-Klasse zu.&lt;/p>
&lt;details>
&lt;summary>example.component.ts (click to expand)&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-example&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./example.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./example.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ExampleComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">exampleName&lt;/span> : &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;interpolation&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;br />
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;h2&amp;gt;{{exampleName}}&amp;lt;/h2&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mit pipes &lt;code>|&lt;/code> kann man Strings, die man mit interpolation im HTML-Template einbindet, formatieren.&lt;/p>
&lt;p>Im Beispiel unten formatiert man einen String in uppercase.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;h2&amp;gt;{{heroName | uppercase}}&amp;lt;/h2&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Two-way binding&lt;/strong>&lt;/p>
&lt;p>Mit einem two-way binding kann man eine Eigenschaft einer TypeScript-Klasse an eine HTML-Textbox binden.&lt;/p>
&lt;p>Bei einem two-way binding fliessen Daten in beide Richtungen. Wenn die Eigenschaft der TypeScript-Klasse geändert wird, ändert sich der Text in der Textbox und umgekehrt.&lt;/p>
&lt;p>Um ein two-way binding zu erstellen, verwendet man das Attribut &lt;code>[(ngModel)]&lt;/code>.&lt;/p>
&lt;details>
&lt;summary>example.component.ts (click to expand)&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-example&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./example.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./example.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ExampleComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">exampleName&lt;/span> : &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;two-way binding&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;br />
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;div&amp;gt;
&amp;lt;input [(ngModel)]=&amp;#34;exampleName&amp;#34;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Um two-way bindings zu verwenden, muss man das Modul &lt;code>FormsModule&lt;/code> im im &lt;code>AppModule&lt;/code> (beziehungsweise in &lt;code>&amp;lt;base-directory&amp;gt;/src/app/app.module.ts&lt;/code>) importieren und im Array &lt;code>imports&lt;/code> auflisten.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">FormsModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/forms&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">BrowserModule&lt;/span>,
&lt;span style="color:#a6e22e">FormsModule&lt;/span>
]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Class binding&lt;/strong>&lt;/p>
&lt;p>Mit einem class binding kann man eine CSS class unter einer Bedingung zu einem HTML-Element hinzufügen oder entfernen.&lt;/p>
&lt;p>im Beispiel unten ändert sich der CSS-Style abhängig davon, ob &lt;code>highlightName&lt;/code> &lt;code>true&lt;/code> ist oder nicht.&lt;/p>
&lt;details>
&lt;summary>example.component.ts (click to expand)&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-example&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./example.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./example.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ExampleComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">exampleName&lt;/span> : &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;class binding&amp;#39;&lt;/span>;
&lt;span style="color:#a6e22e">highlightName&lt;/span> : &lt;span style="color:#66d9ef">boolan&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;br />
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;li [class.selected]=&amp;#34;highlightName&amp;#34;&amp;gt;
{{exampleName}}
&amp;lt;/li&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Input property binding und @Input() decorator&lt;/strong>&lt;/p>
&lt;p>Mit dem decorator &lt;code>@Input()&lt;/code> kann man eine Eigenschaft einer TypeScript-Klasse als input property festlegen.&lt;/p>
&lt;p>Damit kann ein externer component an diese Eigenschaft gebunden werden, im Sinn einer Eingabe-Eigenschaft.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;app-hero-detail [hero]=&amp;#34;selectedHero&amp;#34;&amp;gt;&amp;lt;/app-hero-detail&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#66d9ef">@Input&lt;/span>() &lt;span style="color:#a6e22e">hero?&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dabei ist &lt;code>[hero]&lt;/code> die Syntax für ein property binding. Dabei handelt es sich um ein one-way data binding, von der Eigenschaft &lt;code>selectedHero&lt;/code> der TypeScript-Klasse des äusseren component zur Eigenschaft &lt;code>hero&lt;/code> der TypeScript-Klasse des inneren component.&lt;/p>
&lt;p>Das property binding updated bei einer Änderung der Eigenschaft &lt;code>selectedHero&lt;/code> die Eigenschaft &lt;code>hero&lt;/code> ebenfalls.&lt;/p>
&lt;p>Mit dem property binding wird einem parent component Kontrolle über einen child component gegeben.&lt;/p>
&lt;h3 id="teil-3---angular-directives">Teil 3 - Angular directives&lt;/h3>
&lt;p>&lt;strong>ngFor, ngIf structural directives&lt;/strong>&lt;/p>
&lt;p>Mit dem structural directive &lt;code>*ngFor&lt;/code> kann man innerhalb des HTML-Template durch mehrere Elemente der TypeScript-Klasse iterieren.&lt;/p>
&lt;details>
&lt;summary>example.component.ts (click to expand)&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-example&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./example.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./example.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ExampleComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">examples&lt;/span> : &lt;span style="color:#66d9ef">string&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [
&lt;span style="color:#e6db74">&amp;#34;interpolation&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;two-way binding&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;class binding&amp;#34;&lt;/span>
]
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;br />
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;li *ngFor=&amp;#34;let exampleName of examples&amp;#34;&amp;gt;
{{exampleName}}
&amp;lt;/li&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Um einen Bereich des HTML-Templates nur unter einer Bedingung darzustellen, verwendet man das structural directive &lt;code>*ngIf&lt;/code>.&lt;/p>
&lt;p>Zum Beispiel kann man testen, ob eine Eigenschaft der TypeScript-Klasse &lt;code>null&lt;/code> oder &lt;code>undefined&lt;/code> ist.&lt;/p>
&lt;details>
&lt;summary>example.component.ts (click to expand)&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-example&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./example.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./example.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ExampleComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">exampleName&lt;/span> : &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;interpolation&amp;#34;&lt;/span>;
&lt;span style="color:#a6e22e">selectedExample&lt;/span> : &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;interpolation&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;br />
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;div *ngIf=&amp;#34;exampleName == selectedExample&amp;#34;&amp;gt;
{{exampleName}}
&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="teil-4---user-events-event-handlers">Teil 4 - User events, event handlers&lt;/h3>
&lt;p>&lt;strong>Click event binding, click event handler&lt;/strong>&lt;/p>
&lt;p>Um einen click event handler zu registrieren, verwendet man das Attribut &lt;code>(click)&lt;/code>.&lt;/p>
&lt;details>
&lt;summary>example.component.ts (click to expand)&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ts" data-lang="ts">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-example&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./example.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./example.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ExampleComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">examples&lt;/span> : &lt;span style="color:#66d9ef">string&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [
&lt;span style="color:#e6db74">&amp;#34;interpolation&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;two-way binding&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;class binding&amp;#34;&lt;/span>
]
&lt;span style="color:#a6e22e">selectedExample&lt;/span> : &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;interpolation&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
&lt;span style="color:#a6e22e">onSelect&lt;/span>(&lt;span style="color:#a6e22e">example&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">selectedExample&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">example&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;br />
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;li *ngFor=&amp;#34;let example of examples&amp;#34; (click)=&amp;#34;onSelect(example)&amp;#34;&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;h2&amp;gt;{{selectedExample}}&amp;lt;/h2&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="teil-5---services">Teil 5 - Services&lt;/h3>
&lt;p>Mit Services kann man in Angular Daten vom Server laden.&lt;/p>
&lt;p>Um einen Service innerhalb eines component zu verwenden, verwendet man dependency injection. Dependency injection ist ein Design Pattern, bestehend aus client, service und injector.&lt;/p>
&lt;p>&lt;strong>@Injectable decorator&lt;/strong>&lt;/p>
&lt;p>Um einen Service über das dependency injection system von Angular zu verwenden, registriert man den Service bei einem injector.&lt;/p>
&lt;p>Für die Registrierung verwendet man den decorator &lt;code>@Injectable&lt;/code>. Normalerweise registriert man den Service beim injector &lt;code>root&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">@Injectable&lt;/span>({
&lt;span style="color:#a6e22e">providedIn&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;root&amp;#39;&lt;/span>,
})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn ein Service vom injector &lt;code>root&lt;/code> bereitgestellt wird, erstellt Angular ein Singleton des Service. Das heisst, es gibt nur eine Instanz des Service. Alle clients verwenden dieselbe Instanz des Service.&lt;/p>
&lt;p>Ein Service kann selber injected dependencies haben.&lt;/p>
&lt;p>&lt;strong>Dependency injection&lt;/strong>&lt;/p>
&lt;p>Bei der dependency inejction übergibt man einen Service dem Konstruktor der TypeScript-Klasse eines component.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">heroService&lt;/span>: &lt;span style="color:#66d9ef">HeroService&lt;/span>) {}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Anschliessend kann man den Service innerhalb der Klasse verwenden.Der Service ist jetzt eine Eigenschaft der TypeScript-Klasse.&lt;/p>
&lt;p>Wenn man zu einer mit dependency inejction hinzugefügten Eigenschaft einer TypeScript-Klasse im HTML-Template ein binding erstellen will, muss die Eigenschaft &lt;code>public&lt;/code> sein.&lt;/p>
&lt;p>&lt;strong>Lifecycle hook ngOnInit()&lt;/strong>&lt;/p>
&lt;p>Services sollten Daten nicht im Konstruktor laden, sondern im lifecycle hook &lt;code>ngOnInit()&lt;/code>.&lt;/p>
&lt;p>&lt;strong>Observer Pattern&lt;/strong>&lt;/p>
&lt;p>Das Laden von Daten durch einen Service kann eine asynchrone Operation sein. Zum Beispiel weiss man beim Laden von Daten von einem Server nicht genau, wann die Daten eintreffen.&lt;/p>
&lt;p>Um dieses Problem zu vermeiden, registriert man beim Laden von Daten von einem Service eine Callback-Funktion. Sobald das Laden der Daten abgeschlossen ist, wird die Callback-Funktion aufgerufen.&lt;/p>
&lt;p>Erstens hat man eine Funktion, die ein Objekt vom Typ &lt;code>Observable&amp;lt;T&amp;gt;&lt;/code> zurückgibt. Der type parameter &lt;code>T&lt;/code> gibt den Datentyp der Daten an, die man vom Service haben will.&lt;/p>
&lt;ul>
&lt;li>Funktionen für HTTP requests des http client von Angular liefern oft Daten vom Typ &lt;code>Observable&lt;/code>.&lt;/li>
&lt;li>Mit der Funktion &lt;code>of&lt;/code> kann man Daten vom Typ &lt;code>T&lt;/code> in ein Objekt vom Typ &lt;code>Òbservable&amp;lt;T&amp;gt;&lt;/code> einpacken.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// Code in der TypeScript-Klasse des Service
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Observable&lt;/span>, &lt;span style="color:#66d9ef">of&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;rxjs&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// Code in der TypeScript-Klasse des Service
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span>(&lt;span style="color:#a6e22e">HEROES&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ein Objekt vom Typ &lt;code>Observable&lt;/code> hat die Funktion &lt;code>subscribe()&lt;/code>.&lt;/p>
&lt;p>Der Funktion &lt;code>subscribe()&lt;/code> übergibt man eine Callback-Funktion (im Beispiel unten eine Lambda-Expression). Sobald die Daten des Service bereit sind, werden die Daten an die Callback-Funktion übergeben.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// Code in der TypeScript-Klasse des client
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>()
.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#a6e22e">loadedHeroes&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">loadedHeroes&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="teil-6---router">Teil 6 - Router&lt;/h3>
&lt;p>Mit dem Router von Angular ändert man den angezeigten component abhängig von der URL.&lt;/p>
&lt;p>&lt;strong>Router-Modul&lt;/strong>&lt;/p>
&lt;p>Den Router konfiguriert man in einem separaten Modul &lt;code>AppRoutingModule&lt;/code>, beziehungsweise in der Datei &lt;code>{base_dir}/src/app/app-routing.module.ts&lt;/code>.&lt;/p>
&lt;p>Um das Modul zu erstellen, verwende den folgenden Befehl:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ng generate module app-routing --flat --module&lt;span style="color:#f92672">=&lt;/span>app
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Mit &lt;code>--flat&lt;/code> wird das Modul ohne eigenes Verzeichnis erstellt.&lt;/li>
&lt;li>Mit &lt;code>--module=app&lt;/code> wird das Modul bei den imports von &lt;code>AppModule&lt;/code> aufgelistet.&lt;/li>
&lt;/ul>
&lt;p>Ersetze den generierten Quellcode mit folgendem Code:&lt;/p>
&lt;details>
&lt;summary>app-routing.module.ts (click to expand)&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">NgModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">RouterModule&lt;/span>, &lt;span style="color:#a6e22e">Routes&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/router&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">routes&lt;/span>: &lt;span style="color:#66d9ef">Routes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [];
&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">RouterModule&lt;/span>.&lt;span style="color:#a6e22e">forRoot&lt;/span>(&lt;span style="color:#a6e22e">routes&lt;/span>)
],
&lt;span style="color:#a6e22e">exports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">RouterModule&lt;/span>
]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppRoutingModule&lt;/span> { }
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;p>&lt;br />&lt;/p>
&lt;p>Der vom Router angezeigte component wird normalerweise mit dem selector&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">router-outlet&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">router-outlet&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>in das HTML-Template des component &lt;code>AppComponent&lt;/code> eingebunden.&lt;/p>
&lt;p>&lt;strong>Deklaration&lt;/strong>&lt;/p>
&lt;p>Um den selector &lt;code>&amp;lt;router-outlet&amp;gt;&lt;/code> zu verwenden, muss das Modul &lt;code>AppRoutingModule&lt;/code> im Modul &lt;code>AppModule&lt;/code>, beziehungsweise in &lt;code>{base_directory}/src/app/app.module.ts&lt;/code> importiert sein.&lt;/p>
&lt;p>&lt;strong>Routes&lt;/strong>&lt;/p>
&lt;p>Eine &lt;code>Route&lt;/code> gibt dem Router an, welchen component er bei einer bestimmten URL anzeigen soll. Routes sind im Array &lt;code>routes&lt;/code> des Router-Moduls &lt;code>AppRoutingModule&lt;/code> aufgelistet.&lt;/p>
&lt;p>Normalerweise hat eine &lt;code>Route&lt;/code> zwei Eigenschaften:&lt;/p>
&lt;ul>
&lt;li>&lt;code>path&lt;/code>: String, um eine URL in der Adresszeile des Browsers zu matchen&lt;/li>
&lt;li>&lt;code>component&lt;/code>: Component, den der Router für die gematchte URL anzeigen soll&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Route&lt;/code> ist ein Interface.&lt;/p>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">routes&lt;/span>: &lt;span style="color:#66d9ef">Routes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [
{&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;example&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">component&lt;/span> : &lt;span style="color:#66d9ef">ExampleComponent&lt;/span>}
];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Route für die Basis-URL&lt;/strong>&lt;/p>
&lt;p>Der &lt;code>path&lt;/code> für die Basis-URL der App ist der leere String &lt;code>''&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Route mit Parametern&lt;/strong>&lt;/p>
&lt;p>it der Syntax &lt;code>:&amp;lt;parameter-name&amp;gt;&lt;/code> definiert man einen Teil einer Route als Parameter.&lt;/p>
&lt;p>Im angezeigten component liest man dann die URL aus, extrahiert den Wert des Parameters aus der URL, und passt den component an.&lt;/p>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">{&lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;detail/:id&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">component&lt;/span>: &lt;span style="color:#66d9ef">HeroDetailComponent&lt;/span>},
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Doppelpunkt gibt an, dass &lt;code>:id&lt;/code> ein Parameter ist und symbolisch für einen bestimmten Wert steht.&lt;/p>
&lt;p>Um die URL auszulesen und den Wert des Parameters aus der URL auszulesen, braucht man den folgenden import:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">ActivatedRoute&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/router&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Auf die &lt;code>ÀctivatedRoute&lt;/code> greift man über dependency injection zu:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">constructor&lt;/span>(
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">route&lt;/span>: &lt;span style="color:#66d9ef">ActivatedRoute&lt;/span>,
) {}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Schliesslich extrahiert man den Parameter in der URL folgendermassen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">=&lt;/span> Number(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">route&lt;/span>.&lt;span style="color:#a6e22e">snapshot&lt;/span>.&lt;span style="color:#a6e22e">paramMap&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;id&amp;#39;&lt;/span>));
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Werte in der &lt;code>paramMap&lt;/code> sind vom Typ &lt;code>string&lt;/code>. Mit der Funktion &lt;code>Number()&lt;/code> wird der Wert des Parameters in einen Wert vom Typ &lt;code>number&lt;/code> umgewandelt. Falls die type conversion nicht möglich ist, wird der Wert &lt;code>NaN&lt;/code> (not a number) zurückgegeben.&lt;/p>
&lt;p>&lt;strong>routerLink directive&lt;/strong>&lt;/p>
&lt;p>Um einen Link im HTML-Template eines component einzubinden, kann man das Angular directive &lt;code>routerLink&lt;/code> mit einem Pfad verwenden.&lt;/p>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html"> &amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">routerLink&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/heroes&amp;#34;&lt;/span>&amp;gt;Heroes&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ein directive kann man als Attribut eines Elements im HTML-Template angeben. Ein directive ist in einer TypeScript-Klasse definiert.&lt;/p>
&lt;h3 id="teil-7---server-daten--http-requests">Teil 7 - Server-Daten / HTTP requests&lt;/h3>
&lt;p>Um HTTP requests zu generieren, verwendet man den HTTP client von Angular.&lt;/p>
&lt;p>Um den HTTP client zu verwenden, importiert man das &lt;code>HttpClientModule&lt;/code> im &lt;code>AppModule&lt;/code>, beziehungsweise in &lt;code>{base_dir}/src/app/app.module.ts&lt;/code>, und fügt das &lt;code>HttpClientModule&lt;/code> zum Array &lt;code>imports&lt;/code> hinzu.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HttpClientModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/common/http&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">HttpClientModule&lt;/span>,
],
})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>HTTP requests generiert man in der Regel innerhalb eines &lt;code>Service&lt;/code>. In einem component verwendet man den Service dann über dependency injeciton.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// Code innerhalb des Service
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HttpClient&lt;/span>, &lt;span style="color:#a6e22e">HttpHeaders&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/common/http&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Den &lt;code>HttpClient&lt;/code> verwendet man innerhalb des &lt;code>Service&lt;/code> auch über dependency injection:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// Code innerhalb des Service
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">constructor&lt;/span>(
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>: &lt;span style="color:#66d9ef">HttpClient&lt;/span>) {}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>HTTP Get requests&lt;/strong>&lt;/p>
&lt;p>Ein HTTP Get requests eines Service ist üblicherweise folgendermassen implementiert:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// Code innerhalb des Service
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">getResult&lt;/span>(&lt;span style="color:#a6e22e">restUrl&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">T&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>&amp;lt;&lt;span style="color:#f92672">T&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">restUrl&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hier enthält &lt;code>restUrl&lt;/code> eine URL der REST-API, für die ein GET request generiert wird.&lt;/p>
&lt;p>Der Service liefert also ein &lt;code>Observable&lt;/code>, das über einen type parameter &lt;code>T&lt;/code> (üblicherweise ein Interface) das Format der geladenen Daten angibt.&lt;/p>
&lt;p>Ein client, welcher den Service verwendet, muss über die Funktion &lt;code>subscribe()&lt;/code> von &lt;code>Observable&lt;/code> eine Callback-Funktion registrieren. Die Callback-Funktion wird aufgerufen, sobald die Daten vom Server bereit sind.&lt;/p>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// Code im client
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroService&lt;/span>.&lt;span style="color:#a6e22e">getHeroes&lt;/span>()
.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#a6e22e">loadedHeroes&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">loadedHeroes&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Anmerkung: Eine REST-API liefert Daten beispielsweise als JSON-Objekt. Die API des Servers bestimmt die Struktur des JSON-Objekts, und je nach API muss man die benötigten Daten zuerst extrahieren. Mann kann dann zum Beispiel das Interface &lt;code>T&lt;/code> an die Struktur des JSON-Objekts anpassen.&lt;/p>
&lt;p>WICHTIG: Damit ein HTTP request überhaupt ausgeführt wird, muss die Funktion &lt;code>subscribe()&lt;/code> des resultierenden &lt;code>Observable&lt;/code>-Objekts aufgerufen werden, auch wenn man keine Callback-Funktion registriert.&lt;/p>
&lt;p>&lt;strong>Fehlerbehandlung&lt;/strong>&lt;/p>
&lt;p>Optional kann man Fehlerbehandlung einbauen, für den Fall dass der GET request fehlschlägt.&lt;/p>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// Code innerhalb des Service
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#a6e22e">getHeroes&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">heroesUrl&lt;/span>)
.&lt;span style="color:#a6e22e">pipe&lt;/span>(
&lt;span style="color:#a6e22e">catchError&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">handleError&lt;/span>&amp;lt;&lt;span style="color:#f92672">Hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">&amp;#39;getHeroes&amp;#39;&lt;/span>, []))
);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mit &lt;code>pipe()&lt;/code> wird das &lt;code>Observable&lt;/code> nachbearbeitet. Für den Fall eines Fehlers wird eine Funktion für die Fehlerbehandlung registriert.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// Code innerhalb des Service
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">handleError&lt;/span>&amp;lt;&lt;span style="color:#f92672">T&lt;/span>&amp;gt;(&lt;span style="color:#a6e22e">operation&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;operation&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">result?&lt;/span>: &lt;span style="color:#66d9ef">T&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#a6e22e">error&lt;/span>: &lt;span style="color:#66d9ef">any&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">T&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">error&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#a6e22e">T&lt;/span>);
};
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Im Fall eines Fehlers wird der Fehler auf der Konsole des Browsers ausgegeben, und manuell ein &lt;code>Observable&lt;/code> mit einem leeren Array als Antwort für den client konstruiert.&lt;/p>
&lt;p>&lt;strong>HTPP Put, Post und Delete requests&lt;/strong>&lt;/p>
&lt;p>Analog zu HTTP Get requests kann man auch Put, Post und Delete requests verwenden, abhängig von der REST-API des Servers.&lt;/p>
&lt;p>WICHTIG: Damit ein HTTP request überhaupt ausgeführt wird, muss die Funktion &lt;code>subscribe()&lt;/code> des resultierenden &lt;code>Observable&lt;/code>-Objekts aufgerufen werden, auch wenn man keine Callback-Funktion registriert.&lt;/p></description></item><item><title>Docs:</title><link>/docs/web/angular/04_5_routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_5_routing/</guid><description>
&lt;h1 id="routing">Routing&lt;/h1>
&lt;h2 id="routing-1">Routing&lt;/h2>
&lt;p>Angular Router ist ein leistungsstarker JavaScript-Router, der vom Angular Core Team erstellt und gewartet wird. Der Router wird über das Paket &amp;ldquo;@angular/router&amp;rdquo; installiert.
Das Paket bietet eine vollständige Routing-Library:&lt;/p>
&lt;ul>
&lt;li>Mehrere Router-Outlets&lt;/li>
&lt;li>Verschiedene Strategien für Path-Matching&lt;/li>
&lt;li>Einfachen Zugriff auf Route-Parameter und Route-Guards zu haben, um Components vor unbefugtem Zugriff zu schützen.&lt;/li>
&lt;/ul>
&lt;p>Der Angular-Router ist ein zentraler Bestandteil der Angular-Plattform. Entwickler können damit Single Page Applications mit mehreren Views erstellen und zwischen diesen navigieren.&lt;/p>
&lt;h2 id="router-outlet">Router-Outlet&lt;/h2>
&lt;p>Die Router-Library stellt uns die Router-Outlet Direktive zur Verfügung. In dieser Direktive fügt der Router den Component ein, der anhand der URL abgeglichen wird.
Wir können in einer Angular-Applikation mehrere Outlets hinzufügen, um erweiterte Routing-Szenarien zu implementieren.
Für den Anfang werden wir uns jedoch auf einen einzelnen Outlet beschränken.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">router-outlet&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">router-outlet&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="routen-und-pfade">Routen und Pfade&lt;/h2>
&lt;p>Routen sind Objekte, die aus mindestens einem Pfad- und einem Component-Attribut bestehen.
Das Pfad-Attribut bezieht sich auf den Teil der URL, der eine eindeutige View festlegt, die angezeigt werden soll.
Das Component-Attribut bezieht sich auf den Angular-Component, der dem Pfad zugeordnet wird.&lt;/p>
&lt;p>Jede Route ordnet einem Component einen URL-Pfad zu.&lt;/p>
&lt;p>Der Router kann, basierend auf einer von uns bereitgestellten Routendefinition, den Benutzer zu einer bestimmten View navigieren.&lt;/p>
&lt;p>Der Pfad kann auch leer sein. Dies gibt den Standardpfad einer Applikation an und ist normalerweise auch der Start der Applikation.&lt;/p>
&lt;p>Der Pfad kann einen Wildcard String (**) enthalten. Der Router wählt diese Route aus, wenn die angeforderte URL keinen Pfaden der definierten Routen entspricht.
Wenn keine Übereinstimmung gefunden wird, kann man dies zum Anzeigen einer &amp;ldquo;Nicht gefunden&amp;rdquo;-View oder zum Umleiten zu einer bestimmten View verwendet werden.&lt;/p>
&lt;p>Schauen wir uns ein Beispiel einer Route an:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;contacts&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">component&lt;/span>: &lt;span style="color:#66d9ef">ContactListComponent&lt;/span>}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Falls diese Route so in der Router Konfiguration festgelegt wird, wird der Router den Component &lt;code>ContactListComponent&lt;/code> rendern, sobald der URL des Browsers &lt;code>/contacts&lt;/code> beinhaltet.&lt;/p>
&lt;h2 id="route-guards">Route Guards&lt;/h2>
&lt;p>Ein Route Guard ist ein Feature des Angular Routers, mit der wir Logik ausführen können, wenn eine Route angefordert wird.
Es wird häufig verwendet, um zu überprüfen, ob ein Benutzer angemeldet ist und über die Berechtigung verfügt, bevor er zugreifen kann.
Somit können wir also dem Benutzer den Zugriff auf die Route ermöglichen oder verweigern.&lt;/p>
&lt;p>Für den Route Guard müssen wir das CanActivate-Interface implementieren, welches im &lt;code>@angular/router&lt;/code> Paket verfügbar ist.
Die &lt;code>canActivate()&lt;/code> Methode des Interfaces enthält die Logik, um den Zugriff auf die Route zuzulassen oder zu verweigern.&lt;/p>
&lt;p>Beispielsweise ermöglicht folgender &lt;code>Guard&lt;/code> immer den Zugriff auf eine Route:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyGuard&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">CanActivate&lt;/span> {
&lt;span style="color:#a6e22e">canActivate&lt;/span>(){
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Eine Route können wir nun anhand dieses Guards schützen, indem wir das &amp;ldquo;canActivate&amp;rdquo;-Attribut des Pfades benutzen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;contacts/:id&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">canActivate&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">MyGuard&lt;/span>], &lt;span style="color:#a6e22e">component&lt;/span>: &lt;span style="color:#66d9ef">ContactListComponent&lt;/span>}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="navigation-directive">Navigation Directive&lt;/h2>
&lt;p>Der Angular Router stellt die routerLink-Direktive zum Erstellen von Navigationslinks bereit.
Diese Direktive navigiert anhand des Pfads, welcher dem Component zugeordnet ist.&lt;/p>
&lt;p>Beispielsweise:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">routerLink&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&amp;#39;/&lt;/span>&lt;span style="color:#a6e22e">contacts&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&amp;#34;&lt;/span>&amp;gt;Contacts&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>