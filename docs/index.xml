<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IT Ninjas – Docs</title><link>/docs/</link><description>Recent content in Docs on IT Ninjas</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: JavaScript: Einführung</title><link>/docs/web/javascript/01_js_intro/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/javascript/01_js_intro/</guid><description>
&lt;p>Jetzt wird es Zeit, dass du auch Programm-Logik auf deiner Website einbauen kannst. Dafür lernst du gleich die Programmiersprache JavaScript kennen, die von praktisch allen bekannten Browsern unterstützt wird.&lt;/p>
&lt;p>Damit du eine Übersicht über die Programmiersprache bekommst, kannst du z.B. &lt;a href="https://www.youtube.com/watch?v=DHjqpvDnNGE">dieses Video&lt;/a> schauen, ohne dass du den ersten Satz verstehen musst.&lt;/p>
&lt;h2 id="motivation-für-javascript">Motivation für JavaScript&lt;/h2>
&lt;p>JavaScript hat sehr viele Verwendungen im Browser. Einerseits können Funktionen ähnlich wie mit Java programmiert werden, sodass z.B. Berechnungen ausgeführt werden können. Zudem kann aber auch direkt mit dem angezeigten Inhalt interagiert werden. So können Validierungen oder auch Animationen ausgeführt werden. Wenn du mal sehen willst, wie eine Website aussieht ohne JS kannst du dir &lt;a href="https://chrome.google.com/webstore/detail/disable-javascript/jfpdlihdedhlmhlbgooailmfhahieoem?hl=en">hier&lt;/a> eine Chrome extension herunterladen mit welcher du JS komplett ausschalten kannst.&lt;/p>
&lt;p>Nun beginnen wir aber zuerst klein: Mit einem Button, der beim Klick eine MessageBox anzeigt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">onclick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;onClickMeClick()&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;button&amp;#34;&lt;/span>&amp;gt;Klick mich&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">onClickMeClick&lt;/span>() {
&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Klick mich nicht an!!&amp;#39;&lt;/span>);
}
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Versuche zuerst, dieses Beispiel ohne Erläuterung zu verstehen.&lt;/p>
&lt;details>
&lt;summary>Erläuterung (click to expand)&lt;/summary>
Zuerst hast du im HTML einen Button erstellt mit dem Text "Klick mich".
&lt;p>Weiter unten siehts du ein &lt;code>&amp;lt;script&amp;gt;&lt;/code>-Element. Dort drin ist eine Funktion namens &lt;code>onClickMeClick()&lt;/code> definiert. Die Funktion ruft &lt;code>alert(message: string)&lt;/code> auf. Diese &lt;code>alert&lt;/code>-Funktion öffnet eine MessageBox mit der übergebenen Nachricht.&lt;/p>
&lt;p>Wie du siehst, wird die selbst definierte Funktion beim Klick auf den Button aufgerufen. Dies passiert, weil du diesen Aufruf im &lt;code>onclick&lt;/code>-Attribut des &lt;code>&amp;lt;button&amp;gt;&lt;/code>s definiert hast. Beachte in diesem Beispiel, dass nicht die Funktion sondern deren Aufruf drin steht. Im Prinzip wird beim Button-Klick der Wert des &lt;code>onclick&lt;/code>-Attributs ausgeführt. Theoretisch könntest du auch direkt &lt;code>onclick=&amp;quot;alert('Klick mich nicht an!!')&amp;quot;&lt;/code> schreiben.&lt;/p>
&lt;/details>
&lt;h2 id="javascript-einbinden">JavaScript einbinden&lt;/h2>
&lt;p>Wie du im oberen Beispiel gesehen hast, wird Javascript via &lt;code>&amp;lt;script&amp;gt;&lt;/code>-Tag eingebunden. Dein Code kann direkt im &lt;code>&amp;lt;script&amp;gt;&lt;/code>-Tag geschrieben werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;my Js Code&amp;#39;&lt;/span>);
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Du kannst aber dein Code auch in einem separatem .js File haben und via Script Tag referenzieren:&lt;/p>
&lt;p>&lt;strong>index.html&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mycode.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>mycode.js&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;my Js Code&amp;#39;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die zweite Variante ist meist sauberer, da Code und HTML sauber aufgeteilt wird. Bei unseren Übungen wirst du aber meist direkt im &lt;code>&amp;lt;script&amp;gt;&lt;/code>-Tag arbeite können ohne separates JS File.&lt;/p></description></item><item><title>Docs: HTML</title><link>/docs/web/html_css/01_html_intro/</link><pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/01_html_intro/</guid><description>
&lt;h2 id="wie-funktionieren-webseiten">Wie funktionieren Webseiten?&lt;/h2>
&lt;p>Im Gegensatz zu Desktop-Programmen SOLLTEN Webseiten auf jedem Betriebssystem und Browser gleich laufen und aussehen. Damit das funktionieren kann, müssen die Webseiten so programmiert/geschrieben worden sein, dass sie von jedem Browser verstanden werden können.&lt;/p>
&lt;p>Genau das wird mit HTML erreicht. Jeder Browser versteht HTML.&lt;/p>
&lt;h2 id="was-ist-html">Was ist HTML?&lt;/h2>
&lt;p>Beginnen wir mit der Definition der Abkürzung &amp;ldquo;HTML&amp;rdquo;. Diese steht für &amp;ldquo;HyperText Markup Language&amp;rdquo;. Okay, was aber bedeutet das?&lt;/p>
&lt;p>Mit HyperText ist ein Dokument gemeint, das nicht dafür gemacht ist, um von oben nach unten gelesen zu werden. HyperText enthält also z.B. Links, die auf andere Dokumente führen. Unter Markup ist zu verstehen, dass das Dokument strukturiert (Kopfzeilen, Hauptteil, Fusszeilen) und formatiert (z.B. kursiver/fetter Text) ist.&lt;/p>
&lt;p>Somit ist HTML also eine Sprache, die alle Elemente auf einer Webseite &lt;strong>BESCHREIBT&lt;/strong>. Die Betonung liegt hier auf &amp;ldquo;beschreibt&amp;rdquo;. Das bedeutet, dass HTML keine Programmiersprache ist. Code, der auf der Webseite ausgeführt wird, ist in JavaScript geschrieben.&lt;/p>
&lt;h2 id="übersicht-zu-html-css-und-javascript-js">Übersicht zu HTML, CSS und JavaScript (JS)&lt;/h2>
&lt;p>Während Deiner Einführung in die Webentwicklung wirst du die Begriffe &amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;CSS&amp;rdquo; und &amp;ldquo;JavaScript&amp;rdquo; immer wieder hören bzw. lesen. Deswegen beginnen wir mit einem Überblick:&lt;/p>
&lt;p>&lt;img src="../html-css-js.png" alt="htmlCssJs" title="HTML, CSS und JavaScript">&lt;/p>
&lt;p>Im HTML beschreibst du die Struktur einer Webseite und fügst auch die wichtigsten Elemente davon ein. Diese Elemente können Text, UI-Elemente, Bilder und vieles mehr sein.&lt;/p>
&lt;p>In CSS beschreibst du, wie das HTML im Browser aussehen soll. Beispielsweise kannst du Schriftfarben, -arten, -grössen, das Aussehen von UI-Elementen und Layouts damit beschreiben.&lt;/p>
&lt;p>Möchtest du im Browser Code ausführen, dann geschieht das mit der Programmiersprache JavaScript. Zum Beispiel kannst Du im HTML definieren, dass eine JavaScript-Funktion ausgeführt wird, wenn Du auf einen Button klickst.&lt;/p></description></item><item><title>Docs: IDE und Tools</title><link>/docs/web/ide/01_ide_tools/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>/docs/web/ide/01_ide_tools/</guid><description>
&lt;h2 id="ide">IDE&lt;/h2>
&lt;p>Während des Moduls wirst du mit Visual Studio Code arbeiten. Visual Studio Code ist ein kostenloser Codierungseditor, mit dem du schnell mit dem Coden beginnen kanst. Du kannst Visual Studio Code verwenden, um in jeder Programmiersprache zu programmieren, ohne den Editor zu wechseln. Es unterstützt viele Sprachen, darunter sind JavaScript, Angular, Vue und viele mehr. Bei Lernenden von anderen Institutionen musst du deine/n üK-Leiter:in fragen, welche IDE ihr benutzen werdet.
&lt;a href="https://code.visualstudio.com/">https://code.visualstudio.com/&lt;/a>&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task1"> 15' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>Installiere die IDE und richte sie entsprechend deiner Präferenz ein.
Folgende Extensions sind praktisch für die Entwicklung von Webapps:
- Bracket Pair Colorizer
- Code Spell Checker
- ESLint
- GitLens
- Material Iconm Theme
- Path Intellisense
- Prettier – Code formatter
&lt;/code>&lt;/pre>
&lt;h3 id="git">Git&lt;/h3>
&lt;p>Git ist dir bereits bekannt ein Codeversionierungssystem, welches bei diesem Modul genutzt wird.&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task2"> 5' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>Installiere git unter folgendem Link: https://git-scm.com/. Bei der Installation sind keine Anpassungen notwendig. Du kannst dich einfach durchklicken.
&lt;/code>&lt;/pre>
&lt;h4 id="default-shell-ändern">Default Shell ändern&lt;/h4>
&lt;p>Damit git ordentlich ausgeführt und genutzt werden kann, muss in VS-Code die &amp;ldquo;Default Shell&amp;rdquo; geändert werden.&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task1"> 2' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>-Öffne VS-Code und drücke F1.
-&amp;quot;Default Shell&amp;quot; eingeben
-&amp;quot;Terminal: Select Default Shell&amp;quot; auswählen
-&amp;quot;Git Bash&amp;quot; auswählen
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="/images/hint.png" alt="asset"> Sofern Git Bash nicht gewählt werden kann, könnte es daran liegen, dass du die IDE neustarten musst.&lt;/p>
&lt;h2 id="tools">Tools&lt;/h2>
&lt;h3 id="nodejs">Node.js&lt;/h3>
&lt;p>Node.js ist eine plattformübergreifende Opensource JavaScript runtime, damit du den nötigen Webserver betreiben kannst, die für die Webentwicklung notwendig ist.
Mit Node können wir später diverse Packages installieren und in unserer Webapplikation brauchen.&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task3"> 5' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>Installiere Node.js unter folgendem Link: https://nodejs.org/en/. Verwende die LTS Version, diese werden für die meisten Nutzer empfohlen.
Bei der Installation sind keine Anpassungen notwendig. Du kannst dich einfach durchklicken.
&lt;/code>&lt;/pre>
&lt;h3 id="postman">Postman&lt;/h3>
&lt;p>Postman ist eine API Platform um die API des Backends zu testen. Dies hilft dir dabei beispielsweise zu prüfen, ob deine Nutzer die du erstellt hast, auch in der Datenbankdatei korrekt gespeichert wurde.&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task4"> 10' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>Installiere Postman unter folgendem Link:https://www.postman.com/downloads/.
Bei der Installation sind keine Anpassungen notwendig. Du kannst dich einfach durchklicken.
Erstell dir ein Account und merke dir dein Passwort. Nach der Anmeldung musst du noch das SSL Zertifikat ausschalten.
File &amp;gt; Settings &amp;gt; General
&lt;/code>&lt;/pre>
&lt;h3 id="überprüfen">Überprüfen&lt;/h3>
&lt;p>Nun hoffen wir das alle nötigen Installationen erfolgreich ausgeführt wurden.&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task5"> 5' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>- Öffne VS-Code
- Öffne ein neues Terminal
- git --version
- npm -v
Sofern alle Versionen angezeigt werden, war die Installation erfolgreich. Anderweitig musst du mit deinem üK-Leiter besprechen wo der Fehler liegen könnte.&lt;/code>&lt;/pre></description></item><item><title>Docs: Javascript Frameworks</title><link>/docs/web/angular/02_javascript_frameworks/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/02_javascript_frameworks/</guid><description>
&lt;h2 id="was-ist-ein-framework">Was ist ein Framework?&lt;/h2>
&lt;p>Das Wort Frontend deutet schon darauf hin, worum es sich handelt. Es ist das, was der Nutzer sieht.
Bei einer Webapplikation ist es das, was dem Besucher im Browser angezeigt wird: die Benutzeroberfläche.&lt;/p>
&lt;p>Es ist der Teil der Software, den der Benutzer sieht und über den er die Software anwendet.&lt;br>
&lt;img src="../js_frameworks/frontend.png" alt="Framework">&lt;/p>
&lt;h2 id="js-frameworks">JS Frameworks&lt;/h2>
&lt;p>JavaScript-Frameworks sind eine Art Tool, das die Arbeit mit JavaScript einfacher und reibungsloser macht.&lt;br>
Durch verschiedensteFrameworks wird die Gestaltung von Websites sehr flexibel, daher bevorzugen es die meisten Entwickler.&lt;br>
Die bekanntesten JS-Frameworks:&lt;br>&lt;/p>
&lt;h3 id="angular">Angular&lt;/h3>
&lt;p>Eines der leistungsstärksten, effizientesten und Open-Source-JavaScript-Frameworks ist Angular.&lt;br>
Google betreibt dieses Framework, welches für die Entwicklung einer Single Page Application (SPA) verwendet wird.&lt;/p>
&lt;p>&lt;img src="/images/angular.png" alt="Angular">&lt;/p>
&lt;h3 id="react">React&lt;/h3>
&lt;p>Das von Facebook erstellte Framework React hat innerhalb kurzer Zeit an Popularität gewonnen.&lt;br>
Es wird verwendet, um die dynamische Benutzeroberfläche der Webseiten mit hohem eingehenden Datenverkehr zu entwickeln und zu betreiben.&lt;/p>
&lt;p>&lt;img src="../js_frameworks/react.png" alt="React">&lt;/p>
&lt;h3 id="vuejs">Vue.js&lt;/h3>
&lt;p>Obwohl dieses JavaScript-Framework erst im Jahr 2016 entwickelt wurde, hat es bereits seinen Weg in den Markt gefunden und sich durch verschiedene Funktionen bewährt. Es ist sehr zuverlässig um Cross-Plattform zu entwickeln.&lt;/p>
&lt;p>&lt;img src="../js_frameworks/vue.png" alt="Vuejs">&lt;/p></description></item><item><title>Exams: Exam Java Basics - Zahlen-Array</title><link>/exams/java/java-basics/</link><pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate><guid>/exams/java/java-basics/</guid><description>
&lt;h2 id="gegeben">Gegeben&lt;/h2>
&lt;p>Gegeben ist das folgende Array mit Zahlen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">int[] numbers = {
-8, 0, 13, 0, -8, 23, -22, 18, -6, -1,
-21, -1, 2, 20, -24, 21, 25, -16, -10, -2,
-20, 15, -15, 0, -16, -19, 13, 24, -3, 7,
21, -15, 21, -11, 4, -17, 3, 11, 22, 12,
11, 12, 6, -4, -21, -20, -24, -3, -25, -13,
17, 19, 19, 20, 22, 9, -10, 12, 16, -1,
21, -24, 12, 19, -7, 15, 5, -22, 23, 12,
6, 2, -14, 12, 17, -13, 3, -4, -16, 8,
16, 6, -23, 0, 3, -16, -6, -14, 8, 25,
-22, 2, 7, 8, -6, 20, 3, -5, -19, -15 };
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="aufgabe-1">Aufgabe 1&lt;/h2>
&lt;p>Schreibe eine Methode, welche alle Zahlen im Array zählt, welche zwischen 0 und 10 liegen und keine 5 sind.
Die Methode liefert die Anzahl dieser Zahlen zurück.&lt;/p>
&lt;h2 id="aufgabe-2">Aufgabe 2&lt;/h2>
&lt;p>Schreibe eine Methode, welche aus dem Array alle positiven Zahlen inklusive 0 in ein neues Array schreibt
Die Reihenfolge der Zahlen im Array muss gleich bleiben. Die Methode liefert das neue Array zurück.&lt;/p>
&lt;h2 id="aufgabe-3">Aufgabe 3&lt;/h2>
&lt;p>Schreibe eine Methode, welche aus dem Array alle Zahlen sucht, welche nicht mehr als 10 von der Zahl -6 abweichen.
Schreibe diese Zahlen in ein neues Array. Die Methode liefert das neue Array zurück.&lt;/p>
&lt;h2 id="aufgabe-4">Aufgabe 4&lt;/h2>
&lt;p>Schreibe eine Methode, welche alle Zahlen aus dem Array in positive Zahlen verwandelt und diese in ein neues Array schreibt.
Die Methode liefert das neue Array zurück.&lt;/p>
&lt;h2 id="aufgabe-5">Aufgabe 5&lt;/h2>
&lt;p>Schreibe eine Methode, welche alle Zahlen aus dem Array ausliest, die sich von ihren direkten Nachbarn um jeweils nicht mehr als den Wert 5 unterscheiden.
Schreibe diese Zahlen in ein neues Array. Die Methode liefert das neue Array zurück. Für die erste und die letzte Zahl im Array gibt es nur einen Nachbar.&lt;/p></description></item><item><title>Docs: Java Grundlagen</title><link>/docs/java/java-grundlagen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/java/java-grundlagen/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich weiss, was eine Klasse ist&lt;/li>
&lt;li>Ich weiss, was Variablen und Datentypen sind&lt;/li>
&lt;li>Ich kenne die primitiven Datentypen in Java: boolean, byte, short, int, long, double, float, char&lt;/li>
&lt;li>Ich kenne die Klasse String&lt;/li>
&lt;li>Ich kenne Arrays und kann diese instanzieren, ihnen Werte von Indexen entnehmen und Werte an Indexe zuweisen&lt;/li>
&lt;li>Ich kann eine Variable deklarieren und initialisieren&lt;/li>
&lt;li>Ich weiss, was eine statische Methode ist und kann sie aufrufen&lt;/li>
&lt;li>Ich verstehe den Unterschied zwischen Methoden mit und ohne Rückgabewert&lt;/li>
&lt;li>Ich kann eine Methodensignatur für Methoden mit und ohne Rückgabewert richtig schreiben&lt;/li>
&lt;li>Ich kann Methoden schreiben, die Parameter entgegennehmen&lt;/li>
&lt;li>Ich weiss, dass jede Anweisung mit einem Strichpunkt abgeschlossen werden muss&lt;/li>
&lt;li>Ich weiss, dass geschweifte Klammern einen Block definieren und ich verwende sie in jeder Kontrollstruktur, um die Code-Blocks voneinander abzugrenzen (lieber zu viel klammern als zu wenig)&lt;/li>
&lt;li>Ich kenne die Main-Methode und weiß, warum eine Applikation nur EINE Main-Methode haben sollte&lt;/li>
&lt;li>Ich kenne die Methode &amp;lsquo;System.out.println&amp;rsquo; und kann sie anwenden&lt;/li>
&lt;li>Ich kann eine Eingabe von der Konsole lesen und in einer Variablen speichern&lt;/li>
&lt;li>Ich kann arithmetische Ausdrücke schreiben: Addition, Subtraktion, Multiplikation, Division, Modulo (Rest einer Division)&lt;/li>
&lt;li>Ich kenne die relationalen Operatoren: ==, &amp;gt;=, &amp;lt;=, &amp;gt;, &amp;lt;, !=&lt;/li>
&lt;li>Ich kenne die booleschen Operatoren: &amp;amp;&amp;amp; (AND), || (OR), ! (NOT), ^(XOR)&lt;/li>
&lt;li>Ich weiß, was eine bedingte Anweisung ist und kann sie korrekt anwenden&lt;/li>
&lt;li>Ich kann eine Schleife programmieren: for, foreach, while und do-while&lt;/li>
&lt;li>Ich kenne die switch-Anweisung&lt;/li>
&lt;/ul>
&lt;h4 id="änderungskontrolle">Änderungskontrolle&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Autor&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Datum&lt;/th>
&lt;th>Änderungen&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Ann-Sophie Junele&lt;/td>
&lt;td>0.1&lt;/td>
&lt;td>Mai 2020&lt;/td>
&lt;td>* Initiale Version erstellt&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Claudio Zesiger&lt;/td>
&lt;td>0.2&lt;/td>
&lt;td>23.07.2020&lt;/td>
&lt;td>* Modul überprüft&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="cheatsheet-zum-downloaden">Cheatsheet zum Downloaden&lt;/h4>
&lt;p>&lt;img src="../java-grundlagen/chaetsheet.pdf" alt="Cheatsheet" title="Cheatsheet">&lt;/p>
&lt;hr>
&lt;h2 id="einführung">Einführung&lt;/h2>
&lt;h3 id="was-ist-java">Was ist Java?&lt;/h3>
&lt;p>Java ist eine objektorientierte Programmiersprache, die schon seit ca. zwei Jahrzehnten große Popularität genießt.
Die Entwicklung von Java begann Anfang der 1990er-Jahre beim US-amerikanischen Hard- und Softwarehersteller Sun Microsystems.
1995 wurde die erste Version veröffentlicht. 2010 wurde Sun Microsystems von Oracle übernommen.
Gegenwärtig erscheinen im Halbjahrestakt neue Java-Versionen; die neuste Version, Java 16, wurde im März 2021 veröffentlicht.&lt;/p>
&lt;hr>
&lt;h3 id="wichtigste-merkmale-von-java">Wichtigste Merkmale von Java&lt;/h3>
&lt;h4 id="plattformunabhängigkeit">Plattformunabhängigkeit&lt;/h4>
&lt;blockquote>
&lt;p>«Write once, Run anywhere»&lt;/p>
&lt;/blockquote>
&lt;p>Der Compiler wandelt den Quellcode in Bytecode um (Kompilat) und anschliessend führt die Java Virtual Machine (JVM) den Bytecode aus.
Jedes Betriebssystem hat eine andere JVM, aber jede JVM kann den Bytecode ausführen, daher kann ein- und dieselbe Java-Anwendung auf Windows, Linux, Mac OS und anderen Plattformen lauffähig sein.&lt;/p>
&lt;h4 id="mehrfach-paradigma">Mehrfach-Paradigma&lt;/h4>
&lt;p>Java ist in erster Linie eine objektorientierte und imperative Programmiersprache, bei der fast alles ein Objekt einer Klasse (eines Typs) ist.
Wir können ein typisches Java-Programm als eine Menge von interagierenden Objekten betrachten. Die Objekte können Entitäten aus der realen Welt oder eine Art von Programmierabstraktionen darstellen.
Wenn wir ein Programm schreiben, erklären wir, wie die Objekte miteinander interagieren sollen.
Java unterstützt aber auch andere Programmierparadigmen, darunter generische Programmierung, parallele Programmierung, funktionale Programmierung (teilweise unterstützt) und andere.&lt;/p>
&lt;h4 id="garbage-collector">Garbage Collector&lt;/h4>
&lt;p>Der Garbage Collector (Teil der JVM) führt zur Laufzeit eine automatische Speicherbereinigung von unbenutzten Objekten durch. Der Entwickler muss sich also nicht um das Aufräumen von unbenutzen Objekten kümmern.&lt;/p>
&lt;h4 id="multithreading">Multithreading&lt;/h4>
&lt;p>Java unterstützt Multithreading auf der Ebene der Sprache und der Standardbibliothek. Es ermöglicht die gleichzeitige und parallele Ausführung mehrerer Teile eines Java-Programms.&lt;/p>
&lt;hr>
&lt;h3 id="code-compile-run">Code, Compile, Run&lt;/h3>
&lt;p>Ein/e Java-Entwickler/in schreibt ein Programm in eine Textdatei mit der Erweiterung .java. Ein Programm kann eine Vielzahl solcher Dateien enthalten. Dann übersetzt der Compiler (normalerweise javac) das Programm in eine .class-Datei, die den Bytecode des Programms enthält. Danach führt die JVM das Programm aus und gibt Low-Level-Befehle an den Computer. Der Computer ist hier eine Abstraktion, welche ein Server, ein PC oder sogar ein mobiles Gerät sein kann.
Tatsächlich sind die Prozesse komplexer, als hier gezeigt wird. Es ist wichtig, Folgendes zu verstehen: Der Teil vor der JVM ist plattformunabhängig, der Teil nach der JVM ist plattformabhängig.&lt;/p>
&lt;p>&lt;img src="../java-grundlagen/codeCompileRun.png" alt="codeCompileRun" title="Code, Compile, Run">&lt;/p>
&lt;hr>
&lt;h2 id="terminologie">Terminologie&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Begriff&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Programm&lt;/td>
&lt;td>Eine Folge von Anweisungen (engl. “statement”), welche nacheinander ausgeführt werden (von oben nach unten)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Anweisung (statement)&lt;/td>
&lt;td>Eine einzelne Aktion, wie zum Beispiel das Ausgeben eines Satzes auf der Konsole. Ein Statement wird mit einem Semikolon abgeschlossen&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Block&lt;/td>
&lt;td>Eine Gruppe von keiner, einer oder mehreren Anweisungen, die von geschweiften Klammern {&amp;hellip;} umgeben ist&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Methode&lt;/td>
&lt;td>Was in anderen Programmiersprachen als «Funktion» bezeichnet wird, heißt in Java «Methode». Eine Methode ist eine Folge von Anweisungen, welche eine bestimmte Aufgabe ausführt (auch bekannt als Unterprogramm oder Prozedur)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Syntax&lt;/td>
&lt;td>Eine Reihe von Regeln, die definieren wie ein Programm geschrieben werden muss, um gültig zu sein. Es handelt sich um eine Art Grammatik&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Keyword&lt;/td>
&lt;td>Ein Wort, welches in der Programmiersprache eine besondere Bedeutung hat (public, class und viele andere). Diese Wörter können nicht als Variablennamen verwendet werden&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bezeichner (identifier) oder Name&lt;/td>
&lt;td>Ein Wort, das sich auf etwas in einem Programm bezieht (z. B. eine Variable oder einen Methodennamen)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kommentar&lt;/td>
&lt;td>Eine Erklärung dazu, was eine bestimmte Anweisung oder Methode macht. Einzeilige Java-Kommentare beginnen mit // und mehrzeilige sind von den Zeichen /* */ umgeben&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Whitespace&lt;/td>
&lt;td>Tabulator- oder Leerzeichen dienen lediglich der Lesbarkeit, vom Compiler werden sie ignoriert&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="hello-world">Hello World&lt;/h2>
&lt;p>Anhand des simplen Hello-World-Programms können wir bereits vieles über die zentralen Bestandteile einer Java-Anwendung erklären. Der folgende Sourcecode ist in einer Datei mit dem Namen HelloWorld.java abgelegt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public class HelloWorld {
public static void main(String[] args) {
System.out.println(&amp;#34;Hello, world!&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="public-class">Public class&lt;/h4>
&lt;p>Bei diesem Beispiel arbeiten wir uns nun von aussen nach innen vor. Der erste Teil definiert eine neue Klasse mit dem Namen &lt;em>HelloWorld&lt;/em>. Die Deklaration der Klasse besteht aus dem Zugriffsmodifizierer &lt;em>public&lt;/em> (dazu später mehr) gefolgt vom Keyword &lt;em>class&lt;/em> und dem Klassennamen. Jede Java-Datei darf nur eine Klasse mit dem Zugriffsmodifizierer &lt;em>public&lt;/em> enthalten, weitere Klassen ohne &lt;em>public&lt;/em> sind jedoch erlaubt. Der Name der Klasse mit dem Modifizierer &lt;em>public&lt;/em> muss stets mit dem Dateinamen übereinstimmen. Der Klassenname wird stets gross geschrieben, einzelne Wörter werden durch einen erneuten Grossbuchstaben getrennt. Dies wird CamelCase genannt. Der &lt;em>Block&lt;/em> der Klasse wird durch geschweifte Klammern angegeben.&lt;/p>
&lt;h4 id="die-main-methode">Die Main-Methode&lt;/h4>
&lt;p>Innerhalb der Klasse wird nun eine Main-Methode definiert. Diese Methode ist der Einstiegspunkt eines jeden Java-Programms. Nur über eine solche Methode kann eine Java-Anwendung gestartet werden. Die Methode besteht aus dem Zugriffsmodifizierer &lt;em>public&lt;/em>, dem Keyword &lt;em>static&lt;/em>, dem Rückgabewert &lt;em>void&lt;/em> und dem Methodennamen &lt;em>main&lt;/em>.
An den Namen der Methode schliesst sich ein paar runde Klammern an. Innerhalb dieser Klammern befinden sich die &lt;em>Parameter&lt;/em> der Methode, in diesem Fall handelt es sich um ein &lt;em>String&lt;/em>-&lt;em>Array&lt;/em>. Die Angabe der genannten Teile einer Methode nennt man Methodensignatur. Der &lt;em>Block&lt;/em> der Methode wird durch geschweifte Klammern angegeben. Die Main-Methode hat immer die oben gezeigte Signatur.&lt;/p>
&lt;h4 id="hello-world-ausgeben">&amp;ldquo;Hello World&amp;rdquo; ausgeben&lt;/h4>
&lt;p>Innerhalb der Main-Methode sehen wir ein einzelnes Statement. Es besteht aus einer einfachen Anweisung, welche den Text &amp;ldquo;Hello, world!&amp;rdquo; auf die Kommandozeile ausgibt.
Die statische Methode &lt;em>println()&lt;/em> auf dem öffentlich zugänglichen &lt;em>Feld&lt;/em> der Klasse &lt;em>System&lt;/em> dient dazu Text auf der Konsole auszugeben. Das Statement wird mit einem Semikolon abgeschlossen.&lt;/p>
&lt;hr>
&lt;h2 id="variablen">Variablen&lt;/h2>
&lt;h4 id="namensgebung">Namensgebung&lt;/h4>
&lt;p>Variablen dienen dazu Werte aufzunehmen. Je nach &lt;em>Scope&lt;/em> leben diese Variablen unterschiedlich lang. Zur Benennung von Variablen gibt es vier Regeln:&lt;/p>
&lt;ul>
&lt;li>Variablennamen beginnen mit einem Kleinbuchstaben&lt;/li>
&lt;li>Ein Variablenname darf die Buchstaben A-Z und a-z enthalten&lt;/li>
&lt;li>Ein Variablenname darf beliebige Zahlen von 0-9 enthalten&lt;/li>
&lt;li>Ein Variablenname darf die Sonderzeichen $ und _ enthalten&lt;/li>
&lt;/ul>
&lt;h4 id="best-practices">Best Practices&lt;/h4>
&lt;p>Der Name einer Variable sollte so gewählt werden, dass klar ist, welcher Wert darin gespeichert wird. Als Beispiel wählen wir den Namen &lt;em>sum&lt;/em> für eine Variable, welche das Resultat einer Addition enthält.&lt;/p>
&lt;h4 id="deklaration">Deklaration&lt;/h4>
&lt;p>Unter der Deklaration einer Variable versteht man das erste &amp;ldquo;Erwähnen&amp;rdquo; einer Variable. In einer statisch typisierten Sprache wie Java bedeutet dies, dass der Typ der Variable festgelegt wird. Der Wert selbst muss bei der Deklaration je nach &lt;em>Scope&lt;/em> nicht festgelegt werden. Zur Laufzeit wird für die Variable ein Bereich im Arbeitsspeicher reserviert. Hier werden später Werte, die der Variablen zugewiesen werden, gespeichert. Die Größe des Speicherbereichs hängt vom Typ der Variable ab.&lt;/p>
&lt;p>Formal gilt:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;variable type&amp;gt; &amp;lt;variable identifier&amp;gt;;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wir geben also den Datentyp und den Namen der Variable an.&lt;/p>
&lt;h4 id="initialisierung">Initialisierung&lt;/h4>
&lt;p>Unter dem Begriff Initialisierung wird die direkte Zuweisen eines Wertes bei der Deklaration einer Variablen verstanden.
Lokale Variablen (Variablen, die lediglich innerhalb einer Methode gültig sind) müssen initialisiert werden, bevor sie verwendet werden können.&lt;/p>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static void main(String[] args) {
int firstSummand = 2;
int secondSummand;
int sum = firstSummand + secondSummand;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Variable &lt;strong>secondSummand&lt;/strong> wurde nicht initialisiert. Die Zuweisung &lt;strong>int sum = firstSummand + secondSummand&lt;/strong> wird also nicht funktionieren.&lt;/p>
&lt;h4 id="deklaration-mit-initialisierung">Deklaration mit Initialisierung&lt;/h4>
&lt;p>Wir können eine Variable nacheinander deklarieren und dann initialisieren oder beides zusammen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">int number; // 1. Deklaration
number = 2; // 2. Initialisierung
int number = 2; // beides in einer Zeile
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Formal:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;variable type&amp;gt; &amp;lt;variable identifier&amp;gt; = &amp;lt;initial value&amp;gt;;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="datentypen">Datentypen&lt;/h2>
&lt;p>In Java sind Variablen stark typisiert. Das heisst, dass alle Variablen bei ihrer Erstellung mit einem Datentyp versehen werden müssen.
Seit Java 10 gibt es Typinferenz für lokale Variablen, das heisst, eine lokale Variable kann deklariert und initialisiert werden (muss gleichzeitig geschehen), ohne dass ein Datentyp angegeben werden muss - anstelle des Datentyps kann &lt;em>var&lt;/em> verwendet werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">var sum = 20;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Es gibt zwei Arten von Datentypen: Primitive Datentypen und Referenztypen. Der grundlegende Unterschied besteht darin, dass eine primitive Variable den tatsächlichen Wert speichert, während eine Referenzvariable die Adresse des Objekts speichert, auf welches sie sich bezieht. Dies hat mit dem Java Memory Modell zu tun. Das nachfolgende Bild zeigt das Java Memory Modell als einfache Darstellung, es besteht grundsätzlich aus dem Stack Memory und dem Heap Space. Primitive Datentypen werden nur auf dem Stack angelegt. Objekte, wie das im Bild gezeigte Auto (Car), sind im Heap abgelegt. Die Referenz auf das Objekt wird auf dem Stack angelegt. Die Referenz &amp;ldquo;zeigt&amp;rdquo; also auf das Objekt im Heap.&lt;/p>
&lt;p>&lt;img src="../java-grundlagen/datentypen.png" alt="Datentypen" title="Datentypen">&lt;/p>
&lt;p>Dieser fundamentale Unterschied ist relevant beim Vergleich von Werten und Referenzen. Der Operator für den Vergleich ==, vergleicht stets die Werte auf dem Stack miteinander. Bei Referenzen wird dort also überprüft, ob sie auf dasselbe Objekt zeigen. Wenn der Inhalt von Objekten verglichen werden soll, so muss dies mit der Methode &lt;em>equals&lt;/em> gemacht werden.&lt;/p>
&lt;hr>
&lt;h3 id="primitive-datentypen">Primitive Datentypen&lt;/h3>
&lt;h4 id="integraler-datentyp">Integraler Datentyp&lt;/h4>
&lt;p>Integrale Datentypen sind immer ganze Zahlen, sie besitzen also keine Nachkommastellen.
Die folgenden Datentypen speichern ganzzahlige Werte, sie unterscheiden sich nur in ihrer Grösse:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Datentyp&lt;/th>
&lt;th>Speicherbedarf&lt;/th>
&lt;th>Bereich&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>byte&lt;/td>
&lt;td>8 Bit&lt;/td>
&lt;td>-128 &amp;hellip; 127&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>short&lt;/td>
&lt;td>16 Bit&lt;/td>
&lt;td>-32768 &amp;hellip; 32767&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int&lt;/td>
&lt;td>32 Bit&lt;/td>
&lt;td>-2 147 483 648 &amp;hellip; 2 147 483 647 (-2^31 &amp;hellip; 2^31-1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>long&lt;/td>
&lt;td>64 Bit&lt;/td>
&lt;td>-2^63 &amp;hellip; 2^63-1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>In den Werten von integralen Datentypen sind Underscores erlaubt, um die Lesbarkeit zu erhöhen (1_000_000).&lt;/p>
&lt;p>Beispiele:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">int count = 0;
int million = 1_000_000;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="gleitkomma-datentyp">Gleitkomma-Datentyp&lt;/h4>
&lt;p>Gleitkomma-Datentypen speichern wie der Name bereits sagt, Zahlen mit Nachkommastellen. Diese Zahlen besitzen nur eine bestimmte Genauigkeit, sie dürfen also nicht als unendlich genau betrachtet werden.
Die folgenden Datentypen speichern Zahlen mit Nachkommastellen, sie unterscheiden sich in ihrer Grösse und der Art und Weise wie sie innerhalb von Java abgelegt werden:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Datentyp&lt;/th>
&lt;th>Speicherbedarf&lt;/th>
&lt;th>Bereich&lt;/th>
&lt;th>Interne Ablage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>float&lt;/td>
&lt;td>32 Bit&lt;/td>
&lt;td>+/-1,4E-45 &amp;hellip; +/-3,4E+38&lt;/td>
&lt;td>Dezimalbruch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double&lt;/td>
&lt;td>64 Bit&lt;/td>
&lt;td>+/-4,9E-324 &amp;hellip; +/-1,7E+308&lt;/td>
&lt;td>Gleitkommazahl&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Beispiele:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">float radius = 8.5f;
double area = 16.48739d;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Trotz Nachkommastellen dürfen Fliesskommzahlen des Typs float niemals zur Berechnung von Währungen verwendet werden. Innerhalb von Java wird ein float stets als Dezimalbruch geführt und die Ungenauigkeit verunmöglicht es diesen Datentyp für Währungsrechnungen zu verwenden.&lt;/p>
&lt;h4 id="zeichen-datentyp">Zeichen-Datentyp&lt;/h4>
&lt;p>Ein &lt;strong>char&lt;/strong> ist ein (vorzeichenloser) 16-Bit-Integer-Datentyp, der ein einzelnes Zeichen darstellt. Dieser Datentyp erlaubt die Repräsentation von Zeichen im so genannten Unicode-Zeichensatz.&lt;/p>
&lt;p>Ein einzelnes Zeichen kann eine Ziffer, einen Buchstaben oder ein anderes Symbol sein. Um ein Zeichen zu schreiben, verwenden wir einfache Anführungszeichen wie folgt:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;, &amp;#39;z&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;9&amp;#39;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Zeichenliterale können Symbole eines Alphabets, Ziffern von &amp;lsquo;0&amp;rsquo; bis &amp;lsquo;9&amp;rsquo;, Whitespaces (' &amp;lsquo;) oder andere Zeichen oder Symbole ('$') darstellen. Verwechsle nicht die Zeichen, die Zahlen (&amp;lsquo;9&amp;rsquo;) darstellen mit den Zahlen selbst (9).
Ein Zeichen kann nicht zwei und mehr Ziffern oder Buchstaben enthalten, da es nur ein einziges Symbol darstellt.&lt;/p>
&lt;p>Wir können Zeichen auf verschiedene Arten initialisieren:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Einfache Anführungszeichen&lt;/th>
&lt;th>&lt;code>char A = 'A';&lt;/code>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Wir können ein Char-Literal als Integral-Literal angeben, das den Unicode-Wert des Zeichens darstellt, und Integral-Literale können entweder in Dezimal-, Oktal- oder Hexadezimalform angegeben werden.Der zulässige Bereich liegt zwischen 0 und 65535.&lt;/td>
&lt;td>&lt;code>char A = 65;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>In der Unicode-Darstellung &lt;code>'\\uxxxx'&lt;/code> können Zeichenliterale angegeben werden. Hier steht xxxx für 4 Hexadezimalzahlen.&lt;/td>
&lt;td>&lt;code>char A = '\u0041';&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Beispiele:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">char letter = &amp;#39;a&amp;#39;;
char point = &amp;#39;.&amp;#39;;
letter++; // &amp;#39;b&amp;#39;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="_dont-get-confused_">&lt;em>Don’t get confused:&lt;/em>&lt;/h5>
&lt;ul>
&lt;li>123 ist ein Integer, &amp;ldquo;123&amp;rdquo; ist ein String;&lt;/li>
&lt;li>&amp;lsquo;A&amp;rsquo; ein Zeichen (char), &amp;ldquo;A&amp;rdquo; ist ein String;&lt;/li>
&lt;li>&amp;lsquo;1&amp;rsquo; ist ein Zeichen (char), 1 ist ein Integer;&lt;/li>
&lt;/ul>
&lt;h4 id="logischer-datentyp">Logischer Datentyp&lt;/h4>
&lt;p>Dieser Datentyp bezieht sich nur auf die zwei Werte &lt;em>true&lt;/em> und &lt;em>false&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">boolean done = false;
boolean isBigger = true;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="referenztypen">Referenztypen&lt;/h3>
&lt;p>Nebst primitiven Datentypen gibt es Referenzdatentypen. Eine Variable diesen Typs enthält nicht die Werte selbst wie eine Variable primitiven Typs, sondern nur einen Verweis (Referenz) auf den&lt;br>
Speicherort der Daten. Der Standardwert von Referenzvariablen ist null, welcher besagt, dass die Variable auf kein Objekt verweist.&lt;/p>
&lt;p>Es gibt zwei Unterarten von Referenztypen:&lt;/p>
&lt;ol>
&lt;li>Array: Eine Datenstruktur fester Grösse, die dazu dient, mehrere Elemente gleichen Typs zu speichern&lt;/li>
&lt;li>Objektdatentyp, repräsentiert ein beliebiges Objekt&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h4 id="arrays">Arrays&lt;/h4>
&lt;h5 id="definition">Definition&lt;/h5>
&lt;p>Häufig benötigen Software-Entwickler mehrere zusammengehörige Variablen desselben Datentyps, die logisch oder verwaltungstechnisch zusammengehören. Es wäre aber sehr aufwendig, diese Variablen alle einzeln zu deklarieren und zu verarbeiten. Zudem ist es möglich, dass die Anzahl an Objekten noch unbekannt ist und erst bei der Ausführung des Programms definiert wird. Deswegen wird in Java, wie in anderen Programmiersprachen auch, die Verwendung von Arrays unterstützt. In Arrays lassen sich beliebige primitiven Datentypen und Objekte speichern und systematisch bearbeiten. Alle Variablen haben einen gemeinsamen Namen, werden aber über unterschiedliche Indizes angesprochen.&lt;/p>
&lt;h5 id="deklaration-1">Deklaration&lt;/h5>
&lt;p>Die Deklaration eines Arrays enthält folgende Bestandteile:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Reihenfolge&lt;/th>
&lt;th>W&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1.&lt;/td>
&lt;td>Typ&lt;/td>
&lt;td>&lt;code>String, int, double, char, ...&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2.&lt;/td>
&lt;td>Eckige Klammern&lt;/td>
&lt;td>&lt;code>[]&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.&lt;/td>
&lt;td>Bezeichner / Namen&lt;/td>
&lt;td>&lt;code>words, numbers, values, letters...&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">String[] words;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="länge-eines-arrays">Länge eines Arrays&lt;/h5>
&lt;p>Die Anzahl der Elemente in einem Array wird als Länge eines Arrays bezeichnet. Diese Länge wird zum Zeitpunkt der Erstellung eines Arrays einmal festgelegt. Sie kann später in einem Programm nur durch Definition eines neuen Arrays und dem Kopieren von Werten geändert werden.&lt;/p>
&lt;p>Wir können die Länge eines Arrays mithilfe einer in Java integrierten Funktionalität überprüfen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">words.length
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="indizierung">Indizierung&lt;/h5>
&lt;p>Die Indizes in einem Array reichen immer von 0 bis length-1. Ein Array mit den ersten 100 natürlichen Zahlen hat beispielsweise eine Länge von 100 und Indizes von 0 bis 99.&lt;/p>
&lt;h5 id="syntax">Syntax&lt;/h5>
&lt;p>In Java müssen wir zum Zeitpunkt der Deklaration eines Arrays folgendes angeben:&lt;/p>
&lt;ul>
&lt;li>den Datentyp&lt;/li>
&lt;li>den Namen&lt;/li>
&lt;/ul>
&lt;p>und zum Zeitpunkt der Initialisierung:&lt;/p>
&lt;ul>
&lt;li>die Größe&lt;/li>
&lt;/ul>
&lt;p>Syntaktisch können wir ein Array eines ganzzahligen Datentyps auf folgende Weise deklarieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">String[] words;
String words[];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die zweite Form wird bei uns nicht verwendet.&lt;/p>
&lt;p>Dieser Code deklariert die Variable &lt;em>words&lt;/em>, erstellt das Array-Objekt jedoch noch nicht. Der Operator &lt;em>new&lt;/em> wird in Java zum Erstellen von neuen Objekten verwendet.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">String[] words = new String[5];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Damit wird ein Array-Objekt der Länge 5 instanziiert. Die fünf Elemente dieses Arrays wurden mit Standardwerten initialisiert. Bei einem Array des Datentyps String ist der Default-Wert null. Alle Werte im Array werden also mit null aufgefüllt.&lt;/p>
&lt;p>Wir können auch direkt die Werte der Array-Elemente angeben:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">String[] words = { &amp;#34;Hai&amp;#34;, &amp;#34;Oktopus&amp;#34;, &amp;#34;Rochen&amp;#34;, &amp;#34;Wal&amp;#34;, &amp;#34;Fisch&amp;#34; };
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Es wird also ein Array mit der Grösse 5 und den angegebenen Werten erstellt.&lt;/p>
&lt;h5 id="zugriff-auf-elemente">Zugriff auf Elemente&lt;/h5>
&lt;p>Wenn wir den Wert eines Elements in unserem Array verändern möchten, geschieht dies folgendermaßen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">words[index] = value;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn wir den Wert eines Array-Elements in einer Variablen außerhalb des Arrays speichern wollen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">String value = words[index];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h4 id="string">String&lt;/h4>
&lt;p>Eine Variable, die eine Zeichenkette enthält, hat den Typ String.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">String hello = &amp;#34;Hello, Java&amp;#34;;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Diese Zeichenkette besteht aus 11 Zeichen, einschließlich eines Leerzeichens. Wie wir hier ebenfalls sehen, müssen String-Literale von doppelten Anführungszeichen umgeben sein. Ein Objekt des Typs String ist unveränderlich, die Werte innerhalb eines Strings können also nach dessen Erstellung nicht mehr verändert werden.&lt;/p>
&lt;h5 id="methoden">Methoden&lt;/h5>
&lt;p>Der folgende Code zeigt die Verwendung einiger Methoden der Klasse String. Alle Methoden sind in der API unter &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html">https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html&lt;/a> zu finden.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">123
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">124
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public class StringMethoden {
public static void main(String\[\] args) {
String house = &amp;#34;house&amp;#34;;
/**
* Returns the char value at the specified index (indexing starts from 0)
*/
char o = house.charAt(1);
/**
* Returns the length of this string.
*/
int length = house.length();
/**
* Returns true if and only if this string contains the specified sequence of char values
*/
boolean isContaining = house.contains(&amp;#34;us&amp;#34;);
/**
* Returns the index within this string of the first occurrence of the specified character
*/
int indexChar = house.indexOf(&amp;#39;s&amp;#39;);
/**
* Returns the index within this string of the first occurrence of the specified substring
*/
int indexSubstring = house.indexOf(&amp;#34;us&amp;#34;);
/**
* Tests if this string starts with the specified prefix
*/
boolean startsWithPrefix = house.startsWith(&amp;#34;Ho&amp;#34;); // false
boolean startsWithPrefix2 = house.startsWith(&amp;#34;ho&amp;#34;); // true
/**
* Tests if this string ends with the specified suffix
*/
boolean endsWithSuffix = house.endsWith(&amp;#34;se&amp;#34;); // true
/**
* Returns a new string resulting from replacing all occurrences of oldChar in this string with newChar
*/
String mouse = house.replace(&amp;#39;h&amp;#39;, &amp;#39;m&amp;#39;);
String houseHouse = &amp;#34;House, House&amp;#34;;
String mouseMouse = houseHouse.replace(&amp;#39;H&amp;#39;, &amp;#39;M&amp;#39;);
/**
* Returns a new string that is a substring of this string, starting from the specified index
*/
String applePearLemon = &amp;#34;Apple, pear, lemon&amp;#34;;
String pearLemon = applePearLemon.substring(7);
/**
* Returns a new string that is a substring of this string
*/
String pear = applePearLemon.substring(7, 11);
/**
* Converts all of the characters in this String to upper case
*/
String apple = &amp;#34;Apple&amp;#34;;
String appleUpperCase = apple.toUpperCase(); // APPLE
/**
* Converts all of the characters in this String to lower case.
*/
String appleLowerCase = apple.toLowerCase(); // apple
/**
* Splits this string around matches of the given regular expression, puts them in a String array
*/
String applePear = &amp;#34;Apple, pear&amp;#34;;
String[] fruits = applePear.split(&amp;#34;,\\s&amp;#34;); // \\s means whitespace
/**
* Converts this string to a new character array
*/
char[] charArray = applePearLemon.toCharArray();
/**
* Compares this string to the specified object
*/
String appleOne = &amp;#34;Apple&amp;#34;;
String appleTwo = &amp;#34;Apple&amp;#34;;
boolean isEqual = appleOne.equals(appleTwo);
/**
* Compares two strings lexicographically.
* The comparison is based on the Unicode value of each character in the strings.
* The result is a negative integer if this String object lexicographically precedes the argument string.
* The result is a positive integer if this String object lexicographically follows the argument string.
* The result is zero if the strings are equal
*/
String abcd = &amp;#34;abcd&amp;#34;;
String cdef = &amp;#34;cdef&amp;#34;;
if (abcd.compareTo(cdef) &amp;lt; 0) {
System.out.println(abcd + &amp;#34; precedes &amp;#34; + cdef);
}
if (house.compareTo(house) == 0) {
System.out.println(house + &amp;#34; is equal to &amp;#34; + house);
}
if (cdef.compareTo(abcd) &amp;gt; 0) {
System.out.println(cdef + &amp;#34; follows &amp;#34; + abcd);
}
/**
* Capital letters precede lower case letters
*/
String houseLowerCase = &amp;#34;house&amp;#34;;
String houseUpperCase = &amp;#34;HOUSE&amp;#34;;
if (houseLowerCase.compareTo(houseUpperCase) &amp;gt; 0) {
System.out.println(houseUpperCase + &amp;#34; precedes + &amp;#34; houseLowerCase);
}
/**
* Compares two strings lexicographically, ignoring case differences
*/
System.out.println(houseLowerCase.compareToIgnoreCase(houseUpperCase));
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="scanner">Scanner&lt;/h2>
&lt;p>Eine Möglichkeit, Benutzereingaben in Java vorzunehmen, besteht in der Verwendung der Scanner-Klasse, die verwendet wird, indem zuerst die Definition der Klasse wie in Zeile 1 importiert und dann ein Objekt dieser Klasse wie in Zeile 6 erstellt wird.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">import java.util.Scanner;
public class TakeInput {
public static void main (String\[\] args) {
Scanner scanner = new Scanner(System.in);
System.out.println(&amp;#34;Enter your name: &amp;#34;);
String name = scanner.nextLine();
System.out.println(&amp;#34;Your name is: &amp;#34; + name);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Zeile 1&lt;/strong>&lt;/p>
&lt;p>Der erste Schritt besteht darin, die Scanner-Klasse zu importieren, damit sie im folgenden Code verwendet werden kann. Die &lt;em>Java&lt;/em> Scanner-Klasse stammt aus dem Paket &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/package-summary.html">java.util&lt;/a>.
Es ist einfach zu bedienen, muss jedoch importiert werden, damit die Klasse funktioniert.&lt;/p>
&lt;p>&lt;strong>Zeile 6&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Wir deklarieren den Datentyp als &lt;em>Scanner&lt;/em> und geben ihm den Bezeichner &lt;em>scanner&lt;/em>&lt;/li>
&lt;li>Wir weisen der Variable scanner ein neues Objekt zu, welches den System-Eingabestream enthält (&lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/System.html#in">System.in&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Zeile 8&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Wir deklarieren eine Variable vom Datentyp String mit dem Bezeichner name&lt;/li>
&lt;li>Wir weisen der Variable name das Resultat der Methode &lt;em>scanner.nextLine()&lt;/em> zu&lt;/li>
&lt;li>Diese Methode nimmt die Tastatureingabe vom Benutzer auf der Kommandozeile entgegen. Sie wird beendet, wenn der Benutzer die Enter-Taste drückt&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="statische-methoden">Statische Methoden&lt;/h2>
&lt;p>Mittlerweile hast du bereits einige statische Methoden kennengelernt, wie zum Beispiel die Main-Methode oder die Methode println() der Klasse System oder die Methode valueOf() der String-Klasse.
Hier wollen wir uns nun genauer anschauen, was statische Methoden sind, denn diese wirst du unter anderem für das Lösen der Übungen benötigen.
Das Keyword &lt;em>static&lt;/em> ist ein sehr nützliches Werkzeug in Java. Bei statischen Methoden sind einige wichtige Punkte zu beachten.&lt;/p>
&lt;ul>
&lt;li>Diese Methoden gehören nicht zu einer Referenz von einem bestimmten Objekt&lt;/li>
&lt;li>Diese Methoden werden über den Klassennamen aufgerufen und nicht über eine Referenz von einem bestimmten Objekt&lt;/li>
&lt;/ul>
&lt;p>Wenn also in einem Methodenkopf das Keyword &lt;em>static&lt;/em> steht, dann weisst du, dass es sich um eine statische Methode handeln muss.
Schauen wir uns unterschiedliche Methodendeklarationen an (folgendes gilt für statische Methoden wie auch für nicht-statische Methoden):
Wenn eine Methode einen Wert an ihren Aufrufer zurückgeben soll, sprechen wir von einer Methode mit einem &lt;em>Rückgabewert&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static returnType methodName() {
return returnValue; // der Typ des Rückgabewerts muss vom Typ sein, welcher im Methodenkopf steht
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wir sehen, dass in der Methodendeklaration angeben werden muss, welcher Typ zurückgegeben wird.&lt;/p>
&lt;p>Wenn eine Methode keinen Wert zurückgegeben soll, verwenden wir das Keyword &lt;em>void&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static void methodName() {
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das Keyword &lt;em>return&lt;/em> ist in Methoden ohne Rückgabewert weiterhin zulässig um die Methode zu verlassen. Die Angabe eines Rückgabewerts entfällt in diesem Fall.&lt;/p>
&lt;p>Wir können auch Werte einer Methode übergeben – hierbei sprechen wir von &lt;em>Parametern&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static void methodName(type identifier) {
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ein Parameter besteht immer aus dem Datentyp und einem Bezeichner. Wir können beliebig viele Parameter an eine Methode übergeben. Gemäss den SBB Code Conventions (Regeln für den Programmcode) sollte eine Methode nicht mehr als acht Parameter haben.&lt;/p>
&lt;h4 id="regeln">Regeln&lt;/h4>
&lt;ul>
&lt;li>Die Reihenfolge der Schlüsselwörter im Methodenkopf darf nicht verändert werden&lt;/li>
&lt;li>Bei der Auswahl des Methodennamens müssen die gleichen Regeln wie bei der Benennung einer Variablen eingehalten werden&lt;/li>
&lt;li>Keine doppelten Methoden: Jede Methodensignatur darf in einer Klasse nur einmal vorkommen&lt;/li>
&lt;/ul>
&lt;h4 id="aufruf">Aufruf&lt;/h4>
&lt;p>Innerhalb der gleichen Klasse&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">methodName();
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ausserhalb:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">ClassName.methodName();
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="mathematik--logik">Mathematik &amp;amp; Logik&lt;/h2>
&lt;p>Mathe in Java ist sehr einfach. Beachte, dass mathematische Java-Operationen einer bestimmten Reihenfolge folgen (Punkt-Operationen vor Strich-Operationen)&lt;/p>
&lt;h4 id="arithmetische-operatoren">Arithmetische Operatoren&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Symbol&lt;/th>
&lt;th>Arithmetische Operation&lt;/th>
&lt;th>Beispiel&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>+&lt;/td>
&lt;td>Addition&lt;/td>
&lt;td>&lt;code>int sum = 2 + 3;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>Subtraktion&lt;/td>
&lt;td>&lt;code>int difference = 5 – 2;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/&lt;/td>
&lt;td>Division&lt;/td>
&lt;td>&lt;code>int quotient = 15 / 5;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>*&lt;/td>
&lt;td>Multiplikation&lt;/td>
&lt;td>&lt;code>int product = 3 * 4;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%&lt;/td>
&lt;td>Division mit Rest&lt;/td>
&lt;td>&lt;code>int remainder = 7 % 3;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>++&lt;/td>
&lt;td>Post und Prä-Inkrement (1 addieren)&lt;/td>
&lt;td>&lt;code>count++; // (count = count + 1)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>- -&lt;/td>
&lt;td>Post und Prä-Dekrement (1 subtrahieren)&lt;/td>
&lt;td>&lt;code>count--; // (count = count – 1)&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="post--und-prä-inkrement">Post- und Prä-Inkrement&lt;/h4>
&lt;p>Das Inkrementieren und Dekrementieren von Variablen ist eine sehr häufige Operation.
Von diesem Operator gibt es zwei Varianten:&lt;/p>
&lt;ul>
&lt;li>Er kann vor der Variable stehen, wie in &lt;code>++i&lt;/code> (Präfix-Schreibweise) oder&lt;/li>
&lt;li>dahinter, wie bei &lt;code>i++&lt;/code> (Postfix-Schreibweise)&lt;/li>
&lt;/ul>
&lt;p>Der Präfix-Operator verändert die Variable vor der Auswertung der Programmzeile, und der Postfix-Operator ändert sie nach der Auswertung der Programmzeile. Mit anderen Worten: Nutzen wir einen Präfix-Operator, so wird die Variable erst herauf- bzw. heruntergesetzt und dann der Wert geliefert. Und beim Post-Operator ist es genau umgekehrt.&lt;/p>
&lt;h4 id="postinkrement">Postinkrement&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">int i = 5;
int c = i++; // c = 5
// ab hier ist i = 6
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="präinkrement">Präinkrement&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">int i = 5;
int d = ++i; // d = 6
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="postdekrement">Postdekrement&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">int i = 5;
int e = i--; // e = 5
// ab hier ist i = 4
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="prädekrement">Prädekrement&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">int i = 5;
int f = --i; // f = 4
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h4 id="vegleichsoperatoren">Vegleichsoperatoren&lt;/h4>
&lt;p>Die Ergebnisse dieser Operationen sind stets Boolean-Werte.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Symbol&lt;/th>
&lt;th>Vergleich&lt;/th>
&lt;th>Beispiel&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;gt;&lt;/td>
&lt;td>grösser als&lt;/td>
&lt;td>5 &amp;gt; 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;&lt;/td>
&lt;td>kleiner als&lt;/td>
&lt;td>4 &amp;lt; 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt;=&lt;/td>
&lt;td>grösser gleich&lt;/td>
&lt;td>3 &amp;gt;= 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;=&lt;/td>
&lt;td>kleiner gleich&lt;/td>
&lt;td>3 &amp;lt;= 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>==&lt;/td>
&lt;td>gleich&lt;/td>
&lt;td>2 == 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!=&lt;/td>
&lt;td>ungleich&lt;/td>
&lt;td>2 != 4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="boolsche-operatoren">Boolsche Operatoren&lt;/h4>
&lt;p>Diese Operatoren basieren auf der boolschen Algebra. Daher arbeiten boolsche Operatoren direkt mit boolschen Werten. Es gibt vier Arten von boolschen Operatoren. Schauen wir uns zunächst ihre Symbole und deren Inhalt in der folgenden Tabelle an, bevor wir erläutern, welche Funktionen sie ausführen.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Symbol&lt;/th>
&lt;th>Boolsche Operation&lt;/th>
&lt;th>Erklärung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;amp;&amp;amp;&lt;/td>
&lt;td>Logisches UND (AND)&lt;/td>
&lt;td>&lt;em>AND&lt;/em> gibt nur dann true zurück, wenn die Ausdrücke auf beiden Seiten des Operators true sind (Hinweis: Dieser Ausdruck wird &lt;em>lazy&lt;/em> evaluiert. Dies bedeuetet, wenn der erste Ausdruck &lt;em>false&lt;/em> ist, wird der zweite Ausdruck nicht mehr ausgewertet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>||&lt;/td>
&lt;td>Logisches ODER (OR)&lt;/td>
&lt;td>&lt;em>OR&lt;/em> gibt true zurück, wenn der Ausdruck auf einer oder beiden Seiten des Operators true ist (Hinweis: Dieser Ausdruck wird &lt;em>lazy&lt;/em> evaluiert. Dies bedeuetet, wenn der erste Ausdruck &lt;em>true&lt;/em> ist, wird der zweite Ausdruck nicht mehr ausgewertet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!&lt;/td>
&lt;td>Logisches NICHT (NOT)&lt;/td>
&lt;td>&lt;em>NOT&lt;/em> kehrt den Wert des darauffolgenden booleschen Ausdrucks um. Aus &lt;em>true&lt;/em> wird also &lt;em>false&lt;/em> und umgekehrt&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>^&lt;/td>
&lt;td>Logisches ENTWEDER-ODER (XOR)&lt;/td>
&lt;td>&lt;em>XOR&lt;/em> gibt true zurück, wenn die beiden Ausdrücke unterschiedlich sind&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;amp;&lt;/td>
&lt;td>Logisches UND (AND)&lt;/td>
&lt;td>Im Unterschied zum obigen &lt;em>AND&lt;/em> wertet dieses immer beide Ausdrücke aus&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>|&lt;/td>
&lt;td>Logisches ODER (OR)&lt;/td>
&lt;td>Im Unterschied zum obigen &lt;em>OR&lt;/em> wertet dieses immer beide Ausdrücke aus.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="kontrollstrukturen">Kontrollstrukturen&lt;/h2>
&lt;p>Kontrollstrukturen dienen dazu, den Ablauf eines Programms zu steuern.
Damit bietet eine Kontrollstruktur die Möglichkeit, Programmteile nur unter gewissen Bedingungen ( → bedingte Anweisungen) auszuführen oder Programmteile zu wiederholen ( → Schleifen).&lt;/p>
&lt;h4 id="bedingte-anweisungen">Bedingte Anweisungen&lt;/h4>
&lt;p>Eine bedingte Anweisung ist eine Konstruktion, mit der ein Programm abhängig vom Wert eines boolschen Ausdrucks (true oder false) unterschiedliche Wege geht.&lt;/p>
&lt;h5 id="if-statement">If-Statement&lt;/h5>
&lt;p>Die einfachste Form der bedingten Anweisung besteht aus dem Schlüsselwort if, einem boolschen Ausdruck und einem Block.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">if (expression) {
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn der Ausdruck true ist, werden die Anweisungen im Codeblock ausgeführt. Andernfalls werden sie übersprungen.&lt;/p>
&lt;h5 id="if-else-statement">If-Else Statement&lt;/h5>
&lt;p>Der obige if-Fall kann mit dem Schlüsselwort else erweitert werden, um alternative Aktionen auszuführen, wenn der Ausdruck false ist.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">if (expression) {
// do something
} else {
// do something else
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Im folgenden Beispiel gibt das Programm je nach Wert von num (gerade oder ungerade) unterschiedlichen Text aus.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">int num = ...; // the num is initialized by some value
if (num % 2 == 0) {
System.out.println(&amp;#34;It&amp;#39;s an even number&amp;#34;);
} else {
System.out.println(&amp;#34;It&amp;#39;s an odd number&amp;#34;);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Da eine Zahl nur gerade oder ungerade sein kann, wird nur eine der beiden Ausgaben gemacht.&lt;/p>
&lt;h5 id="else-if-statements">Else-If-Statements&lt;/h5>
&lt;p>Ein Else-Statement kann durch ein If-Statement erweitert werden.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">if (expression0) {
// do something
} else if (expression1) {
// do something else 1
} else if (expressionN) {
// do something else N
} else {
// in all other cases: do this…
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn also der erste Ausdruck false ist, wird der zweite Ausdruck überprüft, usw.&lt;/p>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">long dollars = ...; // your budget
if (dollars &amp;lt; 1000) {
System.out.println(&amp;#34;Buy a laptop&amp;#34;);
} else if (dollars &amp;lt; 2000) {
System.out.println(&amp;#34;Buy a personal computer&amp;#34;);
} else if (dollars &amp;lt; 100_000) {
System.out.println(&amp;#34;Buy a server&amp;#34;);
} else {
System.out.println(&amp;#34;Buy a data center or a quantum computer&amp;#34;);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="switch-statement">Switch-Statement&lt;/h5>
&lt;p>Die Switch-Anweisung bietet eine Möglichkeit, basierend auf dem Wert einer einzelnen Variablen (kein Ausdruck!) zwischen mehreren Fällen zu wählen. Die Variable kann eine Ganzzahl, ein Zeichen, eine Zeichenfolge oder eine Aufzählung sein.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">switch (variable) {
case value1:
// do something here
break;
case value2:
// do something here
break;
//... other cases
case valueN:
// do something here
break;
default:
// do something by default
break; // it can be omitted
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Schlüsselwörter switch und case werden hier immer benötigt. Die Schlüsselwörter break und default sind optional. Das Schlüsselwort break verlässt die Switch-Anweisung.
Wenn ein Fall nicht über das Keyword &lt;em>break&lt;/em> verfügt, wird auch der darauffolgende Fall ausgewertet. Dies ist spannend, um die einzelnen Auswertungen verketten zu können. Der Default-Fall wird ausgewertet, wenn kein Fall mit dem Variablenwert übereinstimmt.&lt;/p>
&lt;h4 id="schleifen-loops">Schleifen (Loops)&lt;/h4>
&lt;p>Manchmal müssen wir einen Codeblock für eine bestimmte Anzahl wiederholen. Zu diesem Zweck stellt Java die Schleife bereit. Diese Schleife wird häufig verwendet, um über einen Wertebereich oder durch ein Array zu iterieren. For-Loops arbeiten mit einem Schleifenzähler, welcher sehr gut für Indizes von Arrays verwendet werden kann. Bei allen Schleifen ist Vorsicht geboten, da es rasch zu einer unendlichen Anzahl von Ausführungen kommen kann.&lt;/p>
&lt;h5 id="for-loop">For-Loop&lt;/h5>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">for (initialization; condition; modification) {
// do something
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Bevor die Schleife beginnt, wird einmal die Initialisierungsanweisung (initialization) ausgeführt. Wir bezeichnen diese Variable als Schleifenvariable. Es sind mehrere Schleifenvariablen erlaubt, sie können durch Kommas getrennt werden.&lt;/li>
&lt;li>Die Bedingung (condition) ist ein boolscher Ausdruck, der die Notwendigkeit der nächsten Iteration bestimmt. Wenn die Auswertung der Bedingung false ist, wird die Schleife beendet – ansonsten folgt eine weitere Iteration&lt;/li>
&lt;li>Die Modifikation ist eine Anweisung, die den Wert der Schleifenvariablen verändert. Sie wird nach jeder Iteration aufgerufen. Normalerweise wird der Wert der Variable inkrementiert oder dekrementiert.&lt;/li>
&lt;/ul>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">int n = 9;
for (int i = 0; i &amp;lt;= n; i++) {
System.out.print(i + &amp;#34; &amp;#34;);
}
// Output: 0 1 2 3 4 5 6 7 8 9
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Innerhalb des Schleifenkörpers kann das Programm wiederum alle möglichen Java-Anweisungen ausführen. Es kann sogar andere Schleifen enthalten. Wie bei allen Blöcken sind die Schleifenvariablen nur innerhalb des Schleifenkörpers sichtbar.
Die Schleifenvariable wird meistens mit einfachen Variablennamen wie i, j, k oder index benannt.&lt;/p>
&lt;p>Hier ist ein weiteres Beispiel. Berechnen wir die Summe der Ganzzahlen von 1 bis 10 mit der for-Schleife.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">int startIncl = 1;
int endExcl = 11;
int sum = 0;
for (int i = startIncl; i &amp;lt; endExcl; i++) {
sum += i;
}
System.out.println(sum); // Output: 55
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="for-each-loop">For-Each Loop&lt;/h5>
&lt;p>Der For-Each-Loop durchläuft alle Elemente eines Arrays oder einer Collection. Die Angaben aus dem For-Loop werden durch eine Schleifenvariable und ein Doppelpunkt ersetzt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">int[] numbers = { 125, 381, 98, 12, 235 };
for (int number: numbers) {
System.out.print(number + &amp;#34; &amp;#34;);
}
// Output: 125 381 98 12 235
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der gezeigte Loop wird also fünfmal ausgeführt und der Wert der Variable &lt;em>number&lt;/em> nimmt bei jedem Durchlauf den jeweils nächsten Wert aus dem Array an.&lt;/p>
&lt;h5 id="while-loop">While-Loop&lt;/h5>
&lt;p>Die while- Schleife besteht aus einem Codeblock und einer Bedingung (einem booleschen Ausdruck). Wenn die Bedingung erfüllt ist, wird der Code innerhalb des Blocks ausgeführt. Dieser Code wird solange wiederholt, bis die Bedingung nicht mehr erfüllt ist.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">while (condition) {
// body: do something
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Innerhalb des Schleifenkörpers kann das Programm wiederum alle möglichen Java-Anweisungen ausführen. Es kann sogar andere Schleifen enthalten.&lt;/p>
&lt;p>Beispiel: Die folgende Schleife gibt Ganzzahlen aus, während eine Variable kleiner als 5 ist.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">int i = 0;
while (i &amp;lt; 5) {
System.out.print(i + &amp;#34; &amp;#34;);
i++;
}
// Output: 0 1 2 3 4
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="do-while-loop">Do-While Loop&lt;/h5>
&lt;p>Die Do-While-Schleife besteht aus einem Codeblock und einer Bedingung (einem boolschen Ausdruck) am Ende. Im Gegensatz zur While-Schleife wird die Do-While-Schleife mindestens einmal ausgeführt, da die Bedingung am Ende steht.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">do {
// body: do something
} while (condition);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Labs: Lab JUnit-Tests</title><link>/labs/java/junit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/junit/</guid><description>
&lt;h2 id="1-einleitung">1: Einleitung&lt;/h2>
&lt;p>&lt;em>TODO: Beschreibung zu diesem Lab&lt;/em>&lt;/p></description></item><item><title>Docs: Was ist Git</title><link>/docs/git/was-ist-git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/was-ist-git/</guid><description>
&lt;blockquote>
&lt;p>Git [ɡɪt] ist eine freie Software zur verteilten Versionsverwaltung von Dateien, die durch Linus Torvalds initiiert wurde.&lt;/p>
&lt;/blockquote>
&lt;h2 id="inhalt">Inhalt&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#was-ist-versionsverwaltung">Was ist Versionsverwaltung&lt;/a>&lt;/li>
&lt;li>&lt;a href="#geschichte">Geschichte&lt;/a>&lt;/li>
&lt;li>&lt;a href="#name">Name&lt;/a>&lt;/li>
&lt;li>&lt;a href="#wie-funktioniert-git">Wie funktioniert Git&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="was-ist-versionsverwaltung">Was ist Versionsverwaltung&lt;/h2>
&lt;p>Eine Versionsverwaltung ist ein System, welches Änderungen an einer oder mehreren Dateien über die Zeit protokolliert, um die Entwicklung nachvollziehbar zu machen und womit man jederzeit auf bestimmte vorherige Versionen zugreifen kann.&lt;/p>
&lt;h3 id="lokale-versionsverwaltung">Lokale Versionsverwaltung&lt;/h3>
&lt;p>Eine lokale Versionsverwaltung hat wohl fast jeder schon mal bei sich eingesetzt. Die einfachste Version davon ist, wenn man zum Beispiel eine Datei kopiert und an der Kopie weiter arbeitet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#f92672">[&lt;/span>user@computer ~/gymi/arbeit/&lt;span style="color:#f92672">]&lt;/span>$ ls
matura_arbeit.docx matura_arbeit_fastfertig.docx matura_arbeit_wirklichfertig.docx matura_arbeit_wirklichfertig_formatiert.docx matura_final.docx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dies ist jedoch sehr Fehleranfällig, da man schnell die falsche Datei erwischt. Aus diesem Grund, haben Programmierer bereits vor langer Zeit, lokale Versionsverwaltungssysteme entwickelt, die alle Änderungen an allen relevanten Dateien in einer Datenbank verwalten. Ein Beispiel dafür ist &lt;a href="https://www.gnu.org/software/rcs/">RCS&lt;/a>&lt;/p>
&lt;h3 id="zentrale-versionsverwaltung">Zentrale Versionsverwaltung&lt;/h3>
&lt;p>Um die Zusammenarbeit von mehreren Personen zu vereinfachen wurden zentrale Versionsverwaltungssysteme entwickelt. Diese Systeme basieren auf einem zentralen Server der alle Dateien verwaltet. User holen eine Datei ab (Auschecken oder engl. to check out) editieren sie und nur berechtigte User dürfen die Datei anschliessend wieder auf den Server stellen. Ein Beispiel dafür ist &lt;a href="https://subversion.apache.org/">SVN&lt;/a>&lt;/p>
&lt;h3 id="verteilte-versionsverwaltung">Verteilte Versionsverwaltung&lt;/h3>
&lt;p>Im Gegensatz zu zentralen Systeme wo der Benutzer nur den letzten Stand zur Verfügung hat, kopiert er bei verteilten Versionsverwaltungen eine vollständiger Klon des Repositories auf sein System und hat somit auch die komplette Geschichte lokal. Dies vereinfacht dem Entwickler das lokale arbeiten und erhöht die Ausfallsicherheit. Zusätzlich können solche System gut mit verschiedenen externen Repositories (Remotes) umgehen was die Zusammenarbeit weiter vereinfacht. Ein Beispiel dafür ist &lt;a href="https://git-scm.com">GIT&lt;/a>&lt;/p>
&lt;h2 id="geschichte">Geschichte&lt;/h2>
&lt;p>Git entstand aufgrund einer Lizenzänderung von &lt;code>BitKeeper&lt;/code>, der Versionsverwaltung welche vom Linux Kernel bis 2005 verwendet wurde. Da die Kernel Entwickler die Software nicht mehr kostenlos nutzen konnten, entwickelten sie selber eine Lösung. Ziele der neuen Software waren Geschwindigkeit, einfaches Design, gute Unterstützung von nicht linearer Entwicklung, dezentrale Struktur und die Fähigkeit grosse Projekte effektiv zu verwalten. Git wird seit 2005 kontinuierlich weiterentwickelt.&lt;/p>
&lt;h2 id="name">Name&lt;/h2>
&lt;p>Der Name „Git“ bedeutet in der britischen Umgangssprache so viel wie „Blödmann“. Linus Torvalds erklärte seine Wahl des ungewöhnlichen Namens mit einem Witz sowie damit, dass das Wort praktikabel und in der Softwarewelt noch weitgehend unbenutzt war:&lt;/p>
&lt;blockquote>
&lt;p>„Ich bin ein egoistischer Mistkerl, und ich benenne all meine Projekte nach mir. Zuerst ‚Linux‘, jetzt eben ‚Git‘.“&lt;/p>
&lt;/blockquote>
&lt;p>– Linus Torvalds&lt;/p>
&lt;p>Dazu muss man anmerken, dass Linus den Namen Linux nur widerwillig akzeptierte.&lt;/p>
&lt;h2 id="wie-funktioniert-git">Wie funktioniert Git&lt;/h2>
&lt;p>Git funktioniert im Gegensatz zu den meisten anderen Versionsverwaltungen nicht indem es eine Liste von Änderungen an einer Datei abspeichert, sondern eher wie ein Dateisystem, welches bei jedem Commit ein Snapshot aller Dateien anlegt. Um effizient zu bleiben, werden unveränderte Dateien nicht kopiert sondern nur verknüpft. Weiter stellt Git die Integrität aller verwalteten Dateien sicher, indem es eine Prüfsumme jeder Datei anlegt. Dies verunmöglicht Änderungen an Dateien, ohne dass es Git mitbekommen würde.&lt;/p>
&lt;h3 id="drei-zustände-einer-datei">Drei Zustände einer Datei&lt;/h3>
&lt;p>Eine Datei in einem Git Repository kann drei (Haupt-) Zustände haben:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Modified&lt;/strong>: Die Datei wurde geändert aber noch nicht in die lokale Datenbank eingecheckt.&lt;/li>
&lt;li>&lt;strong>Staged&lt;/strong>: Die Datei wurde im aktuellen Zustand für den nächsten Commit vorgemerkt.&lt;/li>
&lt;li>&lt;strong>Commited&lt;/strong>: Die Datei ist im aktuellen Zustand in die lokale Datenbank eingecheckt.&lt;/li>
&lt;/ul>
&lt;h3 id="minimaler-workflow">Minimaler Workflow&lt;/h3>
&lt;p>Hat man ein Repository von einem anderen Rechner &lt;em>geklont&lt;/em>, kann man eine oder mehrere Dateien im Verzeichnisbaum editieren. Anschliessend &lt;em>staged&lt;/em> man diese Änderungen und &lt;em>commited&lt;/em> diese anschliessend.&lt;/p></description></item><item><title>Docs: JavaScript: Konsole</title><link>/docs/web/javascript/02_js_browser_tools/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/javascript/02_js_browser_tools/</guid><description>
&lt;h2 id="eine-nachricht-loggen">Eine Nachricht loggen&lt;/h2>
&lt;p>In Java hast du Text mit &lt;code>System.out.println(...)&lt;/code>, in C# mit &lt;code>Console.WriteLine(...)&lt;/code> und in Python vielleicht mit &lt;code>print(...)&lt;/code> geloggt. Genau das gibt es auch in JavaScript.&lt;/p>
&lt;p>In einer HTML-Datei kannst du folgendes hinzufügen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
...
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;hello world&amp;#39;&lt;/span>);
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Um diese Meldung sehen zu können, musst du die Konsole des Browsers öffnen. Dies kannst du machen, indem du die Entwickler-Tools des Browsers öffnest (z.B. mit der [F12]-Taste). Anschliessend navigierst du zum &amp;ldquo;Konsole&amp;rdquo;-Tab. Nun solltest du die geloggte Nachricht entdecken können:&lt;/p>
&lt;p>&lt;img src="../images/console.png" alt="console">&lt;/p>
&lt;h2 id="code-direkt-im-browser-ausführen">Code direkt im Browser ausführen&lt;/h2>
&lt;p>Du kannst Code direkt in der Konsole des Browsers ausführen lassen. Klicke hierfür in das Eingabefeld unterhalt deiner geloggten Nachricht. Dort kannst du dann folgendes reinkopieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Nun sollten in deiner Konsole die Zahlen 0 - 9 geloggt worden sein. Den Code solltest du bereits seit deiner Einführung in Java verstehen. Das einzig neue hier ist, dass du hier die Nummer-Variable mit &lt;code>let&lt;/code> deklariert hast.&lt;/p>
&lt;p>Du hast gesehen, wie einfach du Code auf der Website mit Hilfe der Konsole ausführen kannst. Die Konsole ist ein sehr mächtiges Tool, das die Entwicklung mit JavaScript extrem vereinfachen kann. Bevor du Code in der IDE (also deiner Entwicklungsumgebung) eingibst, kannst du vorher in der Konsole ausprobieren, ob dein Code zum gewünschten Resultat führt.&lt;/p></description></item><item><title>Docs: Erste Seite erstellen</title><link>/docs/web/html_css/02_html_first_code/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/02_html_first_code/</guid><description>
&lt;h2 id="eine-html-seite-mit-formatiertem-text-erstellen">Eine HTML-Seite mit formatiertem Text erstellen&lt;/h2>
&lt;p>Wir beginnen ganz unkompliziert. Erstellen wir zuerst eine Text-Datei. Dafür erstellen wir zuerst ein Ordner, in dem wir später unsere Projekt-Dateien speichern. Anschliessend kannst du diesen Ordner mit der IDE (Entwicklungsumgebung) deiner Wahl öffnen (hier VS Code). Erstelle nun eine neue HTML-Datei im soeben erstellten Ordner. In VS Code kannst du das z.B. wie folgt machen:&lt;/p>
&lt;p>&lt;img src="../vs-code-create-file.png" alt="createFile" title="Erstelle eine neue Datei, indem du im Explorer von VS Code mit deiner Maus über deinen Ordner bewegst. Klicke dann auf das Datei-Symbol und gib einen Dateinamen an, der mit .html endet.">&lt;/p>
&lt;p>Fülle diese Datei nun mit irgendeinem Text. Speichere diese Datei. Kopiere nun den Pfad zu dieser Datei. In VS Code kannst du den Pfad mit einem Rechtsklick auf die Datei kopieren:&lt;/p>
&lt;p>&lt;img src="../vs-code-copy-path.png" alt="copyPath" title=" ">&lt;/p>
&lt;p>Gib diesen Pfad nun im Browser deiner Wahl ein. Du solltest nun einen unformatierten Text im Browser sehen:&lt;/p>
&lt;p>&lt;img src="../unformated-html-file.png" alt="unformatedHtmlFile" title=" ">&lt;/p>
&lt;p>Abwohl du vorher evtl. Zeilenumbrüche und mehrer Leerschläge hattest, verschwinden diese im Browser nun. Dies kannst du umgehen, indem den Text mit Hilfe von HTML-Tags formatierst. Den HTML-Code könnte z.B. dann so aussehen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Kleiner Witz&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Wie viele Softwareentwickler braucht man,
um eine Glühbirne auszuwechseln?&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Keinen, das ist ein Hardware-Problem!&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Nun hast du eine Seite mit formatiertem Text:&lt;/p>
&lt;p>&lt;img src="../formated-html.png" alt="formatedHtmlFile" title=" ">&lt;/p>
&lt;p>Was haben wir hier genau gemacht? Das erfährst du auf der nächsten Seite.&lt;/p></description></item><item><title>Docs: Einführung in TypeScript</title><link>/docs/web/angular/03_1_intro_typescript/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/03_1_intro_typescript/</guid><description>
&lt;h2 id="was-ist-typescript">Was ist TypeScript&lt;/h2>
&lt;p>Die Programmiersprache wurde von Microsoft entwickelt und wurde im Jahr 2012 mit der ersten Version veröffentlicht.
Seitdem wird die Programmiersprache kontinuierlich weiterentwickelt. Zahlreiche JavaScript-Frameworks setzen heute auf die Verwendung von TypeScript.
Dazu gehören zum Beispiel Angular 2+ und React.&lt;/p>
&lt;p>TypeScript bildet eine Obermenge von JavaScript, erweitert also JavaScript um bestimmte Features.
Es handelt sich dabei also um ein sogenanntes Superset von JavaScript.&lt;/p>
&lt;p>Da Quellcode geschrieben in TypeScript zu JavaScript transpiliert wird, ist der Code in jedem Browser lauffähig.&lt;/p>
&lt;h2 id="vorteile-von-typescript">Vorteile von TypeScript&lt;/h2>
&lt;ul>
&lt;li>TypeScript hebt Fehler während der Kompilierung hervor, während JavaScript - zur Laufzeit.&lt;/li>
&lt;li>TypeScript unterstützt statische Typisierung.&lt;/li>
&lt;li>Ermöglicht bessere Code-Strukturierung und Objekt-Orientierte Programmiertechniken.&lt;/li>
&lt;li>TypeScript ist in jedem Browser oder JS Engine lauffähig.&lt;/li>
&lt;li>Hervorragendes &amp;ldquo;Tooling&amp;rdquo; mit IntelliSense, das beim Hinzufügen des Codes aktive Hinweise liefert.&lt;/li>
&lt;/ul>
&lt;h2 id="grundlegende-syntax">Grundlegende Syntax&lt;/h2>
&lt;p>Da es sich bei TypeScript um ein Superset von JavaScript handelt, ist JavaScript-Code auch gültiger TypeScript-Code. Jedoch fügt TypeScript darüber hinaus viele neue Funktionen hinzu.&lt;/p>
&lt;p>Mit TypeScript wird JavaScript mehr wie eine stark typisierte, objektorientierte Sprache, die C # und Java ähnelt. Dies bedeutet, dass TypeScript-Code für grosse Projekte leichter zu verwenden ist und dass Code leichter zu verstehen und zu verwalten ist. Die starke Typisierung bedeutet auch, dass die Sprache vorkompiliert werden kann und dass Variablen keine Werte zugewiesen werden können, die ausserhalb ihres angegebenen Bereichs liegen. Wenn zum Beispiel eine TypeScript-Variable als Zahl deklariert ist, kann man dieser Variable keinen Textwert zuweisen.&lt;/p>
&lt;h2 id="typanmeldungen">Typanmeldungen&lt;/h2>
&lt;p>Typdeklarationen können zu Variablen, Funktionsparametern und Funktionsrückgabetypen hinzugefügt werden.
Der Typ folgt jeweils nach einem Doppelpunkt hinter dem Variablennamen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript"> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Compiler überprüft dann die Typen während des Kompilierens und meldet allfällige Typfehler.&lt;/p>
&lt;p>Die verschiedenen Grundtypen von TypeScript sind &lt;a href="https://www.typescriptlang.org/docs/handbook/basic-types.html">hier&lt;/a> ersichtlich.&lt;/p>
&lt;h2 id="der-objektorientierte-ansatz">Der Objektorientierte Ansatz&lt;/h2>
&lt;p>Bei der objektorientierten Programmierung handelt es sich um einen Programmierstil / eine Denkweise.&lt;/p>
&lt;p>Man kann sich das so vorstellen, dass alles in der objektorientierten Programmierung durch Objekte abgebildet wird.
Jedes &amp;ldquo;Teil&amp;rdquo; eines Programmes wird durch ein Objekt beschrieben.&lt;/p>
&lt;p>Ein Beispiel:&lt;/p>
&lt;blockquote>
&lt;p>In einer Spielewelt gibt es einen frei herumlaufenden Hund.
Dann wäre dieser Hund nichts anderes als ein Objekt.
Nun könnte man sich fragen, wie man diesen Hund wahrnimmt, denn nicht jeder Hund ist gleich.
Sie könnten sich in Rasse, Gattung etc. unterscheiden. Ein Objekt kann also verschiedene Eigenschaften besitzen,
diese werden auch Attribute genannt.&lt;/p>
&lt;/blockquote>
&lt;p>Nun kann sich unser Hund von Anderen unterscheiden, jedoch kann er noch nicht bellen. Deshalb haben
Objekte auch Funktionen (Methoden). In unserem Beispiel könnte der Hund z.B. über die Methode &amp;ldquo;bark()&amp;rdquo; verfügen,
welche ihm erlaubt zu bellen.&lt;/p>
&lt;p>In unserem Beispiel handelt es sich bei dem Hund um eine Klasse. Klassen sind also wie Baupläne für Objekte.&lt;/p>
&lt;p>Nun sagen wir, dass es in unserer Spielwelt auch Katzen gibt.
An dieser Stelle kommt dann die Vererbung ins Spiel.&lt;/p>
&lt;p>Hunde sowie Katzen sind beides Tiere. In der Objektorientierten Programmierung würde man dazu also eine Klasse &amp;ldquo;Animal&amp;rdquo; erstellen.
Die beiden Klassen &amp;ldquo;Cat&amp;rdquo; und &amp;ldquo;Dog&amp;rdquo; würden dann die Klasse &amp;ldquo;Animal&amp;rdquo; erben. Dies Bedeutet, dass sie die Eigenschaften der Klasse &amp;ldquo;Animal&amp;rdquo; übernehmen
und durch ihre eigenen Eigenschaften erweitern.&lt;/p>
&lt;p>Da sich beide Tiere fortbewegen, könnte man also der Klasse &amp;ldquo;Animal&amp;rdquo; die Funktion &amp;ldquo;move()&amp;rdquo; geben, welche dann von den beiden anderen Klassen geerbt werden würde.
Dadurch hat man verhindert, dass sich die Funktion zum bewegen mehrmals im Quellcode befindet.&lt;/p>
&lt;p>&lt;img src="../Vererbung.png" alt="Vererbung" title="Vererbung">&lt;/p>
&lt;h2 id="klassen">Klassen&lt;/h2>
&lt;p>Ein einfaches Beispiel einer Klasse:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span> {
&lt;span style="color:#a6e22e">greeting&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span>;
&lt;span style="color:#a6e22e">constructor&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">greeting&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>;
}
&lt;span style="color:#a6e22e">greet&lt;/span>() {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">greeting&lt;/span>;
}
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">greeter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In diesem Beispiel wird eine neue Klasse &amp;ldquo;Greeter&amp;rdquo; deklariert. Die Klasse enthält 3 Member:&lt;/p>
&lt;ul>
&lt;li>Das Property &amp;ldquo;greeting&amp;rdquo;&lt;/li>
&lt;li>Den Konstruktor&lt;/li>
&lt;li>Die Methode &amp;ldquo;greet&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>Wenn wir in einer Klasse auf ein Member innerhalb der Klasse referenzieren, verwenden wir &lt;code>this.&lt;/code>.&lt;/p>
&lt;p>Auf der letzten Zeile erstellen wir eine neue Instanz der Klasse &lt;code>Greeter&lt;/code> mit &lt;code>new&lt;/code>.&lt;/p>
&lt;h3 id="vererbung">Vererbung&lt;/h3>
&lt;p>In TypeScript können wir allgemeine objektorientierte Muster verwenden. Eines der grundlegendsten Muster in der klassenbasierten Programmierung ist die Möglichkeit, vorhandene Klassen durch Vererbung zu erweitern, um neue Klassen zu erstellen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Animal moved &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">m.`&lt;/span>);
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Dog&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#a6e22e">bark&lt;/span>(){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Woof!&amp;#34;&lt;/span>);
}
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">dog&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Dog&lt;/span>();
&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#a6e22e">bark&lt;/span>();
&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>);
&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#a6e22e">bark&lt;/span>();
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dieses Beispiel zeigt die grundlegendste Vererbungsfunktion: Klassen erben Eigenschaften und Methoden von Basisklassen. &lt;code>Dog&lt;/code> ist hier eine abgeleitete Klasse, die mit dem Schlüsselwort &lt;code>extends&lt;/code> von der Basisklasse Animal abgeleitet wird. Abgeleitete Klassen werden häufig als Unterklassen bezeichnet, und Basisklassen als Superklassen.&lt;/p>
&lt;p>Da &lt;code>Dog&lt;/code> die Funktionalität von &lt;code>Animal&lt;/code> erweitert, konnten wir eine Instanz von &lt;code>Dog&lt;/code> erstellen, die sowohl &lt;code>bark()&lt;/code> als auch &lt;code>move()&lt;/code> ausführen konnte.&lt;/p>
&lt;p>&lt;strong>Ein komplexeres Beispiel zur Vertiefung:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>;
}
&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Animal moved &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">m.`&lt;/span>);
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Snake&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
}
&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Slithering...&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>);
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Horse&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
}
&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">45&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Galloping...&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>);
}
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">sammy&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Snake&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Sammy the Python&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">tom&lt;/span>: &lt;span style="color:#66d9ef">Animal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Horse&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Tom the Palomino&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">sammy&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>();
&lt;span style="color:#a6e22e">tom&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#ae81ff">35&lt;/span>);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In diesem Beispiel werden 2 neue Subklassen von &lt;code>Animal&lt;/code> erstellt: &lt;code>Horse&lt;/code> und &lt;code>Snake&lt;/code>.&lt;/p>
&lt;p>Ein Unterschied zum vorherigen Beispiel besteht darin, dass jede abgeleitete Klasse, die eine Konstruktorfunktion enthält, &lt;code>super()&lt;/code> aufrufen muss, wodurch der Konstruktor der Basisklasse ausgeführt wird. Ausserdem müssen wir &lt;code>super()&lt;/code> aufrufen, damit wir im Konstruktorkörper auf &lt;code>name&lt;/code> mit &lt;code>this&lt;/code> zugreifen können.&lt;/p>
&lt;p>Konsolenausgabe des Beispiels:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Slithering...
Sammy the Python moved 5m.
Galloping...
Tom the Palomino moved 34m.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="public">Public&lt;/h3>
&lt;p>In den gezeigten Beispielen konnten wir frei auf die Eigenschaften und Methoden einer Klasse (Member) zugreifen, die wir deklariert hatten. Jedoch mussten wir dazu &lt;code>public&lt;/code> nie verwenden. Dies liegt daran, dass in TypeScript jedes Member stantardmässig &lt;code>public&lt;/code> ist.&lt;/p>
&lt;p>Ein Member können wir trotzdem als &lt;code>public&lt;/code> markieren. Wir hätten die Klasse &lt;code>Animal&lt;/code> aus dem vorherigen Abschnitt folgendermassen schreiben können:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Animal moved &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">m.`&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="private">Private&lt;/h3>
&lt;p>Wenn ein Member einer Klasse als &lt;code>private&lt;/code> markiert ist, kann von ausserhalb der Klasse nicht darauf zugegriffen werden.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>;
}
}
&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Cat&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">name&lt;/span>; &lt;span style="color:#75715e">// Error: &amp;#39;name&amp;#39; is privae;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="protected">Protected&lt;/h3>
&lt;p>Der Modifikator &lt;code>protected&lt;/code> verhält sich ähnlich wie der Modifikator &lt;code>private&lt;/code>, mit der Ausnahme, dass auf als &lt;code>protected&lt;/code> deklarierte Member auch innerhalb von abgeleiteten Klassen zugegriffen werden kann.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>;
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">departement&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">departement&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">departement&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">departement&lt;/span>;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">getElevatorPitch&lt;/span>(){
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">`Hello, my name is &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> and I work in &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">departement&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.`&lt;/span>;
}
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">john&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Howard&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Sales&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">john&lt;/span>.&lt;span style="color:#a6e22e">getElevatorPitch&lt;/span>());
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">john&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>); &lt;span style="color:#75715e">// Error
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>name&lt;/code> können wir ausserhalb von &lt;code>Person&lt;/code> nicht verwenden, jedoch innerhalb einer Instanzmethode von &lt;code>Employee&lt;/code>. Dies funktioniert, da &lt;code>Employee&lt;/code> von &lt;code>Person&lt;/code> abgeleitet ist.&lt;/p>
&lt;h3 id="readonly">Readonly&lt;/h3>
&lt;p>Mit &lt;code>readonly&lt;/code> können wir Eigenschaften schreibgeschützt machen. Schreibgeschützte Eigenschaften müssen bei ihrer Deklaration oder im Konstruktor initialisiert werden.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Octopus&lt;/span> {
&lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#a6e22e">numberOfLegs&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>;
}
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">dad&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Octopus&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Man with the 8 strong legs&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">dad&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Man with the 3-piece suit&amp;#34;&lt;/span>; &lt;span style="color:#75715e">// Error: name is readonly
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="arrow-functions">Arrow Functions&lt;/h2>
&lt;p>Die ES6-Version von TypeScript bietet eine arrow-function, die die Kurzform für die Definition der anonymen Funktion darstellt.
In anderen Sprachen auch bekannt als Lambda-Function.&lt;/p>
&lt;p>Wieso werden Arrow-Functions benutzt?&lt;/p>
&lt;ul>
&lt;li>Man muss nicht ständig &amp;ldquo;function&amp;rdquo; schreiben&lt;/li>
&lt;li>Es erfasst die Bedeutung des Schlüsselworts &amp;ldquo;this&amp;rdquo;&lt;/li>
&lt;li>Es erfasst die Bedeutung von Argumenten&lt;/li>
&lt;/ul>
&lt;p>Eine Arrow Function können wir in 3 Teile aufteilen:&lt;/p>
&lt;ul>
&lt;li>Parameter&lt;/li>
&lt;li>Die arrow-notation &lt;code>=&amp;gt;&lt;/code>&lt;/li>
&lt;li>Statements&lt;/li>
&lt;/ul>
&lt;p>Schauen wir uns ein Beispiel an:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// ES5: Without arrow function
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">getResult&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">unsername&lt;/span>, &lt;span style="color:#a6e22e">points&lt;/span>){
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">username&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;scored&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">points&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; points!&amp;#39;&lt;/span>;
}
&lt;span style="color:#75715e">// ES6: With arrow function
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">getResult&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">unsername&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">points&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">username&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> scored &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">points&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> points!&amp;#39;`&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Arrow-functions benötigen natürlich nicht unbedingt Parameter.
Ein Beispiel mit Parameter würde so aussehen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span>:&lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span>{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>;
}
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">sum&lt;/span>(&lt;span style="color:#ae81ff">20&lt;/span>,&lt;span style="color:#ae81ff">30&lt;/span>)); &lt;span style="color:#75715e">// returns 50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ein Beispiel ohne Parameter:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">Print&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello TypeScript&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">Print&lt;/span>() &lt;span style="color:#75715e">// returns &amp;#34;Hello TypeScript&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="async--await">Async / Await&lt;/h2>
&lt;h3 id="async-requests">Async Requests&lt;/h3>
&lt;p>&amp;lsquo;Asynchronität&amp;rsquo; in der Computerwelt bedeutet, dass der Programmfluss unabhängig erfolgt. Es wird nicht darauf gewartet, dass eine Aufgabe erledigt wird, sondern der nächste Task wird ausgeführt.&lt;/p>
&lt;p>Doch was passiert mit der Aufgabe, die noch nicht abgeschlossen ist? Stellt euch vor ein Mitarbeiter erledigt die noch nicht erledigten Aufgaben
im Hintergrund und sendet die Daten zurück, sobald sie erledigt sind.&lt;/p>
&lt;p>Nun ergibt sich die Frage, wie wir mit den zurückgegebenen Daten umgehen. Die Antwort lautet: Promises, Observables, Callbacks und weitere.
Bei einer asynchronen Anforderung wartet der Client nicht auf die Antwort. Nichts ist blockiert. Schauen wir uns dieses Konzept anhand eines häufigen Szenarios an.&lt;/p>
&lt;p>In der Web-Welt wird häufig auf den Server zugegriffen, um Daten wie die Details eines Benutzers, eine Liste usw. abzurufen. Wir wissen, dass dieses Szenario einige Zeit dauern kann.
In diesem Fall werden die Daten nicht abgewartet, sondern asynchron verarbeitet (kein Warten), damit unsere Anwendung nicht blockiert wird. Solche Anfragen sind asynchrone Anfragen.&lt;/p>
&lt;p>Schauen wir uns also an, wie wir mit diesen asynchronen Anforderungen umgehen können.&lt;/p>
&lt;h3 id="callbacks">Callbacks&lt;/h3>
&lt;p>Callback-Funktionen werden aufgerufen wenn die Anforderung abgeschlossen ist und die Daten oder einen Error zurückgegeben wird. Code zum besseren Verständnis:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">request&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;request&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">request&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https://www.example.com&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">response&lt;/span>, &lt;span style="color:#a6e22e">body&lt;/span>){
&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>){
&lt;span style="color:#75715e">// Error handling
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
&lt;span style="color:#66d9ef">else&lt;/span>{
&lt;span style="color:#75715e">// Success
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
});
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In diesem Beispiel wird nun ein Request verarbeitet. Wie sieht es jedoch aus, falls wir nach dem erfolgreichen Erhalten von Daten nochmals einen Request durchführen wollen?
Bevor Promises in JavaScript integriert wurden, war dies ein mühseliges Problem. &lt;a href="https://hsto.org/getpro/habr/post_images/ad5/c3f/e3b/ad5c3fe3bf0f7a68a4d3444614c3133e.png">Callback-hell Beispiel&lt;/a>.&lt;/p>
&lt;h3 id="promises">Promises&lt;/h3>
&lt;p>Im Wesentlichen ist ein &lt;code>Promise&lt;/code> in JavaScript einem Versprechen im wirklichen Leben sehr ähnlich. Versprechen werden im wirklichen Leben entweder eingehalten oder gebrochen werden, in JavaScript werden &lt;code>Promises&lt;/code> entweder aufgelöst oder abgelehnt.&lt;/p>
&lt;p>Als Beispiel schauen wir, wie ein kleines Kind, das seinen Eltern verspricht, sein Zimmer zu reinigen, in JavaScript aussieht.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">promiseToCleanTheRoom&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">resolve&lt;/span>, &lt;span style="color:#a6e22e">reject&lt;/span>){
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">isClean&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">trueM&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">isClean&lt;/span>){
&lt;span style="color:#a6e22e">resolve&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Clean&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">else&lt;/span>{
&lt;span style="color:#a6e22e">reject&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;not Clean&amp;#34;&lt;/span>);
}
});
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In JavaScript werden in einem Promise zwei Rückrufe berücksichtigt: &lt;code>resolve&lt;/code> und &lt;code>reject&lt;/code>. Wenn wir den obigen Code durchlesen, ist es offensichtlich, dass unser kleines Kind sein Versprechen, sein Zimmer zu
putzen, erfüllt hat. Daher wird unser Promise-Objekt hier - sobald es aufgerufen wurde - als Antwort &lt;code>Clean&lt;/code> zurückzugeben. Nehmen wir an, unser Kind hat es nicht geschafft, das Schnäppchen zu machen, dann würde &lt;code>isClean&lt;/code> auf &lt;code>false&lt;/code> gesetzt. Dann wird unser Versprechen hier abgelehnt und als Antwort &lt;code>not Clean&lt;/code> zurückgegeben.&lt;/p>
&lt;p>Wir können jetzt unsere Funktion &lt;code>promiseToCleanTheRoom&lt;/code> ausführen, indem wir Folgendes schreiben:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">promiseToCleanTheRoom&lt;/span>.&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the room is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>);
}).&lt;span style="color:#66d9ef">catch&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the room is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>);
})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Sobald &lt;code>promiseToCleanTheRoom&lt;/code> ausgeführt wird, wird unsere then-Funktion nur dann ausgelöst, wenn das Promise resolved wird.
Ebenso wird unsere catch-Funktion nur ausgelöst, wenn das Promise rejected wird.&lt;/p>
&lt;h2 id="observables">Observables&lt;/h2>
&lt;p>Ein Observable ermöglicht die Übergabe von null oder mehr Ereignissen, bei denen der Rückruf für jedes Ereignis aufgerufen wird.&lt;/p>
&lt;p>Bei Observables spielt es keine Rolle, ob man 0, 1 oder mehrere Ereignisse behandeln möchte. Sie können jeweils die gleiche API verwenden.&lt;/p>
&lt;p>Observable hat gegenüber Promise den Vorteil, stornierbar zu sein. Wenn das Ergebnis einer HTTP-Anforderung an einen Server oder eines anderen kostspieligen asynchronen Vorgangs nicht mehr benötigt wird,
kann man mit der Subscription einer Observable das Abonnement abbrechen.&lt;/p>
&lt;p>Codebeispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Observable&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;rxjs/Obvervable&amp;#39;&lt;/span>;
&lt;span style="color:#75715e">// Create a new Obvervable, providing the subscribe function.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">observable&lt;/span>: &lt;span style="color:#66d9ef">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">string&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Obvervable&lt;/span>(&lt;span style="color:#a6e22e">observer&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">interval&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">setInterval&lt;/span>(() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#a6e22e">observer&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello from Obvervableland!&amp;#34;&lt;/span>);
}, &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;span style="color:#75715e">// teardown
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#a6e22e">clearInterval&lt;/span>(&lt;span style="color:#a6e22e">interval&lt;/span>);
}
});
&lt;span style="color:#75715e">// Subscribe to Notifications.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">observable&lt;/span>.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span>));
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Zunächst müssen wir die Observable-Klasse aus dem RxJS-Modul importieren, da Observables noch nicht Teil von ECMAScript (JavaScript) sind.
Anschliessend erstellen wir ein neues Observable und stellen die Abonnementfunktion bereit, die aufgerufen wird, wenn ein Observer das Observable abonniert.&lt;/p>
&lt;p>Wir verwenden die &lt;code>next()&lt;/code>-Methode für ein Observer-Objekt, um Werte an den Observer zu senden. Das Observer-Interface enthält 3 Methoden: &lt;code>next()&lt;/code>, &lt;code>catch()&lt;/code> and &lt;code>complete()&lt;/code>.
Um asynchrone Ereignisse zu faken, verwenden wir in diesem Beispiel die Funktion &lt;code>setInterval()&lt;/code>, die im Laufe der Zeit Werte ausgibt. Jede Sekunde geben wir den String &lt;code>Hello from Observableland!&lt;/code> aus.
Wir geben dann eine Funktion zurück, die aufgerufen wird, wenn sich alle Observer vom Observable abgemeldet haben.&lt;/p>
&lt;p>Schliesslich rufen wir die Methode &lt;code>subscribe()&lt;/code> auf, die eine Funktion bereitstellt, die jedes Mal aufgerufen wird, wenn der Wert &lt;code>next()&lt;/code> an alle Observer gesendet wird.&lt;/p>
&lt;h2 id="teste-dein-wissen">Teste dein Wissen&lt;/h2>
&lt;p>Du hast nun viel Neues über TypeScript gelernt. Teste &lt;a href="../../../../exams/web/angular/03_2_intro_typescript_exam">hier&lt;/a>, ob du das Wichtigste verstanden hast.&lt;/p></description></item><item><title>Labs: Angular Setup</title><link>/labs/web/angular/angular_setup/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>/labs/web/angular/angular_setup/</guid><description>
&lt;p>In diesem Lab wirst du Angular installieren.&lt;/p>
&lt;p>Das Lab orientiert sich stark an der offiziellen Dokumentation von Angular. Die Dokumentation findest du unter &lt;a href="https://angular.io/docs" target="_blank">angular.io/docs&lt;/a>.&lt;/p>
&lt;h3 id="teil-1---installation-von-nodejs">Teil 1 - Installation von Node.js&lt;/h3>
&lt;p>In diesem ersten Schritt wirst du Node.js installieren, falls Node.js noch nicht bei dir installiert ist.&lt;/p>
&lt;p>Überprüfe zuerst, ob Node.js bereits auf deinem System installiert ist:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">node --version
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Falls Node.js noch nicht auf deinem System installiert ist, kannst du Node.js über nvm (Node Version Manager) installieren.&lt;/p>
&lt;p>Um nvm zu installieren, verwende das Skript&lt;code>install.sh&lt;/code>, das sich innerhalb des repository &lt;a href="https://github.com/nvm-sh/nvm" target="_blank">github.com/nvm-sh/nvm&lt;/a> befindet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Verwende den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nvm --version
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>um zu überprüfen, ob nvm richtig installiert wurde.&lt;/p>
&lt;p>&lt;strong>nvm install&lt;/strong>&lt;/p>
&lt;p>Um eine spezifische Version&lt;code>&amp;lt;x.y.z&amp;gt;&lt;/code>von Node.js zu installieren (Beispiel &lt;code>12.22.7&lt;/code>), verwende den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nvm install &amp;lt;version&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Angular benötigt eine Active LTS (long-term support) oder eine Maintenance LTS Version von Node.js. Die aktuellen Active LTS und Maintenance LTS Versionen von Node.js sind unten abgebildet (Stand Oktober 2021), und unter &lt;a href="https://nodejs.org/en/about/releases/" target="_blank">nodejs.org/en/about/releases&lt;/a> aufgelistet.&lt;/p>
&lt;p>&lt;br />&lt;/p>
&lt;p>&lt;img src="../angular_setup/node_js_schedule.svg" alt="Active LTS und Maintenance LTS Versionen von Node js">&lt;/p>
&lt;p>&lt;strong>nvm list&lt;/strong>&lt;/p>
&lt;p>Verwende den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nvm list
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>um alle installierten Versionen von Node.js aufzulisten.&lt;/p>
&lt;p>&lt;strong>nvm use&lt;/strong>&lt;/p>
&lt;p>Falls bereits eine Version von Node.js auf deinem System installiert war, und du nvm nachträglich installiert hast, kannst du mit dem Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nvm use system
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>die bereits vorher installierte Version zur Verwendung auswählen.&lt;/p>
&lt;p>Eine über nvm installierte Version &amp;lt;x.y.z&amp;gt; von Node.js kannst du mit&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nvm use &amp;lt;x.y.z&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>zur Verwendung auswählen.&lt;/p>
&lt;p>&lt;strong>nvm alias default&lt;/strong>&lt;/p>
&lt;p>Zum Schluss, verwende&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nvm alias default &amp;lt;version&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>um eine mit Angular kompatible Version &amp;lt;version&amp;gt; (Beispiele &lt;code>system&lt;/code>, &lt;code>12.22.7&lt;/code>) von Node.js als Standard festzulegen.&lt;/p>
&lt;hr>
&lt;p>Für die Installation von Angular im nächsten Schritt brauchst du den package mangager npm von Node.js. Stelle sicher, dass npm ebenfalls auf deinem System installiert ist:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">npm --version
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="teil-2---installation-des-cli-von-angular">Teil 2 - Installation des CLI von Angular&lt;/h3>
&lt;p>In diesem Schritt wirst du das CLI (command line interface) von Angular über npm installieren.&lt;/p>
&lt;p>Verwende dazu den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">npm install -g @angular/cli
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mit der Flag &lt;code>-g&lt;/code> wird das CLI von Angular global installiert. Das heisst unter anderem, dass executables in einem Verzeichnis installiert oder referenziet werden, das in der Umgebungsvariablen &lt;code>PATH&lt;/code> aufgelistet ist. Mehr Informationen dazu findest du &lt;a href="https://nodejs.org/en/blog/npm/npm-1-0-global-vs-local-installation/" target="_blank">hier&lt;/a>.&lt;/p>
&lt;p>Zur Überprüfung, ob Angular richtig installiert wurde, verwende&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ng version
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="teil-3---erstellen-einer-app-mit-dem-cli">Teil 3 - Erstellen einer App mit dem CLI&lt;/h3>
&lt;p>Das Grundgerüst einer Angular-App erstellt man mit dem Befehl &lt;code>ng new&lt;/code>.&lt;/p>
&lt;p>Verwende den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">ng new my-app
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>um eine neue App mit der Bezeichnung &lt;code>my-app&lt;/code> zu erstellen.&lt;/p>
&lt;p>Bei den zwei Eingabeaufforderungen / Prompts kannst du mit Enter die Standardoption bestätigen. Das CLI erstellt anschliessend ein Verzeichnis mit dem Namen &lt;code>my-app&lt;/code> und den generierten Dateien.&lt;/p>
&lt;h3 id="teil-4---ausführen-einer-app-mit-dem-cli">Teil 4 - Ausführen einer App mit dem CLI&lt;/h3>
&lt;p>Das CLI von Angular einthält einen Server, der eine App lokal bereitstellen kann.&lt;/p>
&lt;p>Verwende innerhalb des mit dem CLI erstellten Verzeichnisses den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ng serve
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>um die in der letzten Aufgabe erstellte App zu builden und zu starten.&lt;/p>
&lt;p>Mit der zusätzlichen Option&lt;code>--open&lt;/code>öffnet das CLI die App direkt in einem Browser. Per default wird die App unter der Webadresse &lt;code>localhost:4200&lt;/code> bereitgestellt.&lt;/p>
&lt;p>Falls alles erfolgreich war, wird eine von Angular generierte Standardseite angezeigt. Die Seite ist unten abgebildet.&lt;/p>
&lt;p>&lt;br />&lt;/p>
&lt;p>&lt;img src="../angular_setup/ng_default_app.png" alt="Die von Angular generierte Standardseite.">&lt;/p></description></item><item><title>Exams: Exam zu den HTML- und CSS-Basics</title><link>/exams/web/html_css/01_exam_html_css_rtm/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>/exams/web/html_css/01_exam_html_css_rtm/</guid><description>
&lt;h1 id="exam-1---html5--css3">Exam 1 - HTML5 &amp;amp; CSS3&lt;/h1>
&lt;p>&lt;img src="/images/task.png" alt="task1"> - Einzelarbeit&lt;br>
Erstelle mit Hilfe deines aktuellen Wissen eine neue Webseite. &lt;br>
Sie soll nur die HTML-Elemente und das CSS-Styling besitzen. &lt;br>
Die logischen Instrumente sind nicht nötig, da wir uns im nächsten Kurs mit Javascript/Typescript beschäftigen werden.
Verwende die HTML5 konformen Tags.&lt;/p>
&lt;h2 id="rtm">RTM&lt;/h2>
&lt;p>Nachzubauen ist die neue Webseite vom RTM(login).&lt;br>
Nachfolgend werden die einzelnen Komponenten erklärt. Es werden nur diverse Stylings gegeben, denn Rest müsst ihr selber versuchen zu definieren. &lt;br>
Zu unterst im File findet ihr noch diverse Hints, welche euch helfen könnten.&lt;br>
Die Icons sind &lt;a href="../icons/logos-rtm.zip">hier&lt;/a> hinterlegt. &lt;br>
&lt;img src="../rtm_home_page.png" alt="asset">&lt;/p>
&lt;h3 id="header">Header&lt;/h3>
&lt;p>&lt;img src="../rtm_header.png" alt="asset"> &lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Was&lt;/th>
&lt;th>Farbe&lt;/th>
&lt;th>Logo&lt;/th>
&lt;th>Grösse&lt;/th>
&lt;th>Hover Farbe&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Hintergrundfarbe in Header&lt;/td>
&lt;td>rgba(236,239,242,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>height: 57.25px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>login Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>login_logo.svg&lt;/td>
&lt;td>width: 180px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Text in Header&lt;/td>
&lt;td>rgba(119,119,119,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Datum(Tag)&lt;/td>
&lt;td>rgba(213,45,40,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kommen Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>kommen.svg&lt;/td>
&lt;td>width: 22px; height: 22px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Farbe untere Zeile Logo&lt;/td>
&lt;td>rgba(255,0,0,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 250px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Uhr Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>uhr.svg&lt;/td>
&lt;td>width: 22px; height: 22px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Pfeil (Menu Sprache) Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>pfeil_unten.svg&lt;/td>
&lt;td>-&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Refresh Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>refresh.svg&lt;/td>
&lt;td>width: 22px; height: 22px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Personen Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>persons.svg&lt;/td>
&lt;td>width: 22px; height: 22px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Profil Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>profil.svg&lt;/td>
&lt;td>width: 22px; height: 22px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Logout Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>logout.svg&lt;/td>
&lt;td>width: 22px; height: 22px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="linke-sidenav">Linke Sidenav&lt;/h3>
&lt;p>&lt;img src="../rtm_left_sidenav.png" alt="asset">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Was&lt;/th>
&lt;th>Farbe&lt;/th>
&lt;th>Logo&lt;/th>
&lt;th>Grösse&lt;/th>
&lt;th>Hover Farbe&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Hintergrund in Sidenav&lt;/td>
&lt;td>rgba(0,158,195,1)&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 180px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Profil Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>profil.svg&lt;/td>
&lt;td>width: 88px;height: 88px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Abwesend Text&lt;/td>
&lt;td>rgb(211, 47, 47);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cockpit Logo&lt;/td>
&lt;td>background: rgba(230,230,230,1);color: rgba(115,115,115,1);&lt;/td>
&lt;td>cockpit.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Personen Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>persons.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>background: rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Einsatzplan Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>einsatzplan.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>background: rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Abfragen Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>abfragen.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>background: rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Abfragen Pfeil Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>pfeil_oben.svg&lt;/td>
&lt;td>width: 9px; height: 14px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Palungsliste Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>einsatzplan.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tagesübersicht Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>buchung.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Buchungsliste Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>buchung.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Zeitwertliste Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>buchung.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Saldoübersicht Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>saldo.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Spesenauswertung Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>buchung.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Auftragsauswertung Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>buchung.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Berichte Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>drucken.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="rechte-sidenav">Rechte Sidenav&lt;/h3>
&lt;p>&lt;img src="../rtm_right_sidenav.png" alt="asset">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Was&lt;/th>
&lt;th>Farbe&lt;/th>
&lt;th>Logo&lt;/th>
&lt;th>Grösse&lt;/th>
&lt;th>Hover Farbe&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Hintergrund in Sidenav&lt;/td>
&lt;td>rgba(255, 255, 255, 1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 250px;&lt;/td>
&lt;td>rgba(245, 245, 245, 1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Anwesend Text&lt;/td>
&lt;td>rgba(66,159,70,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Profil Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>profil.svg&lt;/td>
&lt;td>width: 35px; height: 35px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Uhr Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>clock.svg&lt;/td>
&lt;td>width: 24px; height: 28px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Abwesend Text&lt;/td>
&lt;td>rgba(255,0,0,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Text allgemein&lt;/td>
&lt;td>rgba(33,33,33,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="content">Content&lt;/h3>
&lt;p>&lt;img src="../rtm_content.png" alt="asset">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Was&lt;/th>
&lt;th>Farbe&lt;/th>
&lt;th>Logo&lt;/th>
&lt;th>Grösse&lt;/th>
&lt;th>Hover Farbe&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Hintergrund in Content&lt;/td>
&lt;td>background: rgb(243, 243, 243,1); color: rgba(33,33,33,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bearbeiten Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>edit.svg&lt;/td>
&lt;td>width: 14px; height: 14px;&lt;/td>
&lt;td>rgba(250, 250, 250, 1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Plus Logo&lt;/td>
&lt;td>(disabled)&lt;/td>
&lt;td>plus.svg&lt;/td>
&lt;td>color: lightgrey; width: 11px; height: 14px;&lt;/td>
&lt;td>rgba(250, 250, 250, 1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Pfeil-Unten Logo&lt;/td>
&lt;td>(disabled)&lt;/td>
&lt;td>pfeil_unten.svg&lt;/td>
&lt;td>color: lightgrey; width: 9px; height: 14px;&lt;/td>
&lt;td>rgba(250, 250, 250, 1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Speichern Logo&lt;/td>
&lt;td>(disabled)&lt;/td>
&lt;td>save.svg&lt;/td>
&lt;td>color: lightgrey; width: 12px; height: 14px;&lt;/td>
&lt;td>rgba(250, 250, 250, 1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rückgängig Logo&lt;/td>
&lt;td>(disabled)&lt;/td>
&lt;td>undo.svg&lt;/td>
&lt;td>color: lightgrey; width: 12px; height: 14px;&lt;/td>
&lt;td>rgba(250, 250, 250, 1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SBB Crackhead&lt;/td>
&lt;td>rgba(217,230,242,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 716.5px; height: 180px;&lt;/td>
&lt;td>rgba(224,231,235,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Profil Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>profil.svg&lt;/td>
&lt;td>width: 140px; height: 140px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ausrufezeichen Logos&lt;/td>
&lt;td>-&lt;/td>
&lt;td>request.svg&lt;/td>
&lt;td>width: 24px; height: 24px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Absenzen Text&lt;/td>
&lt;td>rgb(33, 150, 243);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 352.75px; height: 180px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Visum Text&lt;/td>
&lt;td>rgb(16, 85, 192);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 352.75px; height: 180px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Warnung Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>warning.svg&lt;/td>
&lt;td>width: 24px; height: 24px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Warnung Text&lt;/td>
&lt;td>rgb(219, 73, 216);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 352.75px; height: 180px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alarm Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>alert.svg&lt;/td>
&lt;td>width: 24px; height: 24px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alart Text&lt;/td>
&lt;td>rgb(255, 67, 81);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 352.75px; height: 180px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="/images/hint.png" alt="task1"> &lt;br>
Hint: über allen hover-Elementen pointer&lt;br>
Schatten: box-shadow&lt;br>
Scrollleiste: overflow-y oder overflow-x&lt;br>&lt;/p>
&lt;h2 id="sobald-du-fertig-bist">Sobald du fertig bist&amp;hellip;&lt;/h2>
&lt;p>Wenn du fertig mit diesem Exam bist, zeige dein Resultat einem Coach. Nach dem Okay des Coaches kannst du mit der Theorie zu &lt;a href="../../../../docs/web/html_css/19_css_bootstrap">Bootstrap&lt;/a> und dann mit &lt;a href="../../../../docs/web/javascript/01_js_intro">JavaScript&lt;/a> beginnen.&lt;/p></description></item><item><title>Exams: Exam zu den TypeScript-Basics</title><link>/exams/web/angular/03_2_intro_typescript_exam/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>/exams/web/angular/03_2_intro_typescript_exam/</guid><description>
&lt;h1 id="übungen">Übungen&lt;/h1>
&lt;h2 id="übung-1">Übung 1&lt;/h2>
&lt;p>&lt;img src="/images/task.png" alt="task1"> 30' - Einzelarbeit &lt;a href="/files/exams/angular/uebung1.html">Übung 1&lt;/a>&lt;/p>
&lt;pre>&lt;code>Erstelle eine Website, welche anhand von Observables eine Browsernotification ausgibt.
Dazu soll sich auf der Website ein Button befinden, welcher das Event auslöst, um die Notification im Browser anzuzeigen.
Vorgehen:
Lade die Datei im Titel herunter und öffne sie in VS Code.
Die Datei enthält lediglich das Grundgerüst der Übung, füge an den auskommentierten Stellen den entsprechenden Code ein.
Am Grundgerüst der Datei soll nichts verändert werden.
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="/images/hint.png" alt="asset"> &lt;br>
Damit die Notifications fehlerfrei funktionieren, muss die Extenstion &amp;ldquo;Live Server&amp;rdquo; in VS Code hinzugefügt und angewendet werden.
&lt;br>&lt;/p>
&lt;h2 id="übung-2">Übung 2&lt;/h2>
&lt;h3 id="einrichtung">Einrichtung&lt;/h3>
&lt;p>Da du Node.js bereits installiert hast, kannst du nun anhand des Node Package Manager mühelos typescript installieren.
Dazu öffnest du eine Konsole und gibst diesen Befehl ein: &lt;br>
&lt;code>npm install -g typescript&lt;/code>&lt;/p>
&lt;p>Sobald die Installation abgeschlossen ist, erstellst du eine Datei und nennst diese &lt;code>hello-world.ts&lt;/code>.
Öffne die Datei mit VS Code und schreib die erste Codezeile: &lt;br>
&lt;code>console.log(&amp;quot;Hello World&amp;quot;);&lt;/code>&lt;/p>
&lt;p>Nun hast du unser erstes Typescript &amp;ldquo;Projekt&amp;rdquo; erstellt. Um dies auszuführen, müsst du den Quellcode zu JS transpilieren.
Dazu öffnest du eine Konsole und begibst dich in das Verzeichnis indem sich die Datei befindet.&lt;/p>
&lt;p>Danach gibst du folgenden Befehl in der Konsole ein: &lt;br>
&lt;code>tsc hello-world.ts&lt;/code>&lt;/p>
&lt;p>Wie du nun sehen kannst, befindet sich im Verzeichnis eine gleichnamige JS Datei.&lt;/p>
&lt;p>Diese kannst du nun anhand von Node ausführen: &lt;br>
&lt;code>node hello-word.js&lt;/code>&lt;/p>
&lt;p>Falls alles funktioniert hat, gibt die Konsole &lt;code>Hello World&lt;/code> aus.&lt;/p>
&lt;h3 id="übung">Übung&lt;/h3>
&lt;p>&lt;img src="/images/task.png" alt="task2"> 20' - Einzelarbeit &lt;a href="/files/exams/angular/uebung2.ts">Übung 2&lt;/a>&lt;/p>
&lt;pre>&lt;code>Lade die Datei im Titel herunter und fülle wo nötig Quellcode ein.
Die Person soll sich folgendermassen vorstellen: &amp;quot;Hallo, mein Name ist [Name]&amp;quot;
Die Grundstruktur, sowie die letzten 2 Codezeilen dürfen nicht verändert werden.
&lt;/code>&lt;/pre>
&lt;h2 id="übung-3">Übung 3&lt;/h2>
&lt;p>&lt;img src="/images/task.png" alt="task3"> 20' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>In dieser Übung wollen wir die Vererbung in einem Fallbeispiel anwenden.
Wir erweitern in dieser Aufgabe den Quellcode von Übung 2.
Erstelle dazu am Besten gleich eine neue Datei und kopiere den Quellcode von Aufgabe 2.
Lösche die letzten 2 Zeilen, sodass nur noch die Klasse &amp;quot;Person&amp;quot; übrig ist.
Erstelle anschliessend die Klasse &amp;quot;Friend&amp;quot;, welche die Klasse &amp;quot;Person&amp;quot; erbt.
Diese Klasse soll die Methode &amp;quot;timeKnown()&amp;quot;, sowie &amp;quot;introduceSelf()&amp;quot; der Parent-Klasse zur Verfügung stellen.
Die Methode &amp;quot;timeKnown()&amp;quot; soll folgendes ausgeben können: &amp;quot;Wir sind Freunde seit [AnzahlJahre] Jahren&amp;quot;
Achte also darauf, welche zusätzlichen Eigenschaften &amp;quot;Friend&amp;quot; besitzen muss.
Erstelle am Schluss (wie bei Übung 2) eine neue Instanz von &amp;quot;Friend&amp;quot;. Verwende als Parameter &amp;quot;Peter&amp;quot; und &amp;quot;5&amp;quot;.
Führe dann &amp;quot;introduceSelf()&amp;quot; und &amp;quot;timeKnown()&amp;quot; aus.
&lt;/code>&lt;/pre>
&lt;p>In der Konsole sollte Dir nun folgendes angezeigt werden.&lt;br>
&lt;em>Hallo, mein Name ist Peter&lt;/em> &lt;br>
&lt;em>Wir sind Freunde seit 5 Jahren&lt;/em>
&lt;br>&lt;/p>
&lt;h2 id="übung-4">Übung 4&lt;/h2>
&lt;p>&lt;img src="/images/task.png" alt="task4"> 30' - Einzelarbeit &lt;a href="/files/exams/angular/uebung4.ts">Übung 4&lt;/a>, &lt;a href="https://nodejs.org/api/readline.html">https://nodejs.org/api/readline.html&lt;/a>&lt;/p>
&lt;pre>&lt;code>In dieser Aufgabe wollen wir Benutzereingabe in der Konsole verarbeiten.
Dazu verwenden wir in diesem Beispiel readline von NodeJS.
Wir wollen nun ein kleines Programm schreiben, welches wie folgt aussieht.
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Wie ist dein name? Hansli
hallo Hansli
War diese Aufgabe lehrreich für dich= [j / n]j
Super!
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Wie ist dein name? Hansli
hallo Hansli
War diese Aufgabe lehrreich für dich= [j / n]n
Schade! :(
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Zuerst wird der Anwender nach seinem Namen gefragt.
Danach wird er begrüsst.
Und anschliessend wird gefragt ob diese Aufgabe lehrreich für ihn war.&lt;/p>
&lt;p>Fülle in der Aufgabendatei den benötigten Code an den enstprechenden Stellen ein.&lt;/p>
&lt;p>&lt;img src="/images/hint.png" alt="asset"> &lt;br>
Um readline benutzen zu können, musst du erst den entsprechenden npm-Befehl ausführen. Achte darauf, dass du den Befehl im selben Verzeichnis ausführst, indem sich die .ts-Datei befindet!&lt;/p>
&lt;h1 id="zurück-zur-theorie">Zurück zur Theorie&lt;/h1>
&lt;p>&lt;a href="../../../../docs/web/angular/03_1_intro_typescript">Hier&lt;/a> gelangst du zurück zur Theorie.&lt;/p>
&lt;h1 id="eventuell-noch-eine-kleiner-exam-todo">Eventuell noch eine kleiner Exam (ToDo!!!!!)&lt;/h1></description></item><item><title>Docs: Install Git</title><link>/docs/git/git-install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/git-install/</guid><description>
&lt;h2 id="inhalt">Inhalt&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#git-unter-windows-installieren">Git unter Windows installieren&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="git-unter-windows-installieren">Git unter Windows installieren&lt;/h2>
&lt;ol>
&lt;li>Navigiere zum &lt;a href="https://git-scm.com/download/win">Git für Windows Installer&lt;/a> und lade die neuste Version herunter.&lt;/li>
&lt;li>Folge den Installationsanweisungen bis die Installation abgeschlossen ist.
&lt;ul>
&lt;li>Es wird empfohlen während der Installation Git Bash zu installieren
&lt;img src="../git-install/git-setup-bash.png" alt="Git Setup Bash" title="Git Setup Bash">&lt;/li>
&lt;li>Es wird empfohlen während der Installation den PATH zu ändern.
&lt;img src="../git-install/git-setup-path.png" alt="Git Setup PATH" title="Git Setup PATH">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Öffne Git Bash&lt;/li>
&lt;li>Schreibe &lt;code>git version&lt;/code> zum Überprüfen, ob Git erfolgreich installiert wurde.&lt;/li>
&lt;/ol></description></item><item><title>Docs: Maven und Continuous Integration</title><link>/docs/java/maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/java/maven/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich kenne die Grundlagen von Maven&lt;/li>
&lt;li>Ich kann Maven lokal konfigurieren&lt;/li>
&lt;li>Ich kann im Artifactory Abhängigkeiten suchen und diese verwenden&lt;/li>
&lt;li>Ich kenne die Grundlagen von Project Object Models (pom)&lt;/li>
&lt;li>Ich kenne die wichtigsten Maven Befehle und kann diese auf der Kommandozeile anwenden&lt;/li>
&lt;li>Ich kann die Abhängigkeiten meiner Applikationen mit Maven verwalten&lt;/li>
&lt;li>Ich kann Maven Plugins konfigurieren und damit meinen Maven-Build steuern&lt;/li>
&lt;li>Ich kann den Begriff Continuous Integration erklären&lt;/li>
&lt;li>Ich kenne die Komponenten der Deployment-Pipeline und deren Aufgaben&lt;/li>
&lt;/ul>
&lt;h4 id="änderungskontrolle">Änderungskontrolle&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Autor&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Datum&lt;/th>
&lt;th>Änderungen&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Claudio Zesiger&lt;/td>
&lt;td>0.1&lt;/td>
&lt;td>Mai 2020&lt;/td>
&lt;td>Initiale Version erstellt&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Claudio Zesiger&lt;/td>
&lt;td>0.2&lt;/td>
&lt;td>27.08.2020&lt;/td>
&lt;td>* Modul erweitert&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Claudio Zesiger&lt;/td>
&lt;td>0.3&lt;/td>
&lt;td>14.10.2020&lt;/td>
&lt;td>* Modul erweitert&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="voraussetzungen">Voraussetzungen&lt;/h4>
&lt;ul>
&lt;li>Gute Grundlagenkenntnisse von Java-Anwendungen&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="maven">Maven&lt;/h2>
&lt;h3 id="allgemeine-informationen">Allgemeine Informationen&lt;/h3>
&lt;p>Apache Maven ist ein Build-Management Tool. Von einer einzelnen Datei aus, kann Maven den Build eines Projektes steuern. Diese zentrale Datei ist das Project Object Model, kurz auch POM genannt. Der Build eines Projektes kann dabei von einfacher Kompilierung bis zur Auslieferung einer Anwendung auf eine bestimmte Plattform reichen.&lt;/p>
&lt;p>Damit Maven funktionieren kann, benötigt ein Projekt die folgenden Dinge:&lt;/p>
&lt;ul>
&lt;li>Eine Maven-Installation, entweder separat oder Built-In wie beispielsweise in der IntelliJ IDEA&lt;/li>
&lt;li>Eine POM-Datei pro Projekt oder Modul (es handelt sich um eine XML-Datei)&lt;/li>
&lt;li>Ein zentrales Maven-Repository&lt;/li>
&lt;li>Ein lokales Maven-Repository&lt;/li>
&lt;li>Eine Konfigurationsdatei mit dem Namen settings.xml&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="pomxml">pom.xml&lt;/h3>
&lt;p>Der Aufbau eines POM kann grob in folgenden Abschnitte unterteilt werden, hier erklärt an einem umfangreichen Beispiel.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">123
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">124
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">125
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">126
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">127
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">128
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">129
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">130
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">131
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">132
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">133
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">134
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">135
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">136
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">137
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">138
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">139
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">140
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">141
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">142
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">143
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">144
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">145
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">146
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">147
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">148
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">149
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">150
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">151
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">152
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">153
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">154
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">155
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">156
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">157
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">158
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">159
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">160
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">161
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">162
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">163
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">164
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">165
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">166
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">167
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">168
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">169
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">170
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">171
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">172
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">173
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">174
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">175
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">176
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">177
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">178
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">179
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">180
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">181
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">182
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">183
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">184
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">185
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">186
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">187
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">188
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">189
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">190
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">191
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">192
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">193
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">194
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">195
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">196
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">197
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">198
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;!-- (1) Header --&amp;gt;
&amp;lt;project xmlns=&amp;#34;http://maven.apache.org/POM/4.0.0&amp;#34;
xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;
xsi:schemaLocation=&amp;#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;#34;&amp;gt;
&amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt;
&amp;lt;!-- (2) Angaben zum Artefakt --&amp;gt;
&amp;lt;groupId&amp;gt;ch.sbb.interviewtool&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;interviewtool-backend&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;0.0.1-SNAPSHOT&amp;lt;/version&amp;gt;
&amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;
&amp;lt;!-- (3) Angaben zum Parent-Projekt --&amp;gt;
&amp;lt;parent&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-boot-starter-parent&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;2.2.4.RELEASE&amp;lt;/version&amp;gt;
&amp;lt;relativePath/&amp;gt;
&amp;lt;/parent&amp;gt;
&amp;lt;!-- (4) Properties --&amp;gt;
&amp;lt;properties&amp;gt;
&amp;lt;project.build.sourceEncoding&amp;gt;UTF-8&amp;lt;/project.build.sourceEncoding&amp;gt;
&amp;lt;java.version&amp;gt;1.8&amp;lt;/java.version&amp;gt;
&amp;lt;maven.build.timestamp.format&amp;gt;yyyy-MM-dd HH:mm&amp;lt;/maven.build.timestamp.format&amp;gt;
&amp;lt;timestamp&amp;gt;${maven.build.timestamp}&amp;lt;/timestamp&amp;gt;
&amp;lt;itext.version&amp;gt;7.1.2&amp;lt;/itext.version&amp;gt;
&amp;lt;/properties&amp;gt;
&amp;lt;!-- (5) Abhängigkeiten --&amp;gt;
&amp;lt;dependencies&amp;gt;
&amp;lt;!-- Spring Boot --&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-boot-starter-web-services&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-boot-starter-data-jpa&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-boot-starter-actuator&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- Spring --&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-webmvc&amp;lt;/artifactId&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- Lombok --&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.18.6&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- Datenbank --&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;8.0.20&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- iText --&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;com.itextpdf&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;kernel&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;${itext.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;com.itextpdf&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;io&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;${itext.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;com.itextpdf&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;layout&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;${itext.version}&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;!-- Unit- und Integrationstests --&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;com.h2database&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;h2&amp;lt;/artifactId&amp;gt;
&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-boot-starter-test&amp;lt;/artifactId&amp;gt;
&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.junit.jupiter&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;junit-jupiter-engine&amp;lt;/artifactId&amp;gt;
&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;
&amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;
&amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;
&amp;lt;!-- (6) Build-Informationen --&amp;gt;
&amp;lt;build&amp;gt;
&amp;lt;plugins&amp;gt;
&amp;lt;plugin&amp;gt;
&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;plugin&amp;gt;
&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt;
&amp;lt;configuration&amp;gt;
&amp;lt;compilerVersion&amp;gt;1.8&amp;lt;/compilerVersion&amp;gt;
&amp;lt;source&amp;gt;1.8&amp;lt;/source&amp;gt;
&amp;lt;target&amp;gt;1.8&amp;lt;/target&amp;gt;
&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&amp;lt;!-- (7) Auslieferung --&amp;gt;
&amp;lt;distributionManagement&amp;gt;
&amp;lt;repository&amp;gt;
&amp;lt;id&amp;gt;mvn&amp;lt;/id&amp;gt;
&amp;lt;url&amp;gt;https://bin.sbb.ch/artifactory/cca.mvn/&amp;lt;/url&amp;gt;
&amp;lt;/repository&amp;gt;
&amp;lt;snapshotRepository&amp;gt;
&amp;lt;id&amp;gt;mvn&amp;lt;/id&amp;gt;
&amp;lt;url&amp;gt;https://bin.sbb.ch/artifactory/cca.mvn/&amp;lt;/url&amp;gt;
&amp;lt;/snapshotRepository&amp;gt;
&amp;lt;/distributionManagement&amp;gt;
&amp;lt;!-- (8) Maven-Repositories --&amp;gt;
&amp;lt;repositories&amp;gt;
&amp;lt;repository&amp;gt;
&amp;lt;id&amp;gt;itext-releases&amp;lt;/id&amp;gt;
&amp;lt;name&amp;gt;iText Repository - releases&amp;lt;/name&amp;gt;
&amp;lt;url&amp;gt;https://repo.itextsupport.com/releases&amp;lt;/url&amp;gt;
&amp;lt;/repository&amp;gt;
&amp;lt;/repositories&amp;gt;
&amp;lt;!-- (9) Entwickler-Informationen --&amp;gt;
&amp;lt;developers&amp;gt;
&amp;lt;developer&amp;gt;
&amp;lt;id&amp;gt;U232509&amp;lt;/id&amp;gt;
&amp;lt;name&amp;gt;Benjamin Schaffner&amp;lt;/name&amp;gt;
&amp;lt;email&amp;gt;benjamin.schaffner@sbb.ch&amp;lt;/email&amp;gt;
&amp;lt;organization&amp;gt;SBB&amp;lt;/organization&amp;gt;
&amp;lt;organizationUrl&amp;gt;https://www.sbb.ch&amp;lt;/organizationUrl&amp;gt;
&amp;lt;roles&amp;gt;
&amp;lt;role&amp;gt;Product Owner&amp;lt;/role&amp;gt;
&amp;lt;/roles&amp;gt;
&amp;lt;/developer&amp;gt;
&amp;lt;developer&amp;gt;
&amp;lt;id&amp;gt;U210148&amp;lt;/id&amp;gt;
&amp;lt;name&amp;gt;Claudio Zesiger&amp;lt;/name&amp;gt;
&amp;lt;email&amp;gt;claudio.zesiger@sbb.ch&amp;lt;/email&amp;gt;
&amp;lt;organization&amp;gt;SBB&amp;lt;/organization&amp;gt;
&amp;lt;organizationUrl&amp;gt;https://www.sbb.ch&amp;lt;/organizationUrl&amp;gt;
&amp;lt;roles&amp;gt;
&amp;lt;role&amp;gt;Software Architect&amp;lt;/role&amp;gt;
&amp;lt;role&amp;gt;Lead Developer&amp;lt;/role&amp;gt;
&amp;lt;/roles&amp;gt;
&amp;lt;/developer&amp;gt;
&amp;lt;developer&amp;gt;
&amp;lt;id&amp;gt;U233432&amp;lt;/id&amp;gt;
&amp;lt;name&amp;gt;Nikola Milicic&amp;lt;/name&amp;gt;
&amp;lt;email&amp;gt;nikola.milicic@sbb.ch&amp;lt;/email&amp;gt;
&amp;lt;organization&amp;gt;SBB&amp;lt;/organization&amp;gt;
&amp;lt;organizationUrl&amp;gt;https://www.sbb.ch&amp;lt;/organizationUrl&amp;gt;
&amp;lt;roles&amp;gt;
&amp;lt;role&amp;gt;Backend Developer&amp;lt;/role&amp;gt;
&amp;lt;/roles&amp;gt;
&amp;lt;/developer&amp;gt;
&amp;lt;developer&amp;gt;
&amp;lt;id&amp;gt;E515732&amp;lt;/id&amp;gt;
&amp;lt;name&amp;gt;Samuel Allen&amp;lt;/name&amp;gt;
&amp;lt;email&amp;gt;samuel_lucas.allen@sbb.ch&amp;lt;/email&amp;gt;
&amp;lt;organization&amp;gt;SBB&amp;lt;/organization&amp;gt;
&amp;lt;organizationUrl&amp;gt;https://www.sbb.ch&amp;lt;/organizationUrl&amp;gt;
&amp;lt;roles&amp;gt;
&amp;lt;role&amp;gt;Full-Stack Developer&amp;lt;/role&amp;gt;
&amp;lt;/roles&amp;gt;
&amp;lt;/developer&amp;gt;
&amp;lt;/developers&amp;gt;
&amp;lt;/project&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="abschnitt-1">Abschnitt 1&lt;/h4>
&lt;p>Der Header einer POM-Datei bleibt grundsätzlich so wie dargestellt. Die Angaben zum Schema sind dabei optional. Falls andere Schemas verwendet werden, so sind diese hier zu deklarieren.&lt;/p>
&lt;h4 id="abschnitt-2">Abschnitt 2&lt;/h4>
&lt;p>Die Angaben zum Artefakt enthalten die folgenden Informationen:&lt;/p>
&lt;ul>
&lt;li>Gruppen-ID: Normalerweise eine umgekehrte URL, also beispielsweise ch.sbb.interviewtool. Darin sollte der Projektname enthalten sein&lt;/li>
&lt;li>Artefakt-ID: Der Name des Projekts&lt;/li>
&lt;li>Version: Die momentane Version des Projekts, diese wird später durch Releases verändert&lt;/li>
&lt;li>Paketierung: Angabe, in welcher Form das Artefakt geliefert wird. Der Default ist Java Archive (JAR)&lt;/li>
&lt;/ul>
&lt;h4 id="abschnitt-3">Abschnitt 3&lt;/h4>
&lt;p>Falls das Projekt Teil eines anderen Projektes ist, müssen hier die Artefakt-Angaben des sogenannten Parent-Projekts hinterlegt werden.&lt;/p>
&lt;h4 id="abschnitt-4">Abschnitt 4&lt;/h4>
&lt;p>Die Einstellungen in Maven sind beliebig wählbare Tags. So kann beispielsweise eine bestimmte Einstellung oder eine Version definiert werden.
Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;special.setting&amp;gt;special&amp;lt;/special.setting&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Innerhalb der POM-Datei kann dann mit&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">${special.setting}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>auf die Einstellung und damit auf deren Wert (special) zugegriffen werden.&lt;/p>
&lt;h4 id="abschnitt-5">Abschnitt 5&lt;/h4>
&lt;p>Abhängigkeiten zu Fremdbibliotheken. Diese sollten stets Gruppen-ID, Artefakt-ID und Version enthalten. Der Typ der Abhängigkeit gibt an, um welche Art von Bibliothek es sich handelt. Nicht alle Java-Bibliotheken werden als JAR ausgeliefert.
Mögliche Typen sind hier zu finden: &lt;a href="https://maven.apache.org/ref/3.6.3/maven-core/artifact-handlers.html">https://maven.apache.org/ref/3.6.3/maven-core/artifact-handlers.html&lt;/a>
Vielfach wird auch noch der Scope verwendet, er gibt an in welchem Umfang die Fremdbibliothek miteinbezogen wird.
Mögliche Scopes sind:&lt;/p>
&lt;ul>
&lt;li>compile - Das ist der Default-Scope. Bibliotheken sind in allen Klassenpfaden verfügbar (Classpath)&lt;/li>
&lt;li>provided - Gleich wie compile, ausser das die Bibliothek zur Laufzeit von einem Container (wie dem JDK) erwartet wird&lt;/li>
&lt;li>runtime - Zeigt an, dass die Bibliothek zur Kompilierung nicht verwendet wird. Zur Laufzeit steht sie dann zur Verfügung&lt;/li>
&lt;li>test - Die Bibliothek steht nur für Tests zur Verfügung&lt;/li>
&lt;li>system - Gleich wie provided, mit der Ausnahme, dass die Bibliothek explizit auf dem System zur Verfügung stehen muss&lt;/li>
&lt;/ul>
&lt;h4 id="abschnitt-6">Abschnitt 6&lt;/h4>
&lt;p>Die Build-Informationen konfigurieren den Ablauf des Maven-Builds. Mit Plugins kann der Build selbst durch spezifische Erweiterungen beliebig angepasst werden.
Es stehen sehr viele Plugins für Maven zur Verfügung, eine Übersicht gibt es hier: &lt;a href="https://maven.apache.org/plugins/index.html">https://maven.apache.org/plugins/index.html&lt;/a>&lt;/p>
&lt;h4 id="abschnitt-7">Abschnitt 7&lt;/h4>
&lt;p>Die Auslieferungs-Sektion bestimmt, wo die Artefakte nach dem Build abgelegt werden sollen.&lt;/p>
&lt;h4 id="abschnitt-8">Abschnitt 8&lt;/h4>
&lt;p>Die Angabe von zusätzlichen Maven-Repositories für den Build ist notwendig, wenn die gewünschten Abhängigkeiten im SBB-Repository nicht verfügbar sind.&lt;/p>
&lt;h4 id="abschnitt-9">Abschnitt 9&lt;/h4>
&lt;p>Die Entwickler-Informationen dienen dazu, an der Entwicklung beteiligte Personen zu identifizieren.&lt;/p>
&lt;hr>
&lt;h3 id="settingsxml">settings.xml&lt;/h3>
&lt;p>Zur Konfiguration von Maven muss eine Einstellungsdatei angelegt werden. Diese Datei sollte immer settings.xml heissen und sich im Verzeichnis C:\Users\&lt;Personalnummer>\.m2. befinden. Bitte beachten, dass das Verzeichnis mit einem Punkt im Namen beginnt.
Sie sollte folgenden Inhalt aufweisen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;settings
xsi:schemaLocation=&amp;#34;http://maven.apache.org/SETTINGS/1.1.0 http://maven.apache.org/xsd/settings-1.1.0.xsd&amp;#34;
xmlns=&amp;#34;http://maven.apache.org/SETTINGS/1.1.0&amp;#34;
xmlns:xsi=&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&amp;gt;
&amp;lt;servers&amp;gt;
&amp;lt;server&amp;gt;
&amp;lt;id&amp;gt;mvn&amp;lt;/id&amp;gt;
&amp;lt;configuration&amp;gt;
&amp;lt;httpHeaders&amp;gt;
&amp;lt;property&amp;gt;
&amp;lt;name&amp;gt;X-JFrog-Art-Api&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;REPOSITORY-KEY&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;/httpHeaders&amp;gt;
&amp;lt;/configuration&amp;gt;
&amp;lt;/server&amp;gt;
&amp;lt;/servers&amp;gt;
&amp;lt;mirrors&amp;gt;
&amp;lt;mirror&amp;gt;
&amp;lt;mirrorOf&amp;gt;*&amp;lt;/mirrorOf&amp;gt;
&amp;lt;name&amp;gt;mvn&amp;lt;/name&amp;gt;
&amp;lt;url&amp;gt;https://bin.sbb.ch/artifactory/mvn&amp;lt;/url&amp;gt;
&amp;lt;id&amp;gt;mvn&amp;lt;/id&amp;gt;
&amp;lt;/mirror&amp;gt;
&amp;lt;/mirrors&amp;gt;
&amp;lt;proxies&amp;gt;
&amp;lt;proxy&amp;gt;
&amp;lt;id&amp;gt;zscaler&amp;lt;/id&amp;gt;
&amp;lt;active&amp;gt;true&amp;lt;/active&amp;gt;
&amp;lt;protocol&amp;gt;https&amp;lt;/protocol&amp;gt;
&amp;lt;host&amp;gt;zscaler.sbb.ch&amp;lt;/host&amp;gt;
&amp;lt;port&amp;gt;10465&amp;lt;/port&amp;gt;
&amp;lt;nonProxyHosts&amp;gt;repo.sbb.ch|bin.sbb.ch&amp;lt;/nonProxyHosts&amp;gt;
&amp;lt;/proxy&amp;gt;
&amp;lt;/proxies&amp;gt;
&amp;lt;profiles&amp;gt;
&amp;lt;profile&amp;gt;
&amp;lt;id&amp;gt;properties&amp;lt;/id&amp;gt;
&amp;lt;properties&amp;gt;
&amp;lt;tycho.disableP2Mirrors&amp;gt;true&amp;lt;/tycho.disableP2Mirrors&amp;gt;
&amp;lt;/properties&amp;gt;
&amp;lt;/profile&amp;gt;
&amp;lt;profile&amp;gt;
&amp;lt;id&amp;gt;default&amp;lt;/id&amp;gt;
&amp;lt;repositories&amp;gt;
&amp;lt;repository&amp;gt;
&amp;lt;id&amp;gt;mvn&amp;lt;/id&amp;gt;
&amp;lt;name&amp;gt;central.sbb.releases&amp;lt;/name&amp;gt;
&amp;lt;url&amp;gt;https://bin.sbb.ch/artifactory/mvn&amp;lt;/url&amp;gt;
&amp;lt;releases&amp;gt;
&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
&amp;lt;updatePolicy&amp;gt;never&amp;lt;/updatePolicy&amp;gt;
&amp;lt;/releases&amp;gt;
&amp;lt;snapshots&amp;gt;
&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
&amp;lt;updatePolicy&amp;gt;always&amp;lt;/updatePolicy&amp;gt;
&amp;lt;/snapshots&amp;gt;
&amp;lt;/repository&amp;gt;
&amp;lt;/repositories&amp;gt;
&amp;lt;pluginRepositories&amp;gt;
&amp;lt;pluginRepository&amp;gt;
&amp;lt;id&amp;gt;mvn&amp;lt;/id&amp;gt;
&amp;lt;name&amp;gt;central.sbb.plugins&amp;lt;/name&amp;gt;
&amp;lt;url&amp;gt;https://bin.sbb.ch/artifactory/mvn&amp;lt;/url&amp;gt;
&amp;lt;layout&amp;gt;default&amp;lt;/layout&amp;gt;
&amp;lt;snapshots&amp;gt;
&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
&amp;lt;updatePolicy&amp;gt;always&amp;lt;/updatePolicy&amp;gt;
&amp;lt;/snapshots&amp;gt;
&amp;lt;releases&amp;gt;
&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
&amp;lt;updatePolicy&amp;gt;never&amp;lt;/updatePolicy&amp;gt;
&amp;lt;/releases&amp;gt;
&amp;lt;/pluginRepository&amp;gt;
&amp;lt;/pluginRepositories&amp;gt;
&amp;lt;/profile&amp;gt;
&amp;lt;/profiles&amp;gt;
&amp;lt;activeProfiles&amp;gt;
&amp;lt;activeProfile&amp;gt;default&amp;lt;/activeProfile&amp;gt;
&amp;lt;/activeProfiles&amp;gt;
&amp;lt;/settings&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Auf Zeile 11 muss der &lt;strong>persönliche&lt;/strong> Repository-Schlüssel (REPOSITORY-KEY) eingefügt werden.
Um diesen Schlüssel zu generieren, müssen die folgenden Schritte ausgeführt werden:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>#&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>&lt;a href="https://bin.sbb.ch/artifactory/webapp/#/home">https://bin.sbb.ch/artifactory/webapp/#/home&lt;/a> öffnen&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Oben rechts auf &amp;ldquo;Log In&amp;rdquo; klicken&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>Anmelden&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>Oben rechts auf die eigene Personalnummer klicken&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>Passwort eingeben und auf &amp;ldquo;Unlock&amp;rdquo; klicken&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>Im Bereich der &amp;ldquo;Authentication Settings&amp;rdquo; einen neuen API Key generieren lassen und diesen gleich mit dem Kopier-Button in die Zwischenablage kopieren.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>Den API Key in die settings.xml Datei einfügen und die Datei speichern.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Der Verbindung zwischen Artifactory und IntelliJ steht nun nichts mehr im Weg :-)&lt;/p>
&lt;hr>
&lt;h3 id="intellij-idea-einrichten">IntelliJ IDEA einrichten&lt;/h3>
&lt;p>Im IntelliJ findet man in den allgemeinen Einstellungen auch die Einstellungen für Maven.
&lt;img src="../maven/1657700434.png" alt="InteliJ Maven Settings" title="InteliJ Maven Settings">&lt;/p>
&lt;p>Die wichtigsten Einstellungen sind:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Einstellung&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Maven home directory&lt;/td>
&lt;td>Zeigt auf das Verzeichnis einer Maven-Installation. Das IntelliJ verfügt bereits über eine Maven-Installation, diese wird als &amp;ldquo;Bundled&amp;rdquo; bezeichnet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>User settings file&lt;/td>
&lt;td>Die XML-Datei, welche weiter oben angelegt wurde&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Local repository&lt;/td>
&lt;td>Der Ablageort für das lokale Repository&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Bei diesen Einstellungen muss überprüft werden, dass die Angaben für die XML-Datei und das lokale Repository korrekt sind.&lt;/p>
&lt;hr>
&lt;h3 id="repository">Repository&lt;/h3>
&lt;h4 id="lokal">Lokal&lt;/h4>
&lt;p>Zwischen dem JFrog Artifactory und deinem lokalen Repository gibt es also nun eine Verbindung. Sobald dein Projekt (in der Datei pom.xml) bestimmte Abhängigkeiten definiert, werden diese über das Artifactory aufgelöst und die entsprechenden Artefakte werden in dein lokales Repository heruntergeladen.&lt;/p>
&lt;p>Beispiel:
In meiner pom.xml Datei definiere ich die folgende Abhängigkeit zu der Fremdbibliothek von Lombok&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;!-- Lombok --&amp;gt;
&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;1.18.12&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Sobald ich die pom.xml Datei speichere, wird das angeforderte Artefakt durch die oben eingerichtete Verbindung im Artifactory gesucht. Dieser Vorgang kann auch manuell gemacht werden. Dazu kann man sich auf &lt;a href="https://bin.sbb.ch">https://bin.sbb.ch&lt;/a> einloggen.&lt;br>
Auf der Seite können mit dem Suchfeld bestimmte Artefakte gesucht werden. Als Stichwort reicht ein Teil des Names des gesuchten Artefakts.
&lt;img src="../maven/1657700481.png" alt="Artifactory" title="Artifactory">&lt;/p>
&lt;p>Die angezeigten Resultate lassen sich durch einen Klick auf die Tabellen-Header sortieren. Ich habe die Sortierung nach Modifizierungsdatum gewählt
&lt;img src="../maven/1657700492.png" alt="Artifactory Suchresultat" title="Artifactory Suchresultat">&lt;/p>
&lt;p>Wie wir sehen gibt es die von uns gewünschte Lombok-Version 1.18.12 als verschiedene Artefakte: javadoc, sources, pom und jar. Wir können auch sehen, dass es bereits eine neuere Version gibt 1.18.14.&lt;/p>
&lt;p>Der angeforderte Artefakt wird nun in das lokale Repository heruntergeladen, wir müssten ihn dort also finden können. Die Artefakte sind nach Packages abgelegt. Beim Lombok-Artefakt fordern wir ja die Group-ID &amp;ldquo;org.projectlombok&amp;rdquo; an. Unter diesem Verzeichnis müsste das Artefakt nun zu finden sein:
&lt;img src="../maven/1657700516.png" alt="Artefakt im lokalen Repository" title="Artefakt im lokalen Repository">&lt;/p>
&lt;p>Das Artefakt wird unterhalb der Group-ID noch in einem Ordner mit der Artifact-ID abgelegt. Innerhalb dieses Verzeichnisses werden alle bisher angeforderten Versionen von Lombok abgelegt.
&lt;img src="../maven/1657700520.png" alt="Artefakt Versionen" title="Artefakt Versionen">&lt;/p>
&lt;p>Die beiden Dateien mit der endung &amp;ldquo;lastUpdated&amp;rdquo; dienen dem Maven zur Kontrolle der letzten Synchronisierung.&lt;/p>
&lt;h4 id="remote-jfrog--artifactory">Remote (JFrog / Artifactory)&lt;/h4>
&lt;p>Das Artifactory von JFrog ist das verwaltete Verzeichnis zur Speicherung und Beschreibung digitaler Objekte. Es ist also unser digitales Archiv bei der SBB. In diesem Archiv befinden sich Millionen von Fremdbibliotheken in unterschiedlichsten Versionen. Zudem werden alle Versionen von unseren ausgelieferten Applikationen dort archiviert.&lt;/p>
&lt;hr>
&lt;h3 id="commands">Commands&lt;/h3>
&lt;p>Maven lässt sich auf der Kommandozeile oder im IntelliJ-Terminal ausführen. Damit wir sehen, ob das wirklich klappt könnt ihr das Terminal öffnen und den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">mvn -version
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>eingeben. Das sollte nun in etwa so aussehen:
&lt;img src="../maven/1657700535.png" alt="Maven Console" title="Maven Console">&lt;/p>
&lt;p>Bevor wir die einzelnen Befehle kurz anschauen werfen wir einen Blick auf die einzelnen Phasen des Maven-Lebenszyklus.
&lt;img src="../maven/1657700671.png" alt="Maven Phasen" title="Maven Phasen">&lt;/p>
&lt;p>Jeder der in der Grafik genannten Befehle wird zusätzlich die vorangehenden Befehle ausführen. Die Ausführung von &amp;ldquo;mvn package&amp;rdquo; wird also die Phasen &lt;em>validate&lt;/em>, &lt;em>compile&lt;/em>, &lt;em>test&lt;/em> und &lt;em>package&lt;/em> ausführen.&lt;/p>
&lt;h4 id="help">help&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">mvn -help
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das Ergebnis dürfte klar sein. Maven listet alle möglichen Befehle auf.&lt;/p>
&lt;h4 id="dependencytree">dependency:tree&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">mvn dependency:tree
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dieser Befehl listet alle Abhängigkeiten zu Fremdbibliotheken als Baum auf. Das ist grundsätzlich sehr praktisch wenn man doppelte Abhängigkeiten erkennen/vermeiden will.&lt;/p>
&lt;h4 id="clean">clean&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">mvn clean
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dieser Befehl löscht alle vorherigen lokale Maven-Builds, indem er das Verzeichnis &amp;ldquo;target&amp;rdquo; löscht.&lt;/p>
&lt;h4 id="compile">compile&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">mvn compile
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Kompiliert den Sourcecode je nach Abhängigkeit von Plugins. Wenn also beispielsweise ein Maven-Compiler-Plugin verwendet wird, so wird dieses als Regelwerk für die Kompilierung herangezogen.&lt;/p>
&lt;h4 id="test">test&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">mvn test
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Führt alle Tests aus. In einem Java-Projekt sind dies beispielsweise alle Unit-Tests mit jUnit.&lt;/p>
&lt;h4 id="package">package&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">mvn package
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Führt einen lokalen Maven-Build aus, startet alle Tests und paketiert die Anwendung (normalerweise als JAR) in das Verzeichnis &amp;ldquo;target&amp;rdquo;.&lt;/p>
&lt;h4 id="verify">verify&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">mvn verify
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Prüft die Testergebnisse aller ausgeführten Integrationstests, normalerweise wird das Maven-Failsafe-Plugin für diesen Maven-Befehl vorausgesetzt.&lt;/p>
&lt;h4 id="install">install&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">mvn install
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;Installiert&amp;rdquo; den Artefakt im lokalen Maven-Repository.&lt;/p>
&lt;h4 id="deploy">deploy&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">mvn deploy
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ldquo;Installiert&amp;rdquo; den Artefakt im Remote-Repository (Artifactory)&lt;/p>
&lt;p>Die Maven-Befehle lassen sich kombinieren. Sehr nützlich ist zum Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">mvn clean install
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Selbstverständlich gibt es sehr viele Optionen für die einzelnen Maven-Befehle.&lt;/p>
&lt;hr>
&lt;h2 id="continuous-integration">Continuous Integration&lt;/h2>
&lt;p>Kontinuierliche Integration beschreibt den Prozess der fortlaufenden Zusammenfügung von Einzelkomponenten zu einer Anwendung. Das Ziel dabei ist stets die Steigerung der Qualität einer Software. Inhaltlich wird nicht nur die Software zusammengebaut, es können auch Tests durchgeführt oder Messungen der Code-Qualität vorgenommen werden.
Der Auslöser ist stets das Hochladen (Einchecken) von Änderungen am Programmcode in die Versionsverwaltung. Eine Weiterentwicklung der kontinuierlichen Integration stellt die kontinuierliche Auslieferung (Continuous Delivery) dar, dort wird in bestimmten Zeitabständen, bei Erreichen einer bestimmten Qualität oder manuell eine neue Version der Software auf eine Zielplattform ausgeliefert.&lt;/p>
&lt;hr>
&lt;h3 id="grundsätze">Grundsätze&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Grundsatz&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Versionsverwaltung&lt;/td>
&lt;td>Gemeinsame Codebasis für alle Projektbeteiligten&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Statische Code-Analyse&lt;/td>
&lt;td>Einheitlich definierte Qualität der Applikation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kontinuierliche Test-Entwicklung&lt;/td>
&lt;td>Änderungen an der Software sind durch entsprechende Unit-Tests abzudecken&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Häufige Integration&lt;/td>
&lt;td>Code-Review durchführen und Änderungen möglichst rasch einchecken. Kleiner Stack an offenen Pull-Requests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Integration Develop&lt;/td>
&lt;td>Nahe am Develop-Branch entwickeln&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kurze und häufige Testzyklen&lt;/td>
&lt;td>Häufiger Testen und dafür den Umfang der Tests klein halten&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Integrationsumgebung&lt;/td>
&lt;td>Alle Änderungen sollten auf einem der Produktion ähnlichen System getestet werden&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Einfacher Zugriff&lt;/td>
&lt;td>Alle Projektbeteiligten, also auch Nicht-Entwickler, benötigen Zugriff auf die Ergebnisse der Software-Entwicklung&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Automatisiertes Reporting&lt;/td>
&lt;td>Informationen zu Auslieferungen der Software müssen einfach und verständlich einsehbar sein&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Automatisiertes Deployment&lt;/td>
&lt;td>Die Auslieferung der Software auf unterschiedliche Plattformen sollte so einfach wie möglich sein&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="vorteile">Vorteile&lt;/h3>
&lt;ul>
&lt;li>Probleme bei der Auslieferung können früh erkannt und behoben werden&lt;/li>
&lt;li>Test des Gesamtsystems als Verbund&lt;/li>
&lt;li>Logik-Fehler können durch Unit-Testing rasch gefunden und behoben werden&lt;/li>
&lt;li>Hohe Verfügbarkeit von Test- und Integrationsplattformen (auch für den Kunden)&lt;/li>
&lt;li>Schnelle Reaktion des Systems beschleunigt die Entwicklung&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="jenkins">Jenkins&lt;/h3>
&lt;p>Die Software, welche von der SBB für CI/CD eingesetzt wird ist Jenkins. Die Anwendung ist unter &lt;a href="https://ci.sbb.ch/">https://ci.sbb.ch/&lt;/a> erreichbar.&lt;/p>
&lt;hr>
&lt;h3 id="deployment-pipeline">Deployment-Pipeline&lt;/h3>
&lt;p>Zum Gesamtsystem von CI/CD (bei der SBB) und damit der Deployment-Pipeline gehören die folgenden Systeme/Anwendungen:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>System&lt;/th>
&lt;th>Zweck&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>GIT-Repository&lt;/td>
&lt;td>Source-Code Ablage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Artifactory&lt;/td>
&lt;td>Digitales Archiv&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Jenkins&lt;/td>
&lt;td>CI/CD-Plattform&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Docker&lt;/td>
&lt;td>Containervirtualisierung&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Openshift Container Plattform&lt;/td>
&lt;td>Container Anwendungsplattform&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Bei Änderungen am GIT-Repository wird durch den Jenkins ein Maven-Build ausgelöst. Dieser legt je nach Build-Konfiguration ein neues Artefakt im Artifactory ab (CI). Aus dem Artifactory kann dieses Artefakt über den Jenkins via Docker auf die Openshift Container Plattform ausgeliefert werden (CD).&lt;/p>
&lt;p>Für die Konfiguration einer Deployment-Pipeline sind die folgenden Dateien notwendig:&lt;/p>
&lt;ul>
&lt;li>Jenkinsfile&lt;/li>
&lt;li>Pipeline-Konfiguration als JSON&lt;/li>
&lt;/ul>
&lt;h4 id="jenkinsfile">Jenkinsfile&lt;/h4>
&lt;p>Diese Datei wird durch den Jenkins in jedem GIT-Repository gesucht. Wenn Sie gefunden wird, dann wird der Jenkins anhand der Konfiguration im GIT-Repository handeln.
Der minimale Inhalt ist wie folgt:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">#!groovy
@Library([&amp;#39;pipeline-helper@release&amp;#39;, &amp;#39;esta-cloud-pipeline@release&amp;#39;]) _
estaCloudPipeline([:])
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die erste Zeile markiert diese Datei als Groovy-Script. Die zweite Zeile lädt die zu verwendende Bibliothek, welche in diesem Fall der Release des Pipeline-Helpers ist.
Die letzte Zeile gibt den Namen der zu verwendenden Konfiguration an. Die Datei für die Konfiguration muss also den Namen estaCloudPipeline.json haben.&lt;/p>
&lt;h4 id="pipeline-konfiguration-als-json">Pipeline-Konfiguration als JSON&lt;/h4>
&lt;p>Die Pipeline-Konfiguration dient dem Jenkins zur Konfiguration der gesamten Pipeline inklusive deren auswählbaren Möglichkeiten für manuelle Optionen.
Wir betrachten eine etwas umfangreichere Konfiguration am folgenden Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">63
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">64
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">65
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">66
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">67
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">68
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">69
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">70
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">71
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">72
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">73
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">74
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">75
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">76
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">77
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">78
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">79
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">80
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">81
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">82
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">83
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">84
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">{
&amp;#34;mainBranch&amp;#34;: &amp;#34;master&amp;#34;,
&amp;#34;hotfixBranch&amp;#34;: &amp;#34;hotfix&amp;#34;,
&amp;#34;docker&amp;#34;: {
&amp;#34;artifactoryDockerRepo&amp;#34;: &amp;#34;cca&amp;#34;,
&amp;#34;openshiftAppName&amp;#34;: &amp;#34;interviewtool-core&amp;#34;
},
&amp;#34;mvn&amp;#34;: {
&amp;#34;parentPom&amp;#34;: &amp;#34;pom.xml&amp;#34;,
&amp;#34;deployableArtifactsPom&amp;#34;: &amp;#34;pom.xml&amp;#34;,
&amp;#34;artifactoryMavenRepo&amp;#34;: &amp;#34;cca.mvn&amp;#34;
},
&amp;#34;stages&amp;#34;: [
{
&amp;#34;stageName&amp;#34;: &amp;#34;dev&amp;#34;,
&amp;#34;isOpenshiftDeploymentEnabled&amp;#34;: true,
&amp;#34;openshiftProject&amp;#34;: &amp;#34;interviewtool-dev&amp;#34;,
&amp;#34;openshiftCluster&amp;#34;: &amp;#34;aws&amp;#34;,
&amp;#34;openshiftJenkinsCredentialsId&amp;#34;: &amp;#34;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&amp;#34;,
&amp;#34;preCiDeploymentJob&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;postCiDeploymentJob&amp;#34;: &amp;#34;&amp;#34;
},
{
&amp;#34;stageName&amp;#34;: &amp;#34;int&amp;#34;,
&amp;#34;isOpenshiftDeploymentEnabled&amp;#34;: true,
&amp;#34;openshiftProject&amp;#34;: &amp;#34;interviewtool-int&amp;#34;,
&amp;#34;openshiftCluster&amp;#34;: &amp;#34;aws&amp;#34;,
&amp;#34;openshiftJenkinsCredentialsId&amp;#34;: &amp;#34;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&amp;#34;,
&amp;#34;preCiDeploymentJob&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;postCiDeploymentJob&amp;#34;: &amp;#34;&amp;#34;
},
{
&amp;#34;stageName&amp;#34;: &amp;#34;prod&amp;#34;,
&amp;#34;isOpenshiftDeploymentEnabled&amp;#34;: true,
&amp;#34;openshiftProject&amp;#34;: &amp;#34;interviewtool-prod&amp;#34;,
&amp;#34;openshiftCluster&amp;#34;: &amp;#34;aws&amp;#34;,
&amp;#34;openshiftJenkinsCredentialsId&amp;#34;: &amp;#34;aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee&amp;#34;,
&amp;#34;preCiDeploymentJob&amp;#34;: &amp;#34;&amp;#34;,
&amp;#34;postCiDeploymentJob&amp;#34;: &amp;#34;&amp;#34;
}
],
&amp;#34;steps&amp;#34;: [
{
&amp;#34;stepType&amp;#34;: &amp;#34;continuous&amp;#34;,
&amp;#34;isBuildEnabled&amp;#34;: true,
&amp;#34;branchNamePrefixes&amp;#34;: [
&amp;#34;feature&amp;#34;, &amp;#34;develop&amp;#34;, &amp;#34;bugfix&amp;#34;
],
&amp;#34;additionalBuildParams&amp;#34;: &amp;#34;-DskipITs&amp;#34;
},
{
&amp;#34;stepType&amp;#34;: &amp;#34;integrationBuild&amp;#34;,
&amp;#34;isBuildEnabled&amp;#34;: true,
&amp;#34;xrayScanEnabled&amp;#34;: true,
&amp;#34;failOnXrayScan&amp;#34;: false,
&amp;#34;sonarScanEnabled&amp;#34;: true,
&amp;#34;staging&amp;#34;: {
&amp;#34;stages&amp;#34;: [
&amp;#34;dev&amp;#34;
]
},
&amp;#34;triggerBuildOnCommitEnabled&amp;#34;: false
},
{
&amp;#34;stepType&amp;#34;: &amp;#34;release&amp;#34;,
&amp;#34;isBuildEnabled&amp;#34;: true,
&amp;#34;xrayScanEnabled&amp;#34;: true,
&amp;#34;failOnXrayScan&amp;#34;: true,
&amp;#34;sonarScanEnabled&amp;#34;: true,
&amp;#34;staging&amp;#34;: {
&amp;#34;stages&amp;#34;: [
&amp;#34;dev&amp;#34;
]
},
&amp;#34;additionalBuildParams&amp;#34;: &amp;#34;-DskipITs&amp;#34;,
&amp;#34;triggerBuildOnCommitEnabled&amp;#34;: false,
&amp;#34;hotfixCreationEnabled&amp;#34;: false
},
{
&amp;#34;stepType&amp;#34;: &amp;#34;hotfix&amp;#34;,
&amp;#34;isBuildEnabled&amp;#34;: true
}
]
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die folgenden Einstellungen können in der Konfiguration gefunden werden:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Gruppe&lt;/th>
&lt;th>Einstellung&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Root&lt;/td>
&lt;td>mainBranch&lt;/td>
&lt;td>Name des Produktions-Branches. Normalerweise master oder develop&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Root&lt;/td>
&lt;td>hotfixBranch&lt;/td>
&lt;td>Prefix für Hotfix-Branches&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Docker&lt;/td>
&lt;td>artifactoryDockerRepo&lt;/td>
&lt;td>Repository-Pfad für Docker&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Docker&lt;/td>
&lt;td>openshiftAppName&lt;/td>
&lt;td>Name der Applikation auf der Openshift Container Plattform&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Maven&lt;/td>
&lt;td>parentPom&lt;/td>
&lt;td>Pfad zum pom.xml&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Maven&lt;/td>
&lt;td>deployableArtifactsPom&lt;/td>
&lt;td>Angabe aller auslieferbaren pom.xml&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Maven&lt;/td>
&lt;td>artifactoryMavenRepo&lt;/td>
&lt;td>Name des Artifactory-Verzeichnisses&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stage (Angabe erfolgt pro Stage)&lt;/td>
&lt;td>stageName&lt;/td>
&lt;td>Name der Plattform als Abkürzung (dev, test, inte, prod)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stage (Angabe erfolgt pro Stage)&lt;/td>
&lt;td>isOpenshiftDeploymentEnabled&lt;/td>
&lt;td>Deployment auf Openshift erlaubt (true / false)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stage (Angabe erfolgt pro Stage)&lt;/td>
&lt;td>openshiftProject&lt;/td>
&lt;td>Name des Projekts auf der Openshift Container Plattform&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stage (Angabe erfolgt pro Stage)&lt;/td>
&lt;td>openshiftCluster&lt;/td>
&lt;td>Openshift Cluster (OTC, AWS, &amp;hellip;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stage (Angabe erfolgt pro Stage)&lt;/td>
&lt;td>openshiftJenkinsCredentialsId&lt;/td>
&lt;td>Secret Key, damit sich Jenkins auf der Openshift Container Plattform einloggen kann&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stage (Angabe erfolgt pro Stage)&lt;/td>
&lt;td>preCiDeploymentJob&lt;/td>
&lt;td>Name des vorgelagerten Jenkins-Jobs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Stage (Angabe erfolgt pro Stage)&lt;/td>
&lt;td>postCiDeploymentJob&lt;/td>
&lt;td>Name des nachgelagerten Jenkins-Jobs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Step (Angabe erfolgt pro Step)&lt;/td>
&lt;td>stepType&lt;/td>
&lt;td>Name der Option&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Step (Angabe erfolgt pro Step)&lt;/td>
&lt;td>isBuildEnabled&lt;/td>
&lt;td>Option aktiv (true / false)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Step (Angabe erfolgt pro Step)&lt;/td>
&lt;td>branchNamePrefixes&lt;/td>
&lt;td>Angabe der Präfixe der zu verwendenden Branches&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Step (Angabe erfolgt pro Step)&lt;/td>
&lt;td>additionalBuildParams&lt;/td>
&lt;td>Weitere Maven-Angaben&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Step (Angabe erfolgt pro Step)&lt;/td>
&lt;td>xrayScanEnabled&lt;/td>
&lt;td>XRay aktiv (true / false)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Step (Angabe erfolgt pro Step)&lt;/td>
&lt;td>failOnXrayScan&lt;/td>
&lt;td>Build schlägt fehl wenn XRay fehlschlägt (true / false)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Step (Angabe erfolgt pro Step)&lt;/td>
&lt;td>sonarScanEnabled&lt;/td>
&lt;td>Sonar aktiv (true / false)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Step (Angabe erfolgt pro Step)&lt;/td>
&lt;td>staging&lt;/td>
&lt;td>Angabe von Stages zur Auslieferung&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Step (Angabe erfolgt pro Step)&lt;/td>
&lt;td>triggerBuildOnCommitEnabled&lt;/td>
&lt;td>Wird dieser Build ausgeführt, wenn ein Commit erfolgt (true / false)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Step (Angabe erfolgt pro Step)&lt;/td>
&lt;td>hotfixCreationEnabled&lt;/td>
&lt;td>Darf dieser Build einen Hotfix-Branch erzeugen (true / false)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Die genauen Beschreibungen der einzelnen Einstellungen sind sehr umfangreich.
Weitere Informationen gibt es hier: &lt;a href="https://confluence.sbb.ch/display/CLEW/Esta+Cloud+Pipeline+-+Parameter+Documentation">https://confluence.sbb.ch/display/CLEW/Esta+Cloud+Pipeline+-+Parameter+Documentation&lt;/a>&lt;/p>
&lt;p>Zu Beginn gibt es Konfigurationen für GIT und Docker. Anschliessend benötigt Maven den Namen und den Pfad für das POM.
Die Auslieferung erfolgt auf sogenannte Stages, dies sind Projekte auf der Openshift Container Plattform. Jede Stage kann individuell konfiguriert werden.
Wichtig dabei ist der Schlüssel, welcher auf dem Jenkins hinterlegt sein muss. Nur mit diesem Schlüssel kann sich der Jenkins für ein Deployment auf der Openshift Container Plattform einloggen. Für jeden Step kann konfiguriert werden, ob er auf eine oder mehrere Stages ausgeliefert werden soll.
Die häufigsten Steps sind:&lt;/p>
&lt;ul>
&lt;li>Continuous&lt;/li>
&lt;li>Release&lt;/li>
&lt;li>Deploy&lt;/li>
&lt;/ul>
&lt;p>Der Continuous-Build dient dabei Branches vom Typ feature oder bugfix (je nach Konfiguration) zu bauen. Nur erfolgreiche Builds dieser Weiterentwicklungen oder Bugfixes können anschliessend in den Haupt-Entwicklungsbranch zurück gemerged werden. Dieser Build wird nicht auf eine Stage ausgeliefert.
Der Release-Build dient der Herstellung einer neuen Version einer Anwendung. Dieser Build taggt die Version auf dem GIT-Repository und liefert sie auf die entsprechend konfigurierten Stages aus. Vorbehalten bleibt normalerweise der Release auf eine produktive Umgebung.
Der Deploy-Build dient dem Deployment einer bestimmten Version auf eine bestimmte Stage. Die Stage kann dabei gewählt werden. Dieser Step-Typ wird normalerweise für den Release auf Integration- oder Produktionsplattformen verwendet.&lt;/p>
&lt;p>Zum Nachlesen gibt es hier noch die Dokumentation der Pipeline: &lt;a href="https://confluence.sbb.ch/display/CLEW/Esta+Cloud+Pipeline">https://confluence.sbb.ch/display/CLEW/Esta+Cloud+Pipeline&lt;/a>&lt;/p></description></item><item><title>Exams: Exam zu JavaScript</title><link>/exams/web/html_css/02_exam_js/</link><pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate><guid>/exams/web/html_css/02_exam_js/</guid><description>
&lt;h1 id="exam-1---zeiterfassungs-dashboard-mit-javascript-ergänzen">Exam 1 - Zeiterfassungs-Dashboard mit JavaScript ergänzen&lt;/h1>
&lt;p>&lt;img src="/images/task.png" alt="task1"> - Einzelarbeit&lt;/p>
&lt;p>Bei diesem Exam geht es darum, dass du das Dashboard, welches du im &lt;a href="../01_exam_html_css_rtm">HTML-CSS-Exam&lt;/a> geschrieben hast, mit JavaScript-Logik ergänzt.&lt;/p>
&lt;p>Die Seite sollte ungefähr so aussehen:&lt;/p>
&lt;p>&lt;img src="../rtm_home_page.png" alt="asset">&lt;/p>
&lt;h2 id="zeitangaben-aktualisieren">Zeitangaben aktualisieren&lt;/h2>
&lt;p>Oben links im Zeiterfassungstool ist die aktuelle Zeit zu finden.&lt;/p>
&lt;pre>&lt;code>Schreibe ein JavaScript auf dieser Seite, das die aktuelle Zeit oben links anzeigt.
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="/images/hint.png" alt="task1"> Hinweis:&lt;/p>
&lt;p>Um auf die aktuelle Uhrzeit und auf das Datum zuzugreifen, wirst du sicher auf die Klasse &lt;code>Date&lt;/code> zugreifen müssen. Hier findest du mehr Informationen darüber: &lt;a href="https://www.w3schools.com/jsref/jsref_obj_date.asp">https://www.w3schools.com/jsref/jsref_obj_date.asp&lt;/a>&lt;/p>
&lt;p>Die Kalenderwoche (KW) hinzuzufügen, ist ein bisschen tricky und deswegen optional. Wenn du diese trotzdem hinzufügen möchtest, dann informiere dich bitte zuerst darüber, was genau eine Kalenderwoche ist. Soweit ich weiss, gibt es keine eingebaute Methode, mit der du die Kalenderwoche bekommst, aber du kannst sie berechnen.&lt;/p>
&lt;h2 id="navigation-zuklappen">Navigation zuklappen&lt;/h2>
&lt;p>Auf der linken Seite hast du eine Navigation. Das Element für &amp;ldquo;Abfragen&amp;rdquo; hat wiederum Elemente untergeordnet. Diese Unterelemente sollten beim Klick auf den Pfeil gegen oben (^) verschwinden/zugeklappt werden.&lt;/p>
&lt;pre>&lt;code>Schreibe ein JavaScript, das dem User erlaubt,
das &amp;quot;Abfragen&amp;quot;-Element zuzuklappen und wenn es zugeklappt ist, wieder aufzuklappen.
&lt;/code>&lt;/pre>
&lt;details>
&lt;summary>Animationen&lt;/summary>
&lt;p>Wenn du möchtest, kannst du dem Ganzen Animationen verleihen:&lt;/p>
&lt;ul>
&lt;li>der Pfleil dreht sich, jenachdem ob das Element zu- oder aufgeklappt ist&lt;/li>
&lt;li>das &amp;ldquo;Berichte&amp;rdquo;-Element geht langsam nach oben (bzw. der Container mit den Unterelementen wird immer kleiner)&lt;/li>
&lt;/ul>
&lt;p>Animationen (bzw. &lt;code>transition&lt;/code>s) können sehr einfach mit CSS umgesetzt werden, siehe &lt;a href="https://www.w3schools.com/css/css3_transitions.asp">https://www.w3schools.com/css/css3_transitions.asp&lt;/a>.&lt;/p>
&lt;p>Damit du weniger Schwierigkeiten damit hast, hier ein kleiner Tipp:
Gib allen CSS-Properties einen Default-Wert. Wenn du z.B. einen Wert ändern möchtest, füge dem Element eine genauere CSS-Klasse mit JavaScript hinzu, welche die entsprechenden Regeln überschreibt. Du kannst einem Element eine Klasse hinzufügen bzw. entfernen mit &lt;code>.classList.toggle(className, show?)&lt;/code> (Beispiel: &lt;code>document.getElementById('abfragen').classList.toggle('show-child-elements', true)&lt;/code>).&lt;/p>
&lt;/details>
&lt;h2 id="dashboard-daten-dynamisch-laden">Dashboard-Daten dynamisch laden&lt;/h2>
&lt;p>Im HTML-CSS-Exam hast du den Text für die Kacheln hartcodiert. Das soll sich nun ändern.&lt;/p>
&lt;pre>&lt;code>Schreibe nun ein JavaScript, dass den Inhalt der Kacheln dynamisch befüllt.
Dein Script soll die Daten von hier laden:
https://raw.githubusercontent.com/it-ninjas/labs/master/static/files/json/dashboard.json
&lt;/code>&lt;/pre>
&lt;h2 id="personen-für-den-chat-dynamisch-laden">Personen für den Chat dynamisch laden&lt;/h2>
&lt;p>Auf der rechten Seite hast du eine Liste mit Personen für einen Chat. Nun geht es darum, auch diese Liste anhand eines JSONs zu generieren.&lt;/p>
&lt;pre>&lt;code>Ergänze dein JavaScript so, dass die Namen für die Chat-Liste von hier geladen werden:
https://raw.githubusercontent.com/it-ninjas/labs/master/static/files/json/chat.json
Zeige die Personen dann zeitlich versetzt an:
Füge zuerst die erste Person ein, warte dann ca. 0.3 Sekunden, zeige dann die zweite Person an usw.
&lt;/code>&lt;/pre>
&lt;h2 id="refresh-button">Refresh-Button&lt;/h2>
&lt;p>Oben rechts gibt es einen Refresh-Button.&lt;/p>
&lt;pre>&lt;code>Verändere dein HTML und JavaScript so, dass die Daten neu geladen werden, wenn der User auf diesen Refresh-Button klickt.
Neu geladen werden sollen die Zeitangaben, die Kacheln und der Chat
Achte darauf, dass du möglichst keine Code-Duplikation hast.
&lt;/code>&lt;/pre></description></item><item><title>Docs: Mit JavaScript das DOM verändern</title><link>/docs/web/javascript/03_js_dom_manipulation/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/javascript/03_js_dom_manipulation/</guid><description>
&lt;h2 id="auf-dom-elemente-zugreifen">Auf DOM-Elemente zugreifen&lt;/h2>
&lt;p>Eines der häufigsten Anwendungszwecke von JavaScript ist es, mit Elementen auf einer Website zu interagieren.&lt;/p>
&lt;p>Nehmen wir folgendes Code-schnipsel als Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;message-div&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;This page has &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;likes-count&amp;#34;&lt;/span>&amp;gt;0&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; likes.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;button&amp;#34;&lt;/span>&amp;gt;+1&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mit JavaScript möchten wir, dass sich die Zahl im &lt;code>&amp;lt;span&amp;gt;&lt;/code> erhöht. In einem ersten Schritt versuchen wir, auf das &lt;code>&amp;lt;span&amp;gt;&lt;/code>-Element zuzugreifen und eine andere Zahl reinzuschreiben. Das probieren wir direkt in der Konsole des Browsers aus:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;likes-count&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">999&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Du wirst sehen, dass sich die Zahl im &lt;code>&amp;lt;span&amp;gt;&lt;/code> tatsächlich verändert hat. Probieren wir aber zuerst, den Code zu verstehen!&lt;/p>
&lt;details>
&lt;summary>Erläuterung (click to expand)&lt;/summary>
&lt;ul>
&lt;li>&lt;code>document&lt;/code> ist ein Objekt, das uns im Browser zur Verfügung steht. Dieses Objekt repräsentiert das DOM. Mit diesem &lt;code>document&lt;/code>-Objekt können wir auf die Elemente im Browser zugreifen.&lt;/li>
&lt;li>&lt;code>getElementById(...)&lt;/code> ist eine Methode auf diesem &lt;code>document&lt;/code>-Objekt. Diese Methode sucht auf der aktuellen Seite ein Element, das die übergebene &lt;code>id&lt;/code> besitzt.&lt;/li>
&lt;li>Das gefundene Element möchten wir in einer Variablen namens &lt;code>span&lt;/code> zwischenspeichern.&lt;/li>
&lt;li>&lt;code>textContent&lt;/code> ist ein Feld (= ein Attribut) auf diesem Element, das den Inhalt des Elements (als Text) repräsentiert. Diesen Wert können wir einfach so kopieren.&lt;/li>
&lt;/ul>
&lt;/details>
&lt;p>Mit diesem Code konnten wir die Anzahl Likes auf eine andere Zahl setzen. Nun möchten wir aber, dass sich diese Anzahl um genau 1 erhöht. Dafür benötigen wir noch zwei Zwischenschritte:&lt;/p>
&lt;ol>
&lt;li>Die aktuelle Zahl auslesen&lt;/li>
&lt;li>Diese Zahl von einem String in eine Nummer konvertieren&lt;/li>
&lt;li>Und die erhöhte Zahl ins &lt;code>&amp;lt;span&amp;gt;&lt;/code> schreiben.&lt;/li>
&lt;/ol>
&lt;p>Versuche dies zu implementieren, bevor du dir die Lösung ansiehst.&lt;/p>
&lt;details>
&lt;summary>Lösung (click to expand)&lt;/summary>
Das könnte ungefähr so aussehen:
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;likes-count&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> parseInt(&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span>);
&lt;span style="color:#a6e22e">likes&lt;/span>&lt;span style="color:#f92672">++&lt;/span>;
&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Neu dazugekommen ist&lt;/p>
&lt;ul>
&lt;li>der Aufruf von &lt;code>parseInt(...)&lt;/code>. Diese Methode ist standartmässig Global verfügbar und kann somit ohne imports verwendet werden. Diese Methode versucht, den übergeben Wert in eine Ganzzahl (Integer) zu konvertieren.&lt;/li>
&lt;li>&lt;code>likes++&lt;/code> bedeutet gleich viel wie &lt;code>likes = likes + 1&lt;/code>. Damit erhöhen wir die &lt;code>likes&lt;/code>-Variable also um 1.&lt;/li>
&lt;li>Mit &lt;code>span.textContent = likes&lt;/code> setzen wir den Text des &lt;code>span&lt;/code>s neu. Eine Umwandlung in String ist nicht notwendig.&lt;/li>
&lt;/ul>
&lt;p>Versuche das ganze nun mal ohne die parseInt Methode.
Du wirst sehen, dass es trotzdem funktioniert. Das liegt daran, dass JS keine &amp;ldquo;starke&amp;rdquo; typen (strong types) kennt. Sprich der JS-Interpreter versucht auch einen String als Zahl zu verwenden und wenn es sich wirklich um eine Zahl handelt, funktioniert das auch:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js"> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">onLikeClick&lt;/span>() {
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;likes-count&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span>;
&lt;span style="color:#a6e22e">likes&lt;/span>&lt;span style="color:#f92672">++&lt;/span>;
&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dies ist aber sehr fragil, daher ist es good practice, die Variablen trotzdem in die korrekten typen umzuwandeln.
Gut zu wissen, ist das sich JavaScript teilweise etwas unerwartet verhält.&lt;/p>
&lt;/details>
&lt;h3 id="manipulation-beim-button-klick-ausführen-lassen">Manipulation beim Button-Klick ausführen lassen&lt;/h3>
&lt;p>Nun wollen wir noch, dass das, was wir vorher programmiert haben, dann passiert, wenn der User auf den Button klickt. Ändere die HTML-Seite wie folgt ab:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">...
&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;button&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onclick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;onLikeClick()&amp;#34;&lt;/span>&amp;gt;+1&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">onLikeClick&lt;/span>() {
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;likes-count&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> parseInt(&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span>);
&lt;span style="color:#a6e22e">likes&lt;/span>&lt;span style="color:#f92672">++&lt;/span>;
&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span>;
}
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="ein-neues-element-hinzufügen">Ein neues Element hinzufügen&lt;/h2>
&lt;p>Manchmal möchtest du ein neues Element auf der Website generieren lassen.&lt;/p>
&lt;p>Im kommenden Beispiel möchten wir so viele Bilder von &amp;ldquo;Thumbs Ups&amp;rdquo; (also 👍) wie Likes anzeigen.&lt;/p>
&lt;p>Um das zu erzielen, kannst du die &lt;code>onLikeClick&lt;/code>-Funktion wie folgt erweitern:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#75715e">// draw a thumb up for every like:
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">imgHtml&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;img src=&amp;#34;https://upload.wikimedia.org/wikipedia/commons/c/ce/Emoji_u1f44d.svg&amp;#34; alt=&amp;#34;like&amp;#34; height=&amp;#34;25&amp;#34;&amp;gt;&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">insertHtml&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#a6e22e">insertHtml&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">imgHtml&lt;/span>;
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">messageDiv&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">querySelector&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;div#message-div&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">messageDiv&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">insertHtml&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dieser Code macht folgendes:&lt;/p>
&lt;ul>
&lt;li>für jedes Like, wird im &lt;code>&amp;lt;div id=&amp;quot;message-div&amp;quot;&amp;gt;&lt;/code> folgendes Element/Bild hinzugefügt: &lt;code>&amp;lt;img src=&amp;quot;https://upload.wikimedia.org/wikipedia/commons/c/ce/Emoji_u1f44d.svg&amp;quot; alt=&amp;quot;like&amp;quot; height=&amp;quot;25&amp;quot;&amp;gt;&lt;/code>&lt;/li>
&lt;li>Das HTML für dieses Bild haben wir zuerst in einer Konstante (&lt;code>const&lt;/code>) gespeichert. &lt;code>const&lt;/code> ist das Gleiche wie &lt;code>let&lt;/code> mit dem Unterschied, dass sich dieser Wert nie verändern darf innerhalb dieser Methode. Wenn sich eine Variable nie im definierten Block verändert, so wird empfohlen, &lt;code>const&lt;/code> statt &lt;code>let&lt;/code> zu verwenden.&lt;/li>
&lt;li>Die String-Variable &lt;code>insertHtml&lt;/code> brauchen wir als Zwischenspeicher, in welcher wir den HTML-String zusammensetzen, welche wir später im HTML/DOM haben möchten.&lt;/li>
&lt;li>Die &lt;code>for&lt;/code>-Schlaufe wird so oft durchlaufen, wie es Likes gab. Das bedeutet, dass pro Like ein Bild ins &lt;code>insertHtml&lt;/code> kopiert wird.&lt;/li>
&lt;li>Anschliessend holen wir uns das &lt;code>&amp;lt;div id=&amp;quot;message-div&amp;quot;&amp;gt;&lt;/code> via JavaScript. Wir hätten hier auch &lt;code>document.getElementById('message-div')&lt;/code> verwenden können. Aber &lt;code>querySelector&lt;/code> funktioniert hier auch. Die &lt;code>querySelector&lt;/code>-Methode akzeptiert ein CSS-Selektor und gibt dann das Element zurück, das damit angesprochen wird. In diesem Beispiel war &lt;code>div#message-div&lt;/code> ein möglicher CSS-Selektor (wie &lt;code>#message-div&lt;/code> eigentlich auch), der das &lt;code>&amp;lt;div id=&amp;quot;message-div&amp;quot;&lt;/code> anspricht.&lt;/li>
&lt;li>Als letztes verändern wir das HTML dieses &lt;code>&amp;lt;div&amp;gt;&lt;/code>s, indem wir das &lt;code>innerHTML&lt;/code>-Feld neu setzen.&lt;/li>
&lt;/ul>
&lt;p>Super, nun hast du schon ein paar Dinge auf deiner Seite mit JavaScript dynamisch verändert.&lt;/p>
&lt;p>Bitte denke daran, dass das Verwenden von &lt;code>.innerHTML&lt;/code> als eine Art &amp;ldquo;Holzfäller-Methode&amp;rdquo; angesehen wird. JavaScript bietet hierfür bereits eine elegantere Möglichkeit, die aber oft viel zu umständlich ist. Bitte schaue dir diese trotzdem kurz an: &lt;a href="https://www.w3schools.com/js/js_htmldom_nodes.asp">https://www.w3schools.com/js/js_htmldom_nodes.asp&lt;/a>&lt;/p></description></item><item><title>Docs: Basics zu HTML</title><link>/docs/web/html_css/03_html_basics/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/03_html_basics/</guid><description>
&lt;h2 id="erklärung-zum-vorherigen-beispiel">Erklärung zum vorherigen Beispiel&lt;/h2>
&lt;p>Im vorherigen Beispiel hatten wir diesen Code:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Kleiner Witz&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Wie viele Softwareentwickler braucht man,
um eine Glühbirne auszuwechseln?&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Keinen, das ist ein Hardware-Problem!&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Du hast gesehen, dass es das zwischen &lt;code>&amp;lt;h1&amp;gt;&lt;/code> und &lt;code>&amp;lt;/h1&amp;gt;&lt;/code> wie ein Titel formatiert wurde. Der Text zwischen &lt;code>&amp;lt;p&amp;gt;&lt;/code> und &lt;code>&amp;lt;/p&amp;gt;&lt;/code> in eigenen Abschnitten dargestellt.&lt;/p>
&lt;h2 id="html-tags">HTML Tags&lt;/h2>
&lt;p>Du hast schon die ersten &amp;ldquo;HTML Tags&amp;rdquo; kennengelernt: &lt;code>&amp;lt;h1&amp;gt;&lt;/code> und &lt;code>&amp;lt;p&amp;gt;&lt;/code>. &lt;code>&amp;lt;h1&amp;gt;&lt;/code> wird für Titel und &lt;code>&amp;lt;p&amp;gt;&lt;/code> wird für Paragrafen verwendet.&lt;/p>
&lt;p>HTML Tags sind wie Keywords (Schlüsselbegriffe), die beschreiben, wie der Browser deren Inhalt (Content) formatiert bzw. darstellt.&lt;/p>
&lt;p>Die Tags inklusiv deren Inhalt nennen wir &amp;ldquo;Element&amp;rdquo;. Das Element ist wie folgt aufgebaut:&lt;/p>
&lt;p>&lt;img src="../html-tag.svg" alt="htmlElement" title="(Bild, das den Aufbau eines HTML-Elements zeigt.)">&lt;/p>
&lt;p>Jedes Element beginnt mit einem &amp;ldquo;Opening Tag&amp;rdquo;. Zwischen diesem und dem Closing Tag befindet sich der Content, der auf Grundlage des Tags formatiert wird. Der Content wird oft &amp;ldquo;InnerText&amp;rdquo; oder &amp;ldquo;InnerHtml&amp;rdquo; genannt. Das Closing Tag hat immer vor dem Tag-Namen ein &amp;ldquo;/&amp;rdquo;, das symbolisiert, dass es sich um ein Closing Tag handelt.&lt;/p>
&lt;p>Im Opening Tag können Attribute vorkommen, die den Tag &amp;ldquo;konfigurieren&amp;rdquo;. Eine solche Konfiguration beinhaltet in den meisten Fällen ein Attribut-Key und -Value, welche mit einem Gleichzeichen verbunden werden. Der Attribut-Value (Wert) beginnt und endet IN JEDEM FALL mit einem Anführungs- bzw. Schlusszeichen, auch wenn der Wert eine Zahl oder true bzw. false ist.&lt;/p></description></item><item><title>Docs: Einführung Angular</title><link>/docs/web/angular/04_1_einf%C3%BChrung_angular/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_1_einf%C3%BChrung_angular/</guid><description>
&lt;h2 id="architektur">Architektur&lt;/h2>
&lt;p>Angular wird für Frontend-Applikationen verwendet. Oft wird ein Backend via HTTP(s) angebunden.
&lt;img src="/images/angular/angular_einf%C3%BChrung.png" alt="Angular">&lt;br>
&lt;img src="/images/angular/architektur.png" alt="Angular">&lt;/p>
&lt;h2 id="angular-data-bindings">Angular Data Bindings&lt;/h2>
&lt;h3 id="interpolation">Interpolation&lt;/h3>
&lt;ul>
&lt;li>Anhand von diesem One-Way Binding kann man Properties des Components im Template anzeigen.&lt;br>
Wenn sich das Property im Component ändert, wird das Template aktualisiert, um die neuen Änderungen anzuzeigen.&lt;/li>
&lt;/ul>
&lt;h3 id="property-binding">Property Binding&lt;/h3>
&lt;ul>
&lt;li>Anhand von Property Bindings können wir einen Wert unseres Components auf eine Eigenschaft eines Elements binden.&lt;br>
Wenn sich also der bestimme Wert im Component verändern sollte, wird dies im Template aktualisiert.&lt;/li>
&lt;/ul>
&lt;h3 id="event-binding">Event Binding&lt;/h3>
&lt;ul>
&lt;li>Event Binding ist definiert als das Aktualisieren/Senden des Werts/der Information einer bestimmten Variablen vom Template zum Component.&lt;br>
Zum Beispiel das Klicken eines Buttons.&lt;/li>
&lt;/ul>
&lt;h3 id="two-way-binding">Two-Way-Binding&lt;/h3>
&lt;ul>
&lt;li>Two-Way-Binding ist eine Kombination aus Property- und Eventbinding. Daten werden kontinuierlich synchronisiert: vom Template zum Component und vom Component zum Template.&lt;br>
Dies bedeutet also, dass Änderungen, die an den Daten des Components vorgenommen wurden, werden mit dem Template synchronisiert und sofort aktualisiert.&lt;br>
Umgekehrt funktioniert es auf dieselbe Weise, daher auch der Name &amp;ldquo;Two-Way-Binding&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images/angular/component-of-Data-Binding.png" alt="Databinding">&lt;/p></description></item><item><title>Docs: Exception Handling</title><link>/docs/java/exception_handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/java/exception_handling/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich kenne die Schlüsselwörter try, catch, finally, throw und throws&lt;/li>
&lt;li>Ich weiss was &amp;ldquo;Unchecked&amp;rdquo; und &amp;ldquo;Checked&amp;rdquo; Exceptions sind&lt;/li>
&lt;li>Ich kann auftretende Exceptions abhandeln&lt;/li>
&lt;li>Ich kann eigene Exceptions definieren und anwenden&lt;/li>
&lt;li>Ich kenne Multicatch und Try-With-Resources und kann die beiden Konstrukte anwenden&lt;/li>
&lt;li>Ich kenne die beiden Interfaces AutoCloseable und Closeable&lt;/li>
&lt;/ul>
&lt;h4 id="änderungskontrolle">Änderungskontrolle&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Autor&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Datum&lt;/th>
&lt;th>Änderungen&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Claudio Zesiger&lt;/td>
&lt;td>0.1&lt;/td>
&lt;td>01.09.2020&lt;/td>
&lt;td>* Initiale Version erstellt&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Claudio Zesiger&lt;/td>
&lt;td>0.2&lt;/td>
&lt;td>21.10.2020&lt;/td>
&lt;td>* Initiale Version abgeschlossen&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="voraussetzungen">Voraussetzungen&lt;/h4>
&lt;ul>
&lt;li>Gute Grundlagenkenntnisse von Java-Anwendungen&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="theorie--einleitung">Theorie / Einleitung&lt;/h2>
&lt;hr>
&lt;p>In jeder Applikation kann es zu erwarteten oder unerwarteten Fehlern kommen. In Java werden diese Fehler durch den Bereich Exception Handling abgedeckt. Im Exception Handling gilt es, durch gezieltes Abhandeln von auftretenden Exceptions, Abstürze der Anwendung zu verhindern. Jeder Software-Entwickler muss sich bewusst sein, dass nicht behandelte Exceptions eine Anwendung jederzeit beenden können. Ebenfalls schlimme Auswirkungen in Form von &amp;ldquo;Memory Leaks&amp;rdquo; haben nicht geschlossene Streams.&lt;/p>
&lt;p>Innerhalb des Java Exception Handling unterscheiden wir zwei Arten von Exceptions:&lt;/p>
&lt;ul>
&lt;li>Unchecked Exceptions&lt;/li>
&lt;li>Checked Exceptions&lt;/li>
&lt;/ul>
&lt;p>Unchecked Exceptions sind Laufzeitfehler und werden durch den Compiler nicht erkannt. Bei der Implementation werden diese Fehler häufig übersehen. Der häufigste Laufzeitfehler ist die NullPointerException. Diese kann erst zur Laufzeit auftreten, da nur zur Laufzeit Objekte erzeugt werden und damit eine Referenz überhaupt null sein kann. Die einzige Möglichkeit Laufzeitfehler abzuhandeln ist &amp;ldquo;Safe Programming&amp;rdquo;. Während der Implementation prüfen wir also beispielsweise, ob eine Referenz nicht null ist bevor wir darauf zugreifen.&lt;/p>
&lt;p>Checked Exceptions hingegen werden durch den Compiler erkannt und müssen zum Zeitpunkt der Kompilierung entweder am Ort des Auftretens abgehandelt werden oder sie werden an das Objekt weitergereicht, welches die entsprechende Methode aufgerufen hat. Damit wird auch die Verantwortung die Exception abzuhandeln an den Aufrufer weitergegeben.&lt;/p>
&lt;p>Dazu ein kleines Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static void main(String\[\] args) {
PhoneBook phoneBook = new PhoneBook();
Person person = phoneBook.findByPhoneNumber(&amp;#34;079 654 32 10&amp;#34;);
System.out.println(person.getName());
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ohne die Implementation der Methode findByPhoneNumber zu kennen, muss ein Software-Entwickler an dieser Stelle das zurückgelieferte Objekt vom Typ Person zuerst auf null prüfen.
Schauen wir uns also die Implementation dieser Methode etwas genauer an:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public class PhoneBook {
private List&amp;lt;Person&amp;gt; entries = new ArrayList&amp;lt;&amp;gt;();
public Person findByPhoneNumber(String number) {
for (Person p: this.entries) {
if (p.getPhoneNumber().equals(number)) {
return p;
}
}
return null;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wie (vielleicht) erwartet liefert die Methode null zurück, falls kein Eintrag mit der gesuchten Nummer gefunden wird. Dies führt in der Main-Methode im Codeblock oben auf der letzten Zeile zu einer NullPointerException, da die Referenz der Person auf null zeigt. Abhilfe schafft hier ein einfaches If-Statement.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static void main(String\[\] args) {
AddressBook addressBook = new AddressBook();
Person person = addressBook.findByPhoneNumber(&amp;#34;079 654 32 10&amp;#34;);
if (person != null) {
System.out.println(person.getName());
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Laufzeitfehler kann nun nicht mehr auftreten. Es stellt sich nun die Frage, ob wir mit dieser Lösung zufrieden sein können. Im Prinzip müssten wir zumindest noch ein Else-Statement ergänzen, damit wir informiert werden wenn keine Person mit dieser Nummer gefunden wird.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static void main(String\[\] args) {
AddressBook addressBook = new AddressBook();
Person person = addressBook.findByPhoneNumber(&amp;#34;079 654 32 10&amp;#34;);
if (person != null) {
System.out.println(person.getName());
} else {
System.out.println(&amp;#34;Es wurde keine Person mit dieser Nummer gefunden!&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Eine andere Lösung könnte sein das Null-Object Pattern zu verwenden und damit ein gültiges Objekt anstelle von null zurückzuliefern.&lt;/p>
&lt;hr>
&lt;h2 id="try--catch--finally">try / catch / finally&lt;/h2>
&lt;p>Um eine Checked Exception abzuhandeln, muss der Block (welcher die Exception erzeugt) innerhalb eines try-Blocks angelegt werden. Der abzuhandelnde Exception-Typ wird dabei in den catch-Block geschrieben.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">try {
// Code, welcher eine IOException werfen könnte
} catch (IOException e) {
// Code für die Abhandlung der IOException
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ein solches Statement kann beliebig viele catch-Blöcke aufweisen&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">try {
int[] array = new int[2];
array[3] = 30 / 0;
} catch (ArithmeticException e) {
// Code für die Abhandlung der ArithmeticException
} catch (ArrayIndexOutOfBoundsException e) {
// Code für die Abhandlung der ArrayIndexOutOfBoundsException
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bei mehreren catch-Blöcken muss die spezifischste Exception stets zuoberst stehen. Je weiter unten der catch-Block steht, desto genereller wird die Exception, die abgefangen werden soll. Der Grund dafür ist, dass alle Checked Exceptions von der Klasse Exception abgeleitet sind.&lt;br>
Steht eine allgemeinere Exception weiter oben, so wird der catch-Block der spezifischeren Exception weiter unten nicht mehr erreichbar.&lt;/p>
&lt;p>An jeden try-Block (ob mit oder ohne catch-Block) kann zusätzlich ein finally-Block angehängt werden. Dieser Block wird nach der Abhandlung der Exception ausgeführt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">try {
// Code, welcher eine IOException werfen könnte
} catch (IOException e) {
// Code für die Abhandlung der IOException
} finally {
// Code, welcher nach der Abhandlung der Exception ausgeführt werden soll
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wie oben erwähnt, kann der catch-Block weggelassen werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">try {
// Code, welcher eine beliebige Exception werfen könnte
} finally {
// Code, welcher nach der Abhandlung der Exception ausgeführt werden soll
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Vorsicht ist geboten bei return-Anweisungen innerhalb von catch- oder finally-Blöcken. Da der finally-Block immer zuletzt ausgeführt wird, ist das Statement in diesem Block auch massgebend für die Funktionalität.&lt;/p>
&lt;hr>
&lt;h2 id="throw--throws">throw / throws&lt;/h2>
&lt;p>Wie bereits weiter oben erwähnt, muss eine Exception nicht immer dort abgehandelt werden wo sie gerade auftreten kann. Wenn sich der Entwickler also entscheidet die Abhandlung in andere Klassen zu verlagern, so kann er mit dem Schlüsselwort throws angeben, dass die aufrufende Komponente die Exception abhandeln muss.&lt;/p>
&lt;p>Dazu ein kurzes Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public class EntryForbiddenException extends Exception {
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public class Saloon {
public void checkAge(int age) throws EntryForbiddenException {
if (age &amp;lt; 18) {
throw new EntryForbiddenException();
}
// ...
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public class Main {
public static void main(String\[\] args) {
Saloon saloon = new Saloon();
try {
saloon.checkAge(15);
} catch (EntryForbiddenException e) {
// ...
}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wie wir sehen, wird die Abhandlung in die Main-Methode verlagert. Die Weitergabe von Exceptions kann über beliebig viele Stufen erfolgen. Wird die Exception jedoch von der &amp;ldquo;obersten&amp;rdquo; Stufe (in diesem Fall die Main-Methode) nicht abgehandelt, so wird die Anwendung mit der entsprechenden Exception beendet. Dies passiert, weil niemand die Exception abgehandelt hat.&lt;/p>
&lt;hr>
&lt;h2 id="umwandlung-laufzeitfehler-in-checked-exception">Umwandlung Laufzeitfehler in Checked Exception&lt;/h2>
&lt;p>Mit der Lösung aus dem Beispiel weiter oben können wir nicht wirklich zufrieden sein. Anstatt den Rückgabewert der Methode findByPhoneNumber auf null zu prüfen, wählen wir nun einen anderen Ansatz: Wir erweitern die Anwendung, so dass die Methode als Rückgabewert keine null-Werte mehr liefert. Da wir aber durch den Compiler gezwungen werden einen Rückgabewert zu definieren, bleibt uns nur noch die Möglichkeit übrig eine Exception zu werfen.
Zu diesem Zweck definieren wir zuerst einmal eine entsprechende Exception:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public class PersonNotFoundException extends Exception {
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Diese Exception wird nun an der entsprechenden Stelle im Sourcecode geworfen. Die Methode erhält zudem noch eine Erweiterung mit dem Schlüsselwort throws.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public class PhoneBook {
private List&amp;lt;Person&amp;gt; entries = new ArrayList&amp;lt;&amp;gt;();
public Person findByPhoneNumber(String number) throws PersonNotFoundException {
for (Person p: this.entries) {
if (p.getPhoneNumber().equals(number)) {
return p;
}
}
throw new PersonNotFoundException();
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Beim Aufruf der Methode sind wir nun gezwungen, die Exception abzuhandeln.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static void main(String[] args) {
AddressBook addressBook = new AddressBook();
try {
Person person = addressBook.findByPhoneNumber(&amp;#34;079 654 32 10&amp;#34;);
System.out.println(person.getName());
} catch (PersonNotFoundException e) {
System.out.println(&amp;#34;Es wurde keine Person mit dieser Nummer gefunden!&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Aus dem ursprünglichen Laufzeitfehler ist nun eine abgehandelte Exception geworden. Die Implementation vermeidet wo immer möglich die Rückgabe von null-Werten.&lt;/p>
&lt;hr>
&lt;h2 id="multi-catch">Multi-Catch&lt;/h2>
&lt;p>Seit Java 7 gibt es die Möglichkeit für einen sogenannten Multi-Catch.&lt;/p>
&lt;p>Schauen wir uns das folgende Beispiel an:&lt;/p>
&lt;h3 id="ohne-multi-catch">Ohne Multi-Catch&lt;/h3>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static void main(String[] args) {
Scanner scn = new Scanner(System.in);
try {
int n = Integer.parseInt(scn.nextLine());
if (99%n == 0) {
System.out.println(n + &amp;#34; is a factor of 99&amp;#34;);
}
} catch (ArithmeticException ex) {
System.out.println(&amp;#34;Arithmetic Exception &amp;#34; + ex);
} catch (NumberFormatException ex) {
System.out.println(&amp;#34;Number Format Exception &amp;#34; + ex);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="mit-multi-catch">Mit Multi-Catch&lt;/h3>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static void main(String[] args) {
Scanner scn = new Scanner(System.in);
try {
int n = Integer.parseInt(scn.nextLine());
if (99%n == 0) {
System.out.println(n + &amp;#34; is a factor of 99&amp;#34;);
}
} catch (ArithmeticException | NumberFormatException ex) {
System.out.println(&amp;#34;Exception &amp;#34; + ex);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die beiden Exceptions werden in einem catch-Block zusammengefasst.
Die Exceptions innerhalb eines Multi-Catch dürfen nicht in einer Vererbungsbeziehung zueinander stehen. Der Basistyp muss also unterschiedlich sein.&lt;/p>
&lt;hr>
&lt;h2 id="try-with-resources">Try-With-Resources&lt;/h2>
&lt;p>Ebenfalls seit Java 7 gibt es die Möglichkeiten für automatisches Ressourcen-Management.
Betrachten wir dazu zuerst ein Beispiel ohne automatisches Ressourcen-Management:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static String readFirstLine(String path) {
BufferedReader br = null;
try {
br = new BufferedReader(new FileReader(path));
return br.readLine();
} catch (IOException e) {
// handle or rethrow
} finally {
try {
if (br != null) {
br.close();
}
} catch (IOException e) {
// ignore
}
}
return &amp;#34;&amp;#34;;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der finally-Block ist notwendig, um die verwendete Ressource des Buffered-Readers zu schliessen. Da beim Schliessen aber eine IOException auftreten kann benötigen wir innerhalb des finally-Blocks einen zusätzlichen try-catch-Block.&lt;/p>
&lt;p>Betrachten wir nun das gleiche Beispiel mit automatischem Ressourcen-Management:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static String readFirstLine(String path) {
try (FileReader fr = new FileReader(path); BufferedReader br = new BufferedReader(fr)) {
return br.readLine();
} catch (IOException e) {
// handle or rethrow
}
return &amp;#34;&amp;#34;;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wie wir sehen fällt der finally-Block zum Schliessen der Ressourcen komplett weg. Die beiden Ressourcen FileReader und BufferedReader werden automatisch geschlossen. Dies geschieht im Hintergrund über die Methode close, welche vom Interface AutoCloseable zur Verfügung gestellt wird. In einem try-with-resources Statement dürfen also nur Objekte vorliegen, welches das genannte Interface implementieren. Das Closeable-Interface mit der gleichen Funktion stellt dabei die Abwärtskompatibilität zu älteren Java-Versionen sicher. Grundsätzlich soll das Closeable-Interface für IO Streams verwendet werden, da es mit IOExceptions arbeitet.&lt;/p>
&lt;p>Das Schliessen der Ressourcen hat stets die Reihenfolge von hinten nach vorne. In unserem Beispiel wird also zuerst der BufferedReader geschlossen und danach der FileReader. Die Verkettung von Ressourcen innerhalb eines try-with-resources Statements ist zu vermeiden. Besser sind separate Deklarationen wie oben gezeigt.&lt;/p></description></item><item><title>Docs: Git Basics</title><link>/docs/git/git-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/git-basics/</guid><description>
&lt;p>Git kann auf unterschiedliche Arten eingesetzt werden, es gibt graphische Oberflächen und die meisten Git-Server Software bieten Weboberflächen, welche das interagieren mit Git Repositories kinderleicht gestalten. Da diese Oberflächen meist sehr Produktspezifisch sind und oft auch nicht alle Funktionen beinhaltet werden hier nur die Kommandozeilen Befehle angeschaut. Ausserdem empfiehlt es sich mit git auf der Kommandozeile zu starten da es so viel verständlicher ist.&lt;/p>
&lt;h2 id="inhalt">Inhalt&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#konfiguration-von-git">Konfiguration von Git&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hilfe">Hilfe&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ein-git-repository-anlegen">Ein Git Repository anlegen&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%C3%A4nderungen-verfolgen-und-im-repository-speichern">Änderungen verfolgen und im Repository speichern&lt;/a>&lt;/li>
&lt;li>&lt;a href="#anzeigen-der-commit-historie">Anzeigen der Commit Historie&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%C3%A4nderungen-r%C3%BCckg%C3%A4ngig-machen">Änderungen rückgängig machen&lt;/a>&lt;/li>
&lt;li>&lt;a href="#mit-remotes-arbeiten">Mit Remotes arbeiten&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="konfiguration-von-git">Konfiguration von Git&lt;/h2>
&lt;p>Git kann, wie die viele Software unter Linux, auf unterschiedlichen Level konfiguriert werden:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/etc/gitconfig&lt;/code> enthält die Werte, welche für alle Benutzer auf dem System gelten. Die Datei kann mit &lt;code>git config --system&lt;/code> gelesen oder editiert werden. Man braucht Administrator- oder Superuser-Rechte um die Datei zu editieren.&lt;/li>
&lt;li>&lt;code>~/.gitconfig&lt;/code> oder &lt;code>~/.config/git/config&lt;/code> enthält die Werte, welche für den aktuellen Benutzer konfiguriert sind. Mit &lt;code>git config --global&lt;/code> können Werte gesetzt oder ausgelesen werden.&lt;/li>
&lt;li>Die Datei &lt;code>config&lt;/code> im &lt;code>.git&lt;/code> Verzeichnis innerhalb eines Repositories enthält die Konfiguration, welche nur für dieses Repository zählt. Das Flag für &lt;code>git config&lt;/code> ist in diesem Fall &lt;code>--local&lt;/code>, ist jedoch in der Regel die Standardoption und kann weggelassen werden.&lt;/li>
&lt;/ul>
&lt;p>Jede dieser Konfiguration wird von der nächsten überschrieben, sodass die Repository bezogene Konfiguration den höchsten Wert hat. Um zu die aktuelle Konfiguration und ihren Ursprung anzusehen kann folgender Befehl ausgeführt werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git config --list --show-origin
file:/home/lehrling/.gitconfig user.email&lt;span style="color:#f92672">=&lt;/span>lehrling@puzzle.ch
file:/home/lehrling/.gitconfig user.name&lt;span style="color:#f92672">=&lt;/span>Lehrling Puzzle
file:/home/lehrling/.gitconfig push.default&lt;span style="color:#f92672">=&lt;/span>simple
file:/home/lehrling/.gitconfig merge.tool&lt;span style="color:#f92672">=&lt;/span>meld
file:.git/config core.repositoryformatversion&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
file:.git/config core.filemode&lt;span style="color:#f92672">=&lt;/span>true
file:.git/config core.bare&lt;span style="color:#f92672">=&lt;/span>false
file:.git/config core.logallrefupdates&lt;span style="color:#f92672">=&lt;/span>true
file:.git/config remote.origin.url&lt;span style="color:#f92672">=&lt;/span>git@github.com:puzzle-bbt/training-sbb-puzzle.git
file:.git/config remote.origin.fetch&lt;span style="color:#f92672">=&lt;/span>+refs/heads/*:refs/remotes/origin/*
file:.git/config branch.master.remote&lt;span style="color:#f92672">=&lt;/span>origin
file:.git/config branch.master.merge&lt;span style="color:#f92672">=&lt;/span>refs/heads/master
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="konfigurationsbeispiele">Konfigurationsbeispiele&lt;/h3>
&lt;p>Nach der Installation von Git sollte als erstes der Name und die Email Adresse konfiguriert werden, da diese beiden Angaben bei jedem Commit benötigt werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git config --global user.name &lt;span style="color:#e6db74">&amp;#34;John Doe&amp;#34;&lt;/span>
$ git config --global user.email johndoe@example.com
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wie wir bereits gelernt haben, schreiben wir mit dem &lt;code>--global&lt;/code> Flag in die Konfiguration in unserem &lt;code>home&lt;/code> Verzeichnis und sie gilt somit für alle Repositories, welche wir mit unserem User bearbeiten. Wollen wir dies fur ein bestimmtes Repo übersteuern, haben wir immer noch die Möglichkeit dies mit &lt;code>--local&lt;/code> zu machen.&lt;/p>
&lt;p>Eine weitere Konfiguration die evtl. hilfreich sein kann ist &lt;code>core.editor&lt;/code> mit welcher, der Texteditor definiert werden kann. Git benutzt, falls hier nichts definiert ist, den standard Editor des Systems.&lt;/p>
&lt;h2 id="hilfe">Hilfe&lt;/h2>
&lt;p>Git bietet mehrere Möglichkeit, wie man an Hilfe gelangt, wenn mal einmal nicht weiter weiss:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git help &amp;lt;verb&amp;gt;
$ git &amp;lt;verb&amp;gt; --help
$ man git-&amp;lt;verb&amp;gt;
&lt;span style="color:#75715e"># Kurzversion:&lt;/span>
$ git &amp;lt;verb&amp;gt; -h
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn man also nicht mehr genau weiss, wie dies mit der Konfiguration von Git funktioniert kann man sich folgendermassen weiterhelfen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git help config &lt;span style="color:#75715e">#ruft die Manpage auf&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>..&lt;span style="color:#f92672">]&lt;/span>
$ git config -h
usage: git config &lt;span style="color:#f92672">[&lt;/span>&amp;lt;options&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
Config file location
--global use global config file
--system use system config file
--local use repository config file
--worktree use per-worktree config file
-f, --file &amp;lt;file&amp;gt; use given config file
--blob &amp;lt;blob-id&amp;gt; read config from given blob object
Action
--get get value: name &lt;span style="color:#f92672">[&lt;/span>value-regex&lt;span style="color:#f92672">]&lt;/span>
--get-all get all values: key &lt;span style="color:#f92672">[&lt;/span>value-regex&lt;span style="color:#f92672">]&lt;/span>
--get-regexp get values &lt;span style="color:#66d9ef">for&lt;/span> regexp: name-regex &lt;span style="color:#f92672">[&lt;/span>value-regex&lt;span style="color:#f92672">]&lt;/span>
--get-urlmatch get value specific &lt;span style="color:#66d9ef">for&lt;/span> the URL: section&lt;span style="color:#f92672">[&lt;/span>.var&lt;span style="color:#f92672">]&lt;/span> URL
--replace-all replace all matching variables: name value &lt;span style="color:#f92672">[&lt;/span>value_regex&lt;span style="color:#f92672">]&lt;/span>
--add add a new variable: name value
--unset remove a variable: name &lt;span style="color:#f92672">[&lt;/span>value-regex&lt;span style="color:#f92672">]&lt;/span>
--unset-all remove all matches: name &lt;span style="color:#f92672">[&lt;/span>value-regex&lt;span style="color:#f92672">]&lt;/span>
--rename-section rename section: old-name new-name
--remove-section remove a section: name
-l, --list list all
-e, --edit open an editor
--get-color find the color configured: slot &lt;span style="color:#f92672">[&lt;/span>default&lt;span style="color:#f92672">]&lt;/span>
--get-colorbool find the color setting: slot &lt;span style="color:#f92672">[&lt;/span>stdout-is-tty&lt;span style="color:#f92672">]&lt;/span>
Type
-t, --type &amp;lt;&amp;gt; value is given this type
--bool value is &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span> or &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
--int value is decimal number
--bool-or-int value is --bool or --int
--path value is a path &lt;span style="color:#f92672">(&lt;/span>file or directory name&lt;span style="color:#f92672">)&lt;/span>
--expiry-date value is an expiry date
Other
-z, --null terminate values with NUL byte
--name-only show variable names only
--includes respect include directives on lookup
--show-origin show origin of config &lt;span style="color:#f92672">(&lt;/span>file, standard input, blob, command line&lt;span style="color:#f92672">)&lt;/span>
--show-scope show scope of config &lt;span style="color:#f92672">(&lt;/span>worktree, local, global, system, command&lt;span style="color:#f92672">)&lt;/span>
--default &amp;lt;value&amp;gt; with --get, use default value when missing entry
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="ein-git-repository-anlegen">Ein Git Repository anlegen&lt;/h2>
&lt;p>Um lokal ein neues Git Repository anzulegen gibt es zwei Varianten:&lt;/p>
&lt;ul>
&lt;li>Umwandeln eines Verzeichnis, welches (noch) nicht mit Git verwaltet wird zu einem Git Repository&lt;/li>
&lt;li>Klonen eines existierenden Repositories von einem anderen Ort&lt;/li>
&lt;/ul>
&lt;h3 id="ein-verzeichnis-zu-einem-git-repository-verwandeln">Ein Verzeichnis zu einem Git Repository verwandeln&lt;/h3>
&lt;p>Um aus einem Ordner ein Git Repository zu erstellen, muss man zuerst in den Ordner wechseln und anschliessend das Repository initialisieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cd ~/path/to/folder
$ git init
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der zweite Befehl erzeugt ein &lt;code>.git&lt;/code> Unterverzeichnis, welches die Repository Daten beinhaltet. Im Moment werden noch keine Dateien von Git verwaltet, sondern die müssen zuerst hinzugefügt (&lt;code>git add&lt;/code>) werden und committed werden (&lt;code>git commit&lt;/code>). Wenn wir von einem leeren Ordner aus gehen, müssen die Dateien natürlich zuerst noch erstellt werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ vim README.md
$ git add README.md
$ git commit -m &lt;span style="color:#e6db74">&amp;#39;Initial Commit&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ein-bestehendes-repository-klonen">Ein bestehendes Repository klonen&lt;/h3>
&lt;p>Um ein Repository zu klonen wird der Befehl &lt;code>git clone&lt;/code> verwendet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/libgit2/libgit2
$ ls
libgit2
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Git legt dann automatisch ein Verzeichnis &lt;code>libgit2&lt;/code> an mit allen Dateien und initialisiert das Repository mit einem &lt;code>.git&lt;/code> Verzeichnis im Hauptverzeichnis. Wird hinter der URL noch etwas angegeben, wird dies als Name des Zielverzeichnisses interpretiert:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/libgit2/libgit2 mylibgit
$ ls
mylibgit
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="änderungen-verfolgen-und-im-repository-speichern">Änderungen verfolgen und im Repository speichern&lt;/h2>
&lt;p>Zur Erinnerung, eine Datei in einem Git Folder kann vier Zustände haben:&lt;/p>
&lt;ul>
&lt;li>Untracked: Die Datei liegt im Ordner, wird aber nicht von Git versioniert&lt;/li>
&lt;li>Unmodified: Die Datei wird von Git versioniert, sie ist seit dem letzten Commit unverändert.&lt;/li>
&lt;li>Modified: Die Datei wurde seit dem letzten Commit verändert&lt;/li>
&lt;li>Staged: eine neue oder editierte Datei wurde für den nächsten Commit vorgemerkt.&lt;/li>
&lt;/ul>
&lt;p>Der Befehl zum überprüfen, ob man Dateien in einem anderen Zustand als &lt;code>unmodified&lt;/code> hat ist &lt;code>git status&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git status
On branch feature/git-basics
Your branch is up to date with &lt;span style="color:#e6db74">&amp;#39;origin/feature/git-basics&amp;#39;&lt;/span>.
Changes to be committed:
&lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git restore --staged &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to unstage&lt;span style="color:#f92672">)&lt;/span>
modified: content/en/docs/02.0/02.md
Changes not staged &lt;span style="color:#66d9ef">for&lt;/span> commit:
&lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to update what will be committed&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git restore &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to discard changes in working directory&lt;span style="color:#f92672">)&lt;/span>
modified: content/en/docs/02.0/02.md
Untracked files:
&lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to include in what will be committed&lt;span style="color:#f92672">)&lt;/span>
.gitignore
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wollen wir nun die Änderungen der Datei &lt;code>content/en/docs/02.0/02.md&lt;/code> (oder die Datei &lt;code>.gitignore&lt;/code>) zum nächsten Commit hinzufügen können wir dies mit &lt;code>git add &amp;lt;pfad/zur/datei&amp;gt;&lt;/code>. Im Beispiel oben sehen wir, dass die Datei &lt;code>content/en/docs/02.0/02.md&lt;/code> bereits gestaged ist. Ändern wir diese Datei erneut, wird die Datei sowohl bei &lt;em>Changes to be committed:&lt;/em> wie auch bei &lt;em>Changes not staged for commit:&lt;/em> auftauchen. Einmal mit den Änderungen, welche wir bereits gestaged haben und einmal mit den Änderungen, welche wir nach dem Stagen (&lt;code>git add&lt;/code>) gemacht haben. Wollen wir beide Änderungen im gleichen Commit, können wir die Datei einfach wieder mit &lt;code>git add&lt;/code> stagen und anschliessend commiten, wollen wir die Änderungen in separaten Commit, commiten wir zuerst die gestagten Änderungen und stagen anschliessend die zweite Änderungen und commiten erneut.&lt;/p>
&lt;h3 id="gitignore">.gitignore&lt;/h3>
&lt;p>Bevor wir lernen, wie man seine Änderungen commited wollen wir noch kurz die spezielle Datei &lt;code>.gitignore&lt;/code> anschauen. In dieser Datei können Dateien erfasst werden, welche Git nicht als untracked aufzählen soll, respektive ignorieren soll. Die Datei wird ganz normal wie jede andere auch ins Repo eingecheckt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat .gitignore
&lt;span style="color:#75715e"># ignore all .a files&lt;/span>
*.a
&lt;span style="color:#75715e"># but do track lib.a, even though you&amp;#39;re ignoring .a files above&lt;/span>
!lib.a
&lt;span style="color:#75715e"># only ignore the TODO file in the current directory, not subdir/TODO&lt;/span>
/TODO
&lt;span style="color:#75715e"># ignore all files in any directory named build&lt;/span>
build/
&lt;span style="color:#75715e"># ignore doc/notes.txt, but not doc/server/arch.txt&lt;/span>
doc/*.txt
&lt;span style="color:#75715e"># ignore all .pdf files in the doc/ directory and any of its subdirectories&lt;/span>
doc/**/*.pdf
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Weitere Informationen bekommt man mit &lt;code>man gitignore&lt;/code> oder unter &lt;a href="https://github.com/github/gitignore">https://github.com/github/gitignore&lt;/a> findet man nützliche Beispiele.&lt;/p>
&lt;h3 id="überprüfen-der-änderungen">Überprüfen der Änderungen&lt;/h3>
&lt;p>Bevor man seine Änderungen commited, empfiehlt es sich diese nochmals zu überprüfen. Mit &lt;code>git status&lt;/code> sieht man, welche Dateien geändert wurden, jedoch nicht, was sich geändert hat. Dafür gibt es den Befehl &lt;code>git diff&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-diff" data-lang="diff">diff --git a/content/en/docs/02.0/02.md b/content/en/docs/02.0/02.md
index 1e6db46..dd7161b 100644
&lt;span style="color:#f92672">--- a/content/en/docs/02.0/02.md
&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+++ b/content/en/docs/02.0/02.md
&lt;/span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#75715e">@@ -145,3 +145,60 @@ mylibgit
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
## Änderungen verfolgen und im Repository speichern
&lt;span style="color:#a6e22e">+Zur Erinnerung, eine Datei in einem Git Folder kann vier Zustände haben:
&lt;/span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#f92672">-Zur Erinnerung, eine Datei in einem Git Folder kann vier Zustaende haben
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>git diff&lt;/code> vergleicht die Änderungen welche noch nicht gestaged wurden, will man bereits gestagte Änderungen überprüfen braucht es zusätzlich das Flag &lt;code>--staged&lt;/code> oder &lt;code>--cached&lt;/code> (die beiden Flags sind Synonyme).&lt;/p>
&lt;p>Anders als &lt;code>git diff&lt;/code> funktioniert &lt;code>git diff-tool&lt;/code> mit einem externen Tool, welches dir die Änderungen anzeigt. Beispiele dafür sind &amp;lsquo;P4Merge&amp;rsquo; oder auch &amp;lsquo;Beyond Compare&amp;rsquo;. Sie versuchen die Bearbeitungen besser zu visualisieren
und es dem Benutzer einfacher zu machen, diese in einer Datei / im Code einzusehen.
Jetzt bleibt die Frage: Wann brauchen wir was? Grundsätzlich
wird &lt;code>git diff&lt;/code> bei folgenden Situationen gebraucht:&lt;/p>
&lt;ul>
&lt;li>Wenn wir kein GUI haben und nur mit dem Output des Terminals arbeiten&lt;/li>
&lt;li>Falls wir gar kein externes Tool zur Verfügung haben&lt;/li>
&lt;li>Wenn du keine &amp;lsquo;schweren&amp;rsquo; externen Tools starten möchtest, sondern so schnell wie möglich zum Ergebnis kommen willst.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>git diff-tool&lt;/code> kann man dann überall dort einsetzen, bei denen die oben erwähnten Situationen nicht zutreffen. Zu Beachten ist aber, dass es noch viele weitere Situationen gibt, in welchen man auf &lt;code>git diff-tool&lt;/code> verzichten kann.
Zur genaueren Einsicht ist Googel immer eine gute Anhaltestelle.&lt;/p>
&lt;h3 id="commiten">Commiten&lt;/h3>
&lt;p>Ist man sicher, dass man nur die Änderungen gestaged hat, welche man auch commiten will, kann man dies mit dem Befehl &lt;code>git commit&lt;/code> bewerkstelligen. Dadurch wird ein Editor geöffnet und man wird gebeten eine Beschreibung für die Änderungen anzugeben. Wie solche Beschreibungen gestaltet werden sollen und was alles in eine &amp;ldquo;Commit Message&amp;rdquo; gehört, darüber gibt es ganz unterschiedliche Meinungen. Idealerweise probiert man sich vorzustellen, was man an Zusätzlichen Informationen braucht, wenn man die Änderungen in zwei Jahren wieder anschaut, um zu verstehen, was und warum das geändert wurde.&lt;/p>
&lt;p>Oft gibt es pro Projekt Konventionen wie eine Commit Message aussehen soll. Falls dies nicht existiert gibt es ein paar wenige Punkte welche die Messages einiges lesbarer und verständlicher machen:&lt;/p>
&lt;ul>
&lt;li>Sprache: Englisch&lt;/li>
&lt;li>Kurze und prägnante Message, idealerweise unter 50 Zeichen &lt;a href="https://chris.beams.io/posts/git-commit/#limit-50">Details&lt;/a>&lt;/li>
&lt;li>Mit Grossbuchstaben beginnen &lt;a href="https://chris.beams.io/posts/git-commit/#capitalize">Details&lt;/a>&lt;/li>
&lt;li>Kein Punkt am Schluss &lt;a href="https://chris.beams.io/posts/git-commit/#end">Details&lt;/a>&lt;/li>
&lt;li>Den &lt;em>imperative mood&lt;/em> (Befehlsform) verwenden, also «Fix bug with X» statt «Fixed bug with X» oder «More fixes for broken stuff» &lt;a href="https://chris.beams.io/posts/git-commit/#imperative">Details&lt;/a>&lt;/li>
&lt;li>Wenn vorhanden das Ticket referenzieren:
&lt;ul>
&lt;li>Bei Gitlab/Github Issues: «Add X #12345»&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>(&lt;a href="https://docs.puzzle.ch/qm-guide/latest/source-code-management/index.html#_konvention_commit_message">Puzzle Docs&lt;/a>)&lt;/p>
&lt;p>Weitere Quellen dazu:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://chris.beams.io/posts/git-commit/">https://chris.beams.io/posts/git-commit/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/">https://www.conventionalcommits.org/en/v1.0.0/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Ein paar hilfreiche Flags zu &lt;code>git commit&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-m&lt;/code> um eine Message gleich anzugeben und nicht den Editor zu öffnen (kann je nach Commit Message Guideline hinderlich sein, da es keine Multiline Kommentare erlaubt):&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git commit -m &lt;span style="color:#e6db74">&amp;#34;Story 182: added important Information to Readme&amp;#34;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>master 463dc4f&lt;span style="color:#f92672">]&lt;/span> Story 182: added important Information to Readme
&lt;span style="color:#ae81ff">2&lt;/span> files changed, &lt;span style="color:#ae81ff">2&lt;/span> insertions&lt;span style="color:#f92672">(&lt;/span>+&lt;span style="color:#f92672">)&lt;/span>
create mode &lt;span style="color:#ae81ff">100644&lt;/span> README
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>-a&lt;/code> um alle editierten Dateien gleich mitzustagen. (Kurzform von &lt;code>git add --all &amp;amp;&amp;amp; git commit&lt;/code>) &lt;strong>!ACHTUNG!&lt;/strong> kann gefährlich sein da so schnell Änderungen in einen Commit rutschen die nicht rein gehören!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-v&lt;/code> um ein &lt;code>git diff --staged&lt;/code> im Editor angezeigt zu bekommen. So muss man sich nicht merken, was man eigentlich geändert hat und bekommt es beim schreiben der Commit Message noch einmal präsentiert.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>WICHTIG:&lt;/strong> Es ist einiges einfacher Fehler vor dem Commiten als nach dem Commiten zu beheben, ein zweites mal über die Änderungen schauen ist sehr empfehlenswert!&lt;/p>
&lt;h3 id="dateien-löschen">Dateien löschen&lt;/h3>
&lt;p>Um eine Datei zu löschen muss diese zuerst entfernt und dann gestaged werden, damit dies in der Git Datenbank ankommt. Um nicht zuerst &lt;code>rm foo&lt;/code> und dann &lt;code>git add foo&lt;/code> eingeben zu müssen, gibt es den Befehl &lt;code>git rm foo&lt;/code>. Will man eine bereits gestagte Datei aus der Versionsverwaltung jedoch nicht vom Filesystem löschen, weil man diese zum Beispiel im &lt;code>.gitignore&lt;/code> ergänzen möchte, dann kann man dies mit &lt;code>git rm --cached foo&lt;/code> erledigen.&lt;/p>
&lt;p>&lt;strong>WICHTIG:&lt;/strong> Jede Datei die irgendwann mal commited wurde ist für immer in der Git Geschichte und kann nur durch neu schreiben der selbigen wieder entfernt werden. Wer also zum Beispiel sein Passwort commited weil dies in einer &lt;code>secret.yml&lt;/code> Datei steht, der sollte sich sofort bei einem 10x-Git-Profi-Engineer Hilfe holen.&lt;/p>
&lt;h3 id="dateien-verschieben">Dateien Verschieben&lt;/h3>
&lt;p>Genauso wie löschen, muss auch beim Verschieben die Änderung Git mitgeteilt werden: &lt;code>mv README.md README &amp;amp;&amp;amp; git rm README.md &amp;amp;&amp;amp; git add README&lt;/code> oder in kurz und hübsch: &lt;code>git mv README.md README&lt;/code>.&lt;/p>
&lt;h2 id="anzeigen-der-commit-historie">Anzeigen der Commit Historie&lt;/h2>
&lt;p>Um die Geschichte eines Git Repositories anzuzeigen gibt es den Befehl &lt;code>git log&lt;/code>. Ohne Argumente zeigt &lt;code>git log&lt;/code> die Commits in umgekehrter chronologischer Reihenfolge, sprich jüngster Commit zuoberst. Pro Commit wird jeweils der Commit-Hash, der Name und Email Adresse des Authors, das Datum und die Commit-Message angezeigt. Um die effektiven Änderungen anzuzeigen gibt es das &lt;code>-p&lt;/code> oder &lt;code>--patch&lt;/code> Flag verwendet werden. Da der Output schnell gross wird und man wahrscheinlich auch nicht bis an den Ursprung der Geschichte zurück will empfiehlt es sich die Anzahl Commits anzugeben, will man zum Beispiel die letzten drei Commits anschauen macht man dies mit &lt;code>-3&lt;/code>. Oder man schränkt die Änderungen basierend auf die Zeit ein mit &lt;code>--since=&lt;/code> und &lt;code>--until=&lt;/code> ein (es werden die unterschiedlichsten Zeitangaben akzeptiert, am besten probiert man etwas aus. Bsp: &lt;code>--since=2.weeks&lt;/code> oder &lt;code>--until=&amp;quot;2020-06-03&amp;quot;&lt;/code>). Auch mit &lt;code>--grep&lt;/code> oder &lt;code>--author&lt;/code> kann man die Resultate einschränken. Weitere Information liefert die Manpage &lt;code>man git log&lt;/code> und die Hilfefunktion &lt;code>git log -h&lt;/code>.&lt;/p>
&lt;h2 id="änderungen-rückgängig-machen">Änderungen rückgängig machen&lt;/h2>
&lt;p>Wo gehobelt wird fallen Späne. Die meisten Schnitzer kann man jedoch selber wieder ausglätten. Am häufigsten committed man wohl zu schnell, hat eine Datei vergessen dazuzufügen oder hat sich bei der Commit Message vertan. Hier kann man ganz einfach die Änderungen noch vornehmen und an den letzten Commit berichtigen mit &lt;code>git commit --amend&lt;/code> (Wichtig, man editiert nicht den letzten Commit, sondern man löscht ihn und erstellt eine korrigierte neue Version davon. Dies kann dazuführen, dass ein Remote den Commit nicht mehr annimmt, da die History nicht mehr übereinstimmt. Aber mehr dazu später.)&lt;/p>
&lt;p>Um eine gestagte Datei wieder zu modified (aber eben nicht gestaged) zu verschieben kann man &lt;code>git reset HEAD &amp;lt;file&amp;gt;&lt;/code> verwenden. Um die Änderungen einer Datei rückgängig zu machen (also modified zu unmodified)
kann sie neu ausgecheckt werden mit &lt;code>git checkout -- &amp;lt;file&amp;gt;&lt;/code>. &lt;strong>Achtung&lt;/strong> Alle Änderungen seit dem letzte Commit gehen damit verloren!!! Wenn man sich an die beiden Befehle gerade mal nicht erinnern kann, dann kann man einfach ein &lt;code>git status&lt;/code> eingeben und den Hilfetext studieren 😉.&lt;/p>
&lt;h2 id="mit-remotes-arbeiten">Mit Remotes arbeiten&lt;/h2>
&lt;p>Um mit anderen an einem Git-Projekt mitarbeiten zu können, braucht es Remotes, sprich eine Version des Projekts im Netzwerk, wo alle Beteiligten ihre Änderungen hin pushen und die Änderungen der Anderen pullen können.&lt;/p>
&lt;p>Nachdem man ein Repo gecloned hat sieht man ein Remote, man kann jedoch auch weitere definieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone git@github.com:puzzle-bbt/training-sbb-puzzle.git
Cloning into &lt;span style="color:#e6db74">&amp;#39;training-sbb-puzzle&amp;#39;&lt;/span>...
remote: Enumerating objects: 8485, &lt;span style="color:#66d9ef">done&lt;/span>.
remote: Counting objects: 100% &lt;span style="color:#f92672">(&lt;/span>8485/8485&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#66d9ef">done&lt;/span>.
remote: Compressing objects: 100% &lt;span style="color:#f92672">(&lt;/span>5276/5276&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#66d9ef">done&lt;/span>.
remote: Total &lt;span style="color:#ae81ff">8485&lt;/span> &lt;span style="color:#f92672">(&lt;/span>delta 3095&lt;span style="color:#f92672">)&lt;/span>, reused &lt;span style="color:#ae81ff">8456&lt;/span> &lt;span style="color:#f92672">(&lt;/span>delta 3079&lt;span style="color:#f92672">)&lt;/span>, pack-reused &lt;span style="color:#ae81ff">0&lt;/span>
Receiving objects: 100% &lt;span style="color:#f92672">(&lt;/span>8485/8485&lt;span style="color:#f92672">)&lt;/span>, 17.06 MiB | 5.11 MiB/s, &lt;span style="color:#66d9ef">done&lt;/span>.
Resolving deltas: 100% &lt;span style="color:#f92672">(&lt;/span>3095/3095&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#66d9ef">done&lt;/span>.
$ cd training-sbb-puzzle
$ git remote
origin
$ git remote -v
origin git@github.com:puzzle-bbt/training-sbb-puzzle.git &lt;span style="color:#f92672">(&lt;/span>fetch&lt;span style="color:#f92672">)&lt;/span>
origin git@github.com:puzzle-bbt/training-sbb-puzzle.git &lt;span style="color:#f92672">(&lt;/span>push&lt;span style="color:#f92672">)&lt;/span>
$ git remote add private git remote add private git@github.com:Lehrling/training-sbb-puzzle.git
$ git remote -v
origin git@github.com:puzzle-bbt/training-sbb-puzzle.git &lt;span style="color:#f92672">(&lt;/span>fetch&lt;span style="color:#f92672">)&lt;/span>
origin git@github.com:puzzle-bbt/training-sbb-puzzle.git &lt;span style="color:#f92672">(&lt;/span>push&lt;span style="color:#f92672">)&lt;/span>
private git@github.com:Lehrling/training-sbb-puzzle.git &lt;span style="color:#f92672">(&lt;/span>fetch&lt;span style="color:#f92672">)&lt;/span>
private git@github.com:Lehrling/training-sbb-puzzle.git &lt;span style="color:#f92672">(&lt;/span>push&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wollen wir nun alle Information holen, welches der Lehrling hat, jedoch noch nicht im Repo sind kann man dies mit &lt;code>git fetch private&lt;/code> ausführen.&lt;/p>
&lt;h3 id="fetching-und-pulling">Fetching und Pulling&lt;/h3>
&lt;p>Es gibt zwei Arten, wie man Daten von einem Remote abholen kann, nach dem man das Repo gecloned hat.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>git fetch &amp;lt;remote&amp;gt;&lt;/code>: holt alle Änderungen vom Remote seit dem letzten abholen und speichert die lokal. Wichtig zu beachten ist, dass &lt;code>git fetch&lt;/code> die Änderungen nicht mit den lokalen Änderungen zusammenfügt, sondern dies manuell ausgeführt werden muss.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git pull&lt;/code>: Wenn der lokale Branch mit einem remote Branch verknüpft ist, holt &lt;code>git pull&lt;/code> die Änderungen dieses remotes und fügt sie gleich mit den Änderungen im lokalen Branch zusammen (merge). Was Branches sind und wie ein Merge funktioniert schauen wir uns in kürze an, nur soviel, wird ein Repo gecloned, wird der lokale sogenannte &lt;code>master&lt;/code> Branch mit dem &lt;code>master&lt;/code> Branch des &lt;code>origin&lt;/code> Remotes verknüpft.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="pushen">Pushen&lt;/h3>
&lt;p>Wenn man seine Änderungen soweit hat, dass man sie mit dem Rest vom Team teilen will, dann kann man diese mit &lt;code>git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;&lt;/code> auf den Server laden. Dies funktioniert jedoch nur, wenn man auf dem Server auch Schreibrechte hat und niemand anderes vor einem gepusht hat.&lt;/p></description></item><item><title>Docs: JavaScript trainieren</title><link>/docs/web/javascript/04_js_training/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/javascript/04_js_training/</guid><description>
&lt;h2 id="übung-macht-den-meiser">Übung macht den Meiser&lt;/h2>
&lt;p>Bevor wir mit fortgeschrittenen JavaScript-Technologien weiterfahren, sollst du die Basics von JavaScript verstanden haben.&lt;/p>
&lt;p>Hierfür empfehlen wir dir folgenden Online-Kurs: &lt;a href="https://www.codecademy.com/learn/introduction-to-javascript">https://www.codecademy.com/learn/introduction-to-javascript&lt;/a>&lt;/p>
&lt;p>Dieser Kurs ist grundlegend. Da JavaScript und Java in der Syntax sehr ähnlich sind sollte ein grosser Teil für dich Repetition von Java-Teil sein.&lt;/p>
&lt;p>Möchtest du z.B. zur nächsten Aufgabe ohne die aktuelle lösen zu müssen, dann kannst du 2x auf &amp;ldquo;Run&amp;rdquo; klicken, dann auf &amp;ldquo;View Solution&amp;rdquo; und anschliessend auf &amp;ldquo;Replace with Solution&amp;rdquo;.&lt;/p>
&lt;p>Eine Übersicht über die Themen erhältst du via Klick oben links auf &amp;ldquo;Course Menu&amp;rdquo;.&lt;/p>
&lt;p>Schaue, dass du mindestens folgendes verstanden hast und anwenden kannst:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Kaptiel&lt;/th>
&lt;th>Das musst du anwenden können&lt;/th>
&lt;th>Bemerkungen&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Introduction&lt;/td>
&lt;td>Variablen definieren, Unterschied {var, let, const}, mathematische Operationen, typeof-Operator, String-Methoden wie {trim, startsWith, &amp;hellip;}&lt;/td>
&lt;td>Prüfe zudem dein Wissen mit dem &amp;ldquo;Introduction to JavaScript&amp;rdquo;-Quiz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Conditionals&lt;/td>
&lt;td>if/else/switch statements, Vergleichsoperatoren, du kennst truthy und falsy Werte&lt;/td>
&lt;td>Löse auch ein paar Aufgaben und den Test &amp;ldquo;Conditional Statements&amp;rdquo; solltest du fehlerfrei abschliessen können.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Functions&lt;/td>
&lt;td>Funktions-Definition, -Aufruf, Default-Parameter, Arrow Functions, Function Expressions, Globaler und Block-Scope&lt;/td>
&lt;td>Die Tests sind leider nicht mehr in der kostenlosen Version inbegriffen.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Arrays&lt;/td>
&lt;td>Arrays/Listen erstellen, updaten, Länge bestimmen, durch Array durch iterieren&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Loops&lt;/td>
&lt;td>Du kannst &lt;code>for&lt;/code>-, &lt;code>while&lt;/code>- und &lt;code>do while&lt;/code>-Schlaufen benutzen und mit &lt;code>break&lt;/code> kontrolliert abbrechen.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterators&lt;/td>
&lt;td>Functions as Data and Parameters, Iteratoren wie .forEach, .map, .filter, .reduce anwenden können&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Objects&lt;/td>
&lt;td>Objekte erstellen mit Properties und Methoden, Pass By Reference verstehen, durch Objekte durchiterieren, Advanced Objects mit dem &lt;code>this&lt;/code>-Keyword, Getter und Setter&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Weitere HTML-Tags</title><link>/docs/web/html_css/04_weitere_tags/</link><pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/04_weitere_tags/</guid><description>
&lt;h2 id="titel-heading">Titel (Heading)&lt;/h2>
&lt;p>Du hast bereits erfahren, dass du mit &lt;code>&amp;lt;h1&amp;gt;&lt;/code> für Titel verwenden kannst. Oft hast du aber einen Titel für die Seite und dann Titel, die diesem Titel untergeordnet sind. Wie in einem Word-Dokument kannst du auch in HTML Titel hierarchisch verschachteln. Das geht so:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Heading 1&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Hello&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Heading 2&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h3&lt;/span>&amp;gt;Heading 3&amp;lt;/&lt;span style="color:#f92672">h3&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;Heading 4&amp;lt;/&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h5&lt;/span>&amp;gt;Heading 5&amp;lt;/&lt;span style="color:#f92672">h5&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h6&lt;/span>&amp;gt;Heading 6&amp;lt;/&lt;span style="color:#f92672">h6&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Hello&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dies führt zu folgendem Ergebnis:&lt;/p>
&lt;p>&lt;img src="../headings.jpg" alt="headings" title="(Bild, das zeigt, wie Headings dargestellt werden.)">&lt;/p>
&lt;p>Es gibt also Tags für Titel erster bis sechste Stufe. Grundsätzlich gilt, je kleiner die Zahl der Stufe, je grösser wird der Titel dargestellt. Das obrige Ergebnis zeigt, wie Titel per Default gestylt werden. Du kannst das Styling dieser Titel selbstverständlich anpassen (kommt im CSS-Teil).&lt;/p>
&lt;h2 id="paragrafen">Paragrafen&lt;/h2>
&lt;p>Du hast bereits erfahren, dass Zeilenumbrüche in HTML keine Wirkung haben. Möchtest du eine neue Zeile einfügen, könnte dir das &lt;code>&amp;lt;br/&amp;gt;&lt;/code>-Tag weiterhelfen. Besser ist aber, wenn du den Text, der zusammengehört, auch entsprechend markierst: Das kannst du mit dem &lt;code>&amp;lt;p&amp;gt;&lt;/code>-Tag erreichen. Der Text, der innerhalb dieses Tags steht, wird in einem gleichen Abschnitt dargestellt. Ausserdem trennt es diesen Inhalt mit Leerschlag zum nächsten Element. Das wird im folgenden Beispiel verdeutlicht:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Title&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
This is one line.
This the second one. &amp;lt;&lt;span style="color:#f92672">br&lt;/span>/&amp;gt; And the third one.
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;And this is inside a paragraph.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;This too.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div style="border: 2px solid black; padding: 2em">
&lt;h2>Title&lt;/h2>
&lt;p>
This is one line.
This the second one. &lt;br/> And the third one.&lt;/p>
&lt;p>And this is inside a paragraph.&lt;/p>
&lt;p>This too.&lt;/p>
&lt;/div>
&lt;p>Beachte hier, dass &lt;code>&amp;lt;p&amp;gt;&lt;/code>-Tags mehr Leerraum erzeugen als &lt;code>&amp;lt;br/&amp;gt;&lt;/code>.&lt;/p>
&lt;h2 id="text-formatieren">Text formatieren&lt;/h2>
&lt;p>Du wirst in die Situation kommen, wo du einen bestimmten Teil eines Textes z.B. fett oder kursiv formatieren musst.&lt;/p>
&lt;p>Das kannst du mit HTML sehr einfach erreichen, denn dafür gibt es spezielle Tags:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">strong&lt;/span>&amp;gt;Heared&amp;lt;/&lt;span style="color:#f92672">strong&lt;/span>&amp;gt; about
the new restaurant called
&amp;lt;&lt;span style="color:#f92672">em&lt;/span>&amp;gt;Karma?&amp;lt;/&lt;span style="color:#f92672">em&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
    There&amp;#39;s &amp;lt;&lt;span style="color:#f92672">b&lt;/span>&amp;gt;no menu&amp;lt;/&lt;span style="color:#f92672">b&lt;/span>&amp;gt;:
    You get what you &amp;lt;&lt;span style="color:#f92672">i&lt;/span>&amp;gt;deserve&amp;lt;/&lt;span style="color:#f92672">i&lt;/span>&amp;gt;.
&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Um also einen bestimmten Text fett darzustellen, kannst du es in ein &lt;code>&amp;lt;strong&amp;gt;&lt;/code>- oder &lt;code>&amp;lt;b&amp;gt;&lt;/code>-Element schmeissen. Beide Tags MACHEN im Prinzip genau das Gleiche, MEINEN aber nicht zwingend das Gleiche: &lt;code>&amp;lt;b&amp;gt;&lt;/code>-Elemente sind einfach fett-gedruckt, während &lt;code>&amp;lt;strong&amp;gt;&lt;/code>-Elemente betont sein sollen. &lt;code>&amp;lt;strong&amp;gt;&lt;/code> soll dem fett-gedruckten Wort also mehr Ausdruck verleihen. Mit einem eigenen Styling (kommt im CSS-Teil) könntest du &lt;code>&amp;lt;strong&amp;gt;&lt;/code>-Elemente z.B. auch grösser oder rot darstellen. Mit einem &lt;code>&amp;lt;b&amp;gt;&lt;/code>-Element sagt man im Prinzip nur, dass der Text fett-gedruckt sein soll.&lt;/p>
&lt;p>Einen Text kursiv darzustellen kannst du mit &lt;code>&amp;lt;i&amp;gt;&lt;/code> bzw. &lt;code>&amp;lt;em&amp;gt;&lt;/code>. Das Pendant zu &lt;code>&amp;lt;b&amp;gt;&lt;/code> ist &lt;code>&amp;lt;i&amp;gt;&lt;/code> (italic), und dasjenige zu &lt;code>&amp;lt;strong&amp;gt;&lt;/code> das &lt;code>&amp;lt;em&amp;gt;&lt;/code> (emphasis = Betonung).&lt;/p>
&lt;p>Das obige Beispiel wird so gerendert:&lt;/p>
&lt;div style="border: 2px solid black; padding: 2em">
&lt;p>
    &lt;strong>Heared&lt;/strong> about
the new restaurant called
&lt;em>Karma?&lt;/em>
&lt;/p>
&lt;p>
    There's &lt;b>no menu&lt;/b>: You get what you &lt;i>deserve&lt;/i>.
&lt;/p>
&lt;/div>
&lt;p>Text zu formatieren ist Styling, was besser mit CSS statt HTML gemacht wird. Verwende diese Tags also mit Bedacht.&lt;/p>
&lt;h2 id="links-und-bilder">Links und Bilder&lt;/h2>
&lt;p>Eines der wichtigsten Elemente in HTML sind Links auf andere Seiten. Links werden mit &lt;code>a&lt;/code>-Elementen (anchor) realisiert. Einen Link kannn wie folgt erstellt werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.sbb.ch/&amp;#34;&lt;/span>&amp;gt;Home&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Probiere das einmal aus.&lt;/p>
&lt;p>Du wirst einen blauen und unterstrichenen Text &amp;ldquo;Home&amp;rdquo; sehen. &lt;code>&amp;lt;a&amp;gt;&lt;/code> ist der Tag, der generell für Hyperlinks verwendet wird. &lt;code>href&lt;/code> ist ein Attribut des &lt;code>a&lt;/code>-Tags,
mit dem die URL des Links spezifiziert wird. In unserem Fall ist &lt;code>https://www.sbb.ch/&lt;/code> die URL, die beim Klick aufgerufen wird. &lt;code>Home&lt;/code> ist der Text, der dem User angezeigt wird.&lt;/p>
&lt;p>Ziemlich ähnlich kannst du auch ein Bild aus dem Internet einbinden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">img&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://it-ninjas.ch/img/png/Ninja%20Elements_ninja_phone.png&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">alt&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;IT Ninjas&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;300&amp;#34;&lt;/span> /&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ganz offensichtlich wird das &lt;code>&amp;lt;img/&amp;gt;&lt;/code>-Tag (Image) für Bilder verwendet. Das &lt;code>&amp;lt;img/&amp;gt;&lt;/code>-Tag ist ein Tag, welches keinen Inhalt zwischen Opening- und Closing-Tag hat. Mit dem &lt;code>/&lt;/code> im Opening-Tag kann man symbolisieren, dass das Tag ohne Closing-Tag geschlossen wird.&lt;/p>
&lt;p>Das wichtigste Attribut im &lt;code>img&lt;/code>-Tag ist &lt;code>src&lt;/code> (source = Quelle). Als &lt;code>src&lt;/code> wird eine URL zu einem Bild erwartet. Vergiss bei absoluten Pfaden (wird später noch erklärt) nicht das Protokoll (also https://) anzugeben. Nicht zwingend aber erwartet ist auch das &lt;code>alt&lt;/code>-Attribut (alternative). Dieser Text wird angezeigt, wenn das Bild nicht geladen werden konnte. Optional sind hingegen Attribute wie &lt;code>width&lt;/code> oder &lt;code>height&lt;/code>, welche die Breite und Höhe des Bildes festlegen. Diese Grössen werden aber besser mit CSS spezifiziert, da CSS genauere Spezifikationen zulässt (also nicht nur in &amp;lsquo;Pixel&amp;rsquo; sondern auch anderen Einheiten).&lt;/p>
&lt;p>Wenn du willst, dass man beim Klick auf ein Bild weitergeleitet wird, kannst du dein Bild in ein &lt;code>&amp;lt;a&amp;gt;&lt;/code>-Element schmeissen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://it-ninjas.ch/&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">img&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://it-ninjas.ch/img/png/Ninja%20Elements_ninja_phone.png&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">alt&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;IT Ninjas&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="listen">Listen&lt;/h2>
&lt;p>In HTML gibt es verschiedene Arten, um Aufzählungen darzustellen. Wir schauen uns Bullet-Point-Listen, Nummerierte-Listen und Definitions-Listen an.&lt;/p>
&lt;p>Eine Bullet-Point-Liste kann man mit einer unsortierten Liste (unordered list) kreieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;What do you do in case of emergency?&amp;lt;/&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;git commit -m &amp;#34;message&amp;#34;&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;git push&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Leave the building.&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Möchtest du hingegen eine Nummerierung, dann verwende eine sortierte Liste (ordered list):&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;Most Difficult Programming Languages&amp;lt;/&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ol&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Brainfuck&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Cow&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Intercal&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Malbolge&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Whitespace&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ol&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das Ganze sieht dann ungefähr so aus:&lt;/p>
&lt;div style="border: 2px solid black; padding: 2em">
&lt;h4 id="what-do-you-do-in-case-of-emergencyh4">What do you do in case of emergency?&lt;/h4>&lt;/h4>
&lt;ul>
&lt;li>git commit -m &amp;ldquo;message&amp;rdquo;&lt;/li>
&lt;li>git push&lt;/li>
&lt;li>Leave the building&lt;/li>
&lt;/ul>
&lt;h4 id="most-difficult-programming-languages">Most Difficult Programming Languages&lt;/h4>
&lt;ol>
&lt;li>Brainfuck&lt;/li>
&lt;li>Cow&lt;/li>
&lt;li>Intercal&lt;/li>
&lt;li>Malbolge&lt;/li>
&lt;li>Whitespace&lt;/li>
&lt;/ol>
&lt;/div>
&lt;p>Eine 3. Art von Listen sind Definitionslisten. Diese Art von Liste wird zwar nicht oft verwendet, kann aber hilfreich für ein Glossar oder ähnliches sein. Schaue dir dieses Beispiel an:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Glossary&amp;lt;/&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">dl&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">dt&lt;/span>&amp;gt;buffoonish&amp;lt;/&lt;span style="color:#f92672">dt&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">dd&lt;/span>&amp;gt;like a clown &amp;lt;/&lt;span style="color:#f92672">dd&lt;/span>&amp;gt;
   
    &amp;lt;&lt;span style="color:#f92672">dt&lt;/span>&amp;gt;heyday&amp;lt;/&lt;span style="color:#f92672">dt&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">dd&lt;/span>&amp;gt;the period of greatest prosperity or productivity&amp;lt;/&lt;span style="color:#f92672">dd&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">dl&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div style="border: 2px solid black; padding: 2em">
&lt;h4 id="glossary">Glossary&lt;/h4>
&lt;dl>
    &lt;dt>buffoonish&lt;/dt>
    &lt;dd>like a clown &lt;/dd>
   
    &lt;dt>heyday&lt;/dt>
    &lt;dd>the period of greatest prosperity or productivity&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="todo">Todo&lt;/h2>
&lt;p>relative Links&lt;/p></description></item><item><title>Docs: Components und Templates</title><link>/docs/web/angular/04_2_components_und_templates/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_2_components_und_templates/</guid><description>
&lt;img src="/images/angular/angular_components_description.png" alt="Components" style="width:60%"/>
&lt;p>Ein Angular Component setzt sich aus 4 Dateien zusammen:&lt;/p>
&lt;ul>
&lt;li>Template&lt;/li>
&lt;li>Unit Test File&lt;/li>
&lt;li>Stylesheet&lt;/li>
&lt;li>Component (Class)&lt;/li>
&lt;/ul>
&lt;img src="/images/angular/componentDesc.png" alt="Components Description" style="width:50%"/>
&lt;h2 id="templates">Templates&lt;/h2>
&lt;h3 id="was-ist-ein-template">Was ist ein Template?&lt;/h3>
&lt;ul>
&lt;li>Templates definieren die Views der Components.&lt;/li>
&lt;li>Ein Template ist ein HTML Dokument, das Angular Elemente zum Rendern des Components enthält&lt;/li>
&lt;li>Dank Angular kann unser HTML Dokument anhand von Direktiven mehr Logik beinhalten.&lt;br>
Beispielsweise können wir im Template eine if-Kontrollstruktur wie folgt anwenden:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngIf&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;condition; else elseBlock&amp;#34;&lt;/span>&amp;gt;Content to render when condition is true.&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ng-template&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>&lt;span style="color:#a6e22e">elseBlock&lt;/span>&amp;gt;Content to render when condition is false.&amp;lt;/&lt;span style="color:#f92672">ng-template&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Welche weiteren Direktiven es gibt, könnt ihr in der &lt;a href="https://angular.io/api/common">offiziellen Dokumentation&lt;/a> unter dem Abschnitt &lt;code>Directives&lt;/code> nachlesen.&lt;/p></description></item><item><title>Docs: Annotationen &amp; Reflection API</title><link>/docs/java/reflection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/java/reflection/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich kann mit Reflection Informationen zur Laufzeit zu Klassen, Objekten, Methoden und Attributen ermitteln&lt;/li>
&lt;li>Ich kenne die Vor- und Nachteile von Reflection&lt;/li>
&lt;li>Ich kenne die Metadaten Class&amp;lt;T&amp;gt;, Field und Method&lt;/li>
&lt;li>Ich kann mit Reflection eine Methode auf einem Objekt aufrufen&lt;/li>
&lt;li>Ich kann mit Reflection zur Laufzeit eine Klasse untersuchen&lt;/li>
&lt;li>Ich kann mit Reflection ein neues Objekt zur Laufzeit erzeugen&lt;/li>
&lt;li>Ich kenne die Grundlagen von Annotationen&lt;/li>
&lt;li>Ich kenne die wichtigsten Standard-Annotationen des JDKs&lt;/li>
&lt;li>Ich kann eigene Annotationen definieren und diese zur Laufzeit auswerten&lt;/li>
&lt;/ul>
&lt;h4 id="änderungskontrolle">Änderungskontrolle&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Autor&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Datum&lt;/th>
&lt;th>Änderungen&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Claudio Zesiger&lt;/td>
&lt;td>0.1&lt;/td>
&lt;td>21.10.2020&lt;/td>
&lt;td>* Initiale Version erstellt&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Claudio Zesiger&lt;/td>
&lt;td>0.2&lt;/td>
&lt;td>22.10.2020&lt;/td>
&lt;td>* Initiale Version abgeschlossen&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="voraussetzungen">Voraussetzungen&lt;/h4>
&lt;ul>
&lt;li>Fundierte Grundlagenkenntnisse von Java-Anwendungen&lt;/li>
&lt;/ul>
&lt;h2 id="reflection-api">Reflection API&lt;/h2>
&lt;hr>
&lt;h3 id="allgemeine-informationen">Allgemeine Informationen&lt;/h3>
&lt;p>Reflection erlaubt einer Anwendung, diverse Informationen über sich selbst herauszufinden, zudem kann man mit Reflection zur Laufzeit Instanzen von Klassen erzeugen. Ein normaler Applikationsentwickler wird diese Technik eher selten verwenden, es gibt aber Anwendungsfälle, die nur mit Reflection umzusetzen sind.&lt;/p>
&lt;p>Reflection hat die folgenden Einsatzgebiete:&lt;/p>
&lt;ul>
&lt;li>Erweiterbarkeit: Eine Applikation kann mit Reflection Klassen instanziieren, die zum Zeitpunkt der Kompilierung noch gar nicht bekannt waren. Zur Laufzeit benötigen wir dazu nur den voll qualifizierten Namen einer solchen Klasse, die restlichen Bestandteile der Klasse können zur Laufzeit abgefragt werden&lt;/li>
&lt;li>Class-Browser, Debugger, Tools zum Testen: Mit Reflection erhält eine Anwendung Zugriff auf alle Bestandteile einer Klasse. Reflection kann auch auf private Attribute und Methoden zugreifen und hebelt damit das Prinzip der Kapselung aus. Frameworks wie Spring oder jUnit nutzen Reflection, um damit ihre Annotationen auswerten zu können.&lt;/li>
&lt;/ul>
&lt;p>Beim Einsatz von Reflection gilt die folgende Regel: Wenn es eine Lösung ohne Reflection gibt, dann wähle diese!&lt;/p>
&lt;hr>
&lt;h3 id="grundlagen">Grundlagen&lt;/h3>
&lt;p>Reflection nutzt die folgenden Konstrukte, um damit eine Anwendung zu untersuchen. Diese Konstrukte werden Metadaten bzw. Metainformationen genannt:&lt;/p>
&lt;ul>
&lt;li>java.lang.Class&amp;lt;T&amp;gt;, Metadaten für Klassen. Beinhaltet Klassenname, implementierte Interfaces, Methoden und Attribute&lt;/li>
&lt;li>java.lang.reflect.Field, Metadaten für Instanzvariablen. Enthält Typ, Name, Sichtbarkeit, usw.&lt;/li>
&lt;li>java.lang.reflect.Method, Metadaten für Methoden. Enthält Name, Parameter, Sichtbarkeit, usw.&lt;/li>
&lt;/ul>
&lt;p>Damit wir an die Informationen einer Klasse gelangen können, benötigen wir einen Startpunkt. Dieser Startpunkt ist bei Reflection immer eine Instanz der Klasse java.lang.Class&amp;lt;T&amp;gt;.&lt;/p>
&lt;p>Die anderen Metadaten lassen sich dann über diese Instanz beziehen. Es gibt drei Möglichkeiten, an diesen Startpunkt zu gelangen:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>#&lt;/th>
&lt;th>Möglichkeit&lt;/th>
&lt;th>Code-Beispiel&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>voll-qualifizierter Klassenname&lt;/td>
&lt;td>Class&amp;lt;?&amp;gt; clazz = Class.forName(&amp;ldquo;package.ClassName&amp;rdquo;);&lt;/td>
&lt;td>Der Name der gewünschten Klasse wird einfach als String übergeben. Dies ist sehr gut einsetzbar, wenn der konkrete Typ zur Laufzeit noch unbekannt ist. Es ist also beispielsweise möglich Klassennamen aus einer Konfigurationsdatei einzulesen.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Methode getClass()&lt;/td>
&lt;td>Class&amp;lt;?&amp;gt; clazz = object.getClass();&lt;/td>
&lt;td>Der Aufruf der Methode &lt;em>getClass()&lt;/em> auf einer Referenz liefert direkt eine Instanz des Klassenobjekts.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>statisches Attribut .class&lt;/td>
&lt;td>Class&amp;lt;?&amp;gt; clazz = ClassName.class;&lt;/td>
&lt;td>Durch Kenntnis des konkreten Typs erhält man den Zugriff auf das Klassenobjekt mit dem statischen Attribut &lt;em>class&lt;/em>.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Bei Arrays muss eine eher kryptische Notation verwendet werden. Hier wird aus Komplexitätsgründen nicht weiter darauf eingegangen.&lt;/p>
&lt;hr>
&lt;h3 id="methoden-aufrufen">Methoden aufrufen&lt;/h3>
&lt;p>Der nächste Schritt ist nun, dass mit Reflection eine Methode aufgerufen werden kann. Die folgende Reihenfolge gibt einen guten Überblick welche Schritte dazu notwendig sind:&lt;/p>
&lt;ul>
&lt;li>Ermitteln der Metainformationen zur Klasse&lt;/li>
&lt;li>Ermitteln der Metainformationen zur Methode&lt;/li>
&lt;li>Aufrufen der Methode&lt;/li>
&lt;li>Exception Handling&lt;/li>
&lt;/ul>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public class Greeter {
public String greet(String name) {
return &amp;#34;Hello &amp;#34; + name;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public class Main {
public static void main(String[] args) {
String methodName = &amp;#34;greet&amp;#34;;
Class&amp;lt;?&amp;gt;[] parameterTypes = new Class&amp;lt;?&amp;gt;[] { String.class };
// Ermitteln der Metainformationen zur Klasse
Class&amp;lt;?&amp;gt; clazz = Greeter.class;
try {
// Ermitteln der Metainformationen zur Methode
Method greetMethod = clazz.getMethod(methodName, parameterTypes);
// Methode aufrufen
String parameter = &amp;#34;Claudio&amp;#34;;
Object result = greetMethod.invoke(new Greeter(), parameter);
System.out.println(result);
} catch (NoSuchMethodException e) {
// handle exception
} catch (SecurityException e) {
// handle exception
} catch (IllegalAccessException e) {
// handle exception
} catch (IllegalArgumentException e) {
// handle exception
} catch (InvocationTargetException e) {
// handle exception
}
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wie wir sehen gibt es zwei grosse Nachteile beim Einsatz von Reflection:&lt;/p>
&lt;ul>
&lt;li>Viel Code. Vor Java 7 benötigt man für einen Methodenaufruf zwischen 40 und 50 Zeilen Programmcode.&lt;/li>
&lt;li>Viel Exception Handling&lt;/li>
&lt;/ul>
&lt;p>Seit Java 7 wurden die Nachteile ein wenig entschärft, da sich das Exception Handling deutlich eleganter gestalten lässt. Einerseits bietet Java 7 die Möglichkeit zum Multi-Catch (siehe Modul Exception Handling) und andererseits wurden alle Exceptions beim Einsatz von Reflection in der Klasse &lt;em>java.lang.ReflectiveOperationException&lt;/em> zusammengefasst.&lt;/p>
&lt;p>Abgekürzt lässt sich das oben gezeigte Beispiel so darstellen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">String methodName = &amp;#34;greet&amp;#34;;
Class&amp;lt;?&amp;gt;[] parameterTypes = new Class&amp;lt;?&amp;gt;[] { String.class };
// Ermitteln der Metainformationen zur Klasse
Class&amp;lt;?&amp;gt; clazz = Greeter.class;
try {
// Ermitteln der Metainformationen zur Methode
Method greetMethod = clazz.getMethod(methodName, parameterTypes);
// Methode aufrufen
String parameter = &amp;#34;Claudio&amp;#34;;
Object result = greetMethod.invoke(new Greeter(), parameter);
System.out.println(result);
} catch (ReflectiveOperationException e) {
// handle exception
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="zugriff-auf-methoden-und-attribute">Zugriff auf Methoden und Attribute&lt;/h3>
&lt;p>Sobald wir ein Klassenobjekt ermittelt haben können wir auf weitere Metadaten zugreifen. Spannend ist, dass wir so nicht nur auf Methoden und Attribute, sondern auch auf Annotationen zugreifen können.&lt;/p>
&lt;p>Im Beispiel oben wurde auf eine Methode zugegriffen. Dieser Zugriff besitzt die Einschränkung, dass nur öffentlich zugängliche Methoden ermittelt werden können. Damit wir auch Zugriff auf nicht öffentlich sichtbare Bestandteile erhalten, ist etwas mehr Aufwand notwendig. Um alle definierten Methoden einer Klasse unabhängig von der Sichtbarkeit aufzulisten können wir die Methode &lt;em>getDeclaredMethod(Class&amp;lt;?&amp;gt;)&lt;/em> verwenden. Um wirklich alle Methoden einer Klasse über den Namen zu finden, also inklusive den Methoden aus Superklassen, können wir uns ganz einfach einer Rekursion bedienen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static Method findMethods(Class&amp;lt;?&amp;gt; clazz, String methodName, Class&amp;lt;?&amp;gt;... parameterTypes) {
Objects.requireNonNull(methodName, &amp;#34;Methodenname darf nicht null sein&amp;#34;);
Objects.requireNonNull(parameterTypes, &amp;#34;Parameter dürfen nicht null sein&amp;#34;);
if (clazz == null) {
return null;
}
try {
return clazz.getDeclaredMethod(methodName, parameterTypes);
} catch (NoSuchMethodException e) {
return findMethod(clazz.getSuperclass(), methodName, parameterTypes);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Methode &lt;em>getField(String)&lt;/em> liefert für den Namen eines Attributs das entsprechende Field-Objekt zurück. Mit der Methode &lt;em>getDeclaredField(String)&lt;/em> erhält man auch nicht öffentliche Attribute einer Klasse.&lt;/p>
&lt;hr>
&lt;h3 id="eigenschaften-ermitteln">Eigenschaften ermitteln&lt;/h3>
&lt;p>Für Objekte des Typs &lt;em>Method&lt;/em> und &lt;em>Field&lt;/em> lassen sich mit der Methode &lt;em>getModifiers()&lt;/em> verschiedene Eigenschaften in Form einer Zahl abfragen. Die Auswertung kann dann mit der Hilfsklasse &lt;em>java.lang.reflect.Modifier&lt;/em> erfolgen.&lt;/p>
&lt;p>Mögliche Abfragen sind beispielsweise:&lt;/p>
&lt;ul>
&lt;li>&lt;em>isPublic(int), isProtected(int)&lt;/em> und &lt;em>isPrivate(int)&lt;/em>&lt;/li>
&lt;li>&lt;em>isStatic(int), isFinal(int)&lt;/em> und &lt;em>isAbstract(int)&lt;/em>&lt;/li>
&lt;li>&lt;em>isSynchronized(int)&lt;/em> und &lt;em>isVolatile(int)&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Method greetMethod = clazz.getMethod(methodName, parameterTypes);
int modifiers = greetMethod.getModifiers();
boolean isPublic = Modifier.isPublic(modifiers);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="spezialfall-konstruktoren">Spezialfall Konstruktoren&lt;/h3>
&lt;p>Der Aufruf eines Konstruktors per Reflection ist mit der Methode &lt;em>newInstance()&lt;/em> möglich. Dies gilt nur für den Default-Konstruktor ohne Parameter. Der Aufruf eines Konstruktors mit Parameter erfordert zuerst einen Methodenaufruf von &lt;em>getDeclaredConstructor(Class&amp;lt;?&amp;gt;&amp;hellip;)&lt;/em>. So erhalten wir den Konstruktor mit passender Signatur als Constructor-Objekt. Auf diesem Objekt kann anschliessend der Methodenaufruf &lt;em>newInstance(Object&amp;hellip;)&lt;/em> mit den korrekten Parametern erfolgen.&lt;/p>
&lt;hr>
&lt;h2 id="annotationen">Annotationen&lt;/h2>
&lt;hr>
&lt;h3 id="einführung">Einführung&lt;/h3>
&lt;p>Annotationen existieren seit Java 5 als neue Sprachelemente. Eine Annotation beginnt immer mit einem @-Zeichen und wird vor das entsprechende Element geschrieben, das annotiert werden soll.&lt;/p>
&lt;p>Die Einsatzgebiete sind wie folgt:&lt;/p>
&lt;ul>
&lt;li>Compiler-Informationen: Bereitstellung von Informationen an den Compiler wie beispielsweise mit der Annotation @Override&lt;/li>
&lt;li>Informationen für Tools: Diverse Annotationen, darunter auch selber geschriebene, können von speziellen Tools ausgewertet werden. Diese Tools nennt man Annotation Processor. Ein solcher Annotation Processor besitzt immer die Basisklasse javax.annotation.processing.AbstractProcessor. Schwergewichtige Frameworks wie beispielsweise Spring basieren in ihrer Funktionalität zu grossen Teilen auf Annotationen und deren Auswertung&lt;/li>
&lt;li>Informationsbereitstellung zur Laufzeit: Annotationen und deren Parameter können zur Laufzeit über Reflection ausgelesen und auch ausgewertet werden&lt;/li>
&lt;/ul>
&lt;p>Nicht alle Annotationen sind für jeden der oben genannten Anwendungsfälle geeignet. Der Grund dafür sind die verschiedenen Lebensdauern von Annotationen. Abhängig von der Definition verwirft oder überträgt der Java-Compiler Annotationen in das Kompilat oder nicht.&lt;/p>
&lt;hr>
&lt;h3 id="standard-annotationen-des-jdks">Standard-Annotationen des JDKs&lt;/h3>
&lt;p>Die folgenden Annotationen werden durch das JDK zur Verfügung gestellt. Bisher haben wir sie vielleicht bereits verwendet, nun wollen wir aber ihren Zweck nochmals genauer anschauen.&lt;/p>
&lt;h4 id="deprecated">@Deprecated&lt;/h4>
&lt;p>Zweck:&lt;/p>
&lt;ul>
&lt;li>Anzeige, dass ein markiertes Element veraltet ist und nicht mehr verwendet werden sollte&lt;/li>
&lt;li>Wird ein solches Element verwendet, so beschwert sich der Compiler mit einer Warnung&lt;/li>
&lt;li>Als zusätzliche Angabe sollte @deprecated im JavaDoc verwendet werden.&lt;/li>
&lt;/ul>
&lt;p>Möglich auf:&lt;/p>
&lt;ul>
&lt;li>Klassen&lt;/li>
&lt;li>Felder (=Instanzvariablen)&lt;/li>
&lt;li>Methoden&lt;/li>
&lt;li>Parameter&lt;/li>
&lt;li>Konstruktoren&lt;/li>
&lt;li>Lokale Variablen&lt;/li>
&lt;li>Packages&lt;/li>
&lt;/ul>
&lt;p>Einsatzbeispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">/**
* @deprecated Diese Methode führt zu Problemen und sollte nicht mehr verwendet werden. Bitte stattdessen {@link #newMethod(int someValue)} benutzen.
*/
@Deprecated
public void oldMethod(int someValue) {
// ...
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="override">@Override&lt;/h4>
&lt;p>Zweck:&lt;/p>
&lt;ul>
&lt;li>Zeigt an, dass die annotierte Methode eine gleichnamige Methode einer Basisklasse überschreibt bzw. ein Interface implementiert&lt;/li>
&lt;li>Die Anwendung erscheint meistens nicht sehr sinnvoll, trotzdem hat diese Annotation ihre Berechtigung. Durch die Angabe dieser Annotation gleicht der Compiler die Signatur einer Methode mit derjenigen einer Basisklasse ab und warnt, wenn keine Überschreibung vorliegt&lt;/li>
&lt;li>Auf diese Weise kann man sehr schnell Fehler finden, falls man sich beim Methodennamen vertippt&lt;/li>
&lt;/ul>
&lt;p>Möglich auf:&lt;/p>
&lt;ul>
&lt;li>Methoden&lt;/li>
&lt;/ul>
&lt;p>Einsatzbeispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">@Override
public void overridingMethod(int someValue) {
// ...
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="suppresswarnings">@SuppressWarnings&lt;/h4>
&lt;p>Zweck:&lt;/p>
&lt;ul>
&lt;li>Erlaubt die Unterdrückung von Compiler-Warnungen&lt;/li>
&lt;li>Der zu unterdrückende Typ wird als Parameter an die Annotation übergeben&lt;/li>
&lt;li>Damit wir keine Fehler &amp;ldquo;verstecken&amp;rdquo; sollten wir diese Annotation nur sparsam einsetzen&lt;/li>
&lt;li>Die folgenden vordefinierten Parameterwerte sind wichtig, sie unterdrücken die genannten Compiler-Warnungen:
&lt;ul>
&lt;li>boxing, für Typumwandlungen mit Auto-Boxing und Auto-Unboxing&lt;/li>
&lt;li>deprecation, für die Verwendung von veralteten Implementationen&lt;/li>
&lt;li>unused, für die Verwendung von unbenutzten Variablen und/oder Methoden&lt;/li>
&lt;li>unchecked, für problematische Zugriffe wo der Compiler keine Typsicherheit garantieren kann. Dies ist vorallem beim kombinierten Einsatz von generischen Datentypen und untypisierten Klassen der Fall&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Möglich auf:&lt;/p>
&lt;ul>
&lt;li>Klassen&lt;/li>
&lt;li>Felder (=Instanzvariablen)&lt;/li>
&lt;li>Methoden&lt;/li>
&lt;li>Parameter&lt;/li>
&lt;li>Konstruktoren&lt;/li>
&lt;li>Lokale Variablen&lt;/li>
&lt;/ul>
&lt;p>Einsatzbeispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">@SuppressWarnings(&amp;#34;unchecked&amp;#34;)
public static void main(String[] args) {
@SuppressWarnings(value = {&amp;#34;unchecked&amp;#34;, &amp;#34;deprecation&amp;#34;})
final List&amp;lt;Person&amp;gt; persons = getPersons();
for (final Person person: persons) {
// ...
}
@Deprecated
public static List getPersons() {
return new ArrayList();
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In diesem Beispiel geht es wirklich nur darum, den Einsatz der Annotation zu zeigen. Das Beispiel zeigt generell eher schlechten Code, im Realfall würden die Methode &lt;em>getPersons()&lt;/em> einfach überarbeiten anstatt die Warnungen zu unterdrücken :-)&lt;/p>
&lt;hr>
&lt;h3 id="definition-eigener-annotationen">Definition eigener Annotationen&lt;/h3>
&lt;p>Annotationen werden in eigenen Dateien analog zu Klassen und Interfaces definiert. Statt des Schlüsselworts class resp. interface wird hier @interface verwendet. Das sorgt automatisch dafür, dass die Annotation den Basistyp &lt;em>Annotation&lt;/em> aus dem Package &lt;em>java.lang.annotation&lt;/em> besitzt.&lt;/p>
&lt;p>Die Definition einer eigenen Annotation schauen wir nun anhand eines Beispiels genauer an. Wir erstellen eine Annotation für die Klassendokumentation.&lt;/p>
&lt;p>Wir definieren nun zuerst eine eigene Annotation, diese soll zur Laufzeit für Typen (Klassen, Interfaces, Enumeratoren) zur Verfügung stehen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
// Meta-Annotationen
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
// Annotation-Definition
public @interface Documentation {
// Methode zur Übergabe von Informationen durch Parameter
String id();
String name() default &amp;#34;&amp;#34;;
String functionality();
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das ist dann auch schon alles zur Definition einer eigenen Annotation. Bevor wir weitermachen folgt hier eine kurze Information zu den einzelnen Elementen.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Element&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>@Retention&lt;/td>
&lt;td>Festlegung zu welchem Zeitpunkt die Annotation später verfügbar sein soll. Hier wurde mit RetentionPolicy.RUNTIME die Verfügbarkeit zur Laufzeit gewählt.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>@Target&lt;/td>
&lt;td>Festlegung wo diese Annotation später im Sourcecode angewendet werden darf. Wir wollen damit Methoden markieren und wählen aus diesem Grund ElementType.METHOD.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>default&lt;/td>
&lt;td>Angabe eines Default-Wertes für den entsprechenden Parameter, solche Parameter werden automatisch optional.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Der grössere Aufwand entsteht nun erst, wenn wir diese Annotation zur Laufzeit auslesen möchten.&lt;/p>
&lt;hr>
&lt;h3 id="eigene-annotationen-zur-laufzeit-auslesen">Eigene Annotationen zur Laufzeit auslesen&lt;/h3>
&lt;p>Die Definition der Annotation ist nun bekannt. Wir betrachten diese nun im Einsatz und nehmen als Beispiel eine weitere Klasse, dort soll die Annotation nun zum Einsatz kommen:&lt;/p>
&lt;h4 id="ohne-annotation">Ohne Annotation&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">\**
* This is the request for a job
*
* @author u210148 Claudio Zesiger
*/
@Data
public class JobRequest {
private String id;
private String title;
private String code;
private String creator;
private LocalDateTime creationDate;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="mit-annotation">Mit Annotation&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">@Documentation(id=&amp;#34;u210148&amp;#34;, name=&amp;#34;Claudio Zesiger&amp;#34;, functionality=&amp;#34;This is the request for a job&amp;#34;)
@Data
public class JobRequest {
private String id;
private String title;
private String code;
private String creator;
private LocalDateTime creationDate;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="auswertung">Auswertung&lt;/h4>
&lt;p>Die Auswertung unserer Annotation zur Laufzeit ist beispielsweise wie folgt möglich:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">public static void main(String\[\] args) {
Documentation documentation = JobRequest.class.getAnnotation(Documentation.class);
System.out.println(JobRequest.class.getName());
System.out.println(documentation.id());
System.out.println(documentation.name());
System.out.println(documentation.functionality());
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Durch eine solche Auswertung liesse sich beispielsweise eine automatische Dokumentation generieren.&lt;/p></description></item><item><title>Docs: Git Erweitert</title><link>/docs/git/git-extended/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/git-extended/</guid><description>
&lt;p>Nachdem du die Basics von git gelernt hast, ist es Zeit dich weiter zu vertiefen.&lt;/p>
&lt;h2 id="inhalt">Inhalt&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#Stash">Stash&lt;/a>&lt;/li>
&lt;li>&lt;a href="#CherryPick">Cherry Pick&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Tag">Tag&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Alias">Alias&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stash">Stash&lt;/h2>
&lt;h4 id="was-ist-stash">Was ist stash?&lt;/h4>
&lt;p>Mit git stash ist es möglich Änderungen zwischenzuspeichern und diese später abzurufen.
Nach dem stashen kannst du an anderen Dateien arbeiten bis du die zwischengespeicherten Daten problemlos wieder abrufen kannst.&lt;/p>
&lt;h4 id="wie-funktioniert-stash">Wie funktioniert stash?&lt;/h4>
&lt;p>Um Dateien zu stashen wird der folgende Befehl verwendet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git stash
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Um Dateien im Anschluss abzurufen wird der folgende Befehl verwendet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git stash pop
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mit &lt;code>git stash pop&lt;/code> werden alle Änderungen des stashes gelöscht und der ursprünglichen Datei hinzugefügt.&lt;/p>
&lt;p>Die Alternative dazu ist:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git stash apply
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mit &lt;code>git stash apply&lt;/code> werden die änderungen ebenfalls übernommen,
der Unterschied zu &lt;code>git stash pop&lt;/code> liegt darin das stash apply die Dateien nicht aus dem Stash löscht,
dies kann nützlich sein, wenn dieselbe Änderung mehreren Branches hinzugefügt werden soll.&lt;/p>
&lt;h2 id="squash">Squash&lt;/h2>
&lt;h4 id="was-ist-squash">Was ist Squash&lt;/h4>
&lt;p>squash in Git meint mehrere Commits zu vereinen.
Squash wird meistens benutzt, wenn Branches gemerged werden.
An dieser Stelle ist es jedoch wichtig zu erwähnen das es keinen &lt;code>git squash&lt;/code> Befehl gibt.&lt;/p>
&lt;h4 id="wie-funktioniert-squash">Wie funktioniert squash?&lt;/h4>
&lt;p>Es gibt verschiedene Wege um Commits zu squashen.
Zum Beispiel gibt es die Methode des manuellen squashens, dazu wird das Interactive rebase feature von Git genutzt.
Um die Interactive Rebase session zu starten wird der folgende Befehl verwendet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git rebase -i HEAD~3
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Danach öffnet sich ein Editor der die letzten n Commits anzeigt, n wird durch die Zahl nach dem &amp;ldquo;~&amp;rdquo; definiert.
Um jetzt die Commits zu squashen muss das pick zu beginn der zeile mit squash ersetzt werden.
Jetzt werden alle Commits mit dem squash Schlüsselwort an den obersten Commit hinzugefügt.&lt;/p>
&lt;h5 id="wieso-sollte-man-squashen">Wieso sollte man Squashen:&lt;/h5>
&lt;p>Angenommen du beendest die Arbeit an einem Featurebranch und willst diese in den Main branch mergen,
jedoch enthält der Featurebranch viele Commits die nicht zwingend im Mainbranch aufgeführt werden sollen,
in diesem Fall eignet sich das squashen, um diese Commits zusammenzufassen.&lt;/p>
&lt;h2 id="mergepull-requests">Merge/Pull Requests&lt;/h2>
&lt;h3 id="was-ist-der-unterschied-zwischen-einer-merge-request-und-einer-pull-request">Was ist der Unterschied zwischen einer Merge Request und einer Pull Request?&lt;/h3>
&lt;p>Beide Begriffe meinen dasselbe, werden jedoch mit einer anderen Plattform assoziiert.
Der Begriff Merge Request wird im Zusammenhang mit GitLab verwendet.
Im Zusammenhang mit GitHub wird jedoch der Begriff Pull Request verwendet.
Der Einfachheit wird im folgenden Text nur von Pull Request gesprochen.&lt;/p>
&lt;h3 id="was-ist-eine-pull-request-bzw-eine-merge-request">Was ist eine Pull Request bzw. eine Merge Request?&lt;/h3>
&lt;p>In ihrer einfachsten Form sind Pull-Requests eine Funktion für Entwickler
die andere Teammitglieder darüber informiert, dass ein Feature fertiggestellt wurde.
Dies lässt alle Beteiligten wissen, dass der Code bereit für eine überprüfung ist und danach in Hauptzweig eingeführt werden kann.&lt;/p>
&lt;h3 id="wie-kann-eine-pull-request-erstellt-werden-intellij">Wie kann eine Pull Request erstellt werden (IntelliJ)&lt;/h3>
&lt;p>Um eine Pull Request direkt aus Intelij zu erstellen, muss zuerst sichergestellt werden das man selber berechtigt ist eine Pull Request zu erstellen.
Sind diese Berechtigungen vorhanden, kann die Pull Request in wenigen Schritten erstellt werden.
Oben Links in IntelliJ befindet sich einen Button der mit Pull Request beschriftet ist.
Danach öffnet sich ein Fenster in dem ausgewählt werden kann, welchen der lokalen Branches in das Ziel Repo gemerged werden soll.
Danach muss nach noch einen Titel festgelegt werden. Es besteht ebenfalls die Möglichkeit eine Beschreibung hinzuzufügen, dies ist jedoch nur optional.
Im Anschluss besteht die Möglichkeit einen Reviewer hinzuzufügen.
Jetzt kann die Pull Request erstellt werden.&lt;/p>
&lt;h3 id="wie-kann-eine-pull-request-erstellt-werden-github">Wie kann eine Pull Request erstellt werden (Github)&lt;/h3>
&lt;p>Um eine Pull Request direkt von GitHub aus zu senden, muss zuerst der Reiter Pull Request ausgewählt werden,
Jetzt stehen verschiedene Möglichkeiten zu Auswahl, in unserem Fall wollen wir aber nur eine neue Pull Request erstellen.
Im Anschluss erscheint ein neues Panel, das wichtigste dabei ist die Wahl des richtigen source und target branches.
Als nächstes kann noch ein Name und eine Beschreibung für die Pull Request gesetzt werden.
Wie in IntelliJ besteht auch hier die Möglichkeit einen Reviewer hinzuzufügen, der Button dazu befindet sich mittig auf der linken Seite.
Da nun alle Einstellungen vorgenommen wurden, kann die Pull Request erstellt werden.&lt;/p>
&lt;h2 id="cherry-pick">Cherry Pick&lt;/h2>
&lt;h3 id="was-ist-cherry-pick-">Was ist Cherry-Pick ?&lt;/h3>
&lt;p>git cherry-pick ist ein Befehl welcher es ermöglicht beliebige Git-Commits per Referenz
anzusprechen und diese an den momentanen Arbeitskopf (HEAD) anzuheften.
git cherry-pick kann sehr nützlich für das rückgängig Machen von Änderungen sein.&lt;/p>
&lt;p>Zum Beispiel: Ein Commit ist aus Versehen im falschen Branch. Nun kannst du zum korrekten
Branch wechselt und brauchst git cherry-pick um den Commit am richtigen Ort zu befestigen.&lt;/p>
&lt;h3 id="wie-funktioniert-cherry-pick-">Wie funktioniert Cherry-Pick ?&lt;/h3>
&lt;p>Um Cherry Pick anzuwenden gibt man folgenden Befehl ein:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git cherry-pick &amp;lt;commit-hash&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der &lt;commit-hash> muss natürlich noch mit dem korrekten Hash des Commits ersetzt werden, welchen
man verschieben will. Anschliessend wird der Commit an den Branch angeheftet, auf dem man sich gerade
befindet. Darum Achtung!: Immer zuerst kontrollieren ob man derzeit auch wirklich auf dem korrekten
Branch ist.&lt;/p>
&lt;h2 id="tag">Tag&lt;/h2>
&lt;h3 id="was-sind-tags-">Was sind Tags ?&lt;/h3>
&lt;p>Tags sind Referenzen, welche an einen bestimmten Punkt der History
zeigen. Tagging wird üblicherweise benutzt um wichtige Ereignisse wie z.B.
das Release einer Applikation festzuhalten. Ein Tag ist etwas ähnliches
wie ein Branch, nur das ein Tag sich nicht verändert. Anders als ein Branch,
kann ein Tag nach dem Erstellen keine weiteren Commits
beinhalten.&lt;/p>
&lt;h3 id="wie-funktionieren-tags-">Wie funktionieren Tags ?&lt;/h3>
&lt;p>Um ein Tag zu erstellen wird folgender Befehl benötigt:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git tag &amp;lt;tagname&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wobei der &lt;tagname> auch wieder durch den gewünschten String ersetzt werden muss.
Will man zusätzlich zum Tag eine Beschriftung hinzufügen, macht man das mit:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git tag &amp;lt;tagname&amp;gt; -a
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Damit wird ein annotated tag erstellt.&lt;/p>
&lt;p>Auch wichtig anzumerken: Wenn du normal auf den Branch pushst, werden die Tags
nicht standardmässig mitgepusht. Dazu brauchst du dann:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git push origin --tags
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Willst du nur ein einzelnes Tag pushen, brauche:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git push origin &amp;lt;tag&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="alias">Alias&lt;/h2>
&lt;h3 id="was-sind-aliasse-">Was sind Aliasse ?&lt;/h3>
&lt;p>Ein Git-Alias ist zu vergleichen mit einem Shortcut. Aliasse werden z.b.
auch beim Arbeiten mit der Bash-Konsole eingesetzt. Aliase werden gebraucht um kürzere Befehle
zu realisieren. Sie ermöglichen effizienteres Programmieren.&lt;/p>
&lt;p>Nehmen wir zum Beispiel den git-checkout Befehl.
Dieser Befehl wird häufig verwendet und muss immer wieder neu eingetippt werden. Mit den Git-Aliassen
jedoch kann man git-checkout z.B. in git.co verwandeln. Dies spart enorme Schreibarbeit über längere Zeit
und verliert dennoch nicht an Wirksamkeit.&lt;/p>
&lt;h3 id="wie-funktionieren-aliasse">Wie funktionieren Aliasse?&lt;/h3>
&lt;p>Um Aliasse festzulegen, müssen wir diese in der gitconfig-Datei definieren. Dort erstellen wir das
Stichwort [alias]. Danach könnte das etwa so aussehen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">[alias]
st = status
ci = commit -v
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Aliasse können beliebig definiert werden, Ziel davon soll nur sein, die Schreibarbeit zu
minimieren und das eigene Programmieren praktischer zu machen.&lt;/p>
&lt;h2 id="gitg">Gitg&lt;/h2>
&lt;h3 id="was-ist-gitg">Was ist Gitg&lt;/h3>
&lt;p>Gitg ist eine grafische Benutzeroberfläche für git. Es zielt darauf ab, ein kleines,
schnelles und bequemes Werkzeug zu sein, um Git-Repositories zu visualisieren.
Neben der Visualisierung bietet Gitg auch einfache Möglichkeiten zur Verwaltung eines Repositorys.
Jedoch bietet IntelliJ standardmässig die dieselben Möglichkeiten, sollte man jedoch eine IDE ohne Git integration verwenden ist gitg ein praktisches Tool.&lt;/p>
&lt;h3 id="installationsanleitung">Installationsanleitung&lt;/h3>
&lt;p>Unter Linux kann gitg mit folgendem Befehl installieren:
&lt;br>&lt;code>sudo apt install gitg&lt;/code>&lt;br>
Leider ist git unter Windows nicht verfügbar.
Eine empfehlenswerte Alternative dazu ist der offizielle GitHub Client.&lt;/p>
&lt;h2 id="github-client">Github Client&lt;/h2>
&lt;h3 id="was-ist-der-github-client">Was ist der GitHub Client&lt;/h3>
&lt;p>Der GitHub Client ist ein Windows Programm für die Verwaltung von Git Repositorys.
Der GitHub Client funktioniert am besten mit GitHub repositorys,
das bedeutet aber nicht das dieser keine Repositorys von anderen Quellen unterstützt.
Es ist lediglich ein wenig aufwändiger Repositorys aus anderen Quellen einzubinden.&lt;/p>
&lt;h3 id="installationsanleitung-1">Installationsanleitung&lt;/h3>
&lt;p>Unter Windows kann der GitHub Client auf der folgenden Seite heruntergeladen werden:
&lt;code>https://desktop.github.com/&lt;/code>
Unter Linux der Client mithilfe des folgenden Scripts heruntergeladen werden:
&lt;code>https://gist.github.com/berkorbay/6feda478a00b0432d13f1fc0a50467f1&lt;/code>&lt;/p>
&lt;h2 id="git-blame">Git Blame&lt;/h2>
&lt;h3 id="was-ist-git-blame">Was ist Git-Blame?&lt;/h3>
&lt;p>Ist ein Befehl, welcher dazu dient den Author der letzten Änderung anzuzeigen. Deswegen auch
git &amp;ldquo;blame&amp;rdquo;. Man &amp;ldquo;blamed&amp;rdquo; den Verfasser der letzten Änderung für seinen Fehler (falls er
einen gemacht hat).&lt;/p>
&lt;h3 id="wie-funktioniert-git-blame">Wie funktioniert Git-Blame?&lt;/h3>
&lt;p>Um git blame anzuwenden braucht es nicht viel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git blame &amp;lt;filename&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Und schon haben wir den Verantwortlichen für die letzte Änderung an einem unserer
Files. Jedoch bietet &lt;code>git blame&lt;/code> auch andere Anwendungsmöglichkeiten:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Bash" data-lang="Bash">git blame -L 1,5 &amp;lt;filename&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hier zum Beispiel definieren wir eine Range von der Zeile 1 bis zur Zeile 5. Oder hier, noch
eine weitere Variante:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git blame -e &amp;lt;filename&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Option -e zeigt uns anstatt des usernames des Authors, direkt die E-mail Adresse von
ihm, so dass wir gerade Kontakt aufnehmen können.&lt;/p>
&lt;p>Zum Schluss haben wir noch die -w Option&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git blame -w &amp;lt;filename&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dieser Befehl ignoriert wenn ein Author nur Leerschläge geändert hat. Das hat den Vorteil, dass
wir nur die Authoren bekommen, welche auch wirklich etwas am Code selbst geändert und ihn
nicht nur formatiert haben.&lt;/p>
&lt;h2 id="blobs-und-trees">Blobs und Trees&lt;/h2>
&lt;h3 id="was-sind-blobs-und-trees-show">Was sind Blobs und Trees show?&lt;/h3>
&lt;p>Zuerst zu den Blobs: Blobs werden benutzt, um die Inhalte einzelner Dateien zu speichern.
Trees wiederum beinhalten Referenzen zu anderen Blobs oder Unterbäumen.&lt;/p>
&lt;h3 id="wozu-braucht-es-sie">Wozu braucht es sie?&lt;/h3>
&lt;p>Wenn man eine Datei staged wird eine Blob-Datei erstellt. Dieser Blob hat den
Inhalt der Datei und hat den Typ &amp;ldquo;blob&amp;rdquo;. Ein Blob eigentlich der Inhalt der Datei
an einer bestimmten Instanz. Die verschiedenen Blobs fallen danach unter einen
Tree.&lt;/p>
&lt;p>Nun bildet sich hier eine Kette: Das Commit-Objekt greift auf die Tree-Objekte zu.
Diese wiederum geben uns die Blob-Objekte zurück. Deshalb brauchen wir diese Konstellation also.
Ohne die Trees und Blobs hätten wir keinen Zugriff auf die Inhalte unserer Dateien mehr.&lt;/p>
&lt;img src="https://miro.medium.com/max/541/1*ZGVkiRbMErfng2CqpU3YQQ.png">
Im Diagramm kann die Abhängigkeit dementsprechend besichtigt werden.</description></item><item><title>Docs: Asynchrone Anfragen</title><link>/docs/web/javascript/05_js_async/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/javascript/05_js_async/</guid><description>
&lt;h2 id="webanfrage-mit-javascript">Webanfrage mit JavaScript&lt;/h2>
&lt;p>Wenn du eine Webanwendung schreibst, dann muss deine Website (=Frontend) wahrscheinlich Daten von (d)einem Backend abfragen.&lt;/p>
&lt;p>In den meisten Fällen werden hierfür HTTP-Requests verwendet, die du bereits kennengelernt hast (REST API bei Spring und HTML Forms).&lt;/p>
&lt;p>Um das einmal auszuprobieren, wollen wir eine API anfragen, die als Antwort zufällige &amp;ldquo;Fakten&amp;rdquo; über Chuck Norris zurückschickt. Wenn wir diese URL im Browser aufrufen (= HTTP GET), erhalten wir einen Witz in Form von JSON:&lt;/p>
&lt;p>&lt;code>GET https://api.chucknorris.io/jokes/random&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;categories&amp;#34;&lt;/span>: [],
&lt;span style="color:#f92672">&amp;#34;created_at&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-01-05 13:42:20.262289&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;icon_url&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://assets.chucknorris.host/img/avatar/chuck-norris.png&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;id&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;6F3bv9fIRUGCPTcma6Je1w&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;updated_at&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2020-01-05 13:42:20.262289&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;url&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://api.chucknorris.io/jokes/6F3bv9fIRUGCPTcma6Je1w&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;value&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Albert Einstein&amp;#39;s hair used to be neatly combed...until the day he met Chuck Norris.&amp;#34;&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Folglich interessiert uns der Wert für &lt;code>&amp;quot;value&amp;quot;&lt;/code>.&lt;/p>
&lt;p>Damit für dich das Vorgehen verständlicher ist, führen wir Schritt für Schritt in der Browser-Konsole aus.&lt;/p>
&lt;p>Die Abfrage kannst du wie folgt durchführen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;https://api.chucknorris.io/jokes/random&amp;#39;&lt;/span>, {&lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;get&amp;#39;&lt;/span>})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Du wirst sehen, dass dieser Funktionsaufruf ein &lt;code>Promise {&amp;lt;pending&amp;gt;}&lt;/code> zurückgibt. Wir sehen, dass die Anfrage noch nicht vorbei ist (pending = anstehend). Dieses &lt;code>Promise&lt;/code>-Objekt wird die Antwort enthalten, sobald die Antwort verfügbar ist. Da wir sowieso erst weiterfahren möchten, wenn die Antwort bereit ist, interessieren wir uns nicht für das &lt;code>Promise&lt;/code>. Daher können wir einfach mit der Fortsetzung des Scriptes solange warten, bis wir die Antwort hätten. Das können wir wie folgt machen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;https://api.chucknorris.io/jokes/random&amp;#39;&lt;/span>, {&lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;get&amp;#39;&lt;/span>})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das &lt;code>await&lt;/code> führt dazu, dass das Script erst weitergeht, wenn die Antwort da ist. Zusätzlich wird die Antwort automatisch aus dem &lt;code>Promise&lt;/code>-Objekt entpackt und wir erhalten so direkt ein Objekt vom Typ &lt;code>Response&lt;/code>.&lt;/p>
&lt;p>Theoretisch haben wir nun die Daten, die wir wollen. Da wir als Antwort ein JSON-Objekt als Antwort erwarten, können wir direkt die Antwort als JavaScript-Objekt anfordern:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;https://api.chucknorris.io/jokes/random&amp;#39;&lt;/span>, {&lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;get&amp;#39;&lt;/span>});
&lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>();
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Komischerweise erhalten wir wieder ein &lt;code>Promise {&amp;lt;pending&amp;gt;}&lt;/code>. Was müssen wir machen, um das JSON aus diesem Promise zu kriegen?&lt;/p>
&lt;p>Genau: Wir müssen es &lt;code>await&lt;/code>en:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;https://api.chucknorris.io/jokes/random&amp;#39;&lt;/span>, {&lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;get&amp;#39;&lt;/span>});
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">jokeObject&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>()
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dies ist notwendig, da die Methode &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/json">json()&lt;/a> asynchron den response Stream ausliest.&lt;/p>
&lt;p>Wenn du nun das &lt;code>jokeObject&lt;/code> loggst (z.B. mit &lt;code>console.log(jokeObject)&lt;/code>), siehst du, dass wir nun das gleiche Objekt, das wir ganz oben erwartet haben, erhalten haben.&lt;/p>
&lt;p>Den Witz kannst du wie folgt ausgeben:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">jokeObject&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="anfrage-in-eine-funktion-einbinden">Anfrage in eine Funktion einbinden&lt;/h3>
&lt;p>Im Normalfall packt man solche Logik in eine Funktion. Den oberen Code könntest du wie folgt in eine Methode einbinden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Requests a random Chuck Norris joke and returns it.
&lt;/span>&lt;span style="color:#75715e"> * @return {Promise&amp;lt;string&amp;gt;} a random Chuck Norris joke.
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">fetchJoke&lt;/span>() {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;https://api.chucknorris.io/jokes/random&amp;#39;&lt;/span>, { &lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;get&amp;#39;&lt;/span> })
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">jokeObject&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>();
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">jokeObject&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dir ist sicher aufgefallen, dass wir nun das &lt;code>async&lt;/code>-Keyword vor &lt;code>function&lt;/code> geschrieben haben. Dies ist erforderlich, wenn man &lt;code>await&lt;/code> in einer Funktion verwenden möchte. Dieses &lt;code>async&lt;/code>-Keyword führt auch dazu, dass die Methode ein Objekt des Typen &lt;code>Promise&amp;lt;...&amp;gt;&lt;/code> zurückgibt.&lt;/p>
&lt;p>Wenn du diese Funktion definiert hast, kannst du den Rückgabewert von ihr wie folgt loggen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">fetchJoke&lt;/span>());
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="await-umgehen">await umgehen&lt;/h3>
&lt;p>Du wirst in die Situation kommen, wo du eine Antwort auf eine asynchrone Anfrage erhälst, aber kein &lt;code>await&lt;/code> brauchen darfst, weil du dich nicht in einer mit &lt;code>async&lt;/code> gekennzeichneten Funktion befindest.&lt;/p>
&lt;p>Statt ein Promise zu awaiten, kannst du auch definieren, dass eine bestimmte Aktion durchgeführt werden soll, sobald die Antwort da ist. Dies kannst du mit &lt;code>Promise.then(...)&lt;/code> machen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">fetchJoke&lt;/span>().&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">joke&lt;/span>) {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">joke&lt;/span>);
});
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das kannst du auch schöner schreiben, funktioniert so aber nicht mehr im Internet Explorer:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">fetchJoke&lt;/span>().&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">joke&lt;/span> =&amp;gt; &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">joke&lt;/span>));
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Was genau haben wir hier gemacht?&lt;/p>
&lt;p>Wir haben &lt;code>fetchJoke()&lt;/code> asynchron aufgerufen, ohne auf die Antwort zu warten. Deswegen erhalten wir ein Promise-Objekt. Promise-Objekte enthalten eine &lt;code>then&lt;/code>-Methode. Bei dieser Methode kannst du eine Funktion übergeben. Die übergebene Funktion wird aufgerufen, sobald die Antwort erhalten wurde.&lt;/p>
&lt;h3 id="auftrag-seite-mit-joke">Auftrag: Seite mit Joke&lt;/h3>
&lt;p>&lt;img src="/images/task.png" alt="task1"> Schreibe eine Website, die auf Knopfdruck einen solchen Witz anzeigt.&lt;/p>
&lt;p>Solltest du fertig mit dieser Aufgabe sein, dann melde dich bei einem Coach.&lt;/p>
&lt;h3 id="zusatzauftrag-eine-andere-api-anbinden">Zusatzauftrag: Eine andere API anbinden&lt;/h3>
&lt;p>&lt;img src="/images/task.png" alt="task1"> Versuche eine anderes API/Backend anzubinden und etwas auf einer Website anzuzeigen.&lt;/p>
&lt;h3 id="früher-war-alles-besser">Früher war alles besser?&lt;/h3>
&lt;p>Die &lt;code>fetch&lt;/code>-Funktion hat Webrequest stark vereinfacht. Früher durftest du dich mit XML HTTP Requests herumschlagen. Aber siehe selbst: &lt;a href="https://www.w3schools.com/xml/xml_http.asp">https://www.w3schools.com/xml/xml_http.asp&lt;/a>&lt;/p></description></item><item><title>Docs: HTML Formulare</title><link>/docs/web/html_css/05_forms/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/05_forms/</guid><description>
&lt;h2 id="wieso-html-formulare">Wieso HTML-Formulare?&lt;/h2>
&lt;p>Die Benutzer deiner Webseite möchten oder sollen Daten eingeben können, z.B. für ein Kontakt-Formular oder eine Login-Seite. HTML-Formulare ermöglichen genau das, auch ohne JavaScript.&lt;/p>
&lt;h2 id="html-input-element">HTML-Input-Element&lt;/h2>
&lt;p>Bevor wir uns HTML-Formulare genauer anschauen, wollen wir zuerst einen Blick auf Input-Elemente werfen, die das Eingeben von Daten überhaupt ermöglichen.&lt;/p>
&lt;p>Beginnen wir mit einer einfachen TextBox:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">Was ist dein Vorname?
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;firstname&amp;#34;&lt;/span>/&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Probiere alle Beispiele immer selbst aus. Du hast gesehen, wie einfach eine TextBox in HTML eingebunden werden kann.&lt;/p>
&lt;p>Das &lt;code>type&lt;/code>-Attribut definiert, um was für eine Art von Input-Element es sich handelt. &lt;code>text&lt;/code> steht für eine gewöhnliche TextBox. Das zweite Attribut kannst du im Moment noch ignorieren.&lt;/p>
&lt;h2 id="label-für-input-elemente">Label für Input-Elemente&lt;/h2>
&lt;p>Vor der TextBox haben wir einen Text (&amp;ldquo;Was ist dein Vorname&amp;rdquo;). Dieser Text wird auch &amp;ldquo;Label&amp;rdquo; genannt. Bei einer guten Webseite wird zudem die TextBox ausgewählt, wenn der User auf das Label klickt (nicht nur beim Klick auf die TextBox). Diese Funktionalität wollen wir hinzufügen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">label&lt;/span>&amp;gt;Was ist dein Vorname?&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;firstname&amp;#34;&lt;/span> /&amp;gt;&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Nun haben wir die gewünschte Funktionalität hinzufügen können. Aber was genau haben wir hier gemacht?&lt;/p>
&lt;p>Wir haben das Label als Label definiert (da im &lt;code>label&lt;/code>-Element). Wenn wir ein Input-Element in einem Label hinzufügen, dann wird bei einem Klick auf dieses Label automatisch dieses Input-Element fokussiert.&lt;/p>
&lt;p>Nun sieht das noch ein bisschen unübersichtlich aus. Das können wir besser! Zum Beispiel so:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;firstname&amp;#34;&lt;/span>&amp;gt;Was ist dein Vorname?&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;firstname&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;firstname&amp;#34;&lt;/span> /&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Abgesehen davon, dass das Input-Element nicht mehr im Label ist, ist der grosse Unterschied:&lt;/p>
&lt;ul>
&lt;li>dass das Input-Element nun ein &lt;code>id&lt;/code>-Attribut hat&lt;/li>
&lt;li>und dass der Label mit dem &lt;code>for&lt;/code>-Attribut darauf referenziert.&lt;/li>
&lt;/ul>
&lt;p>Fassen wir zusammen, weshalb wir das &lt;code>label&lt;/code>-Element verwenden:&lt;/p>
&lt;ul>
&lt;li>Beim Klick auf das Label wird das entsprechende Input-Element ausgewählt.&lt;/li>
&lt;li>Beim Klick in das entsprechende Input-Element würde ein Screen-Reader den Namen des Labels laut vorlesen, (falls verwendet).&lt;/li>
&lt;li>Und ausserdem kann man später die Labels so einfacher stylen mit CSS.&lt;/li>
&lt;/ul>
&lt;h2 id="weitere-input-elemente">Weitere Input-Elemente&lt;/h2>
&lt;p>In HTML gibt es sehr viele weitere Input-Elemente. Eine grössere Liste findest du hier: &lt;a href="https://www.w3schools.com/html/html_form_input_types.asp">https://www.w3schools.com/html/html_form_input_types.asp&lt;/a>&lt;/p>
&lt;p>Kennen solltest du sicher die folgenden:&lt;/p>
&lt;ul>
&lt;li>button&lt;/li>
&lt;li>checkbox&lt;/li>
&lt;li>date&lt;/li>
&lt;li>email&lt;/li>
&lt;li>file&lt;/li>
&lt;li>hidden&lt;/li>
&lt;li>number&lt;/li>
&lt;li>password&lt;/li>
&lt;li>radio&lt;/li>
&lt;/ul>
&lt;p>Bitte schaue dir diese Elemente auf der obengenannten Seite rasch an. Du solltest wissen, wie diese Elemente aussehen und dass es sie gibt.&lt;/p>
&lt;h2 id="formulare">Formulare&lt;/h2>
&lt;p>Nun solltest du im Stande sein, UI-Elemente (UI = User Interface -&amp;gt; Benutzerschnittstelle) mit HTML auf einer Seite anzuzeigen. Jetzt wäre es schön, wenn diese Daten auch irgendwie verwendet werden könnten.&lt;/p>
&lt;p>Theoretisch könntest du mit der Programmiersprache JavaScript direkt darauf zugreifen. Im Moment wollen wir aber bei HTML bleiben. Was wir mit HTML machen können, ist, die Werte an ein Backend (=Server) zu schicken.&lt;/p>
&lt;p>Als Backend verwenden wir die folgende URL: &lt;a href="https://www.w3schools.com/action_page.php">https://www.w3schools.com/action_page.php&lt;/a>. Das ist eine spezielle Seite: sie zeigt die Daten an, die wir ihr schicken.&lt;/p>
&lt;p>Folgender Code zeigt ein Formular, das eine E-Mail und ein Boolean beim Klick auf &amp;ldquo;Übermitteln&amp;rdquo; an das Backend schickt&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">form&lt;/span> &lt;span style="color:#a6e22e">action&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.w3schools.com/action_page.php&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;email&amp;#34;&lt;/span>&amp;gt;Email:&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;email&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;email&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;email&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">required&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#f92672">br&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;checkbox&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;interested&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;interested&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;interested&amp;#34;&lt;/span>&amp;gt;Newsletter abonnieren&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">br&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;submit&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Übermitteln&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">form&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Entscheidend ist hier das &lt;code>&amp;lt;form&amp;gt;&lt;/code>-Tag. Das &lt;code>action&lt;/code>-Attribut legt fest, wo die Daten hingeschickt werden. Die &lt;code>method&lt;/code> legt fest, welche HTTP Request Method verwendet wird (GET oder POST). Bist du dir bei den Methoden nicht mehr so sicher, dann schaue bitte das &amp;ldquo;REST&amp;rdquo;-Kapitel hier noch einmal an: &lt;a href="https://labs.it-ninjas.ch/docs/java/spring_introduction/#625-rest">https://labs.it-ninjas.ch/docs/java/spring_introduction/#625-rest&lt;/a>&lt;/p>
&lt;p>Bei Formularen verwendet man meistens entweder GET oder POST. Der grosse Unterschied zwischen beiden Methoden ist, dass bei GET die Daten in der URL mitgegeben wird, wobei bei POST die Daten ein bisschen besser versteckt im HTTP Request Body mitgeschickt werden. Verschickst du ein Passwort, solltest du lieber POST verwenden, weil sonst das Passwort womöglich im Browser in der URL-Box einsehbar sein könnte. Die zu verwendende Methode wird meistens vom Backend festgelegt. Unser Backend unterstützt beide Methoden.&lt;/p>
&lt;p>Wichtig für das Formular ist, dass es einen &lt;code>submit&lt;/code>-Button besitzt. Dieser Submit-Button löst das Senden der Daten an die angegebene Url (&lt;code>action&lt;/code>) mit der entsprechenden HTTP Request Method (&lt;code>method&lt;/code>) aus. Probiere dieses Formular einmal aus. Du wirst sehen, dass etwas wie Folgendes an den Server übermittelt wird:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">email=hello@world.com&amp;amp;interested=on
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Daten werden also als Text übermittelt. Die einzelnen Felder werden jeweils mit&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">key=value
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>übermittelt und mit einem &amp;ldquo;&amp;amp;&amp;rdquo; miteinander kombiniert. Der &lt;code>key&lt;/code> stammt jeweils vom &lt;code>name&lt;/code>-Attribut der Input-Elemente.&lt;/p>
&lt;p>Im oben gezeigten Beispiel haben wir bereits eine kleine Validierung (Überprüfung der Eingaben) integriert:&lt;/p>
&lt;ul>
&lt;li>Einerseits haben wir mit dem &lt;code>required&lt;/code>-Attribut festgelegt, dass die E-Mail-Box nicht leer sein darf beim Übermitteln.&lt;/li>
&lt;li>Anderseits verbietet &lt;code>type=&amp;quot;email&amp;quot;&lt;/code> das Senden, wenn etwas anderes als eine E-Mail-Adresse eingegeben wird. Aus diesem Grund verwenden wir lieber &lt;code>type=&amp;quot;email&amp;quot;&lt;/code> als &lt;code>type=&amp;quot;text&amp;quot;&lt;/code> für E-Mail-Adressen, &lt;code>type=&amp;quot;tel&amp;quot;&lt;/code> für Telefonnummern und &lt;code>type=&amp;quot;date&amp;quot;&lt;/code> für ein Datum.&lt;/li>
&lt;/ul>
&lt;h3 id="ein-komplexeres-beispiel">Ein komplexeres Beispiel&lt;/h3>
&lt;p>Um zu zeigen, wie einfach Input-Elemente verwendet werden könnten, kannst du folgendes Beispiel ausprobieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Login&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">form&lt;/span> &lt;span style="color:#a6e22e">action&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.w3schools.com/action_page.php&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">method&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;get&amp;#34;&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">label&lt;/span>&amp;gt;email: &amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;email&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;your-email&amp;#34;&lt;/span> /&amp;gt;&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt; &amp;lt;&lt;span style="color:#f92672">br&lt;/span> /&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;pw&amp;#34;&lt;/span>&amp;gt;password:&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt; &amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;password&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;your-password&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;pw&amp;#34;&lt;/span> /&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">br&lt;/span> /&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">label&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;checkbox&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stay&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;yes&amp;#34;&lt;/span> /&amp;gt;Stay logged in.&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;Favorite Language?&amp;lt;/&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
        &amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;radio&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;html&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;fav_language&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;HTML&amp;#34;&lt;/span>&amp;gt;
        &amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;html&amp;#34;&lt;/span>&amp;gt;HTML&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">br&lt;/span>&amp;gt;
        &amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;radio&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;css&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;fav_language&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;CSS&amp;#34;&lt;/span>&amp;gt;
        &amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;css&amp;#34;&lt;/span>&amp;gt;CSS&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">br&lt;/span>&amp;gt;
    &amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;submit&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">form&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="aufgabe">Aufgabe&lt;/h3>
&lt;p>Nun bist du an der Reihe! Entwickle eine Registrierungsseite. Auf dieser Seite soll man mindestens folgendes angeben müssen:&lt;/p>
&lt;ul>
&lt;li>Name&lt;/li>
&lt;li>Email&lt;/li>
&lt;li>Gewünschtes Passwort&lt;/li>
&lt;li>Mögliche Interessen (mittels Checkboxen)&lt;/li>
&lt;li>Geburtsdatum&lt;/li>
&lt;li>Lieblingsfarbe&lt;/li>
&lt;li>Geschlecht (mittels Radiobuttons)&lt;/li>
&lt;li>Handynummer&lt;/li>
&lt;/ul>
&lt;p>Als Backend kannst du &amp;ldquo;&lt;a href="https://www.w3schools.com/action_page.php%22">https://www.w3schools.com/action_page.php&amp;quot;&lt;/a> (wie im vorherigen Beispiel) verwenden. Schaue nach dem Klick an, wie die Daten übermittelt worden sind. Wie sieht die URL im Browser aus? Variere die HTTP Request Method.&lt;/p>
&lt;p>Zeige deine Lösung dann einem Coach.&lt;/p></description></item><item><title>Docs: Services und Dependency Injection</title><link>/docs/web/angular/04_3_services_und_dependency_injection/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_3_services_und_dependency_injection/</guid><description>
&lt;h2 id="services">Services&lt;/h2>
&lt;p>Services implementieren Daten oder Logik, die in den verschiedenen Components verwendet werden, z.B.:&lt;/p>
&lt;ul>
&lt;li>Domain-Spezifische Berechnungen&lt;/li>
&lt;li>Applikationsweiter Datencache&lt;/li>
&lt;li>Kommunikation mit der Backendapplikation&lt;/li>
&lt;/ul>
&lt;h2 id="dependency-injection">Dependency Injection&lt;/h2>
&lt;h3 id="was-is-eine-dependency-injection">Was is eine Dependency Injection&lt;/h3>
&lt;p>Dependency Injection ist ein Coding pattern, bei welchem Klassen alle Abhängigkeiten von externen Quellen erhalten, anstatt sie selbst zu erstellen.&lt;/p>
&lt;h3 id="dependency-injection-in-angular">Dependency Injection in Angular&lt;/h3>
&lt;p>Der Angular Dependency Injector liefert uns Vorteile wie Skalierbarkeit, Testbarkeit und eine klare Trennung von Aufgaben.&lt;/p>
&lt;p>Um den Dependency Injector in Angular zu nutzen müssen wir 3 Schritte erledigen&lt;/p>
&lt;p>Den &lt;code>@Injectable()&lt;/code> Decorator der Klasse/ dem Service hinzufügen.
Den Injector davon erzählen, indem wir es als Provider aufzählen.
Die Dependency injecten&lt;/p>
&lt;ol>
&lt;li>@Injectable importieren und nutzen:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> {&lt;span style="color:#a6e22e">Injectable&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Injectable&lt;/span>()
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Auto&lt;/span>{
&lt;span style="color:#75715e">//....
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>Das Auto als Provider registrieren (in &lt;code>main.ts&lt;/code>):&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> {&lt;span style="color:#a6e22e">Auto&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./auto&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#a6e22e">declatations&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [],
&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">bootstrap&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">AppComponent&lt;/span>],
&lt;span style="color:#a6e22e">providers&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">Auto&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppModule&lt;/span>{ }
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>Dependency injecten wo (in unserem Beispiel) das Auto genutzt wird:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> {&lt;span style="color:#a6e22e">Auto&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./auto&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AutoNutzer&lt;/span>{
&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">menschen&lt;/span>: &lt;span style="color:#66d9ef">Menschen&lt;/span>[];
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">auto&lt;/span>: &lt;span style="color:#66d9ef">Auto&lt;/span>){ }
&lt;span style="color:#a6e22e">ngOnInit&lt;/span>(){
&lt;span style="color:#75715e">// Jetzt kann man das Auto hier einfach benutzen
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">menschen&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">auto&lt;/span>.&lt;span style="color:#a6e22e">getInsassen&lt;/span>()&lt;span style="color:#f92672">:&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das Minibeispiel soll lediglich die 3 wichtigen Schritte etwas besser darstellen.&lt;/p>
&lt;p>In Euren Projekten werdet ihr dieses Verfahren für die Services anwenden.&lt;/p></description></item><item><title>Docs: Git Branches</title><link>/docs/git/git-branches/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/git-branches/</guid><description>
&lt;h2 id="inhalt">Inhalt&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#beispiel-f%C3%BCr-branching-merging-und-rebasing">Beispiel für Branching, Merging und Rebasing&lt;/a>&lt;/li>
&lt;li>&lt;a href="#einfache-mergekonflikte">Einfache Mergekonflikte&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Im vorherigen Kapitel haben wir gelernt, dass man nur dann seine Änderungen pushen kann, wenn einem niemand anders zuvorkam. Um diesem Problem aus dem Weg zu gehen, kann ein Branch (engl. für Ast/Zweig) verwendet werden, welcher zu einem späteren Zeitpunkt wieder auf den Hauptpfad gemerged wird.&lt;/p>
&lt;p>Im ersten Kapitel haben wir gelernt, dass Git mit jedem Commit ein Snapshot der Daten und eine Referenz auf den vorgehenden Commit speichert. Ein Branch ist nichts anderes als ein Zeiger auf einen spezifischen Snapshot.&lt;/p>
&lt;p>Erzeugen wir mit &lt;code>git branch testing&lt;/code> einen neuen Branch namens &amp;ldquo;testing&amp;rdquo; so wird ein Zeiger erstellt, welcher auf den selben Commit zeigt auf dem man sich im Moment befindet. Damit Git weiss, wo man sich im Moment gerade befindet gibt es einen speziellen Zeiger namens &lt;code>HEAD&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt"> +----------+
| HEAD |
+----+-----+
|
v
+----+-----+
| master |
+----+-----+
|
v
+----------+ +----------+ +----+-----+
| Commit 1 +&amp;lt;-------+ Commit 2 +&amp;lt;-------+ Commit 3 |
+----------+ +----------+ +----+-----+
^
|
+----+-----+
| testing |
+----------+
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wie man auf der Skizze erkennen kann, wurde der neue Branch &amp;ldquo;testing&amp;rdquo; erstellt, wir befinden uns aber immer noch auf dem &amp;ldquo;master&amp;rdquo; Branch (HEAD). Um nun auf den neuen Branch zu wechseln können wir den Befehl &lt;code>git checkout testing&lt;/code> verwenden. &lt;em>Protipp&lt;/em>: Um einen neuen Branch zu erstellen und gleich auf diesen zu wechseln, kann der Befehl &lt;code>git checkout -b &amp;lt;branchname&amp;gt;&lt;/code> verwendet werden.&lt;/p>
&lt;p>Erstellen wir nun einen Commit auf dem &amp;ldquo;testing&amp;rdquo; Branch, dann zeigt sich folgendes Bild:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt"> +----+-----+
| master |
+----+-----+
|
v
+----------+ +----------+ +----------+ +----------+
| Commit 1 +&amp;lt;-------+ Commit 2 +&amp;lt;-------+ Commit 3 |&amp;lt;-------+ Commit 4 |
+----------+ +----------+ +----------+ +----------+
^
|
+----------+
| testing |
+----+-----+
^
|
+----------+
| HEAD |
+----+-----+
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="beispiel-für-branching-merging-und-rebasing">Beispiel für Branching, Merging und Rebasing&lt;/h2>
&lt;p>In diesem Abschnitt wird davon ausgegangen, dass es einen Fehler im aktuellen &lt;code>master&lt;/code>-Branch gibt, der unter &lt;code>testing&lt;/code> nicht behoben wurde, da er zur Entwicklung neuer Funktionen verwendet wird. Um den Fehler zu beheben, wird ein neuer Branch mit dem Namen &lt;code>bugfix&lt;/code> erstellt, der mit der gleichen Revision wie &lt;code>master&lt;/code> beginnt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git checkout master
Switched to branch &lt;span style="color:#e6db74">&amp;#39;master&amp;#39;&lt;/span>
$ git checkout -b bugfix
Switched to a new branch &lt;span style="color:#e6db74">&amp;#39;bugfix&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="git-commit">git commit&lt;/h3>
&lt;p>Nachdem der Branch &lt;code>bugfix&lt;/code> erstellt und ausgecheckt wurde, wird die Korrektur entwickelt und übertragen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git diff
diff --git a/first-file.txt b/first-file.txt
index 4c5fd91..aa24abd &lt;span style="color:#ae81ff">100644&lt;/span>
--- a/first-file.txt
+++ b/first-file.txt
@@ -1 +1 @@
-First file
+First file with bugfix
$ git commit -a -m &lt;span style="color:#e6db74">&amp;#34;Bugfix for first file&amp;#34;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>bugfix a27a927&lt;span style="color:#f92672">]&lt;/span> Bugfix &lt;span style="color:#66d9ef">for&lt;/span> first file
&lt;span style="color:#ae81ff">1&lt;/span> file changed, &lt;span style="color:#ae81ff">1&lt;/span> insertion&lt;span style="color:#f92672">(&lt;/span>+&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span> deletion&lt;span style="color:#f92672">(&lt;/span>-&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Die erste Zeile in &lt;code>first-file.txt&lt;/code> wurde geändert, indem &lt;code>with bugfix&lt;/code> zur ersten Zeile hinzugefügt wurde.&lt;/li>
&lt;/ul>
&lt;p>Mit der neuen Übergabe an &lt;code>bugfix&lt;/code> fangen die Branches an, auseinanderzulaufen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt">
+----------+
| testing |
+----------+ +----+-----+
| master | |
+----+-----+ v
| +----+-----+
v + Commit 4 |
+----------+ +----------+ +----+-----+&amp;lt;-------+----------+
| Commit 1 +&amp;lt;-------| Commit 2 +&amp;lt;-------+ Commit 3 +
+----------+ +----------+ +----------+&amp;lt;-------+----------+
+ commit 5 |
+----+-----+
^
|
+----+-----+
| bugfix |
+----+-----+
^
|
+----+-----+
| HEAD |
+----+-----+
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="mergen-der-branches">Mergen der Branches&lt;/h3>
&lt;img style="padding-bottom: 30px;" src="../img/gitmerge.gif">
&lt;p>Nach der Fehlerbehebung ist es nun an der Zeit, sie wieder in den Master-Branch einzubinden, damit andere Benutzer sie ebenfalls verwenden können.&lt;/p>
&lt;h4 id="git-merge">git merge&lt;/h4>
&lt;p>Merge ist eine Wiederholung der Änderungen eines benannten Commits (auch Branch genannt) in einen anderen Branch, da diese voneinander abwichen. Damit dies funktioniert, ändert man zuerst den Zielbranch. In diesem Fall ist das &lt;code>bugfix&lt;/code>. Die Änderungen sollen nach &lt;code>master&lt;/code> zurückgespielt werden. Da das Ziel &lt;code>master&lt;/code> ist, ist der erste Schritt, zu diesem Branch zu wechseln.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git checkout master
Switched to branch &lt;span style="color:#e6db74">&amp;#39;master&amp;#39;&lt;/span>
$ git branch
* master
testing
bugfix
$ git merge bugfix
Updating e303af7..a27a927
Fast-forward
first-file.txt | &lt;span style="color:#ae81ff">2&lt;/span> +-
&lt;span style="color:#ae81ff">1&lt;/span> file changed, &lt;span style="color:#ae81ff">1&lt;/span> insertion&lt;span style="color:#f92672">(&lt;/span>+&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span> deletion&lt;span style="color:#f92672">(&lt;/span>-&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>Wechseln Sie zum Zielbranch (&lt;code>master&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bestätigen Sie, dass Sie sich im Zielbranch befinden. Dieser Schritt ist optional.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wiederholen Sie die Änderungen von &lt;code>bugfix&lt;/code> in &lt;code>master&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Nach der Zusammenführung zeigen &lt;code>bugfix&lt;/code> und &lt;code>master&lt;/code> auf dieselbe Revision.!&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt"> +----+-----+
| HEAD |
+----+-----+
+----------+ |
| testing | v
+----+-----+ +----------+
| | master |
v +----+-----+
+----+-----+ |
+ Commit 4 | v
+----------+ +----------+ +----+-----+&amp;lt;-------+----------+ +----+-----+
| Commit 1 +&amp;lt;-------| Commit 2 +&amp;lt;-------+ Commit 3 +&amp;lt;--------------------------+ commit 5 |
+----------+ +----------+ +----------+ +----+-----+
^
|
+----+-----+
| bugfix |
+----+-----+
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="git-branch--d">git branch -d&lt;/h4>
&lt;p>Es gibt keinen Grund mehr, den &lt;code>bugfix&lt;/code>-Branch beizubehalten, da die Änderungen nun in &lt;code>master&lt;/code> eingearbeitet wurden. Mit dem Befehl &lt;code>branch -d &amp;lt;branchname&amp;gt;&lt;/code> wird der Branch gelöscht.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git branch
bugfix
* master
testing
$ git branch -d bugfix
Deleted branch bugfix &lt;span style="color:#f92672">(&lt;/span>was a27a927&lt;span style="color:#f92672">)&lt;/span>.
$ git log --oneline -n &lt;span style="color:#ae81ff">1&lt;/span>
a27a927 &lt;span style="color:#f92672">(&lt;/span>HEAD -&amp;gt; master&lt;span style="color:#f92672">)&lt;/span> Bugfix &lt;span style="color:#66d9ef">for&lt;/span> first file
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>Der Branch kann beim Auschecken nicht gelöscht werden. Der aktive Branch ist &lt;code>master&lt;/code>, der für die Löschung von &lt;code>bugfix&lt;/code> funktioniert.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Der Branch wird gelöscht und die Ausgabe enthält den kurzen SHA1-Hash.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Die Überprüfung mit &lt;code>git log&lt;/code> bestätigt, dass &lt;code>master&lt;/code> auf denselben Hash zeigt wie &lt;code>bugfix&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Nachdem der Branch &lt;code>bugfix&lt;/code> gelöscht wurde, bleiben nur noch &lt;code>master&lt;/code> und &lt;code>testing&lt;/code> übrig.&lt;/p>
&lt;h3 id="rebasing-branches">Rebasing Branches&lt;/h3>
&lt;p>Nachdem die Fehlerkorrektur in den Branch &lt;code>master&lt;/code> eingebracht wurde, ist der nächste logische Schritt, die Änderungen in den Branch &lt;code>testing&lt;/code> einzubringen, um sicherzustellen, dass der nächste Release die korrigierte Version enthält. Wenn man mit mehreren Branches arbeitet, ist diese Operation notwendig, um nicht zu weit in den &lt;code>master&lt;/code> zurückzufallen und viele Merge-Konflikte zu vermeiden.&lt;/p>
&lt;h4 id="git-rebase">git rebase&lt;/h4>
&lt;p>Rebase bedeutet, dass der übergeordnete Commit der ersten Änderung im Branch verschoben und an den aktuellen Zeiger des Branches oder Commits angehängt wird, der in der Befehlszeile als Argument angegeben wird. Im folgenden Beispiel wechseln wir als erstes in den Branch, der rebase werden soll, und geben dann den Befehl &lt;code>rebase&lt;/code> gegen &lt;code>master&lt;/code> aus.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git branch
* master
testing
$ git checkout testing
Switched to branch &lt;span style="color:#e6db74">&amp;#39;testing&amp;#39;&lt;/span>
$ git rebase master
Successfully rebased and updated refs/heads/testing.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>Derzeit auf dem Branch &lt;code>master&lt;/code>, muss vor dem rebase auf &lt;code>testing&lt;/code> wechseln.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wechseln Sie zum Branch &lt;code>testing&lt;/code>, der mit &lt;code>master&lt;/code> rebased wird.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Erteilen Sie den Befehl rebase mit dem Argument &lt;code>master&lt;/code>, dem Branch oder Zeiger, der für den rebase verwendet wird.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Die Meldung ist knapp und bezieht sich auf die git-interne Dateistruktur unter dem Verzeichnis &lt;code>.git&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;strong>Hinweis&lt;/strong>&lt;/p>
&lt;p>Die Durchführung eines rebase zwischen zwei Branches erfordert einen gemeinsamen Vorfahren im Tree.&lt;/p>
&lt;/blockquote>
&lt;p>Nach dem Rebase sind &amp;ldquo;Master&amp;rdquo; und &amp;ldquo;Testing&amp;rdquo; wieder synchronisiert.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-txt" data-lang="txt"> +----+-----+
| master |
+----+-----+
|
v
+----------+ +----------+ +----------+ +----------+ +----------+
| Commit 1 +&amp;lt;-------| Commit 2 +&amp;lt;-------+ Commit 3 +&amp;lt;-------+ Commit 5 |&amp;lt;-------+ Commit 4 |
+----------+ +----------+ +----------+ +----------+ +----------+
^
|
+----------+
| testing |
+----+-----+
^
|
+----------+
| HEAD |
+----+-----+
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="einfache-mergekonflikte">Einfache Mergekonflikte&lt;/h2>
&lt;p>Im oben erwähnten Beispiel ist alles automatisch gegangen beim Mergen, es gibt jedoch Fälle, bei denen Git nicht mehr in der Lage ist automatisch die Dateien Zusammenzuführen, wenn zum Beispiel eine Änderung an der gleichen Stelle einer Datei in beiden Branches vorgenommen wird. Gehen wir vom Beispiel oben aus, die Story die man da umsetzt macht auch etwas mit dem Dashboard welches wir kurzum anpassen mussten:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git merge bugfix
Auto-merging first-file.txt
CONFLICT &lt;span style="color:#f92672">(&lt;/span>content&lt;span style="color:#f92672">)&lt;/span>: Merge conflict in first-file.txt
Automatic merge failed; fix conflicts and &lt;span style="color:#66d9ef">then&lt;/span> commit the result.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Git konnte nicht automatisch mergen und hat somit keinen commit erstellt, wir müssen den Mergekonflikt von Hand lösen, bevor wir weiter arbeiten können. Weitere Infos liefert &lt;code>git status&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git status
On branch master
You have unmerged paths.
&lt;span style="color:#f92672">(&lt;/span>fix conflicts and run &lt;span style="color:#e6db74">&amp;#34;git commit&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git merge --abort&amp;#34;&lt;/span> to abort the merge&lt;span style="color:#f92672">)&lt;/span>
Unmerged paths:
&lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to mark resolution&lt;span style="color:#f92672">)&lt;/span>
both modified: first-file.txt
no changes added to commit &lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git add&amp;#34;&lt;/span> and/or &lt;span style="color:#e6db74">&amp;#34;git commit -a&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Git fügt automatisch eine Markierung in die Dateien ein, welche gmerged werden müssen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-diff" data-lang="diff">&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
first line from master
=======
first line from testing
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; testing
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das bedeutet, dass der HEAD (also der Masterbranch, weil auf den haben wir vor dem Mergen gewechselt) den oberen Teil (also immer alles auf Grün) und unsere neuen Änderungen den unteren Teil auf dieser Zeile hatten. Man kann den Konflikt nun lösen, indem man den ganzen Block, mit der gewünschten Änderung ersetzt. Ist der Konflikt gelöst, können wir die Datei ganz normal stagen und commiten. Gerade bei grösseren Mergekonflikten kann es praktisch sein mit tools zu Arbeiten, welche einem die Unterschiede zwischen den beiden Branches Grafisch darstellen, dafür gibt es den Befehl &lt;code>git mergetool&lt;/code>.&lt;/p>
&lt;p>In der Regel können viele Merge-Konflikte verhindert oder minimiert werden, indem:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Regelmässige Kommunikation von Änderungen zwischen Teammitgliedern.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Regelmässige Rebases mit dem Merge-Zielbranch.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Erstellen kleiner und atomarer Commits.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="hands-on">Hands On&lt;/h3>
&lt;p>&lt;a href="https://learngitbranching.js.org/">https://learngitbranching.js.org/&lt;/a>&lt;/p></description></item><item><title>Docs: Overview Lab</title><link>/docs/java/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/java/overview/</guid><description>
&lt;h2 id="50-meta">5.0: Meta&lt;/h2>
&lt;h3 id="501-goals">5.0.1: Goals&lt;/h3>
&lt;ul>
&lt;li>I know how applications work in a modern world&lt;/li>
&lt;li>I know what databases, backends, frontends are for&lt;/li>
&lt;li>I know what a monolithic application is&lt;/li>
&lt;li>I can divide the modules of an application&lt;/li>
&lt;/ul>
&lt;h3 id="502-changelog">5.0.2: Changelog&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Author&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Date&lt;/th>
&lt;th>Change&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Raffael Hertle&lt;/td>
&lt;td>0.1&lt;/td>
&lt;td>18.1.2022&lt;/td>
&lt;td>Initial version&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="503-requirements">5.0.3: Requirements&lt;/h3>
&lt;ul>
&lt;li>None&lt;/li>
&lt;/ul>
&lt;h2 id="51-applications-in-the-modern-world">5.1: Applications in the modern world&lt;/h2>
&lt;h3 id="511-state-of-the-world">5.1.1: State of the world&lt;/h3>
&lt;p>In our state of the world now we know small applications existing and solving small problems (or even creating problems). For example we could simply create a Java application simulating a calculator on the command line. Some few lines of code would be enough to create a solution, compile the program and execute it on your local machine. Neat! But is this what modern software engineering is about? Not really.&lt;/p>
&lt;p>In this chapter we dive a bit into the modern world of applications and take a look at how we solve problems at a bigger scale!&lt;/p>
&lt;p>Solving problems: That&amp;rsquo;s what software engineering is all about. We know a certain problem and we would like to tackle it by creating an application or automated solution. But how do we get there?&lt;/p>
&lt;h2 id="52-solving-problems">5.2: Solving problems&lt;/h2>
&lt;p>Let&amp;rsquo;s take a look at how we can tackle problems in the first place. There are two very well known approaches to describe and inspect problems we use every day in our jobs: Bottom-Up and Top-Down approaches.&lt;/p>
&lt;p>To talk about how to solve problems, we need to create one in the first place.&lt;/p>
&lt;p>We would like to sell our sneakers in an online shop. Our customers should have a neat web based UI to check out our shoes and order them online. Our application checks whether the shoes are still in stock and lets the customer pay and complete the order. Sounds simple, doesn&amp;rsquo;t it? But here already we are talking about several smaller problems by describing a bigger problem. And this is what it is all about.&lt;/p>
&lt;h3 id="521-top-down">5.2.1: Top-Down&lt;/h3>
&lt;p>In a Top-Down approach we describe the problem from the biggest scope possible and then work ourselves from top down to smaller problems and describing them. As you can easily see, we already followed a top-down approach by simply describing our problem in 5.2. The Top-Down approach is the most useful if we already know the bigger scope of our problem and can start by digging down into smaller problems. It gets harder the complexer the problem will get. As soon as the problem&amp;rsquo;s complexity is too big, a Bottom-Up approach is most likely more useful!&lt;/p>
&lt;h3 id="522-bottom-up">5.2.2: Bottom-Up&lt;/h3>
&lt;p>The Bottom-Up approach inverts the idea. Sometimes it&amp;rsquo;s easier to specify smaller parts of a solution first, then create the bigger solution from the puzzle of the small solutions.&lt;/p>
&lt;h3 id="523-assignment-1">5.2.3: Assignment 1&lt;/h3>
&lt;p>Create a Bottom-Up specification for the problem described in 5.2. Use your own words and document the specification as a file in your git repository.&lt;/p>
&lt;h2 id="53-building-blocks-of-modern-applications">5.3: Building blocks of modern applications&lt;/h2>
&lt;p>Modern applications mostly do not just exist as a single system. They utilize a wide selection of other applications to perform the tasks needed. When systems are dependent on other systems we call them a &lt;code>Dependency&lt;/code> of our system. These dependencies might be other applications of ours or other services. If we take a look at modern web applications the three default building blocks are mostly quite similar.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Web Application&lt;/h4>
&lt;p>A web-application is an application program that is usually stored on a remote server, and users can access it through the use of Software known as web-browser.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.javatpoint.com/web-application">Java Point&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Building Block&lt;/h4>
&lt;p>General or abstract term for all kinds of artifacts from which software is constructed. Part of the
statical structure (Building Block View) of software architecture.&lt;/p>
&lt;p>Building blocks can be hierarchically structured - they may contain other (smaller) building
blocks.&lt;/p>
&lt;p>Some examples of alternative (concrete) names for building blocks: Component, module,
package, namespace, class, file, program, subsystem, function, configuration, data-definition.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.isaqb.org/wp-content/uploads/2020/10/iSAQB_Glossary_of_Software_Architecture_EN.pdf">iSAQB Definition of Building Blocks&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;p>These default building blocks of modern web application usually consists of:&lt;/p>
&lt;ul>
&lt;li>Frontend: Visualization of our application (Website)&lt;/li>
&lt;li>Backend: Backing service which handles application logic&lt;/li>
&lt;li>Database: Storing information for our application&lt;/li>
&lt;/ul>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Frontend&lt;/h4>
&lt;p>The frontend of a software program or website is everything with which the user interacts. From a user standpoint, the frontend is synonymous with the user interface. From a developer standpoint, it is the interface design and the programming that makes the interface function. Conversely, the backend includes functions and data processing that takes place behind the scenes.&lt;/p>
&lt;p>One of the primary goals of frontend development is to create a smooth or &amp;ldquo;frictionless&amp;rdquo; user experience. In other words, the front end of an application or website should be intuitive and easy to use. While this sounds like a simple goal, it can be surprisingly complex since not all users or devices are the same. For example, an app developed for a mobile device requires a significantly different frontend than a desktop application. Websites must work well on multiple devices and screen sizes, which is why modern web development typically involves responsive design.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://techterms.com/definition/frontend">TechTerms.com&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Backend&lt;/h4>
&lt;p>In the computer world, the &amp;ldquo;backend&amp;rdquo; refers to any part of a website or software program that users do not see. It contrasts with the frontend, which refers to a program&amp;rsquo;s or website&amp;rsquo;s user interface. In programming terminology, the backend is the &amp;ldquo;data access layer,&amp;rdquo; while the frontend is the &amp;ldquo;presentation layer.&amp;rdquo;&lt;/p>
&lt;p>Most modern websites are dynamic, meaning webpage content is generated on-the-fly. A dynamic page contains one or more scripts that run on the web server each time the page is accessed. These scripts generate the content of the page, which is sent to the user&amp;rsquo;s web browser. Everything that happens before the page is displayed in a web browser is part of the backend.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://techterms.com/definition/backend">TechTerms.com&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Database&lt;/h4>
&lt;p>A database is a data structure that stores organized information. Most databases contain multiple tables, which may each include several different fields. For example, a company database may include tables for products, employees, and financial records. Each of these tables would have different fields that are relevant to the information stored in the table.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://techterms.com/definition/database">TechTerms.com&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;h2 id="54-our-shop-in-different-styles">5.4: Our shop in different styles&lt;/h2>
&lt;p>We are now trying to describe our software solution for our online shop in a few different approaches. When designing our software solution we should always consider that there is most likely not only one correct solution available. In most cases there are several solutions possible fitting our needs and they all will have their own trade-offs.&lt;/p>
&lt;p>There are a few architectural patterns which we can take a look at:&lt;/p>
&lt;h3 id="541-monolithic-architecture">5.4.1: Monolithic Architecture&lt;/h3>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Monolithic Architecture&lt;/h4>
&lt;p>The monolithic architecture is considered to be a traditional way of building applications. A monolithic application is built as a single and indivisible unit. Usually, such a solution comprises a client-side user interface, a server side-application, and a database. It is unified and all the functions are managed and served in one place.&lt;/p>
&lt;p>Normally, monolithic applications have one large code base and lack modularity. If developers want to update or change something, they access the same code base. So, they make changes in the whole stack at once.&lt;/p>
&lt;/div>
&lt;p>Usually in monolithic applications modularity comes from separating responsibilities. We will have modules handling the system interaction from outside (API / Boundary classes), business logic (Services) and data access (Repositories).&lt;/p>
&lt;h4 id="5411-api">5.4.1.1: API&lt;/h4>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Monolithic Architecture&lt;/h4>
&lt;p>Stands for &amp;ldquo;Application Programming Interface.&amp;rdquo; An API is a set of commands, functions, protocols, and objects that programmers can use to create software or interact with an external system.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://techterms.com/definition/api">TechTerms.com&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;p>So we think of APIs as an instruction set to use our application. It defines how the user can interact with our software on a technical level.&lt;/p>
&lt;h4 id="5412-services">5.4.1.2: Services&lt;/h4>
&lt;p>All class handling business logic in our applications are contained in this section. By business logic we mean all logic which is affected by the applications business not the technical world. It defines how business objects interact with each other.&lt;/p>
&lt;p>Take a look at our store example above. All the logic handling the prices, names, orders, addresses, etc. are part of the application&amp;rsquo;s business logic. It has no technical relevancy but only from the business perspective.&lt;/p>
&lt;p>Business logic parts are the core of our application to all users. Usually users don&amp;rsquo;t care about how things are getting done, they mostly care that things are done. That is business logic!&lt;/p>
&lt;h4 id="5413-data-repositories">5.4.1.3: Data Repositories&lt;/h4>
&lt;p>Data repositories are the access point to our databases and data storage. Think of them as the front desk in a library. They are classes which we use to access data stored in our library (database for example) and they give us an instruction set which tells us how to access the data - an API!&lt;/p>
&lt;h3 id="542-microservices">5.4.2: Microservices&lt;/h3>
&lt;p>In the monolithic architecture world we think about all components living in the same application. The application would be divided by multiple domains (for example the order domain) which is then divided into modules for data access, business logic and the API. If we take a step further and separate a bit more we could think of all these domains as single applications. Then we would have multiple applications instead of multiple domains in one application. When one part of the software changes, not the entire landscape has to be rebuilt and redeployed onto our servers. This will lead to flexibility and adaptability in our software, but brings a lot more technical complexity to the scene.&lt;/p>
&lt;h3 id="543-assignment-2">5.4.3: Assignment 2&lt;/h3>
&lt;p>It is now time for you as the architect in the web-shop project to decide how our application is built. Take your time and create two approaches for designing the application: a monolithic and microservice approach. Try to create an illustration on how your software is built, try to describe your software in a few sentences and show the different layers of your application.&lt;/p></description></item><item><title>Docs: Timeouts und Intervalle</title><link>/docs/web/javascript/06_js_timeout_and_interval/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/javascript/06_js_timeout_and_interval/</guid><description>
&lt;h2 id="code-verzögert-ausführen-settimeout">Code verzögert ausführen: setTimeout(&amp;hellip;)&lt;/h2>
&lt;p>Manchmal muss eine Aktion verzögert ausgeführt werden. Dies kannst du ganz einfach mit der Funktion &lt;code>setTimeout(callback, time)&lt;/code> realisieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">setTimeout&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Thanks for waiting :)&amp;#39;&lt;/span>);
}, &lt;span style="color:#ae81ff">5000&lt;/span>);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das erste Argument ist die Aktion/Funktion, die ausgeführt wird, sobald die Zeit abgelaufen ist. Das zweite Argument ist die Zeit in Millisekunden, die verstreichen muss, bis die übergebene Funktion ausgeführt wird.&lt;/p>
&lt;h2 id="code-immer-wieder-ausführen-setinterval">Code immer wieder ausführen: setInterval(&amp;hellip;)&lt;/h2>
&lt;p>Folgender Code wird jede Sekunde ausgeführt:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#a6e22e">setInterval&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;hey!&amp;#39;&lt;/span>);
}, &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Vielleicht ist dir aufgefallen, dass &lt;code>setTimeout(...)&lt;/code> und &lt;code>setInterval(...)&lt;/code> eine Ganzzahl zurückgeben. Das ist die ID des Timeouts bzw. Intervalls. Es macht Sinn, diesen Wert zu merken, damit man das Intervall wieder beendet werden kann:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">intervalId&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">setInterval&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(){}, &lt;span style="color:#ae81ff">1000&lt;/span>);
...
&lt;span style="color:#a6e22e">clearInterval&lt;/span>(&lt;span style="color:#a6e22e">intervalId&lt;/span>);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="aufgabe-uhr">Aufgabe: Uhr&lt;/h3>
&lt;p>&lt;img src="/images/task.png" alt="task1"> Schreibe ein HTML, das eine Uhrzeit visuell anzeigt.&lt;/p>
&lt;pre>&lt;code>Deine Website soll zentriert eine Uhrzeit anzeigen.
Es steht dir frei, ob du die Uhrzeit analog oder digital anzeigen möchtest.
Wenn du eine analoge Uhr rendern möchtest, dann könnten Vektorgrafiken (SVGs) oder Canvas weiterbringen.
Du kannst es aber auch mit gewöhnlichen HTML-Elementen versuchen.
&lt;/code>&lt;/pre>
&lt;p>Hilfestellungen zu&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.w3schools.com/graphics/svg_intro.asp">SVG&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.w3schools.com/html/html5_canvas.asp">Canvas&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: HTML-Struktur</title><link>/docs/web/html_css/06_html_structure/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/06_html_structure/</guid><description>
&lt;h2 id="struktur-einer-html-seite">Struktur einer HTML-Seite&lt;/h2>
&lt;p>Vorher haben wir wild und ohne erkennbare Struktur HTML-Elemente hinzugefügt. Eine HTML hat ungefähr diese Struktur:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;span style="color:#75715e">&amp;lt;!-- Place for external resources and meta tags. --&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;My Website&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;span style="color:#75715e">&amp;lt;!-- Place for your website&amp;#39;s content. --&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Hello&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;This is my amazing website!&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Auf der ersten Zeile definieren wir, dass es sich um ein HTML-Dokument handelt. Diese Zeile ist erforderlich und seit HTML5 praktisch immer gleich.&lt;/p>
&lt;p>Alle weiteren Elemente befinden sich dann im einzigen &lt;code>&amp;lt;html&amp;gt;&lt;/code>-Element. Auf der nächsten Stufe gibt es nur &lt;code>&amp;lt;head&amp;gt;&lt;/code> und &lt;code>&amp;lt;body&amp;gt;&lt;/code>. Im &lt;code>&amp;lt;head&amp;gt;&lt;/code> befinden sich Meta-Informationen über die Website wie z.B. der Tab-Titel der Website. Der eigentliche Seiteninhalt befindet sich dann im &lt;code>&amp;lt;body&amp;gt;&lt;/code>.&lt;/p>
&lt;h3 id="dom-document-object-model">DOM (Document Object Model)&lt;/h3>
&lt;p>In der Webentwicklung wird sehr oft vom &amp;ldquo;DOM&amp;rdquo; gesprochen. Visualisiert könnte der DOM aus dem obigen Beispiel ungefähr so aussehen:&lt;/p>
&lt;p>&lt;img src="../dom.png" alt="dom" title="(DOM einer einfachen HTML-Seite.)">&lt;/p>
&lt;p>Was ist nun aber dieses &amp;ldquo;Document Object Model&amp;rdquo;? Ganz vereinfacht gesagt, beschreibt das DOM die Struktur der Website zur Laufzeit (also im Browser). Das DOM enthält also die Information, wie die Seite aufgebaut und verschachtelt ist mit ihren Elementen. Im Gegensatz zum HTML-Dokument kann sich das DOM während des Besuches der Seite verändern (z.B. durch JavaScript). Das DOM enthält also die Information, was aktuell auf der Seite ist.&lt;/p>
&lt;p>Weitere Informationen erhälst du hier:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.w3schools.com/js/js_htmldom.asp">https://www.w3schools.com/js/js_htmldom.asp&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction">https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Wie das DOM auf deiner aktuellen Seite aussieht, kannst du ganz einfach herausfinden:&lt;/p>
&lt;ul>
&lt;li>Öffne die Entwickler-Tools von deinem Browser (z.B. mit der [F12]-taste)&lt;/li>
&lt;li>Wechsle zum Reiter &amp;ldquo;Elemente&amp;rdquo;&lt;/li>
&lt;li>Nun siehst du das aktuellen DOM:&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../browser_dom.jpg" alt="domBrowser" title="(DOM im Browser einer einfachen HTML-Seite.)">&lt;/p>
&lt;p>Mache dich mit diesen Entwickler-Tools (z.B. auch mit dem Button ganz oben links im Bild) vertraut!!&lt;/p>
&lt;p>Diese Tools sind sehr praktische Hilfsmittel bei der Entwicklung von HTML-Seiten, da du damit den aktuellen Zustand deiner Seite inspizieren kannst.&lt;/p>
&lt;h3 id="der-head">Der Head&lt;/h3>
&lt;p>Wichtig für dich zum Wissen ist auch, dass deine HTML-Seite bestimmte Meta-Tags haben sollte, damit sie als &amp;ldquo;valid&amp;rdquo; gilt. Nachfolgend ein paar wichtigere &lt;code>&amp;lt;meta&amp;gt;&lt;/code>-Tags:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
    &lt;span style="color:#75715e">&amp;lt;!-- Place for external resources and meta tags. --&amp;gt;&lt;/span>
    &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;My Website&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UTF-8&amp;#34;&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;description&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;A simple useless website&amp;#34;&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;keywords&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;HTML, Meta tags&amp;#34;&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;author&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Karl Klammer&amp;#34;&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;width=device-width, initial-scale=1&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Der &lt;code>title&lt;/code> ist der Tab-Text&lt;/li>
&lt;li>&lt;code>charset&lt;/code> beschreibt, welche Zeichensatz im Dokument vorkommt. Damit du alle gängigen Zeichen brauchen kannst, wird &amp;ldquo;UTF-8&amp;rdquo; empfohlen. Das Fehlen dieser Zeile führt oft dazu, dass bestimmte Zeichen falsch dargestellt werden.&lt;/li>
&lt;li>Die &lt;code>description&lt;/code> wird zum Beispiel von Suchmaschinen verwendet. Wie z.B. Google solche Tags auswertet, erfährst du hier: &lt;a href="https://developers.google.com/search/docs/advanced/crawling/special-tags?hl=de">https://developers.google.com/search/docs/advanced/crawling/special-tags?hl=de&lt;/a>. &lt;code>keywords&lt;/code> geht in eine ähnliche Richtung.&lt;/li>
&lt;li>Die Zeile für den &lt;code>viewport&lt;/code> kann praktisch immer 1-zu-1 übernommen werden. Dieser Wert führt dazu, dass die Seite auf mobilen Endgeräten nicht wie eine Desktop-Seite aussieht. Mit diesem Element wird der Text auf Smartphones meistens grösser. Dieses Meta-Tag wird empfohlen, wenn die Seite auf Smartphones gut aussehen soll.&lt;/li>
&lt;/ul>
&lt;h3 id="ist-meine-seite-valid">Ist meine Seite valid?&lt;/h3>
&lt;p>Um die Seite auf Syntax-Fehlern und gängige Fehler zu überprüfen, kann es Sinn machen, die Seite von einem Validator überprüfen zu lassen. Ein bekannter ist z.B. dieser: &lt;a href="https://validator.w3.org/#validate_by_input">https://validator.w3.org/#validate_by_input&lt;/a>&lt;/p>
&lt;p>Hier kannst du deinen HTML-Code eingeben und der Validator zeigt dir dann gängige Fehler an, die es in deinem Code entdeckt hat.&lt;/p></description></item><item><title>Docs: Pipes</title><link>/docs/web/angular/04_4_pipes/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_4_pipes/</guid><description>
&lt;p>Sobald Daten eingehen, könnte man ihre rohen toString-Werte direkt in die View übertragen. Dies führt jedoch selten zu einer guten user experience. In den meisten Anwendungsfällen
bevorzugen Benutzer beispielsweise die Anzeige eines Datums in einem einfachen Format wie &lt;code>15. January 1929&lt;/code> anstelle des rohen Stringformats &lt;code>Tu 15. January 1929 00:00:00 GMT-0700 (Pacific Daylight Time)&lt;/code>.&lt;/p>
&lt;p>Es ist klar, dass einige Werte von etwas Bearbeitung profitieren. Viele der Transformationen werden sowohl innerhalb als auch zwischen Anwendungen wiederholt.
Dazu sind Pipes sehr praktisch. Man kann sie sich fast als Stile vorstellen.&lt;/p>
&lt;p>Eine Pipe nimmt Daten als Eingabe auf und wandelt sie in eine gewünschte Ausgabe um.
In diesem Beispiel verwenden wir Pipes, um das Geburtstags-Property eines Components in ein leserfreundliches Datum umzuwandeln.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> {&lt;span style="color:#a6e22e">Component&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-birthday&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">template&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">`&amp;lt;p&amp;gt;The birthday is {{birthday | date}}&amp;lt;/p&amp;gt;`&lt;/span>
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">BirthdayComponent&lt;/span>{
&lt;span style="color:#a6e22e">birthday&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Date(&lt;span style="color:#ae81ff">1929&lt;/span>,&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#ae81ff">15&lt;/span>) &lt;span style="color:#75715e">// Month start by 0 =&amp;gt; January 15, 1929
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="parametrisierte-pipes">Parametrisierte Pipes&lt;/h2>
&lt;p>Eine Pipe kann eine beliebige Anzahl optionaler Parameter akzeptieren, um ihre Ausgabe zu optimieren. Um einer Pipe Parameter hinzuzufügen,
fügen wir nach dem Pipe-Namen einen Doppelpunkt (:) und danach den Parameterwert (z. B. currency: &lt;code>EUR&lt;/code>) hinzu.
Wenn die Pipe mehrere Parameter akzeptiert, trennen wir die Werte durch Doppelpunkte (z. B. Slice: 1: 5).&lt;/p>
&lt;p>Unser Beispiel von vorher könnten wir z.B. so ausgeben:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;The birthday of Martin Luther King Jr is {{ birthday | date:&amp;#34;mm/dd/yy&amp;#34; }} &amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="chaining-pipes">Chaining Pipes&lt;/h2>
&lt;p>Wir können Pipes in nützlichen Kombinationen miteinander verketten. Im folgenden Beispiel wird der Geburtstag an die DatePipe und an die UpperCasePipe
ngekettet, um den Geburtstag in Grossbuchstaben anzuzeigen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;The chained birthday of Martin Luther King Jr is {{ birthday | date | uppercase }} &amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Geburtstag wird nun so angezeigt: APR 15, 1988&lt;/p>
&lt;h2 id="custom-pipes">Custom Pipes&lt;/h2>
&lt;p>Für spezielle Anwendungsfälle können wir auch unsere eigenen Pipes schreiben.&lt;/p>
&lt;p>Wir können Beispielsweise das size eines Files anhand einer custom Pipe im Template darstellen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">{{ file.size | filesize: &amp;#34;megabyte&amp;#34; }}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Code für die custom Pipe dieses Beispiels würde so aussehen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> {&lt;span style="color:#a6e22e">Pipe&lt;/span>, &lt;span style="color:#a6e22e">PipeTransform&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Pipe&lt;/span>({ &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;filesize&amp;#39;&lt;/span> })
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FileSizePipe&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">PipeTransform&lt;/span>{
&lt;span style="color:#a6e22e">transform&lt;/span>(&lt;span style="color:#a6e22e">size&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">extensions&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;MB&amp;#34;&lt;/span>){
&lt;span style="color:#66d9ef">return&lt;/span> (&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">/&lt;/span> (&lt;span style="color:#ae81ff">1024&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">1024&lt;/span>)).&lt;span style="color:#a6e22e">toFixed&lt;/span>(&lt;span style="color:#ae81ff">2&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">extension&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Um Angular mitzuteilen, dass dies eine Pipe ist, wenden wir den &lt;code>@Pipe&lt;/code> Decorator an, welchen wir aus &lt;code>@angular/core&lt;/code> importieren.&lt;/li>
&lt;li>Die Pipe-Klasse implementiert die Methode &lt;code>transform&lt;/code> des PipeTransform Interface, die einen Eingabewert gefolgt von optionalen Parametern akzeptiert und den transformierten Wert zurückgibt.&lt;/li>
&lt;li>Für jeden an die Pipe übergebenen Parameter gibt es ein zusätzliches Argument für die Methode &lt;code>transform&lt;/code>. Unsere Pipe hat einen solchen Parameter: die &lt;code>extension&lt;/code>.&lt;/li>
&lt;li>Mit dem &lt;code>@Pipe&lt;/code> Decorator können wir den Pipe-Namen definieren, welchen wir im Template verwenden.&lt;/li>
&lt;/ul></description></item><item><title>Docs: GitHub</title><link>/docs/git/git-hub/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/git-hub/</guid><description>
&lt;p>GitHub ist ein Webservice für das Verwalten von Software Code via Git. Darüber hinaus bietet GitHub viele weitere Funktionen, von Projektmanagement mit Taskverwaltung, über Wikis bis zum Buildserver. GitHub ist die Plattform für Opensource Projekte.&lt;/p>
&lt;p>Weitere Infos:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://de.wikipedia.org/wiki/GitHub">Wikipedia&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://try.github.com/">GitHub Doku&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="github-alternativen">GitHub Alternativen&lt;/h2>
&lt;p>Natürlich ist GitHub nicht die einzige Plattform, welche diesen Service anbietet. Alle Alternativen haben ihre eigenen Features und Limitierungen, im Kern verwenden aber alle Git.&lt;/p>
&lt;p>Alternativen:&lt;/p>
&lt;ul>
&lt;li>Gitea: &lt;a href="https://gitea.io">https://gitea.io&lt;/a>&lt;/li>
&lt;li>Gitolite: &lt;a href="https://gitolite.com">https://gitolite.com&lt;/a>&lt;/li>
&lt;li>Gitosis: &lt;a href="https://github.com/tv42/gitosis">https://github.com/tv42/gitosis&lt;/a>&lt;/li>
&lt;li>GitLab: &lt;a href="https://gitlab.com/">https://gitlab.com/&lt;/a>&lt;/li>
&lt;li>Bitbucket: &lt;a href="https://bitbucket.org">https://bitbucket.org&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="github-account">GitHub Account&lt;/h2>
&lt;p>Falls du noch keinen GitHub-Account hast, wäre jetzt der Moment einen zu erstellen. &lt;a href="https://github.com/signup">https://github.com/signup&lt;/a>&lt;/p>
&lt;h2 id="git-protokolle">Git Protokolle&lt;/h2>
&lt;p>Um auf ein entferntes Git Repository zuzugreifen, gibt es in der Regel zwei Varianten:&lt;/p>
&lt;ul>
&lt;li>HTTPS&lt;/li>
&lt;li>SSH&lt;/li>
&lt;/ul>
&lt;p>Beide Protokolle bieten standardmässig Verschlüsselung, Authentifizierung und Komprimierung.&lt;/p>
&lt;h3 id="git-über-https">Git über HTTPS&lt;/h3>
&lt;p>Kurze Wiederholung: Um ein Repository über HTTPS zu klonen verwendet man den Befehl:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/kelseyhightower/nocode.git
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dies ist die einfachste Variante, um Code schnell herunterzuladen und lokal im eigenen Editor zu betrachten.&lt;/p>
&lt;p>Vorteile:&lt;/p>
&lt;ul>
&lt;li>Anonymer Zugriff möglich&lt;/li>
&lt;li>Zugriff für Systeme, auf denen SSH weniger verbreitet ist&lt;/li>
&lt;li>HTTPS ist auf vielen Corporate Firewalls standardmässig offen&lt;/li>
&lt;/ul>
&lt;p>Nachteile:&lt;/p>
&lt;ul>
&lt;li>Zwischenspeicherung der Anmeldedaten mit HTTPS weniger benutzerfreundlich als mit SSH Keys&lt;/li>
&lt;li>Konfiguration des Webservers etwas komplizierter als die von SSH&lt;/li>
&lt;/ul>
&lt;h3 id="git-über-ssh">Git über SSH&lt;/h3>
&lt;p>Um ein Repository mit SSH zu klonen, kommt folgender Befehl zum Einsatz:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone git@github.com:cajotafer/10xengineers.git
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Für die meisten Anwendungsfälle ist dies der bevorzugte Weg, um entfernte Git Repositories zu verwenden.&lt;/p>
&lt;p>Vorteile:&lt;/p>
&lt;ul>
&lt;li>SSH ist auf jedem Linux System bereits vorinstalliert (server- wie clientseitig)&lt;/li>
&lt;li>SSH Server sind sehr einfach zu konfigurieren&lt;/li>
&lt;li>Der Zugriff via SSH ist sehr sicher&lt;/li>
&lt;/ul>
&lt;p>Nachteile:&lt;/p>
&lt;ul>
&lt;li>Bietet keinen anonymen Zugriff&lt;/li>
&lt;/ul>
&lt;h2 id="github-features">GitHub Features&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Feature&lt;/th>
&lt;th>Funktion&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Issues&lt;/td>
&lt;td>Ermöglichen es, Tasks in einem Repo zu erstellen und zu tracken.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Pull Requests&lt;/td>
&lt;td>Ein Pull Request ermöglicht es, Changes zu Reviewen und zu besprechen, bevor sie in einen Branch gemerged werden.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Forks&lt;/td>
&lt;td>Eine Fork ist eine Kopie von einem Git-Repo. Die Fork kann dann bearbeitet und angepasst werden, ohne dass das originale Repo davon betroffen ist.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GitHub Pages&lt;/td>
&lt;td>Basic Webseiten welche auf GitHub gehostet werden&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GitHub Actions&lt;/td>
&lt;td>CI/CD Integration von GitHub&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="hands-on">Hands On&lt;/h2>
&lt;p>Für dieses Hands-On werden wir alles via Webinterface von GitHub machen. Ein Grossteil der Tasks können jedoch auch Lokal mit Git im Terminal gemacht werden.&lt;/p>
&lt;h3 id="branches-und-pull-requests">Branches und Pull Requests&lt;/h3>
&lt;ol>
&lt;li>&lt;a href="https://guides.github.com/activities/hello-world/">https://guides.github.com/activities/hello-world/&lt;/a>&lt;/li>
&lt;/ol>
&lt;h3 id="forks-pull-requests-reviews">Forks, Pull Requests, Reviews&lt;/h3>
&lt;ol>
&lt;li>Fork erstellen vom &lt;a href="https://github.com/SylivanKenobi/hello-world">Repo&lt;/a>.
&lt;img src="../github/create-fork.png" alt="Create Fork" title="Create Fork">&lt;/li>
&lt;li>Weitere User auf Fork hinzufügen
&lt;img src="../github/add-user.png" alt="Add User" title="Add User">&lt;/li>
&lt;li>Branch auf Fork erstellen&lt;/li>
&lt;li>&lt;code>hello-world.sh&lt;/code> auf dem Master Branch anpassen und committen.
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#39;Hello World Master&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>&lt;code>hello-world.sh&lt;/code> auf dem neuen Branch anpassen und committen.
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#75715e">#!/bin/bash
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
echo &lt;span style="color:#e6db74">&amp;#39;Hello World Feature&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>Pull Request erstellen&lt;/li>
&lt;li>Da auf beiden Branches die gleich Zeile bearbeitet wurde, kann GitHub die Branches nicht automatisch Mergen. Aus diesem Grund müssen zuerst die Konflikte gelöst werden
&lt;img src="../github/fix-merge.png" alt="Fix Merge" title="Fix Merge">&lt;/li>
&lt;li>Teamkollege als Reviewer zuweisen.&lt;/li>
&lt;li>Review Changes umsetzen.&lt;/li>
&lt;li>Pull Request mergen.&lt;/li>
&lt;li>Merge Request auf &lt;a href="https://github.com/SylivanKenobi/hello-world">Original Repo&lt;/a> erstellen&lt;/li>
&lt;li>Ende&lt;/li>
&lt;/ol></description></item><item><title>Docs: Spring Framework Introduction</title><link>/docs/java/spring_introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/java/spring_introduction/</guid><description>
&lt;h2 id="60-meta">6.0: Meta&lt;/h2>
&lt;h3 id="601-goals">6.0.1: Goals&lt;/h3>
&lt;ul>
&lt;li>TODO&lt;/li>
&lt;/ul>
&lt;h3 id="602-changelog">6.0.2: Changelog&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Author&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Date&lt;/th>
&lt;th>Change&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Raffael Hertle&lt;/td>
&lt;td>0.1&lt;/td>
&lt;td>23.1.2022&lt;/td>
&lt;td>Initial version&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="603-requirements">6.0.3: Requirements&lt;/h3>
&lt;ul>
&lt;li>I understand Java basics&lt;/li>
&lt;li>I understand the difference between classes and interfaces and their usages&lt;/li>
&lt;/ul>
&lt;h2 id="61-what-is-a-framework">6.1: What is a framework&lt;/h2>
&lt;p>Before understanding what the Spring framework is and does, we need some kind of definition of a framework:&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Framework&lt;/h4>
&lt;p>A framework, or software framework, is a platform for developing software applications. It provides a foundation on which software developers can build programs for a specific platform. For example, a framework may include predefined classes and functions that can be used to process input, manage hardware devices, and interact with system software. This streamlines the development process since programmers don&amp;rsquo;t need to reinvent the wheel each time they develop a new application.&lt;/p>
&lt;p>A framework is similar to an application programming interface (API), though technically a framework includes an API. As the name suggests, a framework serves as a foundation for programming, while an API provides access to the elements supported by the framework. A framework may also include code libraries, a compiler, and other programs used in the software development process.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://techterms.com/definition/framework">TechTerms.com&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;h3 id="611-what-is-the-spring-framework">6.1.1: What is the Spring framework&lt;/h3>
&lt;p>At its core the Spring framework is a dependency injection and inversion of control framework. Don&amp;rsquo;t get too confused over these two fancy words yet, we will take a look at them in a second. The Spring framework brings us utility to do almost anything we need in a basic web application: creating web-accessible API endpoints, connecting to a database and saving objects - all comes (more or less) out of the box with the Spring framework.&lt;/p>
&lt;p>Let us dive a bit into the concepts and design patterns of enterprise application programming.&lt;/p>
&lt;h3 id="62-core-concepts">6.2: Core concepts&lt;/h3>
&lt;p>When designing software and facing problems, we often find ourselves in a similar situation. The problem might be similar, or the solution after a while might be very familiar with what we have done in an earlier project. By generalizing problems and their solutions we create reusable approaches which we call &amp;lsquo;design patterns&amp;rsquo;:&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Design pattern&lt;/h4>
&lt;p>Design patterns are reusable solutions for software development. They serve as templates that programmers can use when creating applications. They are not specific to individual programming languages, but instead are best practices or heuristics that can be applied in different programming environments.&lt;/p>
&lt;p>While design patterns are not language-dependent, they often include objects or classes. Therefore, they are typically associated with object-oriented programming. Individual patterns can be classified into three different categories: 1) creational patterns, 2) structural patterns, and 3) behavioral patterns.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://techterms.com/definition/design_pattern">TechTerms.com&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;p>The following core concepts are all general design patterns used in almost every enterprise application.&lt;/p>
&lt;h4 id="621-inversion-of-control">6.2.1: Inversion of Control&lt;/h4>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Inversion of Control&lt;/h4>
&lt;p>Inversion of Control (IoC) is a design principle (although, some people refer to it as a pattern). As the name suggests, it is used to invert different kinds of controls in object-oriented design to achieve loose coupling. Here, controls refer to any additional responsibilities a class has, other than its main responsibility. This includes control over the flow of an application, and control over the flow of an object creation or dependent object creation and binding.&lt;/p>
&lt;p>IoC is all about inverting the control. To explain this in layman&amp;rsquo;s terms, suppose you drive a car to your work place. This means you control the car. The IoC principle suggests to invert the control, meaning that instead of driving the car yourself, you hire a cab, where another person will drive the car. Thus, this is called inversion of the control - from you to the cab driver. You don&amp;rsquo;t have to drive a car yourself and you can let the driver do the driving so that you can focus on your main work.&lt;/p>
&lt;p>The IoC principle helps in designing loosely coupled classes which make them testable, maintainable and extensible.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.tutorialsteacher.com/ioc/inversion-of-control">tutorialsteacher.com&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;h4 id="622-dependency-injection">6.2.2: Dependency Injection&lt;/h4>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Dependency Injection&lt;/h4>
&lt;p>“In software engineering, dependency injection is a technique whereby one object supplies the dependencies of another object. A ‘dependency’ is an object that can be used, for example as a service. Instead of a client specifying which service it will use, something tells the client what service to use. The ‘injection’ refers to the passing of a dependency (a service) into the object (a client) that would use it. The service is made part of the client&amp;rsquo;s state. Passing the service to the client, rather than allowing a client to build or find the service, is the fundamental requirement of the pattern.” Source: Wikipedia&lt;/p>
&lt;p>Creating objects directly within the class is inflexible because it commits the class to particular objects and makes it impossible to change the instantiation later independently from the class. It stops the class from being reusable if other objects are required and it makes the class hard to test because real objects can not be replaced with mock objects.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.growin.com/blog/what-is-dependency-injection/">growin.com&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;p>We will see a practical example later. Keep the pattern in mind, even though it might be hard to understand at first.&lt;/p>
&lt;h4 id="623-singleton">6.2.3: Singleton&lt;/h4>
&lt;p>When talking about Singletons in programming, we talk about objects which are the only instantiation of its class. Meaning that when we use an object of said class, we can be sure that it is the only one instance at runtime of this class.&lt;/p>
&lt;p>Read the explanation on &lt;a href="https://refactoring.guru/design-patterns/singleton">refactoring.guru&lt;/a>.&lt;/p>
&lt;p>The usage shall yet be a mystery to you, we will also use this pattern a lot in the upcoming exercise.&lt;/p>
&lt;h4 id="624-repository">6.2.4: Repository&lt;/h4>
&lt;p>The Repository design pattern is a very common design pattern for managing data access. The repository will be the interface to access all our data stored in our database. Think of the repository being your library front desk manager. We want to access books in the library and we have no idea how they get them to us. We only know their API (instructions) and the results we can expect. The repository usually is an interface defined something like this:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ArticleRepository&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Article&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">readAll&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Article&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">readLatest&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Article&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">readByTags&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Tag&lt;span style="color:#f92672">...&lt;/span> tags&lt;span style="color:#f92672">);&lt;/span>
Article &lt;span style="color:#a6e22e">readById&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">long&lt;/span> id&lt;span style="color:#f92672">);&lt;/span>
Article &lt;span style="color:#a6e22e">create&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Article article&lt;span style="color:#f92672">);&lt;/span>
Article &lt;span style="color:#a6e22e">update&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Article article&lt;span style="color:#f92672">);&lt;/span>
Article &lt;span style="color:#a6e22e">delete&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Article article&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The implementation of the interface does not really concern us. Most of the times this is done by the frameworks behind the application. In our case with the Spring framework letting our class extend the &lt;code>Repository&lt;/code> class of Spring Data will suffice and all the implementation is magically going to happen!&lt;/p>
&lt;h4 id="625-rest">6.2.5: REST&lt;/h4>
&lt;p>The abbreviation &lt;strong>REST&lt;/strong> stands for &lt;strong>RE&lt;/strong>presentational &lt;strong>S&lt;/strong>tate &lt;strong>T&lt;/strong>ransfer. It is a architectural approach and became the standard for all web-based applications and is built upon the HTTP protocol. In a RESTful world everything is called a resource. Resources are accessed using standard HTTP methods (GET / POST / DELETE / PUT).&lt;/p>
&lt;p>The REST server simply provides access to resources and the client can read and modify these resources. The resources itself are identified by URIs and IDs. REST does not define in which &amp;ldquo;language&amp;rdquo; server and client communicate, but most of the times resources are represented by JSON objects.&lt;/p>
&lt;p>The following standards are defined for the HTTP methods to access resources:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>GET&lt;/strong>: Provides read only access to a resource&lt;/li>
&lt;li>&lt;strong>POST&lt;/strong>: Creates new resources&lt;/li>
&lt;li>&lt;strong>DELETE&lt;/strong>: Deletes resources&lt;/li>
&lt;li>&lt;strong>PUT&lt;/strong>: Updates or creates resource if not found&lt;/li>
&lt;/ul>
&lt;p>Let us take a look at how our REST resources could look like at our store web-application. As we said resources and their access are defined by HTTP Method, Resource name and ID. For example a HTTP GET request to &lt;code>/orders/15&lt;/code> would return information about the order with ID 15. Resources in a RESTful world are always written in plural. Here are some other examples:&lt;/p>
&lt;ul>
&lt;li>&lt;code>POST /orders&lt;/code>: Create a new order&lt;/li>
&lt;li>&lt;code>GET /orders&lt;/code>: List all orders available&lt;/li>
&lt;li>&lt;code>PUT /orders/15&lt;/code>: Update order with ID 15&lt;/li>
&lt;li>&lt;code>DELETE /orders/15&lt;/code>: Delete the order with ID 15&lt;/li>
&lt;/ul>
&lt;h4 id="626-rest--resource--controller">6.2.6: (REST-) Resource / Controller&lt;/h4>
&lt;p>The resource or controller will be the entrypoint of all requests reaching our web-application. Users will make HTTP requests by the frontend to our backend. This API is going to be the code representation of our REST resources.&lt;/p>
&lt;p>A representation of a REST resource for our &lt;code>/orders&lt;/code> resource might look like this:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@RestController&lt;/span>
&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/orders&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">OrderResource&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> OrderService orderService&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@GetMapping&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Order&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">getAllOrders&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// Get all orders from the order magical order service
&lt;/span>&lt;span style="color:#75715e">&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Order&lt;span style="color:#f92672">&amp;gt;&lt;/span> orders &lt;span style="color:#f92672">=&lt;/span> orderService&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">findAll&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> orders&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Do not yet care too much about the code itself. We are going to dive into the code in a few chapters.&lt;/p>
&lt;h4 id="627-assignment-1">6.2.7 Assignment 1&lt;/h4>
&lt;p>Can you provide a definition of a REST resource for an order resource in our theoretical web shop application? Define the methods and endpoints (&lt;code>/orders/15&lt;/code>). List at least 5 endpoints and their usage in the API.&lt;/p>
&lt;h3 id="63-the-life-in-spring">6.3: The life in Spring&lt;/h3>
&lt;p>Let us take a look at the freshly learned design patterns and how we can implement / use them with the help of the Spring framework. Up until now most of the part from this chapter might still be a lot of magic and sound confusing to you.&lt;/p>
&lt;p>Most modern web applications are most commonly divided into three layers:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Boundary&lt;/strong>: The layer that represents the API boundary of the application&lt;/li>
&lt;li>&lt;strong>Control&lt;/strong>: The control layer holds all classes with business logic&lt;/li>
&lt;li>&lt;strong>Entity&lt;/strong>: The entity layer holds the representation of the data models and their data access classes (repositories)&lt;/li>
&lt;/ul>
&lt;p>Let us take a look at code examples representing the core concepts from the chapters before, layer by layer.&lt;/p>
&lt;h4 id="631-boundary-layer">6.3.1: Boundary Layer&lt;/h4>
&lt;p>In the boundary layer we define our REST resources. Without further theory, here is an example REST resource for a &lt;code>Order&lt;/code> class in our web shop:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@RestController&lt;/span>
&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/orders&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">OrderResource&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> OrderService orderService&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">OrderResource&lt;/span>&lt;span style="color:#f92672">(&lt;/span>OrderService orderService&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">orderService&lt;/span> &lt;span style="color:#f92672">=&lt;/span> orderService&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@GetMapping&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Order&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">findAll&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> orderService&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">findAll&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@GetMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/{id}&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Order &lt;span style="color:#a6e22e">findById&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">@PathVariable&lt;/span> Long id&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> orderService&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">findById&lt;/span>&lt;span style="color:#f92672">(&lt;/span>id&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">orElseThrow&lt;/span>&lt;span style="color:#f92672">(&lt;/span>EntityNotFoundException&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@PostMapping&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Order &lt;span style="color:#a6e22e">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">@RequestBody&lt;/span> Order order&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> orderService&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>order&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@PutMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/{id}&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Order &lt;span style="color:#a6e22e">update&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">@PathVariable&lt;/span> Long id&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#a6e22e">@RequestBody&lt;/span> Order order&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> orderService&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">update&lt;/span>&lt;span style="color:#f92672">(&lt;/span>id&lt;span style="color:#f92672">,&lt;/span> order&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@DeleteMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/{id}&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> ResponseEntity &lt;span style="color:#a6e22e">delete&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">@PathVariable&lt;/span> Long id&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
orderService&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">delete&lt;/span>&lt;span style="color:#f92672">(&lt;/span>id&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> ResponseEntity&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">ok&lt;/span>&lt;span style="color:#f92672">().&lt;/span>&lt;span style="color:#a6e22e">build&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If we take a short look at the class above, we can guess what the class does and what it is used for. This class represents a REST resource in our application. The annotation &lt;code>@RestController&lt;/code> (Almost all annotations discussed here are from the Spring Framework) defines the class as a REST resource. The annotation &lt;code>@RequestMapping(&amp;quot;/orders&amp;quot;)&lt;/code> defines that all HTTP calls requesting the &lt;code>/orders&lt;/code> path, will invoke this REST controller.&lt;/p>
&lt;p>Each method in this REST resource defines an endpoint serving the basic CRUD REST instructions. Let us take a look at one of the methods in detail:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#a6e22e">@GetMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/{id}&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Order &lt;span style="color:#a6e22e">findById&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">@PathVariable&lt;/span> Long id&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> orderService&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">findById&lt;/span>&lt;span style="color:#f92672">(&lt;/span>id&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">orElseThrow&lt;/span>&lt;span style="color:#f92672">(&lt;/span>EntityNotFoundException&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This method defines that in the context of the resource (&lt;code>/orders&lt;/code>) all HTTP GET requests on the &lt;code>/{id}&lt;/code> path will get handled by the function &lt;code>OrderResource.findById(...)&lt;/code>. The only parameter of this function is &lt;code>id: Long&lt;/code> which is annotated by the &lt;code>@PathVariable&lt;/code> annotation, telling us that the parameter called &lt;code>id&lt;/code> will be handed over as a path variable. Meaning that any request coming to the endpoint &lt;code>/orders/10&lt;/code> will be interpreted as a call similar to &lt;code>OrderResource::findById(10)&lt;/code>. Inside the &lt;code>OrderResource::findById&lt;/code> function we simply delegate the job to the &lt;code>OrderService&lt;/code> instance to handle the request and fetch the desired order.&lt;/p>
&lt;p>Most of the other REST endpoints are quite similar to the function described above, except for the PUT and POST request which have another annotation:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#a6e22e">@PutMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/{id}&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Order &lt;span style="color:#a6e22e">update&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">@PathVariable&lt;/span> Long id&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#a6e22e">@RequestBody&lt;/span> Order order&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> orderService&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">update&lt;/span>&lt;span style="color:#f92672">(&lt;/span>id&lt;span style="color:#f92672">,&lt;/span> order&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Here in the PUT mapping we have the annotation &lt;code>@PathVariable&lt;/code> on the parameter &lt;code>id: Long&lt;/code> which we already know. The next parameter &lt;code>order: Order&lt;/code> is annotated with &lt;code>@RequestBody&lt;/code>. This annotation tells the Spring framework that the parameter will come as the body part of the request:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s">
curl &lt;span style="color:#f92672">-&lt;/span>X POST &lt;span style="color:#f92672">-&lt;/span>d &lt;span style="color:#e6db74">&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;Example&amp;#34;}&amp;#39;&lt;/span> &lt;span style="color:#f92672">-&lt;/span>H &lt;span style="color:#e6db74">&amp;#39;Content-Type: application/json&amp;#39;&lt;/span> http&lt;span style="color:#f92672">://&lt;/span>localhost&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">8080&lt;/span>&lt;span style="color:#f92672">/&lt;/span>orders
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>This is an example for a valid request to the POST endpoint on &lt;code>/orders&lt;/code>. As you can see the request comes with a body &lt;code>-d '{&amp;quot;name&amp;quot;: &amp;quot;Example&amp;quot;}'&lt;/code> which holds a JSON representation of an Order object. The Spring framework will automatically map the JSON Object in the body to the Java Object as the parameter of the request.&lt;/p>
&lt;p>Another thing that is new is how we utilize the &lt;code>OrderService&lt;/code> class. All the functions in the &lt;code>OrderResource&lt;/code> get passed over to the &lt;code>OrderService&lt;/code>. This is what we call separation of concern: We let the REST resource handle all the logic connected to the REST and HTTP world and the service class handle all the business logic. But as you already recognized, the object &lt;code>orderService: OrderService&lt;/code> does not get initialized in this class. It gets passed to the constructor. This is what we call &lt;strong>Constructor Injection&lt;/strong> and is a type of &lt;strong>Dependency Injection&lt;/strong>. Here is how this works: In the Spring framework there are several annotations which define &lt;strong>Beans&lt;/strong> in the applications context.&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Bean&lt;/h4>
&lt;p>The objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. These beans are created with the configuration metadata that you supply to the container.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.tutorialspoint.com/spring/spring_bean_definition.htm">tutorialspoint.com&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/div>
&lt;p>In other words: Java classes with certain annotations (&lt;code>@Service&lt;/code> , &lt;code>@Repository&lt;/code>, &lt;code>@RestController&lt;/code>, &amp;hellip;) will define &lt;strong>Singletons&lt;/strong> in the Spring frameworks context. The framework now sees that another class uses one of these beans (for example defined by constructor injection) and injects the instance in the class automatically.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#f92672">[...]&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> OrderService orderService&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">OrderResource&lt;/span>&lt;span style="color:#f92672">(&lt;/span>OrderService orderService&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">orderService&lt;/span> &lt;span style="color:#f92672">=&lt;/span> orderService&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">[...]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="632-control-layer">6.3.2: Control Layer&lt;/h4>
&lt;p>The control layer holds all the business logic and builds normally the core of all applications. On a technical level this is the most basic and least interesting layer in the application. The orders service class looks as the following:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@Service&lt;/span>
&lt;span style="color:#a6e22e">@Transactional&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">OrderService&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> OrderRepository orderRepository&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">OrderService&lt;/span>&lt;span style="color:#f92672">(&lt;/span>OrderRepository orderRepository&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">orderRepository&lt;/span> &lt;span style="color:#f92672">=&lt;/span> orderRepository&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Order&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">findAll&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#f92672">(&lt;/span>List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Order&lt;span style="color:#f92672">&amp;gt;)&lt;/span> orderRepository&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">findAll&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Optional&lt;span style="color:#f92672">&amp;lt;&lt;/span>Order&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">findById&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Long id&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> orderRepository&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">findById&lt;/span>&lt;span style="color:#f92672">(&lt;/span>id&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Order &lt;span style="color:#a6e22e">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Order order&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> orderRepository&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">save&lt;/span>&lt;span style="color:#f92672">(&lt;/span>order&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Order &lt;span style="color:#a6e22e">update&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Long id&lt;span style="color:#f92672">,&lt;/span> Order order&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Order toUpdate &lt;span style="color:#f92672">=&lt;/span> orderRepository&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">findById&lt;/span>&lt;span style="color:#f92672">(&lt;/span>id&lt;span style="color:#f92672">).&lt;/span>&lt;span style="color:#a6e22e">orElseThrow&lt;/span>&lt;span style="color:#f92672">(&lt;/span>EntityNotFoundException&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
toUpdate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>order&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> toUpdate&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">delete&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Long id&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
orderRepository&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">deleteById&lt;/span>&lt;span style="color:#f92672">(&lt;/span>id&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You can see directly that this class looks less complicated and has fewer annotations than the REST resource before. The only annotations in this class are &lt;code>@Service&lt;/code> and &lt;code>@Transactional&lt;/code>. The &lt;code>@Service&lt;/code> annotation tells the Spring framework that the following class is a Java bean holding business logic. The &lt;code>@Transactional&lt;/code> annotation will simply annotate that all the functions in the class should be executed in a single transaction. Don&amp;rsquo;t mind yet about the &lt;code>@Transactional&lt;/code> annotation. As you can see we also inject another bean into this class by constructor injection: the &lt;code>OrderRepository&lt;/code>.&lt;/p>
&lt;h4 id="633-entity-layer">6.3.3: Entity Layer&lt;/h4>
&lt;p>Classes in the entity layer represent the database entities and their access classes (repositories). The &lt;code>Order&lt;/code> object is represented by the following class:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@Entity&lt;/span>
&lt;span style="color:#a6e22e">@Table&lt;/span>&lt;span style="color:#f92672">(&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;orders&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Order&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#a6e22e">@Id&lt;/span>
&lt;span style="color:#a6e22e">@GeneratedValue&lt;/span>
Long id&lt;span style="color:#f92672">;&lt;/span>
String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Long &lt;span style="color:#a6e22e">getId&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> id&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setId&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Long id&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">=&lt;/span> id&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String name&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Without the annotations the class looks like one of the simplest java classes. The annotations are pretty straightforward too. The &lt;code>@Entity&lt;/code> annotation indicates that this is a managed persistence class. The &lt;code>@Table(name = &amp;quot;&amp;quot;)&lt;/code> annotations lets you define how the table is called managing this class. The &lt;code>@Id&lt;/code> annotations annotates the field &lt;code>id: Long&lt;/code> to define that the field is used as the primary key in the database. &lt;code>@GeneratedValue&lt;/code> lets you define values which are created by the underlying data store or database.&lt;/p>
&lt;p>To access the database and manage the &lt;code>Order&lt;/code> objects in the application we use the &lt;code>OrderRepository&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#a6e22e">@Repository&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">OrderRepository&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> CrudRepository&lt;span style="color:#f92672">&amp;lt;&lt;/span>Order&lt;span style="color:#f92672">,&lt;/span> Long&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>You will notice that the &lt;code>OrderRepository&lt;/code> is not a &lt;code>class&lt;/code> but only an &lt;code>interface&lt;/code> extending Spring&amp;rsquo;s &lt;code>CrudRepository&lt;/code>. The type parameterization behind the &lt;code>CrudRepository&amp;lt;Order, Long&amp;gt;&lt;/code> indicates that the managed objects by this repository are &lt;code>Order&lt;/code> and identified by &lt;code>Long&lt;/code> (Remember the &lt;code>@Id Long id&lt;/code> from the &lt;code>Order&lt;/code> class?). If you check the &lt;a href="https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html">documentation&lt;/a> for Spring&amp;rsquo;s &lt;code>CrudRepository&lt;/code>, you can see what methods are already defined by the interface. You will also notice that we just define an interface and do not implement any of these methods. Spring does this magic for you,&lt;/p>
&lt;h4 id="64-your-own-application">6.4: Your own application&lt;/h4>
&lt;p>Now it is time to get your hands dirty! The first assignment will be to have a Spring Boot application up and running. We will set up a sample dummy application.&lt;/p>
&lt;p>There are several ways to get your first application up and running, we will take a look at two of them.&lt;/p>
&lt;h4 id="641-ui-approach">6.4.1: UI Approach&lt;/h4>
&lt;p>To get started with Spring Boot you can use their own starter tool called &lt;a href="https://start.spring.io/">spring initializr&lt;/a>. Open the link in the browser of your choice and click through the setup. For a simple hello world example you can just use the following configuration:&lt;/p>
&lt;ul>
&lt;li>Project: Maven project&lt;/li>
&lt;li>Language: Java&lt;/li>
&lt;li>Spring Boot: Default&lt;/li>
&lt;li>Project Metadata:
&lt;ul>
&lt;li>GroupId: ch.itninja&lt;/li>
&lt;li>Artifact: helloworld&lt;/li>
&lt;li>Name: helloworld&lt;/li>
&lt;li>Description: &amp;hellip;&lt;/li>
&lt;li>Package name: ch.sbbt.example.helloworld&lt;/li>
&lt;li>Packaging: Jar&lt;/li>
&lt;li>Java: 11&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Simply click generate afterwards and unzip the project.&lt;/p>
&lt;h4 id="642-cli-approach">6.4.2: CLI Approach&lt;/h4>
&lt;p>For the people who are more CLI focussed, you can use the same tool with your CLI favorites via HTTP.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s">&lt;span style="color:#f92672">$&lt;/span> curl &lt;span style="color:#f92672">-&lt;/span>G https&lt;span style="color:#f92672">://&lt;/span>start.spring.io&lt;span style="color:#f92672">/&lt;/span>starter.zip \
&lt;span style="color:#f92672">-&lt;/span>d dependencies&lt;span style="color:#f92672">=&lt;/span>web \
&lt;span style="color:#f92672">-&lt;/span>d javaVersion&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">11&lt;/span> \
&lt;span style="color:#f92672">-&lt;/span>d groupId&lt;span style="color:#f92672">=&lt;/span>ch.itninja \
&lt;span style="color:#f92672">-&lt;/span>d artifactId&lt;span style="color:#f92672">=&lt;/span>helloworld \
&lt;span style="color:#f92672">-&lt;/span>d baseDir&lt;span style="color:#f92672">=&lt;/span>helloworld \
&lt;span style="color:#f92672">-&lt;/span>o helloworld.zip
&lt;span style="color:#f92672">$&lt;/span> unzip helloworld.zip
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s">&lt;span style="color:#f92672">$&lt;/span> curl &lt;span style="color:#f92672">-&lt;/span>G https&lt;span style="color:#f92672">://&lt;/span>start.spring.io&lt;span style="color:#f92672">/&lt;/span>starter.tgz \
&lt;span style="color:#f92672">-&lt;/span>d dependencies&lt;span style="color:#f92672">=&lt;/span>web \
&lt;span style="color:#f92672">-&lt;/span>d javaVersion&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">11&lt;/span> \
&lt;span style="color:#f92672">-&lt;/span>d groupId&lt;span style="color:#f92672">=&lt;/span>ch.itninja \
&lt;span style="color:#f92672">-&lt;/span>d artifactId&lt;span style="color:#f92672">=&lt;/span>helloworld \
&lt;span style="color:#f92672">-&lt;/span>d baseDir&lt;span style="color:#f92672">=&lt;/span>helloworld \
&lt;span style="color:#f92672">-&lt;/span>o helloworld.tar
&lt;span style="color:#f92672">$&lt;/span> tar &lt;span style="color:#f92672">-&lt;/span>xfv helloworld.tar
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>depending on your preferences in compression tools.&lt;/p>
&lt;h4 id="643-start-the-application">6.4.3: Start the Application&lt;/h4>
&lt;p>Import the project in your favorite IDE. Most of the times this can be achieved by opening the maven project file &lt;code>pom.xml&lt;/code> in your IDE of choice and then import it as a project.&lt;/p>
&lt;p>Most IDEs (including IntelliJ) support Spring applications out of the box. As soon as you have your project imported you can start up your application by running the pre-configured run-configuration. If you do not want to rely on your IDE to start up your application you can use any shell of your choice and simply execute:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s">./mvnw spring&lt;span style="color:#f92672">-&lt;/span>boot&lt;span style="color:#f92672">:&lt;/span>run
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Let maven download and build your dependencies and as soon as you have a message like:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s"> . ____ _ __ _ _
&lt;span style="color:#f92672">/&lt;/span>\\ &lt;span style="color:#f92672">/&lt;/span> ___&lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">_ __ _ _(_)_ __ __ _ \ \ \ \&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74">( ( )\___ | &amp;#39;&lt;/span>_ &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#e6db74">&amp;#39;_| | &amp;#39;&lt;/span>_ \&lt;span style="color:#f92672">/&lt;/span> _` &lt;span style="color:#f92672">|&lt;/span> \ \ \ \
\\&lt;span style="color:#f92672">/&lt;/span> ___)&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span>_)&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">||&lt;/span> (_&lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#f92672">|&lt;/span> ) ) ) )
&lt;span style="color:#e6db74">&amp;#39; |____| .__|_| |_|_| |_\__, | / / / /
&lt;/span>&lt;span style="color:#e6db74"> =========|_|==============|___/=/_/_/_/
&lt;/span>&lt;span style="color:#e6db74"> :: Spring Boot :: (v2.6.3)
&lt;/span>&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74">2022-02-09 13:57:45.493 INFO 477193 --- [ main] ch.itninja.helloworld.DemoApplication : Starting DemoApplication using Java 11.0.2 on rhertle-puzzle with PID 477193 (**************************)
&lt;/span>&lt;span style="color:#e6db74">2022-02-09 13:57:45.495 INFO 477193 --- [ main] ch.itninja.helloworld.DemoApplication : No active profile set, falling back to default profiles: default
&lt;/span>&lt;span style="color:#e6db74">2022-02-09 13:57:46.050 INFO 477193 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http)
&lt;/span>&lt;span style="color:#e6db74">2022-02-09 13:57:46.057 INFO 477193 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat]
&lt;/span>&lt;span style="color:#e6db74">2022-02-09 13:57:46.057 INFO 477193 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.56]
&lt;/span>&lt;span style="color:#e6db74">2022-02-09 13:57:46.100 INFO 477193 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext
&lt;/span>&lt;span style="color:#e6db74">2022-02-09 13:57:46.100 INFO 477193 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 569 ms
&lt;/span>&lt;span style="color:#e6db74">2022-02-09 13:57:46.322 INFO 477193 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path &amp;#39;&amp;#39;
&lt;/span>&lt;span style="color:#e6db74">2022-02-09 13:57:46.329 INFO 477193 --- [ main] ch.itninja.helloworld.DemoApplication : Started DemoApplication in 1.112 seconds (JVM running for 1.414)
&lt;/span>&lt;span style="color:#e6db74">2022-02-09 13:58:03.800 INFO 477193 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring DispatcherServlet &amp;#39;&lt;/span>dispatcherServlet&lt;span style="color:#e6db74">&amp;#39;
&lt;/span>&lt;span style="color:#e6db74">2022-02-09 13:58:03.801 INFO 477193 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet : Initializing Servlet &amp;#39;&lt;/span>dispatcherServlet&lt;span style="color:#e6db74">&amp;#39;&lt;/span>
&lt;span style="color:#ae81ff">2022-02-09&lt;/span> &lt;span style="color:#ae81ff">13&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">58&lt;/span>&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">03.801&lt;/span> INFO &lt;span style="color:#ae81ff">477193&lt;/span> &lt;span style="color:#f92672">---&lt;/span> [nio&lt;span style="color:#ae81ff">-8080&lt;/span>&lt;span style="color:#f92672">-&lt;/span>exec&lt;span style="color:#ae81ff">-1&lt;/span>] o.s.web.servlet.DispatcherServlet &lt;span style="color:#f92672">:&lt;/span> Completed initialization in &lt;span style="color:#ae81ff">0&lt;/span> ms
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>your application has been successfully started! Congratulations!&lt;/p>
&lt;h4 id="644-assignment-2">6.4.4: Assignment 2&lt;/h4>
&lt;p>No it is your turn to implement some code!&lt;/p>
&lt;h5 id="6441-task-1">6.4.4.1: Task 1&lt;/h5>
&lt;p>Create a resource &lt;code>GreetingResource&lt;/code> at the path &lt;code>/greetings&lt;/code> which greets you with a String &amp;ldquo;Hello World!&amp;rdquo; response when sending a GET request to &lt;code>/greetings&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s">&lt;span style="color:#f92672">$&lt;/span> curl &lt;span style="color:#f92672">-&lt;/span>X GET http&lt;span style="color:#f92672">://&lt;/span>localhost&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">8080&lt;/span>&lt;span style="color:#f92672">/&lt;/span>greetings
&lt;span style="color:#e6db74">&amp;#34;Hello World!&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Take a look at the classes in the chapter before and implement it yourself.&lt;/p>
&lt;details>
&lt;summary>Solution Task 1&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">package&lt;/span> ch.itninja.helloworld.greetings.boundary&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> org.springframework.web.bind.annotation.GetMapping&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> org.springframework.web.bind.annotation.RequestMapping&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> org.springframework.web.bind.annotation.RestController&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@RestController&lt;/span>
&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/greetings&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GreetingResource&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#a6e22e">@GetMapping&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">greeting&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The request should return the following:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s">&lt;span style="color:#f92672">$&lt;/span> curl http&lt;span style="color:#f92672">://&lt;/span>localhost&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">8080&lt;/span>&lt;span style="color:#f92672">/&lt;/span>greetings
Hello, World&lt;span style="color:#f92672">!&lt;/span>%
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;h5 id="6442-task-2">6.4.4.2: Task 2&lt;/h5>
&lt;p>Continue with your DemoApplication and extend your &lt;code>GreetingResource&lt;/code> by another endpoint. GET requests at &lt;code>/greeting/{name}&lt;/code> should return a personalized message &lt;code>Hello {name}!&lt;/code> as a response!&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s">&lt;span style="color:#f92672">$&lt;/span> curl &lt;span style="color:#f92672">-&lt;/span>X GET http&lt;span style="color:#f92672">://&lt;/span>localhost&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">8080&lt;/span>&lt;span style="color:#f92672">/&lt;/span>greetings&lt;span style="color:#f92672">/&lt;/span>raffael
&lt;span style="color:#e6db74">&amp;#34;Hello raffael!&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Take a look at the classes in the chapter before and implement it yourself.&lt;/p>
&lt;p>If you&amp;rsquo;re stuck, take a look at the hint.&lt;/p>
&lt;details>
&lt;summary>Hint Task 2&lt;/summary>
&lt;p>We can use the &lt;code>@PathVariable&lt;/code> annotation to annotate a parameter of the function to get mapped to a path segment of the endpoint definition. Take a look at the example in 6.3.1!&lt;/p>
&lt;/details>
&lt;p>If you still cannot solve the Task, you can help yourself with the solution.&lt;/p>
&lt;details>
&lt;summary>Solution Task 2&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#f92672">package&lt;/span> ch.itninja.helloworld.greetings.boundary&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> org.springframework.web.bind.annotation.GetMapping&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> org.springframework.web.bind.annotation.PathVariable&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> org.springframework.web.bind.annotation.RequestMapping&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> org.springframework.web.bind.annotation.RestController&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@RestController&lt;/span>
&lt;span style="color:#a6e22e">@RequestMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/greetings&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">GreetingResource&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#a6e22e">@GetMapping&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">greeting&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, World!&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@GetMapping&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;/{name}&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">greetByName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#a6e22e">@PathVariable&lt;/span> String name&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> name &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;!&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The request should return the following:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s">&lt;span style="color:#f92672">$&lt;/span> curl http&lt;span style="color:#f92672">://&lt;/span>localhost&lt;span style="color:#f92672">:&lt;/span>&lt;span style="color:#ae81ff">8080&lt;/span>&lt;span style="color:#f92672">/&lt;/span>greetings&lt;span style="color:#f92672">/&lt;/span>raffael
Hello raffael&lt;span style="color:#f92672">!&lt;/span>%
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;h5 id="6443-task-3-setup-application">6.4.4.3: Task 3: Setup application&lt;/h5>
&lt;p>Now let&amp;rsquo;s build our Order application from the web shop example all the way! We will build all the resources for the &lt;code>Order&lt;/code> class from scratch:&lt;/p>
&lt;ul>
&lt;li>Setup Application&lt;/li>
&lt;li>Setup database, application model and repository layer&lt;/li>
&lt;li>Create service / business logic layer&lt;/li>
&lt;li>Define REST endpoints for resources&lt;/li>
&lt;/ul>
&lt;p>Let&amp;rsquo;s start with the creation of our application. Create the spring application like we have already seen in the previous chapters. And make a quick check if your application is able to start up!&lt;/p>
&lt;p>Try to already create folders for the different packages: order-entity, -control, -boundary:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s">
└── order
├── boundary
│   └── OrderResource.java
├── control
│   └── OrderService.java
└── entity
├── Order.java
└── OrderRepository.java
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;details>
&lt;summary>Hint Task 3&lt;/summary>
&lt;p>If you&amp;rsquo;re stuck take a look at the first section 6.4!&lt;/p>
&lt;/details>
&lt;details>
&lt;summary>Solution Task 3&lt;/summary>
&lt;p>Use the &lt;a href="https://start.spring.io/">spring initializr&lt;/a> or the CLI approach:&lt;/p>
&lt;p>With&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s">&lt;span style="color:#f92672">$&lt;/span> curl &lt;span style="color:#f92672">-&lt;/span>G https&lt;span style="color:#f92672">://&lt;/span>start.spring.io&lt;span style="color:#f92672">/&lt;/span>starter.zip \
&lt;span style="color:#f92672">-&lt;/span>d dependencies&lt;span style="color:#f92672">=&lt;/span>web \
&lt;span style="color:#f92672">-&lt;/span>d javaVersion&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">11&lt;/span> \
&lt;span style="color:#f92672">-&lt;/span>d groupId&lt;span style="color:#f92672">=&lt;/span>ch.itninja \
&lt;span style="color:#f92672">-&lt;/span>d artifactId&lt;span style="color:#f92672">=&lt;/span>helloworld \
&lt;span style="color:#f92672">-&lt;/span>d baseDir&lt;span style="color:#f92672">=&lt;/span>helloworld \
&lt;span style="color:#f92672">-&lt;/span>o helloworld.zip
&lt;span style="color:#f92672">$&lt;/span> unzip helloworld.zip
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s">&lt;span style="color:#f92672">$&lt;/span> curl &lt;span style="color:#f92672">-&lt;/span>G https&lt;span style="color:#f92672">://&lt;/span>start.spring.io&lt;span style="color:#f92672">/&lt;/span>starter.tgz \
&lt;span style="color:#f92672">-&lt;/span>d dependencies&lt;span style="color:#f92672">=&lt;/span>web \
&lt;span style="color:#f92672">-&lt;/span>d javaVersion&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">11&lt;/span> \
&lt;span style="color:#f92672">-&lt;/span>d groupId&lt;span style="color:#f92672">=&lt;/span>ch.itninja \
&lt;span style="color:#f92672">-&lt;/span>d artifactId&lt;span style="color:#f92672">=&lt;/span>helloworld \
&lt;span style="color:#f92672">-&lt;/span>d baseDir&lt;span style="color:#f92672">=&lt;/span>helloworld \
&lt;span style="color:#f92672">-&lt;/span>o helloworld.tar
&lt;span style="color:#f92672">$&lt;/span> tar &lt;span style="color:#f92672">-&lt;/span>xfv helloworld.tar
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;h5 id="6444-task-4-database-entity">6.4.4.4: Task 4: Database entity&lt;/h5>
&lt;p>To work with a database we need some additional dependencies to the project.&lt;/p>
&lt;p>Let us extend the dependency list in the &lt;code>pom.xml&lt;/code> and add the following entries:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-xml" data-lang="xml"> &lt;span style="color:#f92672">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!-- COPY FROM HERE --&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-data-jpa&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;version&amp;gt;&lt;/span>RELEASE&lt;span style="color:#f92672">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;scope&amp;gt;&lt;/span>compile&lt;span style="color:#f92672">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>com.h2database&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>h2&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;span style="color:#75715e">&amp;lt;!-- --&amp;gt;&lt;/span>
&lt;span style="color:#f92672">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>These two dependencies allow us to start up a h2 database and add the support for JPA (Java Persistence API) to our application.&lt;/p>
&lt;p>Before we start implementing our services and data models, we need to configure the database connections. Copy the following into your &lt;code>application.properties&lt;/code> file in your project:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-s" data-lang="s">
spring.datasource.url&lt;span style="color:#f92672">=&lt;/span>jdbc&lt;span style="color:#f92672">:&lt;/span>h2&lt;span style="color:#f92672">:&lt;/span>mem&lt;span style="color:#f92672">:&lt;/span>testdb
spring.datasource.driverClassName&lt;span style="color:#f92672">=&lt;/span>org.h2.Driver
spring.datasource.username&lt;span style="color:#f92672">=&lt;/span>sa
spring.datasource.password&lt;span style="color:#f92672">=&lt;/span>
spring.jpa.database&lt;span style="color:#f92672">-&lt;/span>platform&lt;span style="color:#f92672">=&lt;/span>org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl&lt;span style="color:#f92672">-&lt;/span>auto&lt;span style="color:#f92672">=&lt;/span>update
spring.h2.console.enabled&lt;span style="color:#f92672">=&lt;/span>true
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>We first create a simple &lt;code>Order&lt;/code> class in the &lt;code>order.entity&lt;/code> package. The &lt;code>Order&lt;/code> class should have the following properties:&lt;/p>
&lt;ul>
&lt;li>id&lt;/li>
&lt;li>name&lt;/li>
&lt;li>address&lt;/li>
&lt;li>amount&lt;/li>
&lt;li>date of order&lt;/li>
&lt;/ul>
&lt;p>If you need a hint, here you go!&lt;/p>
&lt;details>
&lt;summary>Hint Task 4&lt;/summary>
&lt;p>If you&amp;rsquo;re stuck take a look at the first section 6.3.3. The other properties can be represented by the following data types:&lt;/p>
&lt;ul>
&lt;li>name: String&lt;/li>
&lt;li>address: String&lt;/li>
&lt;li>amount: Double&lt;/li>
&lt;li>dataOfOrder: Instant&lt;/li>
&lt;/ul>
&lt;p>The new fields do not need any annotations!&lt;/p>
&lt;/details>
&lt;p>If you are completely overwhelmed try the following solution:&lt;/p>
&lt;details>
&lt;summary>Solution Task 4&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#f92672">import&lt;/span> javax.persistence.Entity&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> javax.persistence.GeneratedValue&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> javax.persistence.Id&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> javax.persistence.Table&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> java.time.Instant&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@Entity&lt;/span>
&lt;span style="color:#a6e22e">@Table&lt;/span>&lt;span style="color:#f92672">(&lt;/span>name &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;orders&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Order&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#a6e22e">@Id&lt;/span>
&lt;span style="color:#a6e22e">@GeneratedValue&lt;/span>
Long id&lt;span style="color:#f92672">;&lt;/span>
String name&lt;span style="color:#f92672">;&lt;/span>
String address&lt;span style="color:#f92672">;&lt;/span>
Double amount&lt;span style="color:#f92672">;&lt;/span>
Instant dateOfOrder&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Long &lt;span style="color:#a6e22e">getId&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> id&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setId&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Long id&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">=&lt;/span> id&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String name&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getAddress&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> address&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setAddress&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String address&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">address&lt;/span> &lt;span style="color:#f92672">=&lt;/span> address&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Double &lt;span style="color:#a6e22e">getAmount&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> amount&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setAmount&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Double amount&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">amount&lt;/span> &lt;span style="color:#f92672">=&lt;/span> amount&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Instant &lt;span style="color:#a6e22e">getDateOfOrder&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> dateOfOrder&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setDateOfOrder&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Instant dateOfOrder&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">dateOfOrder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> dateOfOrder&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;p>Try to start up your application! If the application starts normally, you should be alright and ready to continue!&lt;/p>
&lt;h5 id="6445-task-5-database-repository">6.4.4.5: Task 5: Database repository&lt;/h5>
&lt;p>So far we have a web application and a data representation for our orders. To do anything with our data representation in our database, we need to access it. This is what the repository will be for. Create the interface &lt;code>OrderRepository&lt;/code> in the &lt;code>order.entity&lt;/code> package similar to the example in 6.3.3!&lt;/p>
&lt;details>
&lt;summary>Solution Task 5&lt;/summary>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#f92672">import&lt;/span> org.springframework.data.repository.CrudRepository&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> org.springframework.stereotype.Repository&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@Repository&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">OrderRepository&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> CrudRepository&lt;span style="color:#f92672">&amp;lt;&lt;/span>Order&lt;span style="color:#f92672">,&lt;/span> Long&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/details>
&lt;h5 id="6446-task-6-control--business-logic-layer">6.4.4.6: Task 6: Control / business logic layer&lt;/h5>
&lt;p>In this task you will create a service bean to do the basic CRUD operations on the order entity. Take a look at the section 6.3.2 and implement an &lt;code>OrderService&lt;/code> on your own.&lt;/p>
&lt;p>To be continued&amp;hellip;&lt;/p></description></item><item><title>Docs: HTML5 Semantic Tags</title><link>/docs/web/html_css/07_html_5_semantic_tags/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/07_html_5_semantic_tags/</guid><description>
&lt;h2 id="nicht-semantische-tags">Nicht-semantische Tags&lt;/h2>
&lt;p>Oft kommst du in die Situation, wo du mehrere Elemente in einem anderen Element gruppieren willst. In den aller meisten Fällen verwendet man dafür &lt;code>div&lt;/code>-Elemente.&lt;/p>
&lt;p>&lt;code>&amp;lt;div&amp;gt;&lt;/code>-Tags werden oft als Container für HTML-Elemente verwendet. Dieser Container kann dann mit CSS gestylt oder mit JavaScript manipuliert werden. Probiere das nächste Beispiel einmal aus, ohne das Styling zu verstehen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">Just a Text
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Hello&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;This is my amazing website!&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
Other Text
&amp;lt;&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
.&lt;span style="color:#a6e22e">content&lt;/span> {
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">orange&lt;/span>;
}
&amp;lt;/&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das ist ein typisches Beispiel für die Verwendung von &lt;code>&amp;lt;div&amp;gt;&lt;/code>s.&lt;/p>
&lt;p>Möchtest du hingegen ein paar Wörter (aber nicht einen ganzen Block/Paragrafen) speziell stylen, wird oft ein &lt;code>&amp;lt;span&amp;gt;&lt;/code>-Element verwendet. Möchtest du z.B. das Datum in einem Text hervorheben, dann könnte das z.B. so aussehen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">Das nächste Event findet am &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;date&amp;#34;&lt;/span>&amp;gt;20. Mai&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; statt.
&amp;lt;&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
.&lt;span style="color:#a6e22e">date&lt;/span> {
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">1.25&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">font-weight&lt;/span>: &lt;span style="color:#66d9ef">bold&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">blue&lt;/span>;
}
&amp;lt;/&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In den beiden oberen Beispielen wurde bei den Tags eine Klasse angegeben. Der Sinn dahinter war, dass wir alle Elemente mit der gleichen Klasse gleich stylen können.&lt;/p>
&lt;h2 id="semantische-tags">Semantische Tags&lt;/h2>
&lt;p>Mit HTML5 wurden viele neue semantische Tags eingeführt, die in vielen Fällen &lt;code>&amp;lt;div&amp;gt;&lt;/code>s und &lt;code>&amp;lt;span&amp;gt;&lt;/code>s ersetzen.&lt;/p>
&lt;p>Das &amp;ldquo;Zeit&amp;rdquo;-&lt;code>&amp;lt;span&amp;gt;&lt;/code>-Beispiel könnte z.B. folgendermassen vereinfacht werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">Das nächste Event findet am &amp;lt;&lt;span style="color:#f92672">time&lt;/span>&amp;gt;20. Mai&amp;lt;/&lt;span style="color:#f92672">time&lt;/span>&amp;gt; statt.
&amp;lt;&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
&lt;span style="color:#f92672">time&lt;/span> {
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">1.25&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">font-weight&lt;/span>: &lt;span style="color:#66d9ef">bold&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">blue&lt;/span>;
}
&amp;lt;/&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In HTML5 wurden viele neue Tags eingeführt, die die Struktur von HTML-Dateien genauer beschreiben. Oft hat eine Website eine ähnliche Struktur wie die folgende:&lt;/p>
&lt;p>&lt;img src="https://www.w3schools.com/html/img_sem_elements.gif" alt="semanticTags" title="Semantic Tags, die es seit HTML5 gibt">&lt;/p>
&lt;p>Der &lt;code>&amp;lt;header&amp;gt;&lt;/code> ist meistens das, was auf einer Website zuoberst ist. Dieser enthält oft den Titel der Applikation, das Logo der Firma und evtl. noch eine &lt;code>&amp;lt;nav&amp;gt;&lt;/code>igation (also Links wie für &amp;lsquo;Home&amp;rsquo;, &amp;lsquo;About&amp;rsquo;, &amp;hellip;).&lt;/p>
&lt;p>Das Gegenteil des &lt;code>&amp;lt;header&amp;gt;&lt;/code>s ist der &lt;code>&amp;lt;footer&amp;gt;&lt;/code>. Der Footer befindet sich oft am Ende der Website (also ganz unten) und enthält oft das Copyright sowie weiterführende Links wie z.B. solche zu den Datenschutzbestimmungen.&lt;/p>
&lt;p>Nicht auf diesem Bild, aber trotzdem relevant: Oft befindet sich der Hauptteil einer Website (also nicht der Header, Footer, Werbung) in einem &lt;code>&amp;lt;main&amp;gt;&lt;/code>-Element. Wenn die Website einen Leseartikel beschreibt, dann wäre der Text inkl. Überschriften dort drin.&lt;/p>
&lt;p>Einzelne Abschnitte (z.B. Unterkapitel inkl. Überschriften) werden oft in &lt;code>&amp;lt;section&amp;gt;&lt;/code>s gepackt und sind in diesem Beispiel eine gute Alternative zu &lt;code>&amp;lt;div&amp;gt;&lt;/code>s.&lt;/p>
&lt;p>Was genau ein &lt;code>&amp;lt;article&amp;gt;&lt;/code> ist, würde den Rahmen hier definitiv sprengen. Auf jeden Fall beschreibt ein &lt;code>article&lt;/code> ein von der aktuellen Website unabhängiges und in sich abgeschlossenes Element. Ein &lt;code>article&lt;/code>-Element könnte man also einfach von der aktuellen Seite ausschneiden und in eine andere kopieren.&lt;/p>
&lt;p>Bitte schaue dir diese Dokumentation zu HTML Semantic Tags an. Dort sind auch &lt;code>&amp;lt;article&amp;gt;&lt;/code>s genauer beschrieben: &lt;a href="https://www.w3schools.com/html/html5_semantic_elements.asp">https://www.w3schools.com/html/html5_semantic_elements.asp&lt;/a>&lt;/p>
&lt;p>Mit semantischen Tags könnte man z.B. das&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;header&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;The Header&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;nav-links&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Nav:&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Home&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;News&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;About&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;content&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;The Article - BANANA TREE&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;section-1&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Section 1&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;A banana tree is a must if you wish to bring a sizeable touch of the tropics into your home.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;section-2&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Section 2&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;There are some 400 species worldwide.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;move-to-the-right&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;A Aside - Why are bananas bent?&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
Gravity causes the fruit to hang down.
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;The text is from: &amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.thejoyofplants.co.uk/banana-tree&amp;#34;&lt;/span>&amp;gt;The Joy of Plants.co.uk&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;end-of-the-page&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;The Footer&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Contact&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Impressum&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>in das vereinfachen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">header&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;The Header&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">nav&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Nav:&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Home&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;News&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;About&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">nav&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">header&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">main&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">article&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;The Article - BANANA TREE&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">section&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Section 1&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;A banana tree is a must if you wish to bring a sizeable touch of the tropics into your home.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">section&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">section&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Section 2&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;There are some 400 species worldwide.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">aside&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;A Aside - Why are bananas bent?&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
Gravity causes the fruit to hang down.
&amp;lt;/&lt;span style="color:#f92672">aside&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">section&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;The text is from: &amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.thejoyofplants.co.uk/banana-tree&amp;#34;&lt;/span>&amp;gt;The Joy of Plants.co.uk&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">article&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">main&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">footer&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;The Footer&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Contact&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Impressum&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">footer&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="auftrag-1">Auftrag 1&lt;/h3>
&lt;p>Suche auf dieser Website mit Hilfe der Entwicklertools ([F12]-Taste) den &lt;code>&amp;lt;header&amp;gt;&lt;/code>, eine &lt;code>&amp;lt;na&amp;gt;&lt;/code> und den &lt;code>&amp;lt;footer&amp;gt;&lt;/code>.&lt;/p>
&lt;h2 id="auftrag-2">Auftrag 2&lt;/h2>
&lt;p>Suche einen spanneden Text (z.B. aus einer alten Word-Datei, Wikipedia-Artikel, Anleitung). Dieser Text sollte mehrere Überschriften und Bilder besitzen. Setze diesen Text mit HTML um und versuche bereits, viele Semantic Tags zu verwenden. Zeige dein Resultat einem Coach.&lt;/p></description></item><item><title>Docs: Interceptors</title><link>/docs/web/angular/04_6_interceptors/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_6_interceptors/</guid><description>
&lt;p>Dies ist sehr praktisch wenn wir Authentifizierungs Token konfigurieren, Protokolle der Requests erstellen und benutzerdefinierte Header hinzufügen wollen.&lt;/p>
&lt;p>&lt;img src="/images/angular/interceptor.PNG" alt="Interceptor">&lt;/p>
&lt;p>Um einen Interceptor zu implementieren, müssen wir eine Klasse erstellen, die die &amp;ldquo;Intercept&amp;rdquo;-Methode des &amp;ldquo;HttpInterceptor&amp;rdquo;-Interface implementiert.&lt;/p>
&lt;p>Der folgende Interceptor ist sehr simpel gehalten. Er gibt einfach jeden Request in der Konsole aus:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">@Injectable&lt;/span>()
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">RequestLogInterceptor&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">HttpInterceptor&lt;/span> {
&lt;span style="color:#a6e22e">intercept&lt;/span>(
&lt;span style="color:#a6e22e">request&lt;/span>: &lt;span style="color:#66d9ef">HttpRequest&lt;/span>&amp;lt;&lt;span style="color:#f92672">any&lt;/span>&amp;gt;, &lt;span style="color:#a6e22e">next&lt;/span>: &lt;span style="color:#66d9ef">HttpHandler&lt;/span>
) &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">HttpEvent&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">any&lt;/span>&amp;gt;&lt;span style="color:#f92672">&amp;gt;&lt;/span> {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">request&lt;/span>.&lt;span style="color:#a6e22e">url&lt;/span>);
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">handle&lt;/span>(&lt;span style="color:#a6e22e">request&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Intercept-Methode wandelt jeden Request in Observables um, die später durch Aufrufen von next.handle() aufgelöst werden.
Für unsere Implementierung ist es also ganz einfach: Wir nehmen den Request entgegen, protokollieren den URL und rufen next.handle() auf, um den Request an den Server zu senden, ohne Änderungen daran vorzunehmen.&lt;/p>
&lt;h2 id="interceptors-providen">Interceptors Providen&lt;/h2>
&lt;p>Da Interceptors Dependencies des HttpClient sind, müssen wir sie den Providern im selben Injektor hinzufügen, der den HttpClient bereitstellt.
Angenommen, wir haben unser HttpClientModule in das AppModule importiert, müssen wir die Interceptors auch dort zu den Providern hinzufügen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HTTP_INTERCEPTORS&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/common/http&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">RequestLogInterceptor&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;...&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">HttpClientModule&lt;/span>,
...
],
&lt;span style="color:#a6e22e">providers&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
{
&lt;span style="color:#a6e22e">provide&lt;/span>: &lt;span style="color:#66d9ef">HTTP_INTERCEPTORS&lt;/span>,
&lt;span style="color:#a6e22e">useClass&lt;/span>: &lt;span style="color:#66d9ef">RequestLogInterceptor&lt;/span>,
&lt;span style="color:#a6e22e">mutli&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
},
...
],
...
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppModule&lt;/span>{ }
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Option &lt;code>multi: true&lt;/code> teilt Angular mit, dass Wir mehrere Interceptors bereitstellen, und ist erforderlich, wenn dies das Szenario ist.
In unserem Beispielszenario wäre dies nicht erforderlich, da wir nur einen Interceptor implementiert haben.&lt;/p>
&lt;p>Es ist auch wichtig zu berücksichtigen, dass Angular Interceptors in der Reihenfolge anwendet, in der sie bei den Providers des Moduls angegeben sind.&lt;/p></description></item><item><title>Docs: Java Collections</title><link>/docs/java/java-collections/java-collections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/java/java-collections/java-collections/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich kann erklären, was Collections sind.&lt;/li>
&lt;li>Ich kenne grob den Aufbau des Collection Frameworks.&lt;/li>
&lt;li>Ich kenne die wichtigsten Collection-Interfaces und ihre Merkmale: Lists, Sets, Queues, Maps.&lt;/li>
&lt;li>Ich kenne die wichtigsten Collections und ihre Merkmale: ArrayLists, &amp;hellip;&lt;/li>
&lt;li>Ich kenne die wichtigsten Algorithmen und Methoden zu den Collections.&lt;/li>
&lt;li>Ich weiss, wann und wofür ich welche Collections benutzen kann.&lt;/li>
&lt;/ul>
&lt;h4 id="änderungskontrolle">Änderungskontrolle&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Autor&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Datum&lt;/th>
&lt;th>Änderungen&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Berivan Kürekci&lt;/td>
&lt;td>0.1&lt;/td>
&lt;td>&lt;/td>
&lt;td>* Initiale Version erstellt&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>0.2&lt;/td>
&lt;td>&lt;/td>
&lt;td>* Initiale Version abgeschlossen&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="voraussetzungen">Voraussetzungen&lt;/h4>
&lt;ul>
&lt;li>Gute Grundlagenkenntnisse von Java-Anwendungen&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="einleitung">Einleitung&lt;/h2>
&lt;p>Beim Programmieren müssen wir oft Daten speichern beziehungsweise Informationen verwalten, um gewisse Probleme lösen zu
können. In diesem Modul werden wir das Java Collection Framework anschauen, weil dieses Framework uns die Werkzeuge zum
effizienten Verwalten von Informationen liefert.&lt;/p>
&lt;p>Eine &lt;em>Collection&lt;/em> ist ein Objekt, dass eine Sammlung von Objekten darstellt, d.h. mehrere Elemente zu einer Einheit
zusammenfasst. In der Regel enthält eine Collection Datenelemente, die zusammen eine natürliche Gruppe bilden, wie z.B.
eine Fussballmannschaft, die eine &amp;ldquo;Sammlung&amp;rdquo; von Fussballspielern ist, d.h. Fussballspieler enthält. Collections bieten
uns im Allgemeinen die Möglichkeit neue Elemente hinzuzufügen, Elemente zu löschen und sonst die Elemente zu verwalten.&lt;/p>
&lt;p>Ein bekanntes Beispiel für eine Collection ist die ArrayList Klasse, wobei eine ArrayList eine Liste von Objekten
darstellt, welche skalierbar ist. Die ArrayList Klasse liefert uns beispielsweise die Methode &lt;code>add&lt;/code>, mit welcher
Elemente an das Ende einer Liste angefügt werden kann:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> farben&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;();&lt;/span>
farben&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;rot&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
farben&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;blau&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
farben&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;gelb&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
farben&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;orange&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Oder sie liefert uns die Methode &lt;code>remove&lt;/code>, welche Elemente aus der Liste entfernt:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> farben&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;();&lt;/span>
farben&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;rot&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
farben&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;blau&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
farben&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;gelb&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
farben&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">remove&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;blau&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wir werden die ArrayList Klasse später noch genauer anschauen.&lt;/p>
&lt;p>Das &lt;em>Java Collection Framework&lt;/em> ist eine Menge von Interfaces und Klassen, die allgemein wiederverwendbare
Collection-Datenstrukturen liefern. Es bietet uns also sowohl Interfaces, die Collection-Typen definieren, als auch
Klassen, die diese implementieren an. Obwohl es als Framework bezeichnet wird, funktioniert es im Grunde wie eine
Library.&lt;/p>
&lt;p>Das Java Collections Frameworks, stellt für uns Hochleistungsimplementierungen von Datenstrukturen und Algorithmen
bereit, um Sammlungen von Objekten beliebiger Datentypen darzustellen. Da wir diese Funktionalität nicht immer selber
programmieren müssen, reduziert sich für uns der Programmieraufwand markant.&lt;/p>
&lt;p>Das Java Collection Framework befindet sich im Paket java.util.&lt;/p>
&lt;p>Wir haben die ArrayList Klasse (java.util.ArrayList) als Beispiel für eine Collection gesehen. Die ArrayList Klasse
repräsentiert eine Collection vom Typ &lt;em>List&lt;/em> (implementiert also das Interface java.util.List) und wird mithilfe von
zugrunde liegenden Arrays implementiert, deshalb auch der Name ArrayList. Es gibt aber auch andere Klassen, welche
Collections vom Typ List darstellen: Wir werden später einige davon noch sehen.&lt;/p>
&lt;p>&lt;img src="../../java-collections/list0.png" alt="list0">&lt;/p>
&lt;h2 id="theorie">Theorie&lt;/h2>
&lt;hr>
&lt;p>Das Java Collection Framework ist eine einheitliche Architektur zur Darstellung und Bearbeitung von Collections welche
folgendes enthält:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Interfaces: Dies sind abstrakte Datentypen, welche verschiedene Collections darstellen. Mithilfe von Interfaces können
Collections unabhängig von den Details ihrer Darstellung bearbeitet werden. Die Interfaces bilden in Java die
Hierarchie aller Collections.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Implementierungen/ Klassen: Dies sind die konkreten Implementierungen der Collection-Interfaces. Im Grunde handelt es
sich um wiederverwendbare Datenstrukturen, mit konkreten Implementierungen.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Algorithmen/ Methoden: Dies sind die Methoden, die nützliche Algorithmen, wie z. B. Hinzufügen, Löschen, Suchen und
Sortieren, von Objekten in Collections durchführen. Viele Methoden und Algorithmen sind für verschiedene Arten der
Collections wiederverwendbar.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../../java-collections/hierarchy3.png" alt="hierarchy3">&lt;/p>
&lt;p>Die Interfaces in der Abbildung (Collections, Set, List, Queue, Deque, Map &amp;hellip;)
bilden die Grundlage des Collection Frameworks. Durch diese grundlegenden Interfaces bildet sich eine Hierarchie
innerhalb des Collection Frameworks.&lt;/p>
&lt;p>Beispiel:&lt;/p>
&lt;ul>
&lt;li>Sets sind spezielle Typen von Collections. SortedSets sind spezielle Typen von Sets.&lt;/li>
&lt;li>Lists sind spezielle Typen von Collections. ArrayLists sind spezielle Typen von Lists.&lt;/li>
&lt;/ul>
&lt;p>In der Abbildung sieht man zu dem, dass das Collection Framework aus zwei verschiedenen Teilen besteht:
Zum einen die Collections und zum anderen die Maps. Maps stellen somit keine &amp;ldquo;echten&amp;rdquo; Collections dar. Maps sind
trotzdem Datenstrukturen zur Darstellung von Sammlungen von Objekten als eine Einheit.&lt;/p>
&lt;p>Im Folgenden werden wir die wichtigsten Collections, die Unterschiede und Gemeinsamkeiten zueinander diskutieren&amp;hellip;&lt;/p>
&lt;hr>
&lt;h2 id="javautilcollections">java.util.Collections&lt;/h2>
&lt;p>Das Collection-Interface ist in der Hierarchie zu oberst. Collections liefern Methoden, um Elemente hinzuzufügen, um
Elemente zu löschen und zur weiteren Verwaltung der Elemente.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Collection&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> Iterable&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das &lt;code>E&lt;/code> in &lt;code>Collection&amp;lt;E&amp;gt;&lt;/code> bedeutet, dass die Elemente in der Collection den Typ &lt;em>E&lt;/em> haben.
&lt;em>E&lt;/em> steht hierbei für &lt;em>Element&lt;/em>, was ein generischer Typ repräsentieren soll. Dieser generische Typ der Collection wird
beim Erstellen der Collection bestimmt.&lt;/p>
&lt;p>Beispiele generischer Typ:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> strings &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;();&lt;/span>
ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> integers &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="einige-methoden-vom-interface-javautilcollections">Einige Methoden vom Interface java.util.Collections&lt;/h3>
&lt;p>Einige Methoden des Collection-Interfaces sind im Folgenden aufgelistet, wobei die Auflistung der Methoden nicht
vollständig ist.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Gibt die Anzahl der Elemente in dieser Collection zurück.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Gibt true zurück, wenn diese Collection keine Elemente enthält.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">isEmpty&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Gibt true zurück, wenn diese Collection das angegebene Element enthält.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">contains&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object o&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Stellt sicher, dass diese Sammlung das angegebene Element enthält -
&lt;/span>&lt;span style="color:#75715e"> * Fügt das Element zur Collection hinzu.
&lt;/span>&lt;span style="color:#75715e"> * Gibt true zurück, wenn sich diese Collection durch den Aufruf geändert hat.
&lt;/span>&lt;span style="color:#75715e"> * (Gibt false zurück, wenn diese Collection keine Duplikate zulässt und das angegebene Element bereits enthält.)
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>E e&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Entfernt das angegebene Element aus dieser Collection.
&lt;/span>&lt;span style="color:#75715e"> * Gibt true zurück, wenn diese Sammlung das angegebene Element enthielt
&lt;/span>&lt;span style="color:#75715e"> * (oder wenn sich die Sammlung infolge des Aufrufs geändert hat).
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">remove&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object o&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Entfernt alle Elemente aus dieser Collection.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">clear&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Jede konkrete Collection-Klasse implementiert diese Methoden auf unterschiedliche Art und Weisen, wobei diese
Implementierungen den jeweiligen Datenstrukturen abgestimmt sind.&lt;/p>
&lt;h2 id="javautillist">java.util.List&lt;/h2>
&lt;p>Listen sind geordnete Collections, denn sie enthalten beliebige Objekte in einer bestimmten Reihenfolge. In Listen
werden eine Menge von Elemente (genauer genommen Referenzen auf Objekte)
abgespeichert, wobei die Menge geordnet ist, da jedes Element an einer bestimmten Position zu finden ist:&lt;/p>
&lt;p>&lt;img src="../../java-collections/list1.png" alt="list1">&lt;/p>
&lt;p>Beachte, dass wir bei den Listen, die Indexierung der Positionen bei 0 beginnt, genauso wie bei dem primitiven Datentyp
Array.&lt;/p>
&lt;p>Listen haben eine dynamische Grösse, d.h. die Grösse der Liste muss bei der Erstellung nicht bekannt sein und die Anzahl
der enthaltenen Elemente kann sich während der Laufzeit ändern. Daher ist es möglich fortlaufend Elemente zur Liste
hinzuzufügen oder aus der Liste zu entfernen. Hierbei entstehen nie Lücken:
Fügt man ein Element an einer bestimmten Position zur Liste hinzu, dann rutschen alle nachfolgenden Elemente eine
Position nach. Entfernt man ein Element an einer bestimmten Position, so rutschen alle nachfolgen Elemente eine Position
nach oben.&lt;/p>
&lt;p>Man kann auf Elemente über ihren ganzzahligen Index (Position in der Liste) zugreifen und nach Elementen in der Liste
suchen.&lt;/p>
&lt;p>&lt;img src="../../java-collections/list2.png" alt="list2">&lt;/p>
&lt;p>Ein Element aus einer Liste entfernen:&lt;/p>
&lt;p>&lt;img src="../../java-collections/list3.png" alt="list3">&lt;/p>
&lt;p>Wie zu Beginn erwähnt, enthalten Lists Referenzen auf Objekte. Deshalb ist es nicht möglich Listen zu erstellen, welche
primitive Datentypen als Elemente enthalten (int, double, boolean, char, &amp;hellip;). Dafür müssen die sogenannten
Wrapper-Klassen verwendet werden. Wrapper-Klassen bieten eine Möglichkeit, primitive Datentypen (int, double, boolean,
char, &amp;hellip;) als Objekte zu verwenden:
java.lang.Integer, java.lang.Double, java.lang.Boolean, java.lang.Character,..&lt;/p>
&lt;p>Schauen wir uns die folgenden Beispiele an, wo wir einer Liste mit Elementen vom Typ Integer das Element 3 hinzufügen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> integerList &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
integerList&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Integer&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">valueOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>3&lt;span style="color:#f92672">));&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hier fügen wir der Liste das Integer-Objekt 3 hinzu, was gemäss der obigen Aussage korrekt ist.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">List&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> integerList &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
integerList&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>3&lt;span style="color:#f92672">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hier fügen wir der Liste den int-Wert 3 als primitiven Datentyp hinzu.
Obwohl wir den int-Wert 3 als primitiver Datentypen und nicht als Integer-Objekte zur Liste
&lt;em>integerList&lt;/em> hinzufügen, kompiliert dieser Code genau so ohne Fehler.
&lt;em>integerList&lt;/em> ist jedoch eine Liste von Integer-Objekten und nicht eine Liste von int-Werten,
warum wir dann kein Fehler ausgegeben beim Kompilieren dieses Codes gemäss der obigen Aussage?&lt;/p>
&lt;p>Der Copmiler konvertiert den int-Wert zu einem Integer-Objekt und fügt dieses dann zur Liste &lt;em>integerList&lt;/em> hinzu.
Diese Konvertierung nennt man Autoboxing.
Autoboxing ist die automatische Konvertierung zwischen den primitiven Datentypen zu Objekten ihrer entsprechenden Wrapper-Klassen, die der Java Compiler durchführt
(beispielsweise int zu Integer, double zu Double, ect.).
Wenn die Konvertierung in die andere Richtung erfolgt, nennt man dies Unboxing.&lt;/p>
&lt;p>Somit ist es nicht mehr nötig, dass wir dieses Autoboxing, wie im ersten Beispiel selber durchführen müssen.&lt;/p>
&lt;h3 id="einige-methoden-vom-interface-javautillist">Einige Methoden vom Interface java.util.List&lt;/h3>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">60
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">61
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">62
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt die Anzahl der Elemente in dieser Liste zurück.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt true zurück, wenn diese Liste keine Elemente enthält.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">isEmpty&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt true zurück, wenn diese Liste das angegebene Element enthält.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">contains&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object o&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element an der angegebenen Position in dieser Liste zurück.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> index&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Ersetzt das Element an der angegebenen Position in dieser Liste durch das angegebene Element.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">set&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> index&lt;span style="color:#f92672">,&lt;/span>E element&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt den Index des ersten Auftretens des angegebenen Elements in dieser Liste zurück,
&lt;/span>&lt;span style="color:#75715e"> * oder -1, wenn diese Liste das Element nicht enthält.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">indexOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object o&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Hängt das angegebene Element an das Ende der Liste an
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>E e&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Fügt das angegebene Element an der angegebenen Position in dieser Liste ein.
&lt;/span>&lt;span style="color:#75715e"> * Verschiebt das Element, das sich derzeit an dieser Position befindet (falls vorhanden),
&lt;/span>&lt;span style="color:#75715e"> * und alle nachfolgenden Elemente.
&lt;/span>&lt;span style="color:#75715e">*/&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> index&lt;span style="color:#f92672">,&lt;/span>E element&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Entfernt das erste Vorkommen des angegebenen Elements aus dieser Liste,
&lt;/span>&lt;span style="color:#75715e"> * sofern es vorhanden ist. Wenn diese Liste das Element nicht enthält,
&lt;/span>&lt;span style="color:#75715e"> * bleibt sie unverändert.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">remove&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object o&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Entfernt das Element an der angegebenen Position in dieser Liste.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">remove&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> index&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">/*&lt;/span>
&lt;span style="color:#f92672">*&lt;/span> Entfernt alle Elemente aus dieser Liste&lt;span style="color:#f92672">.&lt;/span>
&lt;span style="color:#f92672">/*&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">clear&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das Interface java.util.List im Collection Framework ist der Datentyp der Listen, wobei in der abstrakten Klasse
java.util.AbstractList die grundlegenden Funktionalitäten implementiert sind, sodass diese den verschiedenen konkreten
Listen-Implementierungen weiter geerbt werden können.&lt;/p>
&lt;h2 id="javautilarraylist">java.util.ArrayList&lt;/h2>
&lt;p>java.util.ArrayList erbt von der abstrakten Klasse java.util.AbstractList und liefert eine konkrete Implementierung für
das Interface java.util.List. Die ArrayList Klasse implementiert alle Methoden des Interface java.util.List. Der
Implementierung der ArrayList Klasse liegen Arrays zugrunde, weshalb diese konkrete Klasse auch &lt;em>Array&lt;/em>List heisst.
Die Klasse ArrayList enthält also ein normales Array. Wenn ein Element hinzugefügt wird, wird es in dieses Array eingefügt.
Wenn das Array nicht groß genug ist, wird ein neues, größeres Array erstellt, um das alte zu ersetzen, d.h. die Kapazität
des Arrays wird fortlaufend angepasst.&lt;/p>
&lt;h3 id="einige-methoden-der-klasse-javautilarraylist">Einige Methoden der Klasse java.util.ArrayList&lt;/h3>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Konstruktor: Erstellt eine initial leere Liste
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Appends the specified element to the end of this list.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>E e&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Fügt das angegebene Element an der angegebenen Position in diese Liste ein.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> index&lt;span style="color:#f92672">,&lt;/span>E element&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Entfernt alle Elemente aus dieser Liste.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">clear&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Entfernt das Element an der angegebenen Position in dieser Liste.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> E &lt;span style="color:#a6e22e">remove&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> index&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element an der angegebenen Position in dieser Liste zurück.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> E &lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> index&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt den Index des ersten Auftretens des angegebenen Elements in dieser Liste zurück,
&lt;/span>&lt;span style="color:#75715e"> * oder -1, wenn diese Liste das Element nicht enthält.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">indexOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object o&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt die Anzahl der Elemente in dieser Liste zurück.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt true zurück, wenn diese Liste keine Elemente enthält.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">isEmpty&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt true zurück, wenn diese Liste das angegebene Element enthält.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">contains&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object o&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="indexoutofboundsexception">IndexOutOfBoundsException&lt;/h3>
&lt;p>Die IndexOutOfBoundException wird geworfen, wenn versucht wird auf einen ungültigen Index innerhalb einer Collection
zuzugreifen. Nehmen wir das Beispiel einer Liste mit der Grösse x. Dann sind die gültigen Indizes, um auf Elemente
zuzugreifen 0, 1, 2, &amp;hellip;, x-1 und die Indizes x, x+1, x+2, &amp;hellip; wären ungültig.&lt;/p>
&lt;p>Diese Exception kann bei den folgenden Methoden von oben geworfen werden:
(Diese Liste hier ist genau so nicht vollständig, wie die oben.)&lt;/p>
&lt;ul>
&lt;li>public void add(int index, E element)&lt;/li>
&lt;li>public E remove(int index);&lt;/li>
&lt;li>public E get(int index)&lt;/li>
&lt;/ul>
&lt;h3 id="beispiele">Beispiele&lt;/h3>
&lt;h4 id="beispiel-1">Beispiel 1&lt;/h4>
&lt;p>Im folgenden Beispiel erstellen wir zunächst eine leere ArrayList mit Elementen vom Typ String und wenden einige
einfache ArrayList Methoden an und sehen, wie diese funktionieren (Das Hinzufügen von Elementen, das Entfernen von
Elementen, &amp;hellip;),&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#f92672">import&lt;/span> java.util.ArrayList&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> java.util.List&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Pets&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// Creating an ArrayList of String
&lt;/span>&lt;span style="color:#75715e">&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> pets &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>pets&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: []
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// Adding new elements to the ArrayList
&lt;/span>&lt;span style="color:#75715e">&lt;/span> pets&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Cat&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
pets&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Hamster&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
pets&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Dog&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
pets&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Goldfish&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>pets&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: [Cat, Hamster, Dog, Goldfish]
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// Adding an element at a particular index in an ArrayList
&lt;/span>&lt;span style="color:#75715e">&lt;/span> pets&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>2&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Guinea pigs&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>pets&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: [Cat, Hamster, Guinea pigs, Dog, Goldfish]
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
pets&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">remove&lt;/span>&lt;span style="color:#f92672">(&lt;/span>2&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>pets&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: [Cat, Hamster, Dog, Goldfish]
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
pets&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">remove&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Dog&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>pets&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: [Cat, Hamster, Goldfish]
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
pets&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">clear&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>pets&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: []
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">[]
[Cat, Hamster, Dog, Goldfish]
[Cat, Hamster, Guinea pigs, Dog, Goldfish]
[Cat, Hamster, Dog, Goldfish]
[Cat, Hamster, Goldfish]
[]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="beispiel-2-indexoutofboundsexception">Beispiel 2 (IndexOutOfBoundsException)&lt;/h4>
&lt;p>Dieses Beispiel soll zeigen wie das Werfen einer &lt;code>java.lang.IndexOutOfBoundsException&lt;/code> verursacht werden könnte.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> java.util.ArrayList&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Hands&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> handlist &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
handlist&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;left hand&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
handlist&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;right hand&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>handlist&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>2&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// Exception in thread &amp;#34;main&amp;#34; java.lang.IndexOutOfBoundsException: Index 2 out of bounds for length 2
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Exception in thread &amp;#34;main&amp;#34; java.lang.IndexOutOfBoundsException: Index 2 out of bounds for length 2
at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
at java.base/java.util.Objects.checkIndex(Objects.java:372)
at java.base/java.util.ArrayList.get(ArrayList.java:459)
at ch.puzzle.arraylist.Hands.main(Hands.java:12)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="beispiel-3-iteration-for-schleife">Beispiel 3 (Iteration &lt;code>for&lt;/code>-Schleife)&lt;/h4>
&lt;p>Dieses Beispiel zeigt auf wie mit einer &lt;code>for&lt;/code>-Schleife über die Elemente einer Liste iteriert werden kann.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> java.util.ArrayList&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ListSum&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
ArrayList&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> numbers &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> ArrayList&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
numbers&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>1000&lt;span style="color:#f92672">);&lt;/span>
numbers&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>2500&lt;span style="color:#f92672">);&lt;/span>
numbers&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>3750&lt;span style="color:#f92672">);&lt;/span>
numbers&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>625&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> listSum &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Integer e &lt;span style="color:#f92672">:&lt;/span> numbers&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
listSum &lt;span style="color:#f92672">+=&lt;/span> e&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Die Summe der Elemente beträgt &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> listSum&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Die Summe der Elemente beträgt 7875
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="beispiel-4-iteration-while-schleife">Beispiel 4 (Iteration &lt;code>while&lt;/code>-Schleife)&lt;/h4>
&lt;p>Dieses Beispiel zeigt auf wie mit einer &lt;code>while&lt;/code>-Schleife über die Elemente einer Liste iteriert werden kann.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> java.util.Arrays&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> java.util.List&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">WhileLoopExample&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
String&lt;span style="color:#f92672">[]&lt;/span> namesArray &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Anna&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Simon&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Jan&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Nicole&amp;#34;&lt;/span>&lt;span style="color:#f92672">};&lt;/span>
&lt;span style="color:#75715e">// convert array to list
&lt;/span>&lt;span style="color:#75715e">&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> namesArrayList &lt;span style="color:#f92672">=&lt;/span> Arrays&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">asList&lt;/span>&lt;span style="color:#f92672">(&lt;/span>namesArray&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">&amp;lt;&lt;/span> namesArrayList&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>namesArrayList&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>i&lt;span style="color:#f92672">));&lt;/span>
i&lt;span style="color:#f92672">++;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Anna
Simon
Jan
Nicole
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="übungen">Übungen&lt;/h3>
&lt;h4 id="aufgabe-1">Aufgabe 1&lt;/h4>
&lt;p>Versuche eine eigene ArrayList-Klasse (&lt;code>MyArrayList&amp;lt;E&amp;gt;&lt;/code>) zu implementieren mithilfe von Arrays und verwende dabei keine
anderen Collections-Klassen.&lt;/p>
&lt;p>Die MyArrayList sollte eine dynamische Grösse haben. Da die Liste mithilfe von Arrays implementiert werden soll, muss
also in deiner Klasse die Kapazität der Liste sichergestellt werden.&lt;/p>
&lt;p>Implementiere die folgenden Methoden:&lt;/p>
&lt;ul>
&lt;li>&lt;code>void add(E e)&lt;/code>&lt;/li>
&lt;li>&lt;code>E get(int i)&lt;/code> (soll IndexOutOfBoundsException werfen)&lt;/li>
&lt;li>&lt;code>E remove(int i)&lt;/code> (soll IndexOutOfBoundsException werfen)&lt;/li>
&lt;li>&lt;code>int size()&lt;/code>&lt;/li>
&lt;li>&lt;code>boolean isEmpty()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Beachte, dass du die &lt;code>toString()&lt;/code> Methode anpasst, sodass die MyArrayList-Listen beim printen übersichtlich
dargestellt werden, wie im Beispiel oben: [Cat, Hamster, Dog, Goldfish]&lt;/p>
&lt;h4 id="aufgabe-2">Aufgabe 2&lt;/h4>
&lt;p>Erweitere deine MyArrayList Klasse. Implementiere zusätzlich die folgenden Methoden:&lt;/p>
&lt;ul>
&lt;li>&lt;code>void add(int index, E element)&lt;/code> (soll IndexOutOfBoundsException werfen)&lt;/li>
&lt;li>&lt;code>boolean contains(Object o)&lt;/code>&lt;/li>
&lt;li>&lt;code>int indexOf(Object o)&lt;/code>&lt;/li>
&lt;li>&lt;code>E set(int index, E element)&lt;/code>&lt;/li>
&lt;li>&lt;code>boolean equals(Object o)&lt;/code>&lt;/li>
&lt;li>&lt;code>boolean remove(Object o)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="aufgabe-3">Aufgabe 3&lt;/h4>
&lt;p>Erstelle ein Programm, welches ein Zeugnis bestehend aus Modulen und deren Schlussnoten generiert und in der Konsole
ausgibt.&lt;/p>
&lt;p>Dazu sollen die Klassen &lt;code>Modul&lt;/code> und &lt;code>LBV&lt;/code> (Prüfung) erstellt werden. Zur weiteren Hilfe soll
die &lt;code>ModulNotGradeableException&lt;/code> dienen.&lt;/p>
&lt;p>Anforderungen an die &lt;code>LBV&lt;/code>-Klasse:&lt;/p>
&lt;ul>
&lt;li>Die Note der LBV ist als Float-Attribut gespeichert&lt;/li>
&lt;li>Die Gewichtung der LBV ist ebenfalls als Float-Attribut gespeichert&lt;/li>
&lt;/ul>
&lt;p>Anforderungen an die &lt;code>Modul&lt;/code>-Klasse:&lt;/p>
&lt;ul>
&lt;li>Ein Modul hat den Modulnamen als Attribut.&lt;/li>
&lt;li>Alle LBVs des Moduls, werden in einer ArrayList gespeichert.&lt;/li>
&lt;li>LBVs werden dem Modul über die &lt;code>addLBV(LBV exam)&lt;/code> Methode hinzugefügt.&lt;/li>
&lt;li>Der Moduldurchschnitt, soll von der Methode &lt;code>getFinalModuleGrade()&lt;/code> als &lt;code>float&lt;/code> zurückgegeben werden.&lt;/li>
&lt;li>Das Modul kann nur bewertet werden, wenn die Gewichtung aller LBVs genau 1 ergib. Ansonsten soll
eine &lt;code>ModulNotGradeableException&lt;/code> geworfen werden.&lt;/li>
&lt;li>Die Methode &lt;code>printReportEntry()&lt;/code> soll den Zeugnis-Eintrag des Moduls generieren und ausgeben. Dieser ist im Format &lt;em>&amp;lt;
MODUL_NAME&amp;gt;&lt;/em> : &lt;em>&amp;lt;MODUL_SCHLUSSNOTE&amp;gt;&lt;/em> auszugeben.&lt;/li>
&lt;/ul>
&lt;h2 id="javautilstack">java.util.Stack&lt;/h2>
&lt;p>java.util.Stack ist eine weitere Datenstruktur, bei der Elemente eingefügt und wieder entfernt werden können, wobei bei
Stacks immer nur auf dasjenige Element zugegriffen werden kann, das zuletzt eingefügt wurde (Last-In-First-Out = LIFO).
Auf Deutsch könnte man Stack als &amp;ldquo;Stapel&amp;rdquo; übersetzen.&lt;/p>
&lt;p>&lt;img src="../../java-collections/stack1.png" alt="stack1">&lt;/p>
&lt;p>Ein Stack kann leer sein oder kann beliebig wachsen. Mit der Methode &lt;code>push(E item)&lt;/code> legt man das Element &lt;em>item&lt;/em> auf den
Stack, d.h. man fügt es zu oberst hinzu.
&lt;code>pop()&lt;/code> entfernt das oberste Element vom Stack und gibt es zurück.&lt;/p>
&lt;p>&lt;img src="../../java-collections/stack2.png" alt="stack2">&lt;/p>
&lt;p>Die Methode &lt;code>peek()&lt;/code> gibt das Element zu oberst auf dem Stack zurück, ohne den Stack zu verändern.&lt;/p>
&lt;p>Falls der Stack leer ist und man die Methode &lt;code>pop()&lt;/code> oder &lt;code>peek()&lt;/code> aufruft, wird die Exception &lt;code>EmptyStackException&lt;/code>
geworfen.&lt;/p>
&lt;p>Mit der Methode &lt;code>search(Object o)&lt;/code> kann man ein Element im Stack suchen, wobei die Position des Elements zurückgegeben
wird. Bei den Stacks hat das oberste Element des Stacks die Position 1 und das Element darunter die Position 2, das
Element darunter die Position 3, ect. Das heisst anders als bei den ArrayLists fangen wir nicht bei 0 an die Elemente zu
indexieren, sondern bei 1.&lt;/p>
&lt;h3 id="alle-methoden-der-klasse-javautilstack">Alle Methoden der Klasse java.util.Stack&lt;/h3>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Konstruktor: Erstellt einen leeren Stack
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Stack&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Fügt ein Element an die oberste Stelle dieses Stacks hinzu.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> E &lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>E item&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Entfernt das Element an der obersten Stellen und gibt dieses Element
&lt;/span>&lt;span style="color:#75715e"> * als Wert dieser Funktion zurück.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> E &lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element an der obersten Stelle des Stacks zurück,
&lt;/span>&lt;span style="color:#75715e"> * ohne es vom Stack zu entfernen.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> E &lt;span style="color:#a6e22e">peek&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt true zurück, wenn der Stack keine Elemente enthält.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">empty&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt die 1-basierte Position vom oberen Ende des Stapels zurück,
&lt;/span>&lt;span style="color:#75715e"> * an der sich das Objekt befindet; der Rückgabewert -1 bedeutet,
&lt;/span>&lt;span style="color:#75715e"> * dass sich das Objekt nicht auf dem Stapel befindet.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object o&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="beispiel">Beispiel&lt;/h3>
&lt;h4 id="beispiel-1-1">Beispiel 1&lt;/h4>
&lt;p>Im folgenden Beispiel erstellen wir zunächst ein leeres Stack mit Elementen vom Typ String und wenden die Methoden der
Stack-Klasse an und sehen, wie diese funktionieren.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> java.util.Stack&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">StackExample&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Stack&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> colors &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Stack&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;blue&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;yellow&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;green&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">push&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;orange&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>colors&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: [blue, yellow, green, orange]
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Color on top: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">peek&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// Output: Color on top: orange
&lt;/span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>colors&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: [blue, yellow, green, orange]
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Color on top: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// Output: Color on top: orange
&lt;/span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>colors&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: [blue, yellow, green]
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Is stack empty? &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">empty&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// Output: Is stack empty? false
&lt;/span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Size of stack: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">size&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// Output: Size of stack: 3
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Position of element blue: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">search&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;blue&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// Output: Position of element blue: 3
&lt;/span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Position of element yellow: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">search&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;yellow&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// Output: Position of element yellow: 2
&lt;/span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Position of element green: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">search&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;green&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span> &lt;span style="color:#75715e">// Output: Position of element green: 1
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">[blue, yellow, green, orange]
Color on top: orange
[blue, yellow, green, orange]
Color on top: orange
[blue, yellow, green]
Is stack empty? false
Size of stack: 3
Position of element blue: 3
Position of element yellow: 2
Position of element green: 1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Im oberen Beispiel verwenden wir die Methode &lt;em>size()&lt;/em>. Diese Methode ist nicht in der java.util.Stack-Klasse
implementiert, wird jedoch von der Vector-Mutterklasse geerbt. Diese Vector-Klasse implementiert zusätzlich weitere
Methoden des List-Interfaces, weshalb diese auch für Stacks verwendet werden können. Ein Stack bzw. die Datenstruktur des
Stacks wird jedoch durch die oben aufgeführten Methoden ausgemacht.&lt;/p>
&lt;h4 id="beispiel-2-emptystackexception">Beispiel 2 (EmptyStackException)&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> java.util.Stack&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">StackExampleEmtpyStackExceptionA&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Stack&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> colors &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Stack&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">pop&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// Throws: Exception in thread &amp;#34;main&amp;#34; java.util.EmptyStackException
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Exception in thread &amp;#34;main&amp;#34; java.util.EmptyStackException
at java.base/java.util.Stack.peek(Stack.java:102)
at java.base/java.util.Stack.pop(Stack.java:84)
at ch.puzzle.stack.StackExampleEmtpyStackExceptionA.main(StackExampleEmtpyStackExceptionA.java:8)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> java.util.Stack&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">StackExampleEmtpyStackExceptionB&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Stack&lt;span style="color:#f92672">&amp;lt;&lt;/span>String&lt;span style="color:#f92672">&amp;gt;&lt;/span> colors &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Stack&lt;span style="color:#f92672">&amp;lt;&amp;gt;();&lt;/span>
colors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">peek&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// Throws: Exception in thread &amp;#34;main&amp;#34; java.util.EmptyStackException
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Output:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Exception in thread &amp;#34;main&amp;#34; java.util.EmptyStackException
at java.base/java.util.Stack.peek(Stack.java:102)
at ch.puzzle.stack.StackExampleEmtpyStackExceptionB.main(StackExampleEmtpyStackExceptionB.java:8)
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="übungen-1">Übungen&lt;/h3>
&lt;h4 id="aufgabe-1-1">Aufgabe 1&lt;/h4>
&lt;p>Versuche eine eigene Stack-Klasse (&lt;code>MyStack&amp;lt;E&amp;gt;&lt;/code>) zu implementieren mithilfe von Arrays und verwende dabei keine anderen
Collections-Klassen.&lt;/p>
&lt;p>Die MyStack Klasse sollte eine dynamische Grösse haben, d.h. sie der Stack sollte beliebig wachsen können. Da der Stack
mithilfe von Arrays implementiert werden soll, muss also in deiner Klasse die Kapazität des Stacks sichergestellt
werden.&lt;/p>
&lt;p>Implementiere die folgenden Methoden:&lt;/p>
&lt;ul>
&lt;li>&lt;code>public E push(E item)&lt;/code>&lt;/li>
&lt;li>&lt;code>public E pop( )&lt;/code> (soll EmptyStackException werfen)&lt;/li>
&lt;li>&lt;code>public E peek() &lt;/code> (soll EmptyStackException werfen)&lt;/li>
&lt;li>&lt;code>int size()&lt;/code>&lt;/li>
&lt;li>&lt;code>public boolean empty()&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Beachte, dass du die &lt;code>toString()&lt;/code> Methode anpasst, sodass die MyStack-Stacks beim printen übersichtlich dargestellt
werden, wie im Beispiel oben: [blue, yellow, green, orange]&lt;/p>
&lt;h4 id="aufgabe-2-1">Aufgabe 2&lt;/h4>
&lt;p>Erweitere deine MyStack Klasse. Implementiere zusätzlich die folgende Methode:&lt;/p>
&lt;ul>
&lt;li>&lt;code>public int search(Object o)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="javautilqueue">java.util.Queue&lt;/h2>
&lt;p>Eine Queue ist ähnlich einem Stack ein Behälter, in den Elemente eingefügt und nur in einer bestimmten Reihenfolge
wieder entnommen werden können. Bei den Queues gilt das &lt;em>First In First Out&lt;/em> (=FIFO) Prinzip:
Das Einfügen eines Elements erfolgt an einem Ende und heisst &lt;em>EnQueue&lt;/em>. Die Entfernung eines Elements erfolgt dann am
anderen Ende und heisst &lt;em>DeQueue&lt;/em>. Das heisst also, das erste Elemente, das einer Queue eingefügt wird, ist das Element
das zuerst der Queue entnommen werden kann.
Queues können in ihrer Grösse beschränkt oder unbeschränkt sein.&lt;/p>
&lt;p>&lt;img src="../../java-collections/queue2.png" alt="queue2">&lt;/p>
&lt;p>Auf Deutsch könnte man Queues als &amp;ldquo;Warteschlangen&amp;rdquo; bezeichnen.
Wir kennen Warteschlangen von unserem Alltag:
Beispielsweise vom Einkaufen, wo es eine Schlange von Kunden gibt, die an der Kasse auf einen Kassierer warten.
Ein Kunde stellt sich zu hinterst an und rückt &amp;ldquo;in der Warteschlange&amp;rdquo; vor, wenn vorherigen Kunden bedient wurden.&lt;/p>
&lt;p>&lt;img src="../../java-collections/queue1.png" alt="queue1">&lt;/p>
&lt;h3 id="alle-methoden-vom-interface-javautilqueue">Alle Methoden vom Interface java.util.Queue&lt;/h3>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Fügt das angegebene Element in diese Queue ein,
&lt;/span>&lt;span style="color:#75715e"> * wenn dies möglich ist, ohne Kapazitätsbeschränkungen zu verletzen.
&lt;/span>&lt;span style="color:#75715e"> * Bei Erfolg wird true zurückgegeben und eine IllegalStateException ausgelöst wird, wenn derzeit
&lt;/span>&lt;span style="color:#75715e"> * kein Platz verfügbar ist.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>E e&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Fügt das angegebene Element in diese Queue ein,
&lt;/span>&lt;span style="color:#75715e"> * wenn dies möglich ist, ohne Kapazitätsbeschränkungen zu verletzen.
&lt;/span>&lt;span style="color:#75715e"> * Bei Erfolg wird true zurückgegeben und sonst wird fals zurückgegeben.
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * Bei der Verwendung einer Queue mit Kapazitätsbeschränkungen ist diese Methode in der Regel add(E e) vorzuziehen,
&lt;/span>&lt;span style="color:#75715e"> * da bei Verletzung der Kapazitätsbeschränkungen keine Exception geworfen wird, sondern false zurückgegeben wird.
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">offer&lt;/span>&lt;span style="color:#f92672">(&lt;/span>E e&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element am Anfang des Queues zurück und entfernt es in der Queue.
&lt;/span>&lt;span style="color:#75715e"> * Falls die Queue leer ist, dann wird null zurückgegeben.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">poll&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element am Anfang des Queues zurück und entfernt es in der Queue.
&lt;/span>&lt;span style="color:#75715e"> * Diese Methode unterscheidet sich von poll() nur darin, dass sie eine Exception auslöst, wenn die Queue leer ist.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">remove&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element am Anfang des Queues zurück, entfernt es aber nicht.
&lt;/span>&lt;span style="color:#75715e"> * Gibt null zurück, wenn die Queue leer ist.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">peek&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element am Anfang des Queues zurück, entfernt es aber nicht.
&lt;/span>&lt;span style="color:#75715e"> * Diese Methode unterscheidet sich von peek() nur darin, dass sie eine Exception auslöst, wenn die Queue leer ist.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">element&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="javautildeque">java.util.Deque&lt;/h2>
&lt;p>Die Deque ist eine Queue mit zwei Enden, und Datenelemente können an beiden Enden hinzugefügt oder entfernt
werden. Die Deque in Java wird über die das Interface java.util.Deque implementiert, die ein
Subtyp des Interface java.util.Queue ist.&lt;/p>
&lt;p>&lt;img src="../../java-collections/deque1.png" alt="deque1">&lt;/p>
&lt;h3 id="alle-methoden-vom-interface-javautildeque">Alle Methoden vom Interface java.util.Deque&lt;/h3>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Fügt das angegebene Element an den Anfang dieser Deque ein,
&lt;/span>&lt;span style="color:#75715e"> * wenn dies möglich ist, ohne Kapazitätsbeschränkungen zu verletzen
&lt;/span>&lt;span style="color:#75715e"> * und löst eine IllegalStateException aus, wenn derzeit kein Platz verfügbar ist.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">addFirst&lt;/span>&lt;span style="color:#f92672">(&lt;/span>E e&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Fügt das angegebene Element an das Ende dieser Deque ein,
&lt;/span>&lt;span style="color:#75715e"> * wenn dies möglich ist, ohne Kapazitätsbeschränkungen zu verletzen
&lt;/span>&lt;span style="color:#75715e"> * und löst eine IllegalStateException aus, wenn derzeit kein Platz verfügbar ist.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">addLast&lt;/span>&lt;span style="color:#f92672">(&lt;/span>E e&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Fügt das angegebene Element an den Anfang dieser Deque ein,
&lt;/span>&lt;span style="color:#75715e"> * wenn dies möglich ist, ohne Kapazitätsbeschränkungen zu verletzen.
&lt;/span>&lt;span style="color:#75715e"> * Bei Erfolg wird true zurückgegeben und sonst wird fals zurückgegeben.
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * Bei der Verwendung einer Deque mit Kapazitätsbeschränkungen ist diese Methode in der Regel addFirst(E e) vorzuziehen,
&lt;/span>&lt;span style="color:#75715e"> * da bei Verletzung der Kapazitätsbeschränkungen keine Exception geworfen wird, sondern false zurückgegeben wird.
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">offerFirst&lt;/span>&lt;span style="color:#f92672">(&lt;/span>E e&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Fügt das angegebene Element an das Ende dieser Deque ein,
&lt;/span>&lt;span style="color:#75715e"> * wenn dies möglich ist, ohne Kapazitätsbeschränkungen zu verletzen.
&lt;/span>&lt;span style="color:#75715e"> * Bei Erfolg wird true zurückgegeben und sonst wird fals zurückgegeben.
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * Bei der Verwendung einer Deque mit Kapazitätsbeschränkungen ist diese Methode in der Regel addLast(E e) vorzuziehen,
&lt;/span>&lt;span style="color:#75715e"> * da bei Verletzung der Kapazitätsbeschränkungen keine Exception geworfen wird, sondern false zurückgegeben wird.
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">offerLast&lt;/span>&lt;span style="color:#f92672">(&lt;/span>E e&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element am Anfang des Deques zurück und entfernt es in der Deque.
&lt;/span>&lt;span style="color:#75715e"> * Falls die Deque leer ist, dann wird null zurückgegeben.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">pollFirst&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element am Ende des Deques zurück und entfernt es in der Deque.
&lt;/span>&lt;span style="color:#75715e"> * Falls die Deque leer ist, dann wird null zurückgegeben.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">pollLast&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element am Anfang des Deques zurück und entfernt es in der Deque.
&lt;/span>&lt;span style="color:#75715e"> * Diese Methode unterscheidet sich von pollFirst() nur darin, dass sie eine Exception auslöst, wenn die Deque leer ist.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">removeFirst&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element am Ende des Deques zurück und entfernt es in der Deque.
&lt;/span>&lt;span style="color:#75715e"> * Diese Methode unterscheidet sich von pollLast() nur darin, dass sie eine Exception auslöst, wenn die Deque leer ist.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">removeLast&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element am Anfang des Deques zurück, entfernt es aber nicht.
&lt;/span>&lt;span style="color:#75715e"> * Gibt null zurück, wenn die Deque leer ist.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">peekFirst&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element am Ende des Deques zurück, entfernt es aber nicht.
&lt;/span>&lt;span style="color:#75715e"> * Gibt null zurück, wenn die Deque leer ist.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">peekLast&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element am Anfang des Deques zurück, entfernt es aber nicht.
&lt;/span>&lt;span style="color:#75715e"> * Diese Methode unterscheidet sich von peekFirst() nur darin, dass sie eine Exception auslöst, wenn die Deque leer ist.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">getFirst&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das Element am Ende des Deques zurück, entfernt es aber nicht.
&lt;/span>&lt;span style="color:#75715e"> * Diese Methode unterscheidet sich von peekLast() nur darin, dass sie eine Exception auslöst, wenn die Deque leer ist.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
E &lt;span style="color:#a6e22e">getLast&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Entfernt das erste Vorkommen des angegebenen Elements aus dieser Deque,
&lt;/span>&lt;span style="color:#75715e"> * sofern es vorhanden ist. Wenn diese Deque das Element nicht enthält,
&lt;/span>&lt;span style="color:#75715e"> * bleibt sie unverändert.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">removeFirstOccurrence&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object o&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Entfernt das letzte Vorkommen des angegebenen Elements aus dieser Deque,
&lt;/span>&lt;span style="color:#75715e"> * sofern es vorhanden ist. Wenn diese Deque das Element nicht enthält,
&lt;/span>&lt;span style="color:#75715e"> * bleibt sie unverändert.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">removeLastOccurrence&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Object o&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">// *** Queue methods ***
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// *** Stack methods ***
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Im Interface java.util.Deque sind Queue und Stack Methoden ebenfalls deklariert.
Deques, bei denen Elemente nur an einem Ende eingefügt und am nur anderen Ende entnommen werden,
stellen wiederum Queues dar.
Deques, bei denen Elemente an einem Ende eingefügt und am gleichen Ende entnommen werden,
stellen Stacks dar.&lt;/p>
&lt;h2 id="javautillinkedlist">java.util.LinkedList&lt;/h2>
&lt;p>LinkedLists sind verkettete Listen. D.h. die Elemnte der Listen sind zu einander verkettet
und nicht wie bei einer ArrayList an bestimmten Positionen platziert.&lt;/p>
&lt;p>java.util.LinkedList implementiert zwei Collection-Interfaces: java.util.List und java.util.Deque.
Das bedeutet grundsätzlich, dass sie sowohl die Methoden des List-Interfaces implementiert, als auch die des Deque-Interfaces.&lt;/p>
&lt;p>Grundsätzlich gibt es zwei Arten von verketteten Listen: Einfach verkettete Listen und doppelt verkettete Liste.
Wir werden beide anschauen, wie sie im Allgeimeinen aussehen.
Die java.util.LinkedList ist die Implementierung einer doppelt verketteten Liste..&lt;/p>
&lt;h3 id="einfach-verkettete-listen">Einfach verkettete Listen&lt;/h3>
&lt;p>Verkettete Listen bestehen aus Knoten (Nodes).
Jeder Knoten enthält ein Element und eine Referenz auf einen weiteren Knoten, falls dieser vorhanden ist.
Die Knoten sind somit über eine Referenz auf jeweils den nächsten Knoten miteinander verkettet.
Die verkettete Liste enthält schlussendlich eine Referenz auf den ersten Knoten in der Liste.
Der letzte Knoten enthält eine Referenz auf &lt;code>null&lt;/code>.&lt;/p>
&lt;p>&lt;img src="../../java-collections/linkedlist1.png" alt="linkedlist1">&lt;/p>
&lt;h4 id="element-zu-einer-einfach-verketten-liste-hinzufügen">Element zu einer einfach verketten Liste hinzufügen&lt;/h4>
&lt;p>Wird ein Knoten zu einer einfach verketteten Liste hinzugefügt, dann muss die Referenz des Knotens davor
auf dieses Element zeigen und die Referenz des Elements, das hinzugefügt wird, muss auf den nächsten Knoten zeigen.
So wird ein neuer Knoten zwischen zwei Knoten eingeschoben.&lt;/p>
&lt;p>&lt;img src="../../java-collections/linkedlist2.png" alt="linkedlist2">&lt;/p>
&lt;h4 id="element-zu-aus-einer-einfach-verketten-liste-löschen">Element zu aus einer einfach verketten Liste löschen&lt;/h4>
&lt;p>Wird ein Knoten aus einer einfach verketteten Liste gelöscht, dann muss die Referenz des Knotens davor
auf das zu löschende Element gelöscht werden und ersetzt werden mit der Referenz auf das nächste Element.
Die Referenz des Elements, das gelöscht wird, auf das nächste Element muss auch gelöscht werden.
So wird ein bestehender Knoten zwischen zwei Knoten entfernt.&lt;/p>
&lt;p>&lt;img src="../../java-collections/linkedlist3.png" alt="linkedlist3">&lt;/p>
&lt;h3 id="doppelt-verkettete-listen">Doppelt verkettete Listen&lt;/h3>
&lt;p>In einer doppelt verketteten Liste haben die Knoten nicht nur eine Referenz auf den nächsten Knoten, sondern
auch eine Referenzen auf den vorherigen Knoten.
Eine mögliche Implementierung einder doppelt verketteten Liste könnte sein, dass der letzte Knoten,
wie auch schon bei einer einfach verketteten Liste eine Referenz auf &lt;code>null&lt;/code> hat als nächsten Knoten
und der erste Knoten in einer doppelt verketteten Liste eine Referenz auf &lt;code>null&lt;/code> hat als vorherigen Knoten.
Zusätzlich hat man eine Referenz auf den Kopf der Liste, d.h. auf den ersten Knoten
und eine Referenze auf den letzten Knoten der Liste.&lt;/p>
&lt;p>&lt;img src="../../java-collections/linkedlist4.png" alt="linkedlist4">&lt;/p>
&lt;p>Das Einfügen und Entfernen funktioniert analog zu einer einfach verketteten Liste.&lt;/p>
&lt;h4 id="ein-element-aus-einer-einfach-oder-doppelt-verketteten-liste-auslesen">Ein Element aus einer (einfach oder doppelt) verketteten Liste auslesen&lt;/h4>
&lt;p>Wenn man ein Element in einer einfach verketteten Liste auslesen möchte, dann muss man vom ersten Knoten
anfangen und ein Knoten nach dem anderen die Liste durchlaufen bis zu diesem Element. Im &amp;ldquo;schlimmsten&amp;rdquo; Fall
muss über alle Knoten iteriert werden, wenn das Element, das mun sucht, im letzten Knoten ist.&lt;/p>
&lt;h4 id="arraylist-vs-linkedlist">ArrayList vs. LinkedList&lt;/h4>
&lt;p>Der Vorteil von LinkedLists besteht darin, dass Elemente schneller hinzugefügt und schneller aus der Liste
gelöscht werden können im Vergleich zu ArrayLists.
Bei einer LinkedList müssen nur die Referenzen zum &amp;ldquo;Vorgänger&amp;rdquo; und &amp;ldquo;Nachfolgen&amp;rdquo; angepasst werden, wenn man ein Element
einfügen oder löschen möchte.
Der Nachteil jedoch besteht darin, dass der Zugriff auf Elementen der Liste an einer bestimmten Position
im Vergleich zu ArrayLists langsamer ist, da in diesem Fall die Liste bis zu dem entsprechenden Element
durchlaufen werden muss.
Die Entscheidung für einen bestimmten Listen-Typ ist also abhängig von der Art und Anzahl
der Zugriffe.&lt;/p>
&lt;h3 id="linkedlist-klasse-im-java">LinkedList-Klasse im Java&lt;/h3>
&lt;p>Die LinkedList-Klasse im Java (java.util.LinkedList) implementiert eine doppelt verkettete Liste.
Sie ist so implementiert, dass sie zwei Referenzen enthält, zum einen die Referenz
zum ersten Knoten und zum anderen die Referenz zum zweiten Knoten:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LinkedList&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> AbstractSequentialList&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> List&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;,&lt;/span> Deque&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;,&lt;/span> Cloneable&lt;span style="color:#f92672">,&lt;/span> java&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">io&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Serializable&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">transient&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> size &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Pointer to first node.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">transient&lt;/span> Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> first&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Pointer to last node.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">transient&lt;/span> Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> last&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ein Knoten also das Objekt &lt;em>Node&lt;/em> enthält das Element, welches einen generischen Typ hat (deshalb &lt;code>Node&amp;lt;E&amp;gt;&lt;/code>),
die Referenz auf den vorherigen Knoten, also auf ein Node-Objekt und eine Referenz auf den nächsten Knoten.
Die statische Klasse &lt;code>Node&amp;lt;E&amp;gt;&lt;/code> ist innerhalb der Klasse java.util.LinkedList definiert:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java"> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
E item&lt;span style="color:#f92672">;&lt;/span>
Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> next&lt;span style="color:#f92672">;&lt;/span>
Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> prev&lt;span style="color:#f92672">;&lt;/span>
Node&lt;span style="color:#f92672">(&lt;/span>Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> prev&lt;span style="color:#f92672">,&lt;/span> E element&lt;span style="color:#f92672">,&lt;/span> Node&lt;span style="color:#f92672">&amp;lt;&lt;/span>E&lt;span style="color:#f92672">&amp;gt;&lt;/span> next&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#f92672">=&lt;/span> element&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">=&lt;/span> next&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">prev&lt;/span> &lt;span style="color:#f92672">=&lt;/span> prev&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="einige-methoden-der-klasse-javautillinkedlist">Einige Methoden der Klasse java.util.LinkedList&lt;/h3>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Konstruktor: Erstellt eine initial leere Liste
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">LinkedList&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das erste Element der Liste zurück.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> E &lt;span style="color:#a6e22e">getFirst&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Gibt das letzte Element der Liste zurück.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> E &lt;span style="color:#a6e22e">getLast&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Entfernt das erste Element der Liste und gibt es zurück.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> E &lt;span style="color:#a6e22e">removeFirst&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Entfernt das letzte Element der Liste und gibt es zurück.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> E &lt;span style="color:#a6e22e">removeLast&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Fügt das angegeben Element an den Anfang der Liste ein.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">addFirst&lt;/span>&lt;span style="color:#f92672">(&lt;/span>E e&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#75715e">/*
&lt;/span>&lt;span style="color:#75715e"> * Fügt das angegebene Element an das Ende der Liste an.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">addLast&lt;/span>&lt;span style="color:#f92672">(&lt;/span>E e&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// *** Queue and Deque methods ***
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// *** Stack methods ***
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#75715e">// *** List methods ***
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="beispiele-1">Beispiele&lt;/h3>
&lt;p>Beispiele kommen noch&lt;/p>
&lt;h3 id="übungen-2">Übungen&lt;/h3>
&lt;p>Übungen kommen noch&lt;/p>
&lt;p>Fortsetzung folgt&amp;hellip;&lt;/p></description></item><item><title>Docs: HTML Rekapitulieren</title><link>/docs/web/html_css/08_html_finish/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/08_html_finish/</guid><description>
&lt;p>Beherrschst du HTML? Wenn ja, dann gib deinem HTML ein Styling - mit CSS! Fahre hier fort.&lt;/p>
&lt;p>Hast du nicht alles verstanden oder du fühlst dich noch nicht so sattelfest? Dann kannst du gerne HTML noch ein bisschen üben. Wir empfehlen den HTML-Teil aus dem folgenden Kurs:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.udacity.com/course/intro-to-html-and-css--ud001">Intro to HTML and CSS - Udacity&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Angular Material, Responsive Web Design und Accessibility</title><link>/docs/web/angular/04_7_angular_material/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_7_angular_material/</guid><description>
&lt;h2 id="material-in-angular">Material in Angular&lt;/h2>
&lt;p>Für Angular gibt es eine spezifische Version von Material Design.&lt;/p>
&lt;p>Auf der offiziellen Website von Angular Material sehen wir welche Components uns zur Verfügung gestellt werden.&lt;/p>
&lt;p>Wenn wir zum Beispiel den &amp;ldquo;Slider&amp;rdquo; in unsere Applikation implementieren möchten, gibt es einige Schritte welche wir beachten müssen.
Jeder Component wird auf der Website wie folgt beschrieben:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Overview&lt;/strong>: Auf der Übersicht wird beschrieben, wie und wozu man den Component anwenden kann.
Oftmals werden hier auch erweiterte Funktionen eines Components aufgelistet. Daher gilt: &lt;strong>Immer aufmerksam durchlesen!&lt;/strong>&lt;/li>
&lt;li>&lt;strong>API&lt;/strong>: In diesem Abschnitt ist für uns vor allem der Import wichtig. Für jeden Component muss erst das dazugehörige Modul importiert werden:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">MatSliderModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/material/slider&amp;#39;&lt;/span>;
...
&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
...,
&lt;span style="color:#a6e22e">MatSliderModule&lt;/span>,
...
],
...
})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>Examples&lt;/strong>: Hier werden Anwendungsbeispiele aufgezeigt, von welchen wir unseren Code ableiten können.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">mat-slider&lt;/span>
&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;example-margin&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">disabled&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">disabled&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">invert&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">invert&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">max&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">max&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">min&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">min&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">step&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">step&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">thumbLabel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">thumbLabel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">tickInterval&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">getSliderTickInterval&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">()&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">value&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">vertical&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">vertical&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">aria-labelledby&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;example-name-label&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">mat-slider&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wie Ihr Material in Eurer Angular-Applikation installiert, wird auf der &lt;a href="https://material.angular.io/guide/getting-started">offiziellen Website&lt;/a> ausführlich beschrieben.&lt;/p>
&lt;h2 id="material-theming">Material Theming&lt;/h2>
&lt;p>Material Design unterstützt Theming. Ein Theme ist eine Farbpalette, welche für jeden Angular Material Component angewendet wird.&lt;/p>
&lt;p>Ein Theme besteht aus:&lt;/p>
&lt;ul>
&lt;li>Primärfarbe&lt;/li>
&lt;li>Akzentfarbe&lt;/li>
&lt;li>Warnung&lt;/li>
&lt;li>Vordergrund&lt;/li>
&lt;li>Hintergrund&lt;/li>
&lt;/ul>
&lt;p>Es gibt verschiedene pre-built Themes in Material Design, sodass man sich das Erstellen eines Themes von Hand ersparen kann:&lt;/p>
&lt;ul>
&lt;li>deeppurple-amber.css&lt;/li>
&lt;li>indigo-pink.css&lt;/li>
&lt;li>pink-bluegrey.css&lt;/li>
&lt;li>purple-green.css&lt;/li>
&lt;/ul>
&lt;p>Um ein solches Theme zu verwenden, müssen wir dies in unserem globalen Stylesheet importieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">@import&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/material/prebuilt-themes/deeppurple-amber.css&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Natürlich kann man auch sein eigene Theme für Angular Material erstellen.
Wie ihr dies machen könnt wird &lt;a href="https://material.angular.io/guide/theming#defining-a-custom-theme">hier&lt;/a> ausführlich beschrieben (Für diejenigen, die mit den Übungen frühzeitig fertig sind).&lt;/p></description></item><item><title>Docs: Lazy Loading</title><link>/docs/web/angular/04_8_lazy_loading/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_8_lazy_loading/</guid><description>
&lt;p>&lt;img src="/images/angular/lazy_loading.png" alt="Lazy loading">&lt;/p>
&lt;h2 id="lazy-loading-in-angular">Lazy Loading in Angular&lt;/h2>
&lt;p>Standardmässig lädt der Browser alle Angular-Module, bevor der Benutzer mit ihnen arbeiten kann.&lt;br>
Natürlich gibt es auch einige, die nicht oder zumindest nicht sofort benötigt werden.&lt;br>
Genau hier setzt das Lazy Loading an, um die Startgeschwindigkeit zu optimieren: Es stellt sicher, dass nur die wichtigsten Anwendungsbestandteile
im Browser landen, der Rest wird später bei Bedarf angefordert. Hierfür werden einfach Routen mit der Eigenschaft &amp;ldquo;loadChildren&amp;rdquo; verwendet&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">routes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [
{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;login&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">component&lt;/span>: &lt;span style="color:#66d9ef">LoginComponent&lt;/span> },
{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;admin&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">loadChildren&lt;/span>&lt;span style="color:#f92672">:&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">import&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;./admintools/admintools.module&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">AdmintoolsModule&lt;/span>)},
{ &lt;span style="color:#a6e22e">path&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;profile&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">canActivate&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">AuthGuard&lt;/span>], &lt;span style="color:#a6e22e">loadChildren&lt;/span>&lt;span style="color:#f92672">:&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">import&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;./profile/profile.module&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">m&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">m&lt;/span>.&lt;span style="color:#a6e22e">ProfileModule&lt;/span>)},
...
]
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="lazy-loading-mit-angular-material">Lazy Loading mit Angular Material&lt;/h2>
&lt;p>Einige Components von Angular Material unterstützen Lazy Loading.&lt;/p>
&lt;p>Ein Beispiel hierzu ist das Expansion-Panel.&lt;/p>
&lt;p>&lt;img src="/images/angular/expansion_panel.png" alt="Expansion Panel">&lt;/p>
&lt;p>Die Inhalte des Expansion Panels werden geladen, auch wenn das Expansion-Panel geschlossen ist.
Wenn man auf einer Ansicht beispielsweise 30 dieser Expansion-Panels anzeigt und den jeweiligen Inhalt lädt, kann dies zu Performance-Problemen führen.&lt;/p>
&lt;p>Jedoch unterstützt dieser Component Lazy Loading, wodurch man die Performance-Probleme sehr einfach umgehen kann.&lt;br>
Inhalte werden erst geladen wenn sich das Expansion-Panel öffnet.&lt;/p>
&lt;p>In den meisten Fällen ist das Anwenden von Lazy Loading in Angular Material Components auch kein grosser Aufwand.&lt;/p>
&lt;p>Schaut also auf der Angular Material Website in &amp;ldquo;Overview&amp;rdquo; des Components immer &lt;strong>gut&lt;/strong> nach, ob der Component Lazy Loading unterstützt.&lt;/p></description></item><item><title>Docs: CSS</title><link>/docs/web/html_css/10_css_intro/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/10_css_intro/</guid><description>
&lt;h2 id="was-ist-css">Was ist CSS?&lt;/h2>
&lt;p>Nun haben wir gelernt, was HTML ist, und wie es angewendet werden kann. Wie euch wahrscheinlich bereits aufgefallen ist, sieht pures HTML jedoch nicht besonders schön aus.&lt;/p>
&lt;p>Und genau da kommt CSS (Cascading Style Sheets) ins Spiel. CSS ist da, um unsere HTML-Elemente zu stylen, wodurch wir unser gewünschtes Design gestalten können.&lt;/p>
&lt;p>Dabei gibt es verschiedene Wege CSS zu schreiben und auch dies dann in die Webseite einzubinden.&lt;/p></description></item><item><title>Docs: Projekt aufsetzen</title><link>/docs/web/angular/05_1_tour_of_heroes/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/05_1_tour_of_heroes/</guid><description>
&lt;h1 id="ein-neues-projekt-erstellen">Ein neues Projekt erstellen&lt;/h1>
&lt;p>In diesem Teil des Tutorials werden Sie Folgendes tun:&lt;/p>
&lt;ol>
&lt;li>Richten Sie Ihre Umgebung ein.&lt;/li>
&lt;li>Erstellen Sie einen neuen Arbeitsbereich und ein erstes Anwendungsprojekt.&lt;/li>
&lt;li>Stellen Sie die Anwendung bereit.&lt;/li>
&lt;li>Nehmen Sie Änderungen an der Anwendung vor.&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>Die Beispielanwendung, die auf dieser Seite beschrieben wird, finden Sie unter &lt;a href="https://angular.io/generated/live-examples/toh-pt0/stackblitz.html">dieser Seite&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="richten-sie-ihre-umgebung-ein">Richten Sie Ihre Umgebung ein&lt;/h2>
&lt;p>Um Ihre Entwicklungsumgebung einzurichten, folgen Sie den Anweisungen in &lt;a href="https://angular.io/guide/setup-local">Local Environment Setup&lt;/a>.&lt;/p>
&lt;h2 id="erstellen-sie-einen-neuen-arbeitsbereich-und-eine-erste-anwendung">Erstellen Sie einen neuen Arbeitsbereich und eine erste Anwendung&lt;/h2>
&lt;p>Sie entwickeln Anwendungen im Kontext eines Angular-&lt;a href="https://angular.io/guide/glossary#workspace">Workspace&lt;/a>. Ein Arbeitsbereich enthält die Dateien für ein oder mehrere &lt;a href="https://angular.io/guide/glossary#project">Projekte&lt;/a>. Ein Projekt ist eine Gruppe von Dateien, die eine Anwendung oder eine Bibliothek bilden. Für dieses Tutorial werden Sie einen neuen Arbeitsbereich erstellen.&lt;/p>
&lt;p>So erstellen Sie einen neuen Arbeitsbereich und ein erstes Anwendungsprojekt:&lt;/p>
&lt;ol>
&lt;li>Stellen Sie sicher, dass Sie sich nicht bereits in einem Angular-Arbeitsbereich-Ordner befinden. Wenn Sie beispielsweise zuvor den Arbeitsbereich Erste Schritte erstellt haben, wechseln Sie in den übergeordneten Ordner dieses Ordners.&lt;/li>
&lt;li>Führen Sie den CLI-Befehl &lt;code>ng new&lt;/code> aus und geben Sie den Namen &lt;code>angular-tour-of-heroes&lt;/code> ein, wie hier gezeigt:&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">ng new angular-tour-of-heroes
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>Der Befehl &amp;ldquo;ng new&amp;rdquo; fordert Sie auf, Informationen zu den Funktionen einzugeben, die in das ursprüngliche Anwendungsprojekt aufgenommen werden sollen. Akzeptieren Sie die Standardeinstellungen, indem Sie die Enter- oder Return-Taste drücken.&lt;/li>
&lt;/ol>
&lt;p>Die Angular-CLI installiert die notwendigen Angular-&amp;ldquo;npm&amp;rdquo;-Pakete und andere Abhängigkeiten. Dies kann ein paar Minuten dauern.&lt;/p>
&lt;p>Außerdem werden die folgenden Dateien für den Arbeitsbereich und das Starterprojekt erstellt:&lt;/p>
&lt;ul>
&lt;li>Einen neuen Arbeitsbereich mit einem Stammordner namens &amp;ldquo;angular-tour-of-heroes&amp;rdquo;.&lt;/li>
&lt;li>Ein erstes Skelettprojekt im Unterordner &lt;code>src/app&lt;/code>.&lt;/li>
&lt;li>Zugehörige Konfigurationsdateien.&lt;/li>
&lt;/ul>
&lt;p>Das anfängliche App-Projekt enthält eine einfache Willkommensanwendung, die sofort ausgeführt werden kann.&lt;/p>
&lt;h2 id="serve-the-application">Serve the application&lt;/h2>
&lt;p>Wechseln Sie in das Verzeichnis workspace und starten Sie die Anwendung.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback"> cd angular-tour-of-heroes
ng serve --open
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="/images/hint.png" alt="asset">&lt;/p>
&lt;blockquote>
&lt;p>Der Befehl &lt;code>ng serve&lt;/code> baut die App, startet den Entwicklungsserver,
überwacht die Quelldateien und baut die Anwendung neu auf, wenn Sie Änderungen an diesen Dateien vornehmen.&lt;br>
Das &lt;code>--open&lt;/code> Flag öffnet einen Browser auf &lt;code>http://localhost:4200/&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>Sie sollten die Anwendung in Ihrem Browser laufen sehen.&lt;/p>
&lt;h2 id="angular-komponenten">Angular-Komponenten&lt;/h2>
&lt;p>Die Seite, die Sie sehen, ist die &lt;em>Anwendungsshell&lt;/em>.
Die Shell wird von einer Angular &lt;strong>Komponente&lt;/strong> namens &lt;code>AppComponent&lt;/code> gesteuert.&lt;/p>
&lt;p>&lt;em>Komponenten&lt;/em> sind die grundlegenden Bausteine von Angular-Anwendungen.
Sie zeigen Daten auf dem Bildschirm an, warten auf Benutzereingaben und führen Aktionen basierend auf diesen Eingaben aus.&lt;/p>
&lt;h2 id="änderungen-an-der-anwendung-vornehmen">Änderungen an der Anwendung vornehmen&lt;/h2>
&lt;p>Öffnen Sie das Projekt in Ihrem bevorzugten Editor oder IDE und navigieren Sie zum Ordner &lt;code>src/app&lt;/code>, um einige Änderungen an der Starter-Anwendung vorzunehmen.&lt;/p>
&lt;p>Sie werden die Implementierung der Shell &lt;code>AppComponent&lt;/code> über drei Dateien verteilt finden:&lt;/p>
&lt;ol>
&lt;li>&lt;code>app.component.ts&lt;/code> der Code der Komponentenklasse, geschrieben in TypeScript.&lt;/li>
&lt;li>&lt;code>app.component.html&lt;/code> das Komponententemplate, geschrieben in HTML.&lt;/li>
&lt;li>&lt;code>app.component.css&lt;/code> die privaten CSS-Stile der Komponente.&lt;/li>
&lt;/ol>
&lt;h3 id="ändern-sie-den-titel-der-anwendung">Ändern Sie den Titel der Anwendung&lt;/h3>
&lt;p>Öffnen Sie die Klassendatei der Komponente (&lt;code>app.component.ts&lt;/code>) und ändern Sie den Wert der Eigenschaft &lt;code>title&lt;/code> in &amp;lsquo;Tour of Heroes&amp;rsquo;.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">title&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tour of Heroes&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Öffnen Sie die Komponententemplatendatei (&lt;code>app.component.html&lt;/code>) und
löschen Sie die von der Angular CLI generierte Standardtemplate.
Ersetzen Sie es durch die folgende HTML-Zeile.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die doppelten geschweiften Klammern sind Angulars Syntax für die &lt;em>Interpolationsbindung&lt;/em>.
Diese Interpolationsbindung stellt den Eigenschaftswert &lt;code>title&lt;/code> der Komponente
innerhalb des HTML-Header-Tags.&lt;/p>
&lt;p>Der Browser aktualisiert sich und zeigt den neuen Anwendungstitel an.&lt;/p>
&lt;h3 id="hinzufügen-von-anwendungsstilen">Hinzufügen von Anwendungsstilen&lt;/h3>
&lt;p>Die meisten Anwendungen streben ein einheitliches Aussehen in der gesamten Anwendung an.
Das CLI generiert zu diesem Zweck eine leere &lt;code>styles.css&lt;/code>.
Legen Sie dort Ihre anwendungsweiten Stile ab.&lt;/p>
&lt;p>Öffnen Sie &lt;code>src/styles.css&lt;/code> und fügen Sie den folgenden Code in die Datei ein.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#75715e">/* Application-wide Styles */&lt;/span>
&lt;span style="color:#f92672">h1&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#369&lt;/span>;
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">250&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
}
&lt;span style="color:#f92672">h2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h3&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#444&lt;/span>;
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
&lt;span style="color:#66d9ef">font-weight&lt;/span>: &lt;span style="color:#66d9ef">lighter&lt;/span>;
}
&lt;span style="color:#f92672">body&lt;/span> {
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
}
&lt;span style="color:#f92672">body&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">input&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#f92672">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>&lt;span style="color:#f92672">],&lt;/span> &lt;span style="color:#f92672">button&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#333&lt;/span>;
&lt;span style="color:#66d9ef">font-family&lt;/span>: Cambria, Georgia, &lt;span style="color:#66d9ef">serif&lt;/span>;
}
&lt;span style="color:#75715e">/* everywhere else */&lt;/span>
&lt;span style="color:#f92672">*&lt;/span> {
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="abschliessende-überprüfung-des-codes">Abschliessende Überprüfung des Codes&lt;/h2>
&lt;p>Hier sind die auf dieser Seite besprochenen Codedateien.&lt;/p>
&lt;ol>
&lt;li>src/app/app.components.ts&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-root&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./app.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./app.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppComponent&lt;/span> {
&lt;span style="color:#a6e22e">title&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tour of Heroes&amp;#39;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>src/app/app.components.html&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>src/styles.css&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#75715e">/* Application-wide Styles */&lt;/span>
&lt;span style="color:#f92672">h1&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#369&lt;/span>;
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">250&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
}
&lt;span style="color:#f92672">h2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">h3&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#444&lt;/span>;
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
&lt;span style="color:#66d9ef">font-weight&lt;/span>: &lt;span style="color:#66d9ef">lighter&lt;/span>;
}
&lt;span style="color:#f92672">body&lt;/span> {
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
}
&lt;span style="color:#f92672">body&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">input&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#f92672">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>&lt;span style="color:#f92672">],&lt;/span> &lt;span style="color:#f92672">button&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#333&lt;/span>;
&lt;span style="color:#66d9ef">font-family&lt;/span>: Cambria, Georgia, &lt;span style="color:#66d9ef">serif&lt;/span>;
}
&lt;span style="color:#75715e">/* everywhere else */&lt;/span>
&lt;span style="color:#f92672">*&lt;/span> {
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;ul>
&lt;li>Sie haben die erste Anwendungsstruktur mit dem Angular CLI erstellt.&lt;/li>
&lt;li>Sie haben gelernt, dass Angular-Komponenten Daten anzeigen.&lt;/li>
&lt;li>Sie haben die doppelten geschweiften Klammern der Interpolation verwendet, um den Titel der Anwendung anzuzeigen.&lt;/li>
&lt;/ul></description></item><item><title>Docs: CSS-Grundlagen</title><link>/docs/web/html_css/11_css_basics/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/11_css_basics/</guid><description>
&lt;h2 id="wie-funktioniert-css">Wie funktioniert CSS?&lt;/h2>
&lt;p>Um CSS anwenden zu können, müssen wir das Grundprinzip verstehen:&lt;/p>
&lt;p>Mit CSS werden selektiv HTML-Elemente ausgewählt und deren Styling angepasst. Hierfür gibt es verschiedene Möglichkeiten, welche wir im Verlaufe des Kurses kennenlernen werden.&lt;/p>
&lt;p>CSS verfolgt dabei die folgende Syntax:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#f92672">p&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">blue&lt;/span>;
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">red&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Die Zeichenfolge vor den geschweiften Klammern ist der sogenannte Selektor (Englisch: Selector). Er definiert, auf welche Elemente das Styling angewendet werden soll. In diesem Fall würde das Styling auf alle Paragraphen angewendet werden.&lt;/li>
&lt;li>Die Zeilen innerhalb der geschweiften Klammern, definieren was für ein Styling angwendet werden soll. Beim gezeigten Beispiel würde die Textfarbe auf blau eingestellt werden und die Hintergrundfarbe rot.&lt;/li>
&lt;/ul>
&lt;h2 id="wie-kann-ich-css-anwenden">Wie kann ich CSS anwenden?&lt;/h2>
&lt;p>Als nächstes schauen wir an, wie man CSS in eine Webseite (bzw. in ein HTML File) einbinden kann. Dafür schauen wir uns folgende Abschnitte an:&lt;/p>
&lt;h3 id="direktes-einbinden-in-html-elemente">Direktes einbinden in HTML-Elemente&lt;/h3>
&lt;p>Die wohl schnellste Möglichkeit CSS auf ein HTML-Element anzuwenden, ist, das &amp;ldquo;style&amp;rdquo;-Attribut des HTML-Elements anzupassen. Dies würde wie folgt ausschauen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">p&lt;/span> &lt;span style="color:#a6e22e">style&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;color: blue; background-color: red&amp;#34;&lt;/span>&amp;gt;Hier steht blauer Text auf rotem Hintergrund&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dabei ist anzumerken, dass sich die Syntax gegenüber der herkömmlichen Syntax (siehe erstes Beispiel) etwas unterscheidet. Einerseits müssen wir den Selektor nicht angeben und andererseits gibt es keine geschweiften Klammern mehr.&lt;/p>
&lt;h3 id="einbinden-über-einen-style-tag">Einbinden über einen Style-Tag&lt;/h3>
&lt;p>Man kann CSS aber auch über einen sogenannten &amp;ldquo;Style&amp;rdquo; Tag ins HTML einbinden. Dies sieht wie folgt aus:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
...
&amp;lt;&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
&lt;span style="color:#f92672">p&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">blue&lt;/span>;
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">red&lt;/span>;
}
&amp;lt;/&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
...
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hierbei können wir innerhalb des Style-Tags herkömmliches CSS anwenden, wie wir es bereits aus dem ersten Beispiel kennen. Der Style-Tag kann irgendwo (auch verschachtelt) irgendwo im &lt;code>&amp;lt;head&amp;gt;&lt;/code> oder &lt;code>&amp;lt;body&amp;gt;&lt;/code> stehen. Wo genau darin ist jedoch nicht wichtig. Best-Practice dafür wäre im &lt;code>&amp;lt;head&amp;gt;&lt;/code> nach den &lt;code>&amp;lt;meta&amp;gt;&lt;/code>-Tags.&lt;/p>
&lt;h3 id="einbinden-über-ein-externes-css-file">Einbinden über ein externes CSS-File&lt;/h3>
&lt;p>Die wohl am weitesten verbreitete Methode CSS in eine Webseite einzubinden ist es, das CSS in ein CSS-File auszulagern und dann im HTML darauf zu verweisen.&lt;/p>
&lt;p>Dies kann man wie folgt machen:&lt;/p>
&lt;p>Datei: index.html&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&lt;span style="color:#75715e">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">charset&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;UTF-8&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">http-equiv&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;X-UA-Compatible&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;IE=edge&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#f92672">meta&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;viewport&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">content&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;Document&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;styles.css&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Hier steht blauer Text auf rotem Hintergrund&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Datei: styles.css&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#f92672">p&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">blue&lt;/span>;
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">red&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Wichtige Teil des HTML-Codes ist dabei folgender Tag im Head:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;styles.css&amp;#34;&lt;/span> /&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dieser Link-Tag definiert, dass der CSS-Code der Datei mit dem Pfad &amp;ldquo;styles.css&amp;rdquo; auf die aktuelle HTML-Datei angwendet werden soll.&lt;/p>
&lt;h2 id="was-gibt-es-alles-für-css-styling-properties">Was gibt es alles für CSS-Styling-Properties?&lt;/h2>
&lt;p>Es gibt unzählige CSS-Properties. Zu viele, um auf jedes detailliert einzugehen. Auf &lt;a href="https://www.tutorialrepublic.com/css-reference/css3-properties.php">dieser Seite&lt;/a> findet ihr eine ganze Reihe CSS-Properties.&lt;/p>
&lt;p>Auf die wichtigsten Properties werden wir jedoch in den nächsten Seiten genauer eingehen.&lt;/p></description></item><item><title>Docs: Editor</title><link>/docs/web/angular/05_2_editor/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/05_2_editor/</guid><description>
&lt;h1 id="der-helden-editor">Der Helden-Editor&lt;/h1>
&lt;blockquote>
&lt;p>Die Beispielanwendung, die auf dieser Seite beschrieben wird, finden Sie unter &lt;a href="https://angular.io/generated/live-examples/toh-pt1/stackblitz.html">dieser Seite&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="erstellen-sie-die-komponente-heroes">Erstellen Sie die Komponente heroes&lt;/h2>
&lt;p>Erzeugen Sie mit der Angular CLI eine neue Komponente mit dem Namen &lt;code>heroes&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback"> ng generate component heroes
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das CLI erstellt einen neuen Ordner, &lt;code>src/app/heroes/&lt;/code>, und generiert
die drei Dateien der &lt;code>HeroesComponent&lt;/code> zusammen mit einer Testdatei.&lt;/p>
&lt;p>Die Klassendatei &lt;code>HeroesComponent&lt;/code> sieht wie folgt aus:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-heroes&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./heroes.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Man importiert immer das &lt;a href="https://angular.io/api/core/Component">Component&lt;/a>-Symbol aus der Angular-Kernbibliothek
und annotieren die Komponentenklasse mit &lt;a href="https://angular.io/api/core/Component">@Component&lt;/a>.&lt;/p>
&lt;p>&lt;a href="https://angular.io/api/core/Component">@Component&lt;/a> ist eine Decorator-Funktion, die die Angular-Metadaten für die Komponente spezifiziert.&lt;/p>
&lt;p>Das CLI generiert drei Metadaten-Eigenschaften:&lt;/p>
&lt;ol>
&lt;li>&lt;code>selektor&lt;/code> der CSS-Elementselektor der Komponente&lt;/li>
&lt;li>&lt;code>templateUrl&lt;/code>— der Ort der Template-Datei der Komponente.&lt;/li>
&lt;li>&lt;code>styleUrls&lt;/code>— der Speicherort der privaten CSS-Stile der Komponente.&lt;/li>
&lt;/ol>
&lt;p>Der &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors">CSS-Elementselektor&lt;/a>,
&lt;code>'app-heroes'&lt;/code>, entspricht dem Namen des HTML-Elements, das diese Komponente im Template einer übergeordneten Komponente identifiziert.&lt;/p>
&lt;p>Das &lt;code>ngOnInit()&lt;/code> ist ein &lt;a href="https://angular.io/guide/lifecycle-hooks#oninit">lifecyle hook&lt;/a>.
Angular ruft &lt;code>ngOnInit()&lt;/code> kurz nach der Erstellung einer Komponente auf.
Es ist ein guter Ort, um die Initialisierungslogik zu platzieren.&lt;/p>
&lt;p>Die Komponentenklasse immer &lt;code>export&lt;/code>, damit man sie an anderer Stelle &lt;code>import&lt;/code> kann &amp;hellip; wie im &lt;code>AppModule&lt;/code>.&lt;/p>
&lt;h3 id="hinzufügen-einer-hero-eigenschaft">Hinzufügen einer Hero-Eigenschaft&lt;/h3>
&lt;p>Fügen Sie der &lt;code>HeroesComponent&lt;/code> eine &lt;code>Helden&lt;/code>-Eigenschaft für einen Helden namens &amp;ldquo;Windstorm&amp;rdquo; hinzu.&lt;/p>
&lt;p>&lt;code>heroes.component.ts (hero property)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">hero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Windstorm&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="den-helden-anzeigen">Den Helden anzeigen&lt;/h3>
&lt;p>Öffnen Sie die Templatedatei &amp;ldquo;heroes.component.html&amp;rdquo;.
Löschen Sie den von der Angular CLI generierten Standardtext und
ersetzen Sie ihn durch eine Datenbindung an die neue &lt;code>hero&lt;/code> Eigenschaft.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{hero}}&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="die-ansicht-heroescomponent-anzeigen">Die Ansicht &lt;code>HeroesComponent&lt;/code> anzeigen&lt;/h2>
&lt;p>Um die &lt;code>HeroesComponent&lt;/code> anzuzeigen, müssen Sie sie zum Template der Shell &lt;code>AppComponent&lt;/code> hinzufügen.&lt;/p>
&lt;p>Denken Sie daran, dass &lt;code>app-heroes&lt;/code> der &lt;a href="#selector">Element-Selektor&lt;/a> für die &lt;code>HeroesComponent&lt;/code> ist.
Fügen Sie also ein &lt;code>&amp;lt;app-heroes&amp;gt;&lt;/code>-Element in die &lt;code>AppComponent&lt;/code>-Templatdatei ein, direkt unter dem Titel.&lt;/p>
&lt;p>&lt;code>src/app/app.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">app-heroes&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-heroes&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Unter der Annahme, dass der CLI-Befehl &lt;code>ng serve&lt;/code> noch ausgeführt wird,
sollte der Browser aktualisiert werden und sowohl den Titel der Anwendung als auch den Namen des Helden anzeigen.&lt;/p>
&lt;h2 id="erstellen-einer-hero-interface">Erstellen einer Hero-Interface&lt;/h2>
&lt;p>Ein echter Held ist mehr als nur ein Name.&lt;/p>
&lt;p>Erstellen Sie eine &lt;code>Hero&lt;/code>-Schnittstelle in einer eigenen Datei im Ordner &lt;code>src/app&lt;/code>.
Gib ihr die Eigenschaften &lt;code>id&lt;/code> und &lt;code>name&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/hero.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Hero&lt;/span> {
&lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Kehren Sie zur Klasse &lt;code>HeroesComponent&lt;/code> zurück und importieren Sie die Schnittstelle &lt;code>Hero&lt;/code>.&lt;/p>
&lt;p>Refaktorieren Sie die Eigenschaft &lt;code>hero&lt;/code> der Komponente, so dass sie vom Typ &lt;code>Hero&lt;/code> ist.
Initialisieren Sie sie mit einer &lt;code>id&lt;/code> von &lt;code>1&lt;/code> und dem Namen &lt;code>Windstorm&lt;/code>.&lt;/p>
&lt;p>Die überarbeitete Klassendatei &lt;code>HeroesComponent&lt;/code> sollte wie folgt aussehen:&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-heroes&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./heroes.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">hero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">1&lt;/span>,
&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Windstorm&amp;#39;&lt;/span>
};
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Seite wird nicht mehr richtig angezeigt, weil Sie den Helden von einer Zeichenkette in ein Objekt geändert haben.&lt;/p>
&lt;h2 id="zeigen-sie-das-hero-objekt-an">Zeigen Sie das Hero-Objekt an&lt;/h2>
&lt;p>Aktualisieren Sie die Bindung im Template, um den Namen des Helden anzuzeigen
und zeigen Sie sowohl &lt;code>id&lt;/code> als auch &lt;code>name&lt;/code> in einem Detail-Layout wie diesem:&lt;/p>
&lt;p>&lt;code>heroes.component.html (HeroesComponent's template)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{hero.name}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;id: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;name: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{hero.name}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Browser aktualisiert sich und zeigt die Informationen über den Helden an.&lt;/p>
&lt;h2 id="formatieren-mit-der-_uppercasepipe_">Formatieren mit der &lt;em>UppercasePipe&lt;/em>&lt;/h2>
&lt;p>Ändern Sie die Bindung &lt;code>hero.name&lt;/code> wie folgt.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.html&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{hero.name | uppercase}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Browser aktualisiert sich und der Name des Helden wird nun in Großbuchstaben angezeigt.&lt;/p>
&lt;p>Das Wort &lt;a href="https://angular.io/api/common/UpperCasePipe">&lt;code>uppercase&lt;/code>&lt;/a> in der Interpolationsbindung,
direkt nach dem Pipe-Operator ( | ),
aktiviert die eingebaute &lt;code>UppercasePipe&lt;/code>.&lt;/p>
&lt;p>&lt;a href="https://angular.io/guide/pipes">Pipes&lt;/a> sind ein guter Weg, um Strings, Währungsbeträge, Daten und andere Anzeigedaten zu formatieren.
Angular wird mit mehreren eingebauten Pipes ausgeliefert und Sie können Ihre eigenen erstellen.&lt;/p>
&lt;h2 id="den-helden-bearbeiten">Den Helden bearbeiten&lt;/h2>
&lt;p>Die Benutzer sollten den Namen des Helden in einem Textfeld &amp;ldquo;&lt;input>&amp;rdquo; bearbeiten können.&lt;/p>
&lt;p>Das Textfeld sollte sowohl die Eigenschaft &amp;ldquo;Name&amp;rdquo; des Helden anzeigen
und diese Eigenschaft während der Eingabe des Benutzers aktualisieren.
Das heißt, die Daten fließen von der Komponentenklasse nach draußen auf den Bildschirm und
vom Bildschirm zurück zur Klasse.&lt;/p>
&lt;p>Um diesen Datenfluss zu automatisieren, richten Sie eine zweiseitige Datenbindung zwischen dem Formularelement &lt;code>&amp;lt;input&amp;gt;&lt;/code> und der Eigenschaft &lt;code>hero.name&lt;/code> ein.&lt;/p>
&lt;h3 id="zwei-wege-bindung">Zwei-Wege-Bindung&lt;/h3>
&lt;p>Überarbeiten Sie den Detailbereich im Template &lt;code>HeroesComponent&lt;/code> so, dass er wie folgt aussieht:&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.html (HeroesComponent's template)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>[(ngModel)]&lt;/strong> ist Angulars Syntax für die Zwei-Wege-Datenbindung.&lt;/p>
&lt;p>Hier bindet sie die Eigenschaft &lt;code>hero.name&lt;/code> an die HTML-Textbox, so dass Daten in beide Richtungen fließen können: von der Eigenschaft &lt;code>hero.name&lt;/code> zur Textbox und von der Textbox zurück zum &lt;code>hero.name&lt;/code>.&lt;/p>
&lt;h3 id="das-fehlende-_formsmodule_">Das fehlende &lt;em>FormsModule&lt;/em>&lt;/h3>
&lt;p>Beachten Sie, dass die Anwendung nicht mehr funktioniert, wenn Sie &lt;code>[(ngModel)]&lt;/code> hinzufügen.&lt;/p>
&lt;p>Um den Fehler zu sehen, öffnen Sie die Browser-Entwicklungswerkzeuge und suchen Sie in der Konsole
nach einer Meldung wie&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">Template parse errors:
Can&lt;span style="color:#e6db74">&amp;#39;t bind to &amp;#39;&lt;/span>ngModel&lt;span style="color:#e6db74">&amp;#39; since it is not a known property of &amp;#39;&lt;/span>input&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Obwohl &lt;a href="https://angular.io/api/forms/NgModel">ngModel&lt;/a> eine gültige Angular-Direktive ist, ist sie standardmäßig nicht verfügbar.&lt;/p>
&lt;p>Sie gehört zum optionalen &lt;a href="https://angular.io/api/forms/FormsModule">FormsModule&lt;/a> und man muss sich &lt;em>opt-in&lt;/em>, um sie zu verwenden.&lt;/p>
&lt;h2 id="_appmodule_">&lt;em>AppModule&lt;/em>&lt;/h2>
&lt;p>Angular muss wissen, wie die Teile Ihrer Anwendung zusammenpassen
und welche anderen Dateien und Bibliotheken die Anwendung benötigt.
Diese Informationen werden &lt;em>Metadaten&lt;/em> genannt.&lt;/p>
&lt;p>Einige der Metadaten befinden sich in den &lt;code>@Component&lt;/code>-Dekoratoren, die Sie zu Ihren Komponentenklassen hinzugefügt haben.
Andere wichtige Metadaten befinden sich in &lt;a href="https://angular.io/guide/ngmodules">&lt;code>@NgModule&lt;/code>&lt;/a> Dekoratoren.&lt;/p>
&lt;p>Der wichtigste &lt;a href="https://angular.io/guide/ngmodules">&lt;code>@NgModule&lt;/code>&lt;/a> Dekorator annotiert die Top-Level &lt;strong>AppModule&lt;/strong> Klasse.&lt;/p>
&lt;p>Das Angular CLI generierte eine &lt;code>AppModule&lt;/code> Klasse in &lt;code>src/app/app.module.ts&lt;/code> als es das Projekt erstellte.
Dies ist der Ort, an dem Sie das &lt;a href="https://angular.io/api/forms/FormsModule">FormsModule&lt;/a> einfügen.&lt;/p>
&lt;h3 id="importieren-sie-_formsmodule">Importieren Sie _FormsModule&lt;/h3>
&lt;p>Öffnen Sie &lt;code>AppModule&lt;/code> (&lt;code>app.module.ts&lt;/code>) und importieren Sie das Symbol &lt;code>FormsModule&lt;/code> aus der Bibliothek &lt;code>@angular/forms&lt;/code>.&lt;/p>
&lt;p>&lt;code>app.module.ts (FormsModule symbol import)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">FormsModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/forms&amp;#39;&lt;/span>; &lt;span style="color:#75715e">// &amp;lt;-- NgModel lives here
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Fügen Sie dann &lt;code>FormsModule&lt;/code> zum &lt;code>@NgModule&lt;/code>-Metadaten-Array &lt;code>imports&lt;/code> hinzu, das eine Liste der externen Module enthält, die die Anwendung benötigt.&lt;/p>
&lt;p>&lt;code>app.module.ts (@NgModule imports)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">BrowserModule&lt;/span>,
&lt;span style="color:#a6e22e">FormsModule&lt;/span>
],
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn der Browser aktualisiert wird, sollte die Anwendung wieder funktionieren. Sie können den Namen des Helden bearbeiten und sehen, dass die Änderungen sofort in der &lt;code>&amp;lt;h2&amp;gt;&lt;/code> oberhalb des Textfeldes angezeigt werden.&lt;/p>
&lt;h3 id="deklarieren-sie-heroescomponent">Deklarieren Sie &lt;code>HeroesComponent&lt;/code>&lt;/h3>
&lt;p>Jede Komponente muss in &lt;em>exakt einem&lt;/em> &lt;a href="guide/ngmodules">NgModule&lt;/a> deklariert werden.&lt;/p>
&lt;p>&lt;em>Du&lt;/em> hast die &lt;code>HeroesComponent&lt;/code> nicht deklariert.
Warum hat die Anwendung dann funktioniert?&lt;/p>
&lt;p>Sie funktionierte, weil das Angular CLI &lt;code>HeroesComponent&lt;/code> im &lt;code>AppModule&lt;/code> deklarierte, als es diese Komponente generierte.&lt;/p>
&lt;p>Öffnen Sie &lt;code>src/app/app.module.ts&lt;/code> und finden Sie &lt;code>HeroesComponent&lt;/code>, das ganz oben importiert wurde.&lt;/p>
&lt;p>&lt;code>src/app/app.module.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes/heroes.component&amp;#39;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die &lt;code>HeroesComponent&lt;/code> wird in dem Array &lt;code>@NgModule.declarations&lt;/code> deklariert.
&lt;code>src/app/app.module.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">declarations&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">AppComponent&lt;/span>,
&lt;span style="color:#a6e22e">HeroesComponent&lt;/span>
],
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Beachten Sie, dass &lt;code>AppModule&lt;/code> beide Anwendungskomponenten, &lt;code>AppComponent&lt;/code> und &lt;code>HeroesComponent&lt;/code>, deklariert.&lt;/p>
&lt;h2 id="abschließende-überprüfung-des-codes">Abschließende Überprüfung des Codes&lt;/h2>
&lt;p>Hier sind die auf dieser Seite besprochenen Codedateien.&lt;/p>
&lt;ol>
&lt;li>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-heroes&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./heroes.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">hero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">1&lt;/span>,
&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Windstorm&amp;#39;&lt;/span>
};
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>&lt;code>src/app/heroes/heroes.component.html&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{hero.name | uppercase}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;id: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>&lt;code>src/app/app.module.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">BrowserModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/platform-browser&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">NgModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">FormsModule&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/forms&amp;#39;&lt;/span>; &lt;span style="color:#75715e">// &amp;lt;-- NgModel lives here
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">AppComponent&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./app.component&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes/heroes.component&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@NgModule&lt;/span>({
&lt;span style="color:#a6e22e">declarations&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">AppComponent&lt;/span>,
&lt;span style="color:#a6e22e">HeroesComponent&lt;/span>
],
&lt;span style="color:#a6e22e">imports&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;span style="color:#a6e22e">BrowserModule&lt;/span>,
&lt;span style="color:#a6e22e">FormsModule&lt;/span>
],
&lt;span style="color:#a6e22e">providers&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [],
&lt;span style="color:#a6e22e">bootstrap&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#a6e22e">AppComponent&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppModule&lt;/span> { }
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>&lt;code>src/app/app.component.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-root&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./app.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./app.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">AppComponent&lt;/span> {
&lt;span style="color:#a6e22e">title&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tour of Heroes&amp;#39;&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="5">
&lt;li>&lt;code>src/app/app.component.html&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;{{title}}&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">app-heroes&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">app-heroes&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="6">
&lt;li>&lt;code>src/app/hero.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Hero&lt;/span> {
&lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>;
&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;ul>
&lt;li>Sie haben die CLI verwendet, um eine zweite &lt;code>HeroesComponent&lt;/code> zu erstellen.&lt;/li>
&lt;li>Sie haben die &lt;code>HeroesComponent&lt;/code> angezeigt, indem Sie sie der &lt;code>AppComponent&lt;/code>-Shell hinzugefügt haben.&lt;/li>
&lt;li>Sie haben die &lt;code>UppercasePipe&lt;/code> angewendet, um den Namen zu formatieren.&lt;/li>
&lt;li>Du hast die Zwei-Wege-Datenbindung mit der &lt;code>ngModel&lt;/code>-Direktive benutzt.&lt;/li>
&lt;li>Du hast etwas über das &lt;code>AppModule&lt;/code> gelernt.&lt;/li>
&lt;li>Du hast das &lt;code>FormsModule&lt;/code> in das &lt;code>AppModule&lt;/code> importiert, so dass Angular die &lt;code>ngModel&lt;/code>-Direktive erkennen und anwenden konnte.&lt;/li>
&lt;li>Du hast gelernt, wie wichtig es ist, Komponenten im &lt;code>AppModule&lt;/code> zu deklarieren
und schätzt es, dass die CLI sie für dich deklariert.&lt;/li>
&lt;/ul></description></item><item><title>Docs: CSS-Selektoren</title><link>/docs/web/html_css/12_css_selectors/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/12_css_selectors/</guid><description>
&lt;h2 id="was-gibt-es-für-css-selektoren">Was gibt es für CSS-Selektoren?&lt;/h2>
&lt;p>Nun da wir die Grundlagen von CSS gelernt haben, können wir uns die Selektoren genauer anschauen.
Die Selektoren bestimmen, für welche HTML-Elemente die CSS-Regeln gelten (&amp;ldquo;ziehen&amp;rdquo;).&lt;/p>
&lt;h2 id="selektoren-im-überblick">Selektoren im Überblick&lt;/h2>
&lt;p>Es gibt verschiedenste Selektoren, welche alle ihren eigenen Nutzen haben. In der folgenden Tabelle werden die gängigsten aufgezählt und erklärt.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Anwendung in HTML&lt;/th>
&lt;th>Anwendung in CSS&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Klasse&lt;/td>
&lt;td>&lt;code>class=&amp;quot;demo-class&amp;quot;&lt;/code>&lt;/td>
&lt;td>&lt;code>.demo-class {...}&lt;/code>&lt;/td>
&lt;td>CSS-Klassen können mit dem &amp;ldquo;class&amp;rdquo;-Attribut auf jedes beliebige HTML-Element angewendet und dann im CSS referenziert werden. Klassen können dabei auf mehrere Elemente gegeben werden, was das Wiederverwenden der CSS-Regeln ermöglicht.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ID&lt;/td>
&lt;td>&lt;code>id=&amp;quot;demo-id&amp;quot;&lt;/code>&lt;/td>
&lt;td>&lt;code>#demo-class {...}&lt;/code>&lt;/td>
&lt;td>IDs können mit dem &amp;ldquo;id&amp;rdquo;-Attribut auf jedes beliebige HTML-Element angewendet werden. Grundsätzlich sollten IDs eindeutig sein, d.h. nicht an mehreren Orten verwendet werden.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Element&lt;/td>
&lt;td>Keien&lt;/td>
&lt;td>&lt;code>&amp;quot;element-name&amp;quot; {...}&lt;/code>&lt;/td>
&lt;td>Um alle HTML-Elemente eines Types auszuwählen, muss man nichts spezielles im HTML anpasse. Es muss einfach gegeben sein, dass die Elemente auch tatsächlich vorhanden sind. Im CSS muss man dann nur noch den Element-Namen angeben (im Beispiel zu ersetzen mit z.B. &lt;code>a&lt;/code>, &lt;code>p&lt;/code>, &lt;code>input&lt;/code>, &lt;code>body&lt;/code>), wobei keine Prefixes notwendig sind.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Im nächsten Beispiel werden diese 3 Möglichkeiten verwendet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">form&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;round-container&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Bitte gib deinen Namen ein:&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;your-name&amp;#34;&lt;/span>&amp;gt;Name&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;your-name&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;submit&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">form&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
.&lt;span style="color:#a6e22e">round-container&lt;/span> {
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">20&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">lightgrey&lt;/span>;
&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
}
#your-name {
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">orange&lt;/span>;
}
&lt;span style="color:#f92672">label&lt;/span> {
&lt;span style="color:#66d9ef">font-weight&lt;/span>: &lt;span style="color:#66d9ef">bold&lt;/span>;
}
&amp;lt;/&lt;span style="color:#f92672">style&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In diesem Beispiel wurde die frei erfundene Klasse &lt;code>round-container&lt;/code>, die ID &lt;code>your-name&lt;/code> und das Element &lt;code>label&lt;/code> mit CSS versehen.&lt;/p>
&lt;h2 id="spezifischere-selektoren">Spezifischere Selektoren&lt;/h2>
&lt;h3 id="element-auf-grund-eines-attributes-setzen">Element auf Grund eines Attributes setzen&lt;/h3>
&lt;p>Es kann vorkommen, dass du ein Element mit einem spezifischen Attribut stylen musst. Möchtest du z.B. alle Submit-Buttons stylen, dann könnte dir dieser Selektor weiterhelfen: &lt;code>input[type=submit] {...}&lt;/code>&lt;/p>
&lt;p>Es gibt aber auch die Möglichkeit, ob der Attribut-Wert einen bestimmten Text enthält, damit beginnt bzw. endet. Hierfür sei auf diese Seite verwiesen: &lt;a href="https://www.w3schools.com/cssref/css_selectors.asp">https://www.w3schools.com/cssref/css_selectors.asp&lt;/a>&lt;/p>
&lt;h3 id="spezifisches-element-mit-klasse">Spezifisches Element mit Klasse&lt;/h3>
&lt;p>Möchtest du z.B. alle &lt;code>&amp;lt;form&amp;gt;&lt;/code>-Elemente, die die Klasse &lt;code>round-container&lt;/code> enthalten, stylen, dann möchtest du wahrscheinlich folgenden Selektor: &lt;code>form.round-container {...}&lt;/code>&lt;/p>
&lt;h3 id="elemente-die-sich-in-einem-anderen-element-befinden-müssen">Elemente, die sich in einem anderen Element befinden müssen&lt;/h3>
&lt;p>Möchtest du z.B. alle &lt;code>label&lt;/code>s stylen, die sich in einer &lt;code>form&lt;/code> befinden, dann verwende so etwas: &lt;code>form label {...}&lt;/code>. Zuerst kommt das übergeordnete Element, dann dasjenige, das tiefer verschachtelt ist. Die Elemente werden mit einem Leerzeichen voneinander getrennt. Bei diesem Selektor spielt es keine Rolle, ob &lt;code>label&lt;/code> direkt in &lt;code>form&lt;/code> ist, Hauptsache &lt;code>label&lt;/code> befindet sich innerhalb einer &lt;code>form&lt;/code>.&lt;/p>
&lt;p>Ist es hingegen relevant, dass der &lt;code>label&lt;/code> direkt in der &lt;code>form&lt;/code> kommt (also keinen anderen Parent hat als &lt;code>form&lt;/code>), dann benutze folgende Regel: &lt;code>form &amp;gt; label {...}&lt;/code>. Bei diesem Selektor bedeutet das &lt;code>&amp;gt;&lt;/code>, dass das erste Element der Parent vom zweiten Element sein muss.&lt;/p>
&lt;h3 id="pseudoklassen">Pseudoklassen&lt;/h3>
&lt;p>Mithilfe von Pseudoklassen kann einen besonderen Zustand abgefragt werden. Mit &lt;code>:hover&lt;/code> können CSS-Regeln z.B. auf Elemente beschränkt werden, wenn sich diese unterhalb des Mauszeigers befinden.&lt;/p>
&lt;p>Mit dem nächsten Selektor kannst du z.B. das Aussehen beim Darüber-&amp;ldquo;Hovern&amp;rdquo; (also wenn der Mauszeiger darüber ist) vollständig verändern:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#f92672">input&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#f92672">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#f92672">submit&lt;/span>&lt;span style="color:#f92672">]&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span> {
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">orange&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">white&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Für &lt;code>&amp;lt;input&amp;gt;&lt;/code>-Elemente könnten Pseudoklassen wie &lt;code>:disabled&lt;/code> oder &lt;code>:checked&lt;/code> (Checkboxen) noch interessant sein.&lt;/p>
&lt;p>Du hast aber auch Zugriff auf völlig andere Sachen! Du kannst z.B. den ersten Buchstaben einem Paragraphen z.B. automatisch gross schreiben lassen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#f92672">p&lt;/span>:&lt;span style="color:#a6e22e">first-letter&lt;/span> {
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#ae81ff">200&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Viele weitere interessante Pseudoklassen findest du hier beschrieben: &lt;a href="https://web.dev/learn/css/pseudo-classes/">https://web.dev/learn/css/pseudo-classes/&lt;/a>&lt;/p></description></item><item><title>Docs: Auswahlliste</title><link>/docs/web/angular/05_3_selection_list/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/05_3_selection_list/</guid><description>
&lt;h1 id="eine-auswahlliste-anzeigen">Eine Auswahlliste anzeigen&lt;/h1>
&lt;blockquote>
&lt;p>Die Beispielanwendung, die auf dieser Seite beschrieben wird, finden Sie unter &lt;a href="hhttps://angular.io/generated/live-examples/toh-pt2/stackblitz.html">dieser Seite&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="mock-heroes-erstellen">Mock Heroes erstellen&lt;/h2>
&lt;p>Sie benötigen einige Helden, die angezeigt werden sollen.&lt;/p>
&lt;p>Letztendlich werden Sie diese von einem entfernten Datenserver erhalten.
Für den Moment werden Sie einige &lt;em>mock heroes&lt;/em> erstellen und so tun, als kämen sie vom Server.&lt;/p>
&lt;p>Erstelle eine Datei namens &lt;code>mock-heroes.ts&lt;/code> im Ordner &lt;code>src/app/&lt;/code>.
Definiere eine &lt;code>HEROES&lt;/code> Konstante als Array von zehn Helden und exportiere sie.
Die Datei sollte wie folgt aussehen.&lt;/p>
&lt;p>&lt;code>src/app/mock-heroes.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">HEROES&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">11&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr Nice&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">12&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Narco&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">13&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Bombasto&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">14&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Celeritas&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">15&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magneta&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">16&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;RubberMan&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">17&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dynama&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">18&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr IQ&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">19&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magma&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">20&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tornado&amp;#39;&lt;/span> }
];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="anzeige-der-helden">Anzeige der Helden&lt;/h2>
&lt;p>Öffnen Sie die Klassendatei &lt;code>HeroesComponent&lt;/code> und importieren Sie das Mock &lt;code>HEROES&lt;/code>.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts (import HEROES)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">HEROES&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">11&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr Nice&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">12&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Narco&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">13&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Bombasto&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">14&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Celeritas&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">15&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magneta&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">16&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;RubberMan&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">17&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dynama&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">18&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr IQ&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">19&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magma&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">20&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tornado&amp;#39;&lt;/span> }
];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Definieren Sie in derselben Datei (Klasse &lt;code>HeroesComponent&lt;/code>) eine Komponenteneigenschaft namens &lt;code>heroes&lt;/code>, um das Array &lt;code>HEROES&lt;/code> zur Bindung freizugeben.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">HEROES&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="auflisten-von-helden-mit-ngforhttpsangularioapicommonngforof">Auflisten von Helden mit &lt;a href="https://angular.io/api/common/NgForOf">*ngFor&lt;/a>&lt;/h3>
&lt;p>Öffnen Sie die Templatedatei &lt;code>HeroesComponent&lt;/code> und nehmen Sie die folgenden Änderungen vor:&lt;/p>
&lt;ul>
&lt;li>Fügen Sie ein &lt;code>&amp;lt;h2&amp;gt;&lt;/code> am Anfang ein,&lt;/li>
&lt;li>Darunter fügen Sie eine ungeordnete HTML-Liste (&lt;code>&amp;lt;ul&amp;gt;&lt;/code>) ein.&lt;/li>
&lt;li>Fügen Sie ein &lt;code>&amp;lt;li&amp;gt;&lt;/code> innerhalb des &lt;code>&amp;lt;ul&amp;gt;&lt;/code> ein, das die Eigenschaften eines &lt;code>Helden&lt;/code> anzeigt.&lt;/li>
&lt;li>Streuen Sie einige CSS-Klassen für die Gestaltung ein (Sie werden die CSS-Stile in Kürze hinzufügen).&lt;/li>
&lt;/ul>
&lt;p>Das Ganze soll so aussehen:&lt;/p>
&lt;p>&lt;code>heroes.component.html (heroes template)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;My Heroes&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ul&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;heroes&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;badge&amp;#34;&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; {{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Es wird ein Fehler angezeigt, da die Eigenschaft &amp;ldquo;hero&amp;rdquo; nicht existiert. Um Zugriff auf jeden einzelnen Helden zu haben und sie alle aufzulisten, fügen Sie ein &lt;code>*ngFor&lt;/code> zum &lt;code>&amp;lt;li&amp;gt;&lt;/code> hinzu, um die Liste der Helden zu durchlaufen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die &lt;code>*ngFor&lt;/code> ist Angulars Direktive &lt;em>repeater&lt;/em>.
Sie wiederholt das Host-Element für jedes Element in einer Liste.&lt;/p>
&lt;p>Die Syntax in diesem Beispiel ist wie folgt:&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;li&amp;gt;&lt;/code> ist das Host-Element.&lt;/li>
&lt;li>&lt;code>heroes&lt;/code> enthält die Mock-Helden-Liste der Klasse &lt;code>HeroesComponent&lt;/code>, die Mock-Helden-Liste.&lt;/li>
&lt;li>&lt;code>hero&lt;/code> enthält das aktuelle Heldenobjekt für jede Iteration durch die Liste.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images/hint.png" alt="asset"> Vergessen Sie nicht das Sternchen (*) vor &lt;code>ngFor&lt;/code>. Es ist ein wichtiger Teil der Syntax.&lt;/p>
&lt;p>Nachdem der Browser aktualisiert wurde, erscheint die Liste der Helden.&lt;/p>
&lt;h3 id="a-idstylesastil-der-helden">&lt;a id="styles">&lt;/a>Stil der Helden&lt;/h3>
&lt;p>Die Heldenliste sollte ansprechend sein und visuell reagieren, wenn der Benutzer
mit dem Mauszeiger einen Helden aus der Liste auswählen.&lt;/p>
&lt;p>Im &lt;a href="https://angular.io/tutorial/toh-pt0#app-wide-styles">ersten Tutorial&lt;/a> haben Sie die grundlegenden Stile für die gesamte Anwendung in &lt;code>styles.css&lt;/code> festgelegt.
Dieses Stylesheet enthielt keine Stile für diese Liste von Helden.&lt;/p>
&lt;p>Sie könnten weitere Stile zu &lt;code>styles.css&lt;/code> hinzufügen und das Stylesheet mit dem Hinzufügen von Komponenten weiter ausbauen.&lt;/p>
&lt;p>Vielleicht ziehen Sie es stattdessen vor, private Stile für eine bestimmte Komponente zu definieren und alles, was eine Komponente braucht, zu behalten— den Code, das HTML,
und das CSS —zusammen an einem Ort.&lt;/p>
&lt;p>Dieser Ansatz macht es einfacher, die Komponente an anderer Stelle wiederzuverwenden
und das beabsichtigte Erscheinungsbild der Komponente zu erhalten, selbst wenn die globalen Stile unterschiedlich sind.&lt;/p>
&lt;p>Sie definieren private Stile entweder inline im Array &lt;code>@Component.styles&lt;/code> oder
als Stylesheet-Datei(en), die im &lt;code>@Component.styleUrls&lt;/code> Array identifiziert werden.&lt;/p>
&lt;p>Als die CLI die &lt;code>HeroesComponent&lt;/code> generierte, erstellte sie ein leeres &lt;code>heroes.component.css&lt;/code> Stylesheet für die &lt;code>HeroesComponent&lt;/code>
und verwies in &lt;code>@Component.styleUrls&lt;/code> wie folgt darauf.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts (@Component)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-heroes&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./heroes.component.css&amp;#39;&lt;/span>]
})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Öffnen Sie die Datei &lt;code>heroes.component.css&lt;/code> und fügen Sie die privaten CSS-Stile für die &lt;code>HeroesComponent&lt;/code> ein.
Sie finden sie in der &lt;a href="#final-code-review">finalen Code-Übersicht&lt;/a> am Ende dieser Anleitung.&lt;/p>
&lt;p>&lt;img src="/images/hint.png" alt="asset">
Stile und Stylesheets, die in &lt;code>@Component&lt;/code>-Metadaten identifiziert werden, sind auf diese spezifische Komponente beschränkt.
Die &lt;code>heroes.component.css&lt;/code>-Stile gelten nur für die &lt;code>HeroesComponent&lt;/code> und haben keine Auswirkungen auf das äußere HTML oder das HTML in anderen Komponenten.&lt;/p>
&lt;h2 id="anzeigen-von-details">Anzeigen von Details&lt;/h2>
&lt;p>Wenn der Benutzer auf einen Helden in der Liste klickt, sollte die Komponente die Details des ausgewählten Helden unten auf der Seite anzeigen.&lt;/p>
&lt;p>In diesem Abschnitt werden Sie auf das Klick-Ereignis für das Heldenelement warten
und aktualisieren die Heldendetails.&lt;/p>
&lt;h3 id="hinzufügen-einer-klick-ereignisbindung">Hinzufügen einer Klick-Ereignisbindung&lt;/h3>
&lt;p>Fügen Sie eine Klick-Ereignis-Bindung zu &lt;code>&amp;lt;li&amp;gt;&lt;/code> wie folgt hinzu:&lt;/p>
&lt;p>&lt;code>heroes.component.html (template excerpt)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">onSelect&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dies ist ein Beispiel für die &lt;a href="https://angular.io/guide/event-binding">Ereignisbindung&lt;/a>-Syntax von Angular.&lt;/p>
&lt;p>Die Klammern um &lt;code>click&lt;/code> sagen Angular, dass es auf das &lt;code>click&lt;/code>-Ereignis des &lt;code>&amp;lt;li&amp;gt;&lt;/code>-Elements warten soll.
Wenn der Benutzer auf das Element &lt;code>&amp;lt;li&amp;gt;&lt;/code> klickt, führt Angular den Ausdruck &lt;code>onSelect(hero)&lt;/code> aus.&lt;/p>
&lt;p>Im nächsten Abschnitt definieren Sie eine &lt;code>onSelect()&lt;/code> Methode in &lt;code>HeroesComponent&lt;/code> um
um den Helden anzuzeigen, der in der &lt;code>*ngFor&lt;/code> Expression definiert wurde.&lt;/p>
&lt;h3 id="fügen-sie-den-click-event-handler-hinzu">Fügen Sie den Click-Event-Handler hinzu&lt;/h3>
&lt;p>Benennen Sie die Eigenschaft &lt;code>hero&lt;/code> der Komponente in &lt;code>selectedHero&lt;/code> um, aber weisen Sie sie nicht zu.
Es gibt keinen &lt;em>selected hero&lt;/em>, wenn die Anwendung startet.&lt;/p>
&lt;p>Fügen Sie die folgende Methode &lt;code>onSelect()&lt;/code> hinzu, die den angeklickten Helden aus dem Template
dem &lt;code>selectedHero&lt;/code> der Komponente zuweist.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.ts (onSelect)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">selectedHero?&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>;
&lt;span style="color:#a6e22e">onSelect&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">selectedHero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">hero&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="hinzufügen-eines-detailbereichs">Hinzufügen eines Detailbereichs&lt;/h3>
&lt;p>Derzeit haben Sie eine Liste in dem Komponententemplate. Um auf einen Helden in der Liste zu klicken
zu klicken und Details über diesen Helden anzuzeigen, benötigen Sie einen Abschnitt für die Details, der im
Template. Fügen Sie folgendes zu &lt;code>heroes.component.html&lt;/code> unter dem Listenabschnitt hinzu:&lt;/p>
&lt;p>&lt;code>heroes.component.html (selected hero details)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{selectedHero.name | uppercase}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;id: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{selectedHero.id}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Nach dem Aktualisieren des Browsers ist die Anwendung fehlerhaft.&lt;/p>
&lt;p>Öffnen Sie die Entwicklerwerkzeuge des Browsers und suchen Sie in der Konsole nach einer Fehlermeldung wie dieser:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">HeroesComponent.html:3 ERROR TypeError: Cannot read property &lt;span style="color:#e6db74">&amp;#39;name&amp;#39;&lt;/span> of undefined
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="was-ist-passiert">Was ist passiert?&lt;/h4>
&lt;p>Wenn die Anwendung startet, ist die Eigenschaft &lt;code>selectedHero&lt;/code> &amp;ldquo;undefiniert&amp;rdquo; &lt;em>durch Design&lt;/em>.&lt;/p>
&lt;p>Bindungsausdrücke im Template, die sich auf Eigenschaften von &lt;code>selectedHero&lt;/code> beziehen—Ausdrücke wie &lt;code>{{selectedHero.name}}&lt;/code>—&lt;em>müssen fehlschlagen&lt;/em>, weil es keinen ausgewählten Helden gibt.&lt;/p>
&lt;h4 id="die-lösung---leere-details-mit-_ngif_-ausblenden">Die Lösung - leere Details mit &lt;em>*ngIf&lt;/em> ausblenden&lt;/h4>
&lt;p>Die Komponente sollte die ausgewählten Heldendetails nur anzeigen, wenn der &lt;code>selectedHero&lt;/code> existiert.&lt;/p>
&lt;p>Wickeln Sie das HTML der Heldendetails in ein &lt;code>&amp;lt;div&amp;gt;&lt;/code>.
Fügen Sie die &lt;code>*ngIf&lt;/code>-Direktive von Angular in das &lt;code>&amp;lt;div&amp;gt;&lt;/code> ein und setzen Sie es auf &lt;code>selectedHero&lt;/code>.&lt;/p>
&lt;p>&lt;img src="/images/hint.png" alt="asset"> Vergessen Sie nicht das Sternchen (*) vor &lt;code>ngIf&lt;/code>. Das ist ein wichtiger Teil der Syntax.&lt;/p>
&lt;p>&lt;code>src/app/heroes/heroes.component.html (*ngIf)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngIf&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;selectedHero&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{selectedHero.name | uppercase}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;id: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{selectedHero.id}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Nach dem Aktualisieren des Browsers wird die Liste der Namen wieder angezeigt.
Der Detailbereich ist leer.
Klicken Sie auf einen Helden in der Liste der Helden und seine Details erscheinen.
Die Anwendung scheint wieder zu funktionieren.
Die Helden werden in einer Liste angezeigt und die Details zu dem angeklickten Helden erscheinen unten auf der Seite.&lt;/p>
&lt;h4 id="warum-es-funktioniert">Warum es funktioniert&lt;/h4>
&lt;p>Wenn &lt;code>selectedHero&lt;/code> undefiniert ist, entfernt das &lt;code>ngIf&lt;/code> die Heldendetails aus dem DOM. Es gibt keine &lt;code>selectedHero&lt;/code> Bindungen zu berücksichtigen.&lt;/p>
&lt;p>Wenn der Benutzer einen Helden auswählt, hat &lt;code>selectedHero&lt;/code> einen Wert und
ngIf&amp;quot; setzt das Heldendetail in das DOM.&lt;/p>
&lt;h3 id="den-ausgewählten-helden-gestalten">Den ausgewählten Helden gestalten&lt;/h3>
&lt;p>Um den ausgewählten Helden zu identifizieren, können Sie die CSS-Klasse &lt;code>.selected&lt;/code> in den &lt;a href="#styles">Stilen, die Sie zuvor hinzugefügt haben&lt;/a> verwenden.
Um die Klasse &lt;code>.selected&lt;/code> auf das &lt;code>&amp;lt;li&amp;gt;&lt;/code> anzuwenden, wenn der Benutzer darauf klickt, verwenden Sie die Klassenbindung.&lt;/p>
&lt;p>&lt;img src="/images/angular/heroes-list-selected.png" alt="Ausgewählter Held mit dunklem Hintergrund und hellem Text, der ihn von nicht ausgewählten Listenelementen unterscheidet">&lt;/p>
&lt;p>Angulars &lt;a href="https://angular.io/guide/attribute-binding#class-binding">class-binding&lt;/a> kann eine CSS-Klasse bedingt hinzufügen und entfernen.
Fügen Sie &lt;code>[class.some-css-class]=&amp;quot;some-condition&amp;quot;&lt;/code> zu dem Element hinzu, das Sie gestalten möchten.&lt;/p>
&lt;p>Fügen Sie die folgende &lt;code>[class.selected]&lt;/code> Bindung zum &lt;code>&amp;lt;li&amp;gt;&lt;/code> im &lt;code>HeroesComponent&lt;/code> Template hinzu:&lt;/p>
&lt;p>&lt;code>heroes.component.html (toggle the 'selected' CSS class)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">[&lt;span style="color:#66d9ef">class&lt;/span>.&lt;span style="color:#a6e22e">selected&lt;/span>]&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero === selectedHero&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn der aktuelle Zeilenheld derselbe ist wie der &lt;code>selectedHero&lt;/code>, fügt Angular die CSS-Klasse &lt;code>selected&lt;/code> hinzu. Wenn die beiden Helden unterschiedlich sind, entfernt Angular die Klasse.&lt;/p>
&lt;p>Das fertige &lt;code>&amp;lt;li&amp;gt;&lt;/code> sieht wie folgt aus:&lt;/p>
&lt;p>&lt;code>heroes.component.html (list item hero)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">selected&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero &lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">==&lt;/span> &lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">onSelect&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;badge&amp;#34;&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; {{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="div-idfinal-code-reviewdivabschließende-code-überprüfung">&lt;div id="final-code-review">&lt;/div>Abschließende Code-Überprüfung&lt;/h2>
&lt;p>Hier sind die auf dieser Seite besprochenen Codedateien, einschließlich der &lt;code>HeroesComponent&lt;/code>-Stile.&lt;/p>
&lt;ol>
&lt;li>&lt;code>src/app/mock-heroes.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">HEROES&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>[] &lt;span style="color:#f92672">=&lt;/span> [
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">11&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr Nice&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">12&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Narco&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">13&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Bombasto&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">14&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Celeritas&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">15&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magneta&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">16&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;RubberMan&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">17&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dynama&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">18&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Dr IQ&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">19&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Magma&amp;#39;&lt;/span> },
{ &lt;span style="color:#a6e22e">id&lt;/span>: &lt;span style="color:#66d9ef">20&lt;/span>, &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tornado&amp;#39;&lt;/span> }
];
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>&lt;code>src/app/heroes/heroes.component.ts&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Hero&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../hero&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HEROES&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;../mock-heroes&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-heroes&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./heroes.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./heroes.component.css&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HeroesComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">HEROES&lt;/span>;
&lt;span style="color:#a6e22e">selectedHero?&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>() { }
&lt;span style="color:#a6e22e">ngOnInit() {&lt;/span>
}
&lt;span style="color:#a6e22e">onSelect&lt;/span>(&lt;span style="color:#a6e22e">hero&lt;/span>: &lt;span style="color:#66d9ef">Hero&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">selectedHero&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">hero&lt;/span>;
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>&lt;code>src/app/heroes/heroes.component.html&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;My Heroes&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ul&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;heroes&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">li&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngFor&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;let hero of heroes&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">[&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">selected&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">hero &lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">==&lt;/span> &lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span>
&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">click&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">onSelect&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#a6e22e">hero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;badge&amp;#34;&lt;/span>&amp;gt;{{hero.id}}&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; {{hero.name}}
&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngIf&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;selectedHero&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;{{selectedHero.name | uppercase}} Details&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;&amp;lt;&lt;span style="color:#f92672">span&lt;/span>&amp;gt;id: &amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;{{selectedHero.id}}&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">for&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span>&amp;gt;Hero name: &amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hero-name&amp;#34;&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">[(&lt;/span>&lt;span style="color:#a6e22e">ngModel&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">)]=&amp;#34;&lt;/span>&lt;span style="color:#a6e22e">selectedHero&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">placeholder&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>&lt;code>src/app/heroes/heroes.component.css&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">&lt;span style="color:#75715e">/* HeroesComponent&amp;#39;s private CSS styles */&lt;/span>
.&lt;span style="color:#a6e22e">heroes&lt;/span> {
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">list-style-type&lt;/span>: &lt;span style="color:#66d9ef">none&lt;/span>;
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">15&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">li&lt;/span> {
&lt;span style="color:#66d9ef">cursor&lt;/span>: &lt;span style="color:#66d9ef">pointer&lt;/span>;
&lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">relative&lt;/span>;
&lt;span style="color:#66d9ef">left&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#EEE&lt;/span>;
&lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">.5&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">.3&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">1.6&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">li&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span> {
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#ae81ff">#2c3a41&lt;/span>;
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#e6e6e6&lt;/span>;
&lt;span style="color:#66d9ef">left&lt;/span>: &lt;span style="color:#ae81ff">.1&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">li&lt;/span>.&lt;span style="color:#a6e22e">selected&lt;/span> {
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">black&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">white&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">li&lt;/span>.&lt;span style="color:#a6e22e">selected&lt;/span>:&lt;span style="color:#a6e22e">hover&lt;/span> {
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#505050&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">white&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes&lt;/span> &lt;span style="color:#f92672">li&lt;/span>.&lt;span style="color:#a6e22e">selected&lt;/span>:&lt;span style="color:#a6e22e">active&lt;/span> {
&lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">black&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">white&lt;/span>;
}
.&lt;span style="color:#a6e22e">heroes&lt;/span> .&lt;span style="color:#a6e22e">badge&lt;/span> {
&lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">inline&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#66d9ef">block&lt;/span>;
&lt;span style="color:#66d9ef">font-size&lt;/span>: &lt;span style="color:#66d9ef">small&lt;/span>;
&lt;span style="color:#66d9ef">color&lt;/span>: &lt;span style="color:#66d9ef">white&lt;/span>;
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">0.8&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span> &lt;span style="color:#ae81ff">0.7&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0.7&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">background-color&lt;/span>:&lt;span style="color:#ae81ff">#405061&lt;/span>;
&lt;span style="color:#66d9ef">line-height&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">relative&lt;/span>;
&lt;span style="color:#66d9ef">left&lt;/span>: &lt;span style="color:#ae81ff">-1&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">top&lt;/span>: &lt;span style="color:#ae81ff">-4&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">1.8&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">margin-right&lt;/span>: &lt;span style="color:#ae81ff">.8&lt;/span>&lt;span style="color:#66d9ef">em&lt;/span>;
&lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
}
&lt;span style="color:#f92672">input&lt;/span> {
&lt;span style="color:#66d9ef">padding&lt;/span>: &lt;span style="color:#ae81ff">.5&lt;/span>&lt;span style="color:#66d9ef">rem&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="zusammenfassung">Zusammenfassung&lt;/h2>
&lt;ul>
&lt;li>Die Anwendung &amp;ldquo;Tour of Heroes&amp;rdquo; zeigt eine Liste von Helden mit einer Detailansicht an.&lt;/li>
&lt;li>Der Benutzer kann einen Helden auswählen und dessen Details sehen.&lt;/li>
&lt;li>Sie haben &lt;code>*ngFor&lt;/code> verwendet, um eine Liste anzuzeigen.&lt;/li>
&lt;li>Sie haben &lt;code>*ngIf&lt;/code> verwendet, um einen HTML-Block bedingt ein- oder auszuschließen.&lt;/li>
&lt;li>Sie können eine CSS-Stilklasse mit einer &lt;code>class&lt;/code>-Bindung umschalten.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Schriftarten</title><link>/docs/web/html_css/13_css_fonts/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/13_css_fonts/</guid><description>
&lt;h2 id="arten-von-schriftarten">Arten von Schriftarten&lt;/h2>
&lt;p>Browser unterstützen mindestens diese 5 Arten von Schriftarten:&lt;/p>
&lt;p>&lt;img src="../font-types.svg" alt="fontTypes" title="Verschiedene Font-Types">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Die wichtigste Unterscheidung ist zwischen Serif- und Sans-Serif-Schriftarten. &lt;strong>Serif&lt;/strong>-Schriftarten haben Serife (also dünne Linien auf den Buchstabenlinien). Eine detailliertere Beschreibung findest du hier: &lt;a href="https://de.wikipedia.org/wiki/Serife">https://de.wikipedia.org/wiki/Serife&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Sans-Serif&lt;/strong>-Schriftarten haben diese Serifen nicht.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Bei &lt;strong>Monospace&lt;/strong>-Schriftarten beanspruchen alle Buchstaben gleich viel Platz. Ein bekanntes Beispiel hierfür ist &lt;em>Consolas&lt;/em>. Diese werden oft für Code verwendet.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Kursive&lt;/strong> Schriftarten imitieren Handschrift.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Fantasy&lt;/strong>-Schriftarten werden oft für kreative Zwecke eingesetzt.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="schriftarten-in-css">Schriftarten in CSS&lt;/h2>
&lt;p>Im CSS kannst du Schriftarten wie folgt einbinden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-css" data-lang="css">.&lt;span style="color:#a6e22e">p1&lt;/span> {
&lt;span style="color:#66d9ef">font-family&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Times New Roman&amp;#34;&lt;/span>, Times, &lt;span style="color:#66d9ef">serif&lt;/span>;
}
.&lt;span style="color:#a6e22e">p2&lt;/span> {
&lt;span style="color:#66d9ef">font-family&lt;/span>: Arial, Helvetica, &lt;span style="color:#66d9ef">sans-serif&lt;/span>;
}
.&lt;span style="color:#a6e22e">p3&lt;/span> {
&lt;span style="color:#66d9ef">font-family&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Consolas&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">monospace&lt;/span>;
}
.&lt;span style="color:#a6e22e">p4&lt;/span> {
&lt;span style="color:#66d9ef">font-family&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Lucida Handwriting&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">cursive&lt;/span>;
}
.&lt;span style="color:#a6e22e">p5&lt;/span> {
&lt;span style="color:#66d9ef">font-family&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Comic Sans MS&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">fantasy&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Als CSS-Property (=Eigenschaft) wird &lt;code>font-family&lt;/code> verwendet. Dabei können mehrere Schriftarten übergeben werden, was auf Grund von Browser-Kompatibilität empfohlen wird. Die erste Schriftart ist die wichtigste. Sollte diese nicht geladen werden können, so wird die nächste Schriftart ausprobiert. Als Fallback kann man dann &lt;code>serif&lt;/code>, &lt;code>sans-serif&lt;/code>, &lt;code>monospace&lt;/code>, &lt;code>cursive&lt;/code> oder &lt;code>fantasy&lt;/code> verwenden.&lt;/p>
&lt;p>Weitere Informationen darüber kriegst du hier: &lt;a href="https://www.w3schools.com/css/css_font.asp">https://www.w3schools.com/css/css_font.asp&lt;/a>&lt;/p>
&lt;h2 id="weitere-font-eigenschaften">Weitere Font-Eigenschaften&lt;/h2>
&lt;p>Text kann auf viele weitere Arten gestylt werden:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>CSS-Property&lt;/th>
&lt;th>Beispiel&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>color&lt;/code>&lt;/td>
&lt;td>&lt;code>color: blue&lt;/code>&lt;/td>
&lt;td>Schriftfarbe&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>background-color&lt;/code>&lt;/td>
&lt;td>&lt;code>color: blue&lt;/code>&lt;/td>
&lt;td>Schriftfarbe&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>font-size&lt;/code>&lt;/td>
&lt;td>&lt;code>font-size: 16px&lt;/code>&lt;/td>
&lt;td>Schriftgrösse.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>text-align&lt;/code>&lt;/td>
&lt;td>&lt;code>text-align: center&lt;/code>&lt;/td>
&lt;td>Einen Text zentrieren.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="auftrag">Auftrag&lt;/h2>
&lt;p>Im Rahmen der Semantic-Tags hast du ein HTML-Dokument erstellt.&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task1">
Versuche alle Properties von dieser Seite auf deiner zu verwenden.&lt;/p></description></item></channel></rss>