<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IT Ninjas – Docs</title><link>/docs/</link><description>Recent content in Docs on IT Ninjas</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: JavaScript: Einführung</title><link>/docs/web/javascript/01_js_intro/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/javascript/01_js_intro/</guid><description>
&lt;p>Jetzt wird es Zeit, dass du auch Programm-Logik auf deiner Website einbauen kannst. Dafür lernst du gleich die Programmiersprache JavaScript kennen, die von praktisch allen bekannten Browsern unterstützt wird.&lt;/p>
&lt;p>Damit du eine Übersicht über die Programmiersprache bekommst, kannst du z.B. &lt;a href="https://www.youtube.com/watch?v=DHjqpvDnNGE">dieses Video&lt;/a> schauen, ohne dass du den ersten Satz verstehen musst.&lt;/p>
&lt;h2 id="motivation-für-javascript">Motivation für JavaScript&lt;/h2>
&lt;p>JavaScript hat sehr viele Verwendungen im Browser. Einerseits können Funktionen ähnlich wie mit Java programmiert werden, sodass z.B. Berechnungen ausgeführt werden können. Zudem kann aber auch direkt mit dem angezeigten Inhalt interagiert werden. So können Validierungen oder auch Animationen ausgeführt werden. Wenn du mal sehen willst, wie eine Website aussieht ohne JS kannst du dir &lt;a href="https://chrome.google.com/webstore/detail/disable-javascript/jfpdlihdedhlmhlbgooailmfhahieoem?hl=en">hier&lt;/a> eine Chrome extension herunterladen mit welcher du JS komplett ausschalten kannst.&lt;/p>
&lt;p>Nun beginnen wir aber zuerst klein: Mit einem Button, der beim Klick eine MessageBox anzeigt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">onclick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;onClickMeClick()&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;button&amp;#34;&lt;/span>&amp;gt;Klick mich&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">onClickMeClick&lt;/span>() {
&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Klick mich nicht an!!&amp;#39;&lt;/span>);
}
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Versuche zuerst, dieses Beispiel ohne Erläuterung zu verstehen.&lt;/p>
&lt;details>
&lt;summary>Erläuterung (click to expand)&lt;/summary>
Zuerst hast du im HTML einen Button erstellt mit dem Text "Klick mich".
&lt;p>Weiter unten siehts du ein &lt;code>&amp;lt;script&amp;gt;&lt;/code>-Element. Dort drin ist eine Funktion namens &lt;code>onClickMeClick()&lt;/code> definiert. Die Funktion ruft &lt;code>alert(message: string)&lt;/code> auf. Diese &lt;code>alert&lt;/code>-Funktion öffnet eine MessageBox mit der übergebenen Nachricht.&lt;/p>
&lt;p>Wie du siehst, wird die selbst definierte Funktion beim Klick auf den Button aufgerufen. Dies passiert, weil du diesen Aufruf im &lt;code>onclick&lt;/code>-Attribut des &lt;code>&amp;lt;button&amp;gt;&lt;/code>s definiert hast. Beachte in diesem Beispiel, dass nicht die Funktion sondern deren Aufruf drin steht. Im Prinzip wird beim Button-Klick der Wert des &lt;code>onclick&lt;/code>-Attributs ausgeführt. Theoretisch könntest du auch direkt &lt;code>onclick=&amp;quot;alert('Klick mich nicht an!!')&amp;quot;&lt;/code> schreiben.&lt;/p>
&lt;/details>
&lt;h2 id="javascript-einbinden">JavaScript einbinden&lt;/h2>
&lt;p>Wie du im oberen Beispiel gesehen hast, wird Javascript via &lt;code>&amp;lt;script&amp;gt;&lt;/code>-Tag eingebunden. Dein Code kann direkt im &lt;code>&amp;lt;script&amp;gt;&lt;/code>-Tag geschrieben werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;my Js Code&amp;#39;&lt;/span>);
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Du kannst aber dein Code auch in einem separatem .js File haben und via Script Tag referenzieren:&lt;/p>
&lt;p>&lt;strong>index.html&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;mycode.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>mycode.js&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;my Js Code&amp;#39;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die zweite Variante ist meist sauberer, da Code und HTML sauber aufgeteilt wird. Bei unseren Übungen wirst du aber meist direkt im &lt;code>&amp;lt;script&amp;gt;&lt;/code>-Tag arbeite können ohne separates JS File.&lt;/p></description></item><item><title>Docs: HTML</title><link>/docs/web/html_css/01_html_intro/</link><pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/01_html_intro/</guid><description>
&lt;h2 id="wie-funktionieren-webseiten">Wie funktionieren Webseiten?&lt;/h2>
&lt;p>Im Gegensatz zu Desktop-Programmen SOLLTEN Webseiten auf jedem Betriebssystem und Browser gleich laufen und aussehen. Damit das funktionieren kann, müssen die Webseiten so programmiert/geschrieben worden sein, dass sie von jedem Browser verstanden werden können.&lt;/p>
&lt;p>Genau das wird mit HTML erreicht. Jeder Browser versteht HTML.&lt;/p>
&lt;h2 id="was-ist-html">Was ist HTML?&lt;/h2>
&lt;p>Beginnen wir mit der Definition der Abkürzung &amp;ldquo;HTML&amp;rdquo;. Diese steht für &amp;ldquo;HyperText Markup Language&amp;rdquo;. Okay, was aber bedeutet das?&lt;/p>
&lt;p>Mit HyperText ist ein Dokument gemeint, das nicht dafür gemacht ist, um von oben nach unten gelesen zu werden. HyperText enthält also z.B. Links, die auf andere Dokumente führen. Unter Markup ist zu verstehen, dass das Dokument strukturiert (Kopfzeilen, Hauptteil, Fusszeilen) und formatiert (z.B. kursiver/fetter Text) ist.&lt;/p>
&lt;p>Somit ist HTML also eine Sprache, die alle Elemente auf einer Webseite &lt;strong>BESCHREIBT&lt;/strong>. Die Betonung liegt hier auf &amp;ldquo;beschreibt&amp;rdquo;. Das bedeutet, dass HTML keine Programmiersprache ist. Code, der auf der Webseite ausgeführt wird, ist in JavaScript geschrieben.&lt;/p>
&lt;h2 id="übersicht-zu-html-css-und-javascript-js">Übersicht zu HTML, CSS und JavaScript (JS)&lt;/h2>
&lt;p>Während Deiner Einführung in die Webentwicklung wirst du die Begriffe &amp;ldquo;HTML&amp;rdquo;, &amp;ldquo;CSS&amp;rdquo; und &amp;ldquo;JavaScript&amp;rdquo; immer wieder hören bzw. lesen. Deswegen beginnen wir mit einem Überblick:&lt;/p>
&lt;p>&lt;img src="../html-css-js.png" alt="htmlCssJs" title="HTML, CSS und JavaScript">&lt;/p>
&lt;p>Im HTML beschreibst du die Struktur einer Webseite und fügst auch die wichtigsten Elemente davon ein. Diese Elemente können Text, UI-Elemente, Bilder und vieles mehr sein.&lt;/p>
&lt;p>In CSS beschreibst du, wie das HTML im Browser aussehen soll. Beispielsweise kannst du Schriftfarben, -arten, -grössen, das Aussehen von UI-Elementen und Layouts damit beschreiben.&lt;/p>
&lt;p>Möchtest du im Browser Code ausführen, dann geschieht das mit der Programmiersprache JavaScript. Zum Beispiel kannst Du im HTML definieren, dass eine JavaScript-Funktion ausgeführt wird, wenn Du auf einen Button klickst.&lt;/p></description></item><item><title>Docs: IDE und Tools</title><link>/docs/web/ide/01_ide_tools/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>/docs/web/ide/01_ide_tools/</guid><description>
&lt;h2 id="ide">IDE&lt;/h2>
&lt;p>Während des Moduls wirst du mit Visual Studio Code arbeiten. Visual Studio Code ist ein kostenloser Codierungseditor, mit dem du schnell mit dem Coden beginnen kanst. Du kannst Visual Studio Code verwenden, um in jeder Programmiersprache zu programmieren, ohne den Editor zu wechseln. Es unterstützt viele Sprachen, darunter sind JavaScript, Angular, Vue und viele mehr. Bei Lernenden von anderen Institutionen musst du deine/n üK-Leiter:in fragen, welche IDE ihr benutzen werdet.
&lt;a href="https://code.visualstudio.com/">https://code.visualstudio.com/&lt;/a>&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task1"> 15' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>Installiere die IDE und richte sie entsprechend deiner Präferenz ein.
Folgende Extensions sind praktisch für die Entwicklung von Webapps:
- Bracket Pair Colorizer
- Code Spell Checker
- ESLint
- GitLens
- Material Iconm Theme
- Path Intellisense
- Prettier – Code formatter
&lt;/code>&lt;/pre>
&lt;h3 id="git">Git&lt;/h3>
&lt;p>Git ist dir bereits bekannt ein Codeversionierungssystem, welches bei diesem Modul genutzt wird.&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task2"> 5' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>Installiere git unter folgendem Link: https://git-scm.com/. Bei der Installation sind keine Anpassungen notwendig. Du kannst dich einfach durchklicken.
&lt;/code>&lt;/pre>
&lt;h4 id="default-shell-ändern">Default Shell ändern&lt;/h4>
&lt;p>Damit git ordentlich ausgeführt und genutzt werden kann, muss in VS-Code die &amp;ldquo;Default Shell&amp;rdquo; geändert werden.&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task1"> 2' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>-Öffne VS-Code und drücke F1.
-&amp;quot;Default Shell&amp;quot; eingeben
-&amp;quot;Terminal: Select Default Shell&amp;quot; auswählen
-&amp;quot;Git Bash&amp;quot; auswählen
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="/images/hint.png" alt="asset"> Sofern Git Bash nicht gewählt werden kann, könnte es daran liegen, dass du die IDE neustarten musst.&lt;/p>
&lt;h2 id="tools">Tools&lt;/h2>
&lt;h3 id="nodejs">Node.js&lt;/h3>
&lt;p>Node.js ist eine plattformübergreifende Opensource JavaScript runtime, damit du den nötigen Webserver betreiben kannst, die für die Webentwicklung notwendig ist.
Mit Node können wir später diverse Packages installieren und in unserer Webapplikation brauchen.&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task3"> 5' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>Installiere Node.js unter folgendem Link: https://nodejs.org/en/. Verwende die LTS Version, diese werden für die meisten Nutzer empfohlen.
Bei der Installation sind keine Anpassungen notwendig. Du kannst dich einfach durchklicken.
&lt;/code>&lt;/pre>
&lt;h3 id="postman">Postman&lt;/h3>
&lt;p>Postman ist eine API Platform um die API des Backends zu testen. Dies hilft dir dabei beispielsweise zu prüfen, ob deine Nutzer die du erstellt hast, auch in der Datenbankdatei korrekt gespeichert wurde.&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task4"> 10' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>Installiere Postman unter folgendem Link:https://www.postman.com/downloads/.
Bei der Installation sind keine Anpassungen notwendig. Du kannst dich einfach durchklicken.
Erstell dir ein Account und merke dir dein Passwort. Nach der Anmeldung musst du noch das SSL Zertifikat ausschalten.
File &amp;gt; Settings &amp;gt; General
&lt;/code>&lt;/pre>
&lt;h3 id="überprüfen">Überprüfen&lt;/h3>
&lt;p>Nun hoffen wir das alle nötigen Installationen erfolgreich ausgeführt wurden.&lt;/p>
&lt;p>&lt;img src="/images/task.png" alt="task5"> 5' - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>- Öffne VS-Code
- Öffne ein neues Terminal
- git --version
- npm -v
Sofern alle Versionen angezeigt werden, war die Installation erfolgreich. Anderweitig musst du mit deinem üK-Leiter besprechen wo der Fehler liegen könnte.&lt;/code>&lt;/pre></description></item><item><title>Docs: Javascript Frameworks</title><link>/docs/web/angular/02_javascript_frameworks/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/02_javascript_frameworks/</guid><description>
&lt;h2 id="was-ist-ein-framework">Was ist ein Framework?&lt;/h2>
&lt;p>Das Wort Frontend deutet schon darauf hin, worum es sich handelt. Es ist das, was der Nutzer sieht.
Bei einer Webapplikation ist es das, was dem Besucher im Browser angezeigt wird: die Benutzeroberfläche.&lt;/p>
&lt;p>Es ist der Teil der Software, den der Benutzer sieht und über den er die Software anwendet.&lt;br>
&lt;img src="../js_frameworks/frontend.png" alt="Framework">&lt;/p>
&lt;h2 id="js-frameworks">JS Frameworks&lt;/h2>
&lt;p>JavaScript-Frameworks sind eine Art Tool, das die Arbeit mit JavaScript einfacher und reibungsloser macht.&lt;br>
Durch verschiedensteFrameworks wird die Gestaltung von Websites sehr flexibel, daher bevorzugen es die meisten Entwickler.&lt;br>
Die bekanntesten JS-Frameworks:&lt;br>&lt;/p>
&lt;h3 id="angular">Angular&lt;/h3>
&lt;p>Eines der leistungsstärksten, effizientesten und Open-Source-JavaScript-Frameworks ist Angular.&lt;br>
Google betreibt dieses Framework, welches für die Entwicklung einer Single Page Application (SPA) verwendet wird.&lt;/p>
&lt;p>&lt;img src="/images/angular.png" alt="Angular">&lt;/p>
&lt;h3 id="react">React&lt;/h3>
&lt;p>Das von Facebook erstellte Framework React hat innerhalb kurzer Zeit an Popularität gewonnen.&lt;br>
Es wird verwendet, um die dynamische Benutzeroberfläche der Webseiten mit hohem eingehenden Datenverkehr zu entwickeln und zu betreiben.&lt;/p>
&lt;p>&lt;img src="../js_frameworks/react.png" alt="React">&lt;/p>
&lt;h3 id="vuejs">Vue.js&lt;/h3>
&lt;p>Obwohl dieses JavaScript-Framework erst im Jahr 2016 entwickelt wurde, hat es bereits seinen Weg in den Markt gefunden und sich durch verschiedene Funktionen bewährt. Es ist sehr zuverlässig um Cross-Plattform zu entwickeln.&lt;/p>
&lt;p>&lt;img src="../js_frameworks/vue.png" alt="Vuejs">&lt;/p></description></item><item><title>Labs: Annotationen - Aufgaben</title><link>/labs/java/java-reflection-and-annotations/01_annotations_exercises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-reflection-and-annotations/01_annotations_exercises/</guid><description>
&lt;p>Die folgenden Aufgaben dienen der Vertiefung der beiden Themen Reflection API und Annotations.&lt;/p>
&lt;h2 id="aufgabe-1">Aufgabe 1&lt;/h2>
&lt;p>Implementiere eine eigene Annotation. Die Annotation soll der Dokumentation einer Klasse dienen und
die folgenden Eigenschaften aufweisen:&lt;/p>
&lt;ul>
&lt;li>Verfügbar zur Compile Time&lt;/li>
&lt;li>Verfügbar auf Klassen&lt;/li>
&lt;li>Attribut zur Aufnahme von einem oder mehreren Autoren als String-Array&lt;/li>
&lt;li>Attribut zur Aufnahme einer Beschreibung als String, der Default-Wert soll ein leerer String sein&lt;/li>
&lt;li>Attribut zur Aufnahme einer Version als String, der Default-Wert ist 0.0.1&lt;/li>
&lt;/ul>
&lt;p>Der Name der Annotation soll anhand ihres Zwecks gewählt werden.&lt;/p>
&lt;h2 id="aufgabe-2">Aufgabe 2&lt;/h2>
&lt;p>Implementiere eine sinnvolle Modell-Klasse und wende deine neue Annotation an.
Fülle die Werte für Autor, Beschreibung und Version ab.&lt;/p>
&lt;h2 id="aufgabe-3">Aufgabe 3&lt;/h2>
&lt;p>Implementiere einen Annotations-Prozessor, welcher die oben geschriebene Annotation auf der
Modell-Klasse auswertet.
Die Auswertung soll auf die Kommandozeile erfolgen.&lt;/p>
&lt;h3 id="schritt-1">Schritt 1&lt;/h3>
&lt;p>Implementiere eine neue Klasse, welche die folgende Basis hat:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">
&lt;span style="color:#a6e22e">@SupportedAnnotationTypes&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#75715e">/*1*/&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#a6e22e">@SupportedSourceVersion&lt;/span>&lt;span style="color:#f92672">(&lt;/span>SourceVersion&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">RELEASE_8&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DocumentationProcessor&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> AbstractProcessor &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">process&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Set&lt;span style="color:#f92672">&amp;lt;?&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> TypeElement&lt;span style="color:#f92672">&amp;gt;&lt;/span> annotations&lt;span style="color:#f92672">,&lt;/span> RoundEnvironment roundEnv&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Füge beim Punkt 1 den kompletten Pfad (Package und Name) deiner Annotation ein.&lt;/p>
&lt;h3 id="schritt-2">Schritt 2&lt;/h3>
&lt;p>Die beiden Parameter annotations und roundEnv werden durch den Annotations-Prozessor benutzt, um
während der Kompilierung die entsprechende Annotation zu erhalten.
Im Set annotations befinden sich alle Annotationen, welche unter Punkt 1 angegeben werden.
Die Klasse RoundEnvironment erlaubt den Zugriff auf alle Elemente während der Kompilierung.
Ergänze die Methode des Annotations-Prozessors mit den folgenden Loops:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>TypeElement annotation&lt;span style="color:#f92672">:&lt;/span>annotations&lt;span style="color:#f92672">){&lt;/span>
Set&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#66d9ef">extends&lt;/span> Element&lt;span style="color:#f92672">&amp;gt;&lt;/span> annotatedElements &lt;span style="color:#f92672">=&lt;/span> roundEnv&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getElementsAnnotatedWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>annotation&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Element element&lt;span style="color:#f92672">:&lt;/span>annotatedElements&lt;span style="color:#f92672">){&lt;/span>
X annotation&lt;span style="color:#f92672">=&lt;/span>element&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getAnnotation&lt;/span>&lt;span style="color:#f92672">(&lt;/span>X&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Klasse X kannst du durch deine Annotation ersetzen. Jetzt hast du Zugriff auf die Elemente
deiner Annotation.&lt;/p>
&lt;h3 id="schritt-3">Schritt 3&lt;/h3>
&lt;p>Ergänze die Implementation, um den Klassennamen der Modell-Klasse und die Werte der Annotation
auszudrucken. Hier ein Beispiel, wie der Ausdruck in etwa aussehen könnte:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-text" data-lang="text">------
Person
------
Model class representing a person with a name and age
[u210148 (Claudio Zesiger)]
0.0.1
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="schritt-4">Schritt 4&lt;/h3>
&lt;p>Kompiliere die Annotation und den Annotations-Prozessor auf der Kommandozeile (Terminal) mit dem
Befehl javac.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">javac &amp;lt;package&amp;gt;.&amp;lt;annotation&amp;gt;.java
javac &amp;lt;package&amp;gt;.&amp;lt;annotationprocessor&amp;gt;.java
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ersetze das Package und die Namen der Annotation/des Annotations-Prozessors mit deinen Angaben.&lt;/p>
&lt;h3 id="schritt-5">Schritt 5&lt;/h3>
&lt;p>Kompiliere die implementierte Modell-Klasse mit dem folgenden Befehl:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">javac -processor &amp;lt;package&amp;gt;.&amp;lt;annotationsprocessor&amp;gt; &amp;lt;model-klasse&amp;gt;.java
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Ausgabe auf die Kommandozeile durch den Annotations-Prozessor sollte anschliessend angezeigt
werden.&lt;/p></description></item><item><title>Docs: Entwicklungsumgebung einrichten</title><link>/docs/java/entwicklungsumgebung/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/java/entwicklungsumgebung/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich habe die Ersteinrichtung des Laptops vollständig durchgeführt&lt;/li>
&lt;li>Ich bin im Besitz von permanenten Admin-Rechten&lt;/li>
&lt;li>Ich weiss, wo ich Hard- und Software bestellen kann&lt;/li>
&lt;li>Ich habe die notwendigen Programme heruntergeladen und installiert&lt;/li>
&lt;li>Ich weiss, wie ich von Zuhause aus auf das SBB-Netzwerk zugreifen kann: Citrix Gateway&lt;/li>
&lt;li>Ich verstehe was ein Proxy ist und wie ich ihn einstellen muss&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="adminrechte-überprüfen--bestellen">Adminrechte überprüfen / bestellen&lt;/h3>
&lt;p>Damit du auf deinem SBB-Laptop Programme installieren kannst, muss dein angemeldeter Benutzer über Adminrechte verfügen.
Über den folgenden Link kannst du dein Inventar anzeigen lassen und überprüfen, ob dein Benutzer bereits Adminrechte besitzt: &lt;a href="https://sbb.service-now.com/sbb?id=show_inventory">https://sbb.service-now.com/sbb?id=show_inventory&lt;/a>
Wenn die Liste deines Inventars den Eintrag &amp;ldquo;Local admin right&amp;rdquo; enthält, dann besitzt du bereits Adminrechte und musst nichts weiter unternehmen.&lt;/p>
&lt;p>Falls du keine Adminrechte besitzt, müssen diese im Service-Portal bestellt werden. Es ist wichtig zu wissen, dass es zwei Arten von Adminrechten gibt: Temporäre und permanente Adminrechte.
Temporäre Adminrechte erhältst du nach ca. 10 Minuten und daher eignen sich diese für die rasche Installation von Software. Diese Rechte verfallen jedoch nach 24h.
Permanente Adminrechte sind endlos gültig, du erhältst sie aber nicht sofort, die Bestellung muss zuerst freigegeben werden.
Die Bestellung von temporären und permanenten Adminrechten sollte separat erfolgen, da die gesamte Bestellung sonst auf die Freigabe der permanenten Adminrechte warten muss.
Bei der Bestellung musst du die K-Nummer deines SBB-Laptops angeben, die Bestellung in den Einkaufswagen legen und anschliessend die Bestellung abschliessen.
&lt;a href="https://sbb.service-now.com/sbb?id=sc_cat_item&amp;amp;sys_id=a24284474f621240846c119f0310c72f&amp;amp;sysparm_category=be320a324f92e740846c119f0310c7fc&amp;amp;catalog_id=-1">temporäre Adminrechte bestellen&lt;/a>&lt;br>
&lt;a href="https://sbb.service-now.com/sbb?id=sc_cat_item&amp;amp;sys_id=0f8ffb364f621240846c119f0310c72a&amp;amp;sysparm_category=be320a324f92e740846c119f0310c7fc&amp;amp;catalog_id=-1">permanente Adminrechte bestellen&lt;/a>
Nach der Bestellung muss eine Weile gewartet werden, bis die Bestellung abgeschlossen ist, dies dauert rund 10 Minuten. Nach einem Neustart des Gerätes sollten die Adminrechte aktiv sein.&lt;/p>
&lt;p>Die Bestellung von Hardware oder lizenzierter Software ist über das &lt;a href="https://sbb.service-now.com/sbb?id=sc_home">Service-Now&lt;/a> möglich.&lt;/p>
&lt;hr>
&lt;h3 id="programme-und-tools">Programme und Tools&lt;/h3>
&lt;p>Die folgenden Programme sollten heruntergeladen und installiert werden, sie werden für die Grundausbildung verwendet.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Anwendung&lt;/th>
&lt;th>Link&lt;/th>
&lt;th>Zweck&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>JetBrains Toolbox (optional)&lt;/td>
&lt;td>&lt;a href="https://www.jetbrains.com/toolbox/app/">https://www.jetbrains.com/toolbox/app/&lt;/a>&lt;/td>
&lt;td>Management für Entwicklungsumgebungen&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IntelliJ IDEA&lt;/td>
&lt;td>Durch die JetBrains Toolbox oder direkt unter &lt;a href="https://www.jetbrains.com/de-de/idea/download/">https://www.jetbrains.com/de-de/idea/download/&lt;/a>&lt;/td>
&lt;td>Entwicklungsumgebung, beim Starten den Lizenzserver eintragen: &lt;a href="http://intellij-license.sbb.ch">http://intellij-license.sbb.ch&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Notepad++&lt;/td>
&lt;td>&lt;a href="https://notepad-plus-plus.org/downloads/">https://notepad-plus-plus.org/downloads/&lt;/a>&lt;/td>
&lt;td>Erweiterter Texteditor mit vielen nützlichen Funktionen&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Google Chrome&lt;/td>
&lt;td>&lt;a href="https://www.google.com/intl/de/chrome/">https://www.google.com/intl/de/chrome/&lt;/a>&lt;/td>
&lt;td>Web-Browser von Google mit sehr guten Entwickler-Funktionen&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GIT&lt;/td>
&lt;td>&lt;a href="https://git-scm.com/download/win">https://git-scm.com/download/win&lt;/a>&lt;/td>
&lt;td>Zugriff auf das Versionsverwaltungssystem GIT&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Apache Maven&lt;/td>
&lt;td>&lt;a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi&lt;/a>&lt;/td>
&lt;td>Build Management Tool von Apache, beim Herunterladen das Binary auswählen (nicht die Source)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>JDK&lt;/td>
&lt;td>&lt;a href="https://www.oracle.com/java/technologies/javase-jdk14-downloads.html">https://www.oracle.com/java/technologies/javase-jdk14-downloads.html&lt;/a>&lt;/td>
&lt;td>Java Development Kit zur Herstellung von Java-Anwendungen&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Postman&lt;/td>
&lt;td>&lt;a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/&lt;/a>&lt;/td>
&lt;td>Anwendung zum Absetzen von Requests an REST-Schnittstellen&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="citrix-gateway">Citrix Gateway&lt;/h3>
&lt;p>Auf deinem SBB-Laptop befindet sich eine Anwendung mit dem Namen Citrix Gateway. Diese Anwendung erlaubt dir eine Verbindung zum SBB Intranet.
Wenn du also von Zuhause aus oder in der Berufsschule auf das SBB Intranet zugreifen willst, dann brauchst du diese Anwendung.
Wenn die Anwendung gestartet wird, wirst du automatisch mit dem SBB-Netz verbunden. In der Taskleiste erscheint das folgende Symbol
&lt;img src="../entwicklungsumgebung/1563099228.png" alt="">&lt;/p>
&lt;p>Durch einen Klick auf das Icon siehst du den Verbindungsstatus
&lt;img src="../entwicklungsumgebung/1563099230.png" alt="">&lt;/p>
&lt;p>Innerhalb eines SBB-Gebäudes mit Verbindung zu einem LAN oder WLAN der SBB brauchst du diese Anwendung nicht.
Falls keine Verbindung zu irgendeiner Webseite oder einer Anwendung im SBB-Intranet besteht prüfe immer zuerst, ob der Citrix Gateway aktiv ist und ob du dort eine Verbindung hast.&lt;/p>
&lt;hr>
&lt;h3 id="firewall--sicherheit">Firewall / Sicherheit&lt;/h3>
&lt;p>Dein Betriebssystem verfügt mit dem Windows-Betriebssystem über eine eigene Firewall. Du bist persönlich für deren Konfiguration verantwortlich.
Gleichzeitig verfügt das SBB-Netzwerk selbstverständlich über entsprechende Schutzmechanismen, darunter auch diverse Firewalls.
Im Intranet der SBB ist der Besuch von diversen Webseiten eingeschränkt. Dein Browser informiert dich sofort, wenn du auf eine nicht zugelassene Seite navigierst.&lt;/p>
&lt;p>Lies den folgenden Artikel im Intranet betreffend Weisungen über Datensicherheit und Datenschutz: &lt;a href="https://sbb.sharepoint.com/sites/intranet_servicessupport/SitePages/datensicherheit-und-datenschutz.aspx">https://sbb.sharepoint.com/sites/intranet_servicessupport/SitePages/datensicherheit-und-datenschutz.aspx&lt;/a>&lt;/p>
&lt;hr>
&lt;h3 id="proxy">Proxy&lt;/h3>
&lt;p>Ein Proxy ist eine Kommunikationsstelle in einem Netzwerk. Je nachdem, in welchem Netzwerk du dich befindest ist die Konfiguration eines Proxys unumgänglich.
Für die Nutzung von Services wie beispielsweise GIT sollten generell die folgenden Angaben für den Proxy verwendet werden:&lt;/p>
&lt;p>Typ: HTTP&lt;br>
Hostname: zscaler.sbb.ch&lt;br>
Port: 10465&lt;br>
Kein Proxy für: localhost, 127.0.0.0/24, 10.0.0.0/8, 192.168.0.0/16, *.sbb.ch, *.cff.ch, *.ffs.ch, *.adrail.ch, *.sbb-wzu.net, *.wzu.io, *.sbb-aws.net, *.sbb-cloud.net, *.sbbintra.ch, *.swisspass.ch, *.sbbcargo.com&lt;br>
Proxy Authentifizierung: Personalnummer und Passwort&lt;/p>
&lt;p>Diese Einstellungen können in Applikationen wie IntelliJ oder Postman hinterlegt werden.&lt;/p>
&lt;h4 id="dev-proxy">DEV-Proxy&lt;/h4>
&lt;p>Um bessere Verbindungen zu ermöglichen, gibt es noch den DEV-Proxy der Werkzeugunterstützung (WZU).
Das Tutorial zum Einrichten gibt es hier: &lt;a href="https://confluence.sbb.ch/x/lQL8Nw">Entwickler-Proxy&lt;/a>&lt;/p></description></item><item><title>Exams: Exam Java Grundlagen - Zahlen-Array</title><link>/exams/java/java-grundlagen/exam1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/exams/java/java-grundlagen/exam1/</guid><description>
&lt;h2 id="gegeben">Gegeben&lt;/h2>
&lt;p>Gegeben ist das folgende Array mit Zahlen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> numbers &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">-&lt;/span>8&lt;span style="color:#f92672">,&lt;/span> 0&lt;span style="color:#f92672">,&lt;/span> 13&lt;span style="color:#f92672">,&lt;/span> 0&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>8&lt;span style="color:#f92672">,&lt;/span> 23&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>22&lt;span style="color:#f92672">,&lt;/span> 18&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>6&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>1&lt;span style="color:#f92672">,&lt;/span>
&lt;span style="color:#f92672">-&lt;/span>21&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>1&lt;span style="color:#f92672">,&lt;/span> 2&lt;span style="color:#f92672">,&lt;/span> 20&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>24&lt;span style="color:#f92672">,&lt;/span> 21&lt;span style="color:#f92672">,&lt;/span> 25&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>16&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>10&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>2&lt;span style="color:#f92672">,&lt;/span>
&lt;span style="color:#f92672">-&lt;/span>20&lt;span style="color:#f92672">,&lt;/span> 15&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>15&lt;span style="color:#f92672">,&lt;/span> 0&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>16&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>19&lt;span style="color:#f92672">,&lt;/span> 13&lt;span style="color:#f92672">,&lt;/span> 24&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>3&lt;span style="color:#f92672">,&lt;/span> 7&lt;span style="color:#f92672">,&lt;/span>
21&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>15&lt;span style="color:#f92672">,&lt;/span> 21&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>11&lt;span style="color:#f92672">,&lt;/span> 4&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>17&lt;span style="color:#f92672">,&lt;/span> 3&lt;span style="color:#f92672">,&lt;/span> 11&lt;span style="color:#f92672">,&lt;/span> 22&lt;span style="color:#f92672">,&lt;/span> 12&lt;span style="color:#f92672">,&lt;/span>
11&lt;span style="color:#f92672">,&lt;/span> 12&lt;span style="color:#f92672">,&lt;/span> 6&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>4&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>21&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>20&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>24&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>3&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>25&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>13&lt;span style="color:#f92672">,&lt;/span>
17&lt;span style="color:#f92672">,&lt;/span> 19&lt;span style="color:#f92672">,&lt;/span> 19&lt;span style="color:#f92672">,&lt;/span> 20&lt;span style="color:#f92672">,&lt;/span> 22&lt;span style="color:#f92672">,&lt;/span> 9&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>10&lt;span style="color:#f92672">,&lt;/span> 12&lt;span style="color:#f92672">,&lt;/span> 16&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>1&lt;span style="color:#f92672">,&lt;/span>
21&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>24&lt;span style="color:#f92672">,&lt;/span> 12&lt;span style="color:#f92672">,&lt;/span> 19&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>7&lt;span style="color:#f92672">,&lt;/span> 15&lt;span style="color:#f92672">,&lt;/span> 5&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>22&lt;span style="color:#f92672">,&lt;/span> 23&lt;span style="color:#f92672">,&lt;/span> 12&lt;span style="color:#f92672">,&lt;/span>
6&lt;span style="color:#f92672">,&lt;/span> 2&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>14&lt;span style="color:#f92672">,&lt;/span> 12&lt;span style="color:#f92672">,&lt;/span> 17&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>13&lt;span style="color:#f92672">,&lt;/span> 3&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>4&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>16&lt;span style="color:#f92672">,&lt;/span> 8&lt;span style="color:#f92672">,&lt;/span>
16&lt;span style="color:#f92672">,&lt;/span> 6&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>23&lt;span style="color:#f92672">,&lt;/span> 0&lt;span style="color:#f92672">,&lt;/span> 3&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>16&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>6&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>14&lt;span style="color:#f92672">,&lt;/span> 8&lt;span style="color:#f92672">,&lt;/span> 25&lt;span style="color:#f92672">,&lt;/span>
&lt;span style="color:#f92672">-&lt;/span>22&lt;span style="color:#f92672">,&lt;/span> 2&lt;span style="color:#f92672">,&lt;/span> 7&lt;span style="color:#f92672">,&lt;/span> 8&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>6&lt;span style="color:#f92672">,&lt;/span> 20&lt;span style="color:#f92672">,&lt;/span> 3&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>5&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>19&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#f92672">-&lt;/span>15 &lt;span style="color:#f92672">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="aufgabe-1">Aufgabe 1&lt;/h2>
&lt;p>Schreibe eine Methode, welche alle Zahlen im Array zählt, welche zwischen 0 und 10 liegen und keine 5 sind.
Die Methode liefert die Anzahl dieser Zahlen zurück.&lt;/p>
&lt;h2 id="aufgabe-2">Aufgabe 2&lt;/h2>
&lt;p>Schreibe eine Methode, welche aus dem Array alle positiven Zahlen inklusive 0 in ein neues Array schreibt
Die Reihenfolge der Zahlen im Array muss gleich bleiben. Die Methode liefert das neue Array zurück.&lt;/p>
&lt;h2 id="aufgabe-3">Aufgabe 3&lt;/h2>
&lt;p>Schreibe eine Methode, welche aus dem Array alle Zahlen sucht, welche nicht mehr als 10 von der Zahl -6 abweichen.
Schreibe diese Zahlen in ein neues Array. Die Methode liefert das neue Array zurück.&lt;/p>
&lt;h2 id="aufgabe-4">Aufgabe 4&lt;/h2>
&lt;p>Schreibe eine Methode, welche alle Zahlen aus dem Array in positive Zahlen verwandelt und diese in ein neues Array schreibt.
Die Methode liefert das neue Array zurück.&lt;/p>
&lt;h2 id="aufgabe-5">Aufgabe 5&lt;/h2>
&lt;p>Schreibe eine Methode, welche alle Zahlen aus dem Array ausliest, die sich von ihren direkten Nachbarn um jeweils nicht mehr als den Wert 5 unterscheiden.
Schreibe diese Zahlen in ein neues Array. Die Methode liefert das neue Array zurück. Für die erste und die letzte Zahl im Array gibt es nur einen Nachbar.&lt;/p></description></item><item><title>Labs: Exception Handling - Aufgaben</title><link>/labs/java/java-exception-handling/01_exercises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-exception-handling/01_exercises/</guid><description>
&lt;p>Die folgenden Aufgaben bestehen zum Teil aus Exception Handling. Behandle die Exception also auch so, wie es in der Theorie erklärt wurde.&lt;/p>
&lt;h2 id="aufgabe-1-file-reader">Aufgabe 1: File Reader&lt;/h2>
&lt;p>&lt;a href="https://github.com/dwyl/english-words/raw/master/words.txt">Hier&lt;/a> findest du eine Datei, welche eine Liste mit ungefähr 466 Tausend englischen Wörtern enthält.&lt;/p>
&lt;p>Schreibe eine Anwendung welche diese Wörter einlesen kann und schreibe jeweils eine Methode für die folgende Aufgaben:&lt;/p>
&lt;ul>
&lt;li>Zähle alle Wörter in dieser Liste&lt;/li>
&lt;li>Zähle alle Wörter, welche den Buchstaben Q benutzen&lt;/li>
&lt;li>Gib alle Sonderzeichen zurück, welche in der Liste vorkommen (jedes Zeichen wird nur einmal zurückgegeben)&lt;/li>
&lt;li>2 weitere Methoden deiner Wahl&lt;/li>
&lt;/ul>
&lt;p>Implementiere vorher ein Interface, um deine Methoden zu definieren.&lt;/p>
&lt;h2 id="aufgabe-2-file-writing">Aufgabe 2: File Writing&lt;/h2>
&lt;p>Die Verwendung von System.out.println() hat das Problem, dass nach einem Neustart der Applikation alle Logs aus der Konsole verschwinden, dies kann mit der Zeit mühsam werden.
Schreibe eine Klasse mit mindestens einer öffentlichen Methode, welcher man einen Text als Parameter gibt. Die Methode soll diesen Text zuerst in eine Datei mit dem Namen application.log speichern und nachher mit System.out.println() in die Konsole schreiben. Achte auch hier wieder auf ein entsprechendes Exception Handling.&lt;/p>
&lt;h2 id="aufgabe-3-parseint">Aufgabe 3: ParseInt&lt;/h2>
&lt;p>Wenn wir Zahlen von einem User über die Konsole entgegennehmen wollen, kann man scanner.nextLine() brauchen. Wir können aber nie sicher sein, ob es sich bei der Eingabe wirklich um eine Zahl handelt. Darum müssen wir mit einem Exception Handling die Programmlogik vor einem solchen Fall schützen.&lt;/p>
&lt;p>Schreibe eine Anwendung, welche den User einzeln für zwei Zahlen fragt und diese dann entweder addiert, subtrahiert, multipliziert, oder dividiert. Die Auswahl der Rechnungsmethode kann zufällig oder durch den Benutzer erfolgen.&lt;/p></description></item><item><title>Labs: Generics I - Aufgaben</title><link>/labs/java/java-generics/01_exercises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-generics/01_exercises/</guid><description>
&lt;h3 id="aufgabe-1---generische-methode-um-alle-elemente-in-einem-array-auszugeben">Aufgabe 1 - generische Methode um alle Elemente in einem Array auszugeben&lt;/h3>
&lt;p>Schreibe eine generische Methode, welche ein Array als Parameter erhält und alle Elemente
im Array ausgibt.
Verwende diese Methode jeweils mit Arrays, welche folgende Typen beinhalten: Integer, String, Double.&lt;/p>
&lt;h3 id="aufgabe-2---generische-klasse">Aufgabe 2 - generische Klasse&lt;/h3>
&lt;p>Schreibe eine generische Klasse &amp;ldquo;NumberList&amp;rdquo;, welche eine Liste von Zahlen erhält und folgende
Operationen auf diesen Zahlen ausführen kann:&lt;/p>
&lt;ul>
&lt;li>Die grösste Zahl in der Liste finden&lt;/li>
&lt;li>Die kleinste Zahl in der Liste finden&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Die Typen der Input-Zahlen können unterschiedlich sein (Ganzzahlen, Kommazahlen&amp;hellip;)&lt;/em>&lt;/p></description></item><item><title>Labs: Java Exercises - Grundlagen</title><link>/labs/java/java-grundlagen/01_basicexercises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-grundlagen/01_basicexercises/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich kann Text und Zahlen auf der Konsole ausgeben&lt;/li>
&lt;li>Ich kann Text und Zahlen auf der Konsole eingeben und diese wieder ausgeben&lt;/li>
&lt;li>Ich kann statische Methoden schreiben, die einfache Rechnungen durchführen&lt;/li>
&lt;li>Ich kann statische Methoden mit Parametern und Return-Statements schreiben&lt;/li>
&lt;li>Ich verstehe und kenne die verschiedenen Conditional Statements&lt;/li>
&lt;li>Ich weiss, wann und wie ich welches Conditional Statement einsetzen sollte&lt;/li>
&lt;li>Ich verstehe, was Loops sind und kenne die verschiedenen Loops&lt;/li>
&lt;li>Ich weiss, wann und wie ich welchen Loop brauchen soll&lt;/li>
&lt;li>Ich kann mit Hilfe von String-Methoden Strings bearbeiten&lt;/li>
&lt;li>Ich kann Arrays initialisieren, auf deren Werte zugreifen und Werte in einem Array verändern&lt;/li>
&lt;li>Ich kann mein Programm mit einem Debugger zur Laufzeit untersuchen&lt;/li>
&lt;/ul>
&lt;h2 id="aufgabe-1---ausgaben-auf-die-kommandozeile">Aufgabe 1 - Ausgaben auf die Kommandozeile&lt;/h2>
&lt;p>Gib die folgenden Daten auf die Kommandozeile aus:&lt;/p>
&lt;ul>
&lt;li>Hello World&lt;/li>
&lt;li>Hello + &lt;Dein Name>&lt;/li>
&lt;li>Zeichne ein Haus, nutze dazu beliebige Zeichen&lt;/li>
&lt;li>Zeichne eine Schweizerfahne&lt;/li>
&lt;/ul>
&lt;h2 id="aufgabe-2---eingaben-von-der-kommandozeile">Aufgabe 2 - Eingaben von der Kommandozeile&lt;/h2>
&lt;p>Lies zuerst deinen Namen und danach dein Alter über einen Scanner von der Kommandozeile ein und gib dann die folgenden Daten auf die Kommandozeile aus&lt;/p>
&lt;ul>
&lt;li>Hello + &lt;Dein Name> + you are + &lt;Dein Alter> + years old&lt;/li>
&lt;/ul>
&lt;h2 id="aufgabe-3---einfache-berechnungen">Aufgabe 3 - Einfache Berechnungen&lt;/h2>
&lt;p>Berechne die folgenden Dinge:&lt;/p>
&lt;ul>
&lt;li>Fläche eines Rechtecks&lt;/li>
&lt;li>Fläche eines Kreises&lt;/li>
&lt;li>Umfang eines Rechtecks&lt;/li>
&lt;li>Inhalt einer Pyramide mit quadratischen Grundriss und einer bestimmten Höhe&lt;/li>
&lt;li>Berechne dein Alter am heutigen Tag in Jahren, Monaten und Tagen&lt;/li>
&lt;li>Schreibe eine Methode, welche eine beliebige Ganzzahl als Parameter übernimmt und die &lt;a href="https://www.studysmarter.de/schule/mathe/algebra/vielfaches/">Vielfache&lt;/a> von 3 zusammen mit der Vielfache von 5 dieser Zahl summiert.&lt;/li>
&lt;/ul>
&lt;h2 id="aufgabe-4---methoden">Aufgabe 4 - Methoden&lt;/h2>
&lt;p>Löse die folgende Aufgaben:&lt;/p>
&lt;ul>
&lt;li>Schreibe eine Methode, die zwei beliebigen Ganzzahlen als Parameter übernimmt und die Summe der beiden zurückliefert.&lt;/li>
&lt;li>Schreibe eine eigene Methode, die als Parameter einen Namen übernimmt. Die Methode soll dann die folgenden Daten auf die Kommandozeile ausgeben &lt;code>Hello + &amp;lt;Parameter-Name&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="aufgabe-5---conditional-statements">Aufgabe 5 - Conditional Statements&lt;/h2>
&lt;p>Löse die folgende Aufgaben:&lt;/p>
&lt;ul>
&lt;li>Schreibe eine Methode, die feststellen kann, ob eine Zahl (als Parameter) grösser, kleiner oder gleich 0 ist&lt;/li>
&lt;li>Schreibe eine Methode, die dich begrüsst wenn dein Name als Parameter übergeben wird&lt;/li>
&lt;li>Schreibe eine Methode, die feststellt, ob das übergebene Jahr ein Schaltjahr ist&lt;/li>
&lt;li>Schreibe eine Methode, die überprüft, ob eine Zahl (als Parameter) gerade oder ungerade ist&lt;/li>
&lt;li>Debugge mindestens zwei dieser Methoden mit einem Breakpoint&lt;/li>
&lt;/ul>
&lt;h2 id="aufgabe-6---loops">Aufgabe 6 - Loops&lt;/h2>
&lt;p>Löse die folgenden Aufgaben:&lt;/p>
&lt;ul>
&lt;li>Schreibe eine Methode, welche eine beliebige Ganzzahl als Parameter übernimmt und die &lt;a href="https://www.studysmarter.de/schule/mathe/algebra/fakultaet/">Fakultät&lt;/a> dieser Zahl berechnet.&lt;/li>
&lt;li>Schreibe einen Loop, welcher alle Zahlen von 1 bis 100 zusammenzählt, welche durch 8 teilbar sind
&lt;ul>
&lt;li>Erweitere deine Lösung mit einer Methode, welche eine Zahl entgegennimmt und dann die Zahlen zusammenzählt, welche durch diese Zahl teilbar sind&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="aufgabe-7---strings">Aufgabe 7 - Strings&lt;/h2>
&lt;p>Löse die folgende Aufgaben:&lt;/p>
&lt;ul>
&lt;li>Schreibe eine Methode, welche als Parameter einen beliebigen String übernimmt und dessen Zeichenfolge umkehrt&lt;/li>
&lt;li>Schreibe eine Methode, welche als Parameter einen beliebigen String übernimmt und die Anzahl Wörter darin ausgibt&lt;/li>
&lt;/ul>
&lt;h2 id="aufgabe-8---arrays">Aufgabe 8 - Arrays&lt;/h2>
&lt;p>Löse die folgenden Aufgaben:&lt;/p>
&lt;ul>
&lt;li>Schreibe eine Methode, welche zwei Parametern übernimmt: einen beliebigen Zahlen-Array und eine beliebige Zahl. Die Methode gibt die Position der Zahl im Array aus.&lt;/li>
&lt;li>Schreibe eine Methode, welche als Parameter einen beliebigen Zahlen-Array übernimmt und die grösste Zahl im Array zurückliefert.&lt;/li>
&lt;/ul></description></item><item><title>Challenges: Java Grundlagen Challenge</title><link>/challenges/java/java-grundlagen/01_basicchallenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/challenges/java/java-grundlagen/01_basicchallenge/</guid><description>
&lt;p>Die Aufgabe besteht darin ein &amp;ldquo;Vier-Gewinnt&amp;rdquo; Spielfeld in Form eines zweidimensionalen Arrays zu überprüfen.
Das zweidimensionale Array hat in beiden Dimensionen eine variable Grösse. Die zweite Dimension ist jedoch bei allen Arrays gleich gross.&lt;/p>
&lt;p>Das Ziel ist herauszufinden, ob auf einem gegebenen Spielfeld einer der Spieler gewonnen hat.
Die Gewinnkombination in Form von vier aufeinanderfolgenden gleichen Feldern kann dabei horizontal, vertikal oder diagonal auf dem Spielfeld liegen.
Im Spielfeld kommen drei Zeichen vor: &amp;ldquo;X&amp;rdquo; für Spielsteine von Spieler 1, &amp;ldquo;O&amp;rdquo; für Spielsteine von Spieler 2 und &amp;quot; &amp;quot; für ein Feld, wo noch kein Spielstein liegt.&lt;/p>
&lt;p>Die Methode, welche das Spielfeld überprüft liefert einen String als Rückgabewert zurück.
Der Rückgabewert ist &amp;ldquo;X&amp;rdquo; falls Spieler 1 gewonnen hat, &amp;ldquo;O&amp;rdquo; wenn Spieler 2 gewonnen hat und &amp;quot; &amp;quot; wenn noch keiner der Spieler eine Gewinnkombination hat.&lt;/p>
&lt;p>Die Implementation muss in der folgenden Klasse gemacht werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ConnectFourExtra&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> ConnectFourCheck &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">checkWin&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[][]&lt;/span> board&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// TODO: Implementation here ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// TODO: Change return value according to the challenge description
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;X&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;O&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das dazugehörige Interface kann einfach als neue Klasse im gleichen Package angelegt werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ConnectFourCheck&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
String &lt;span style="color:#a6e22e">checkWin&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[][]&lt;/span> board&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn du an der Challenge teilnehmen willst, dann musst du die Aufgabe alleine lösen.
Die Lösung vom Pult-Nachbar interessiert uns also (leider) nicht.&lt;/p></description></item><item><title>Labs: JDBC - Aufgaben</title><link>/labs/java/java-jdbc/01_jdbc_exercises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-jdbc/01_jdbc_exercises/</guid><description>
&lt;h2 id="persistente-notenverwaltungssystem">Persistente Notenverwaltungssystem&lt;/h2>
&lt;p>Schreibe eine Konsolen-basierte Java Anwendung, welche deine Schulnoten verwaltet und in einer Datenbank persistiert.&lt;/p>
&lt;p>Die Anwendung soll mindestens die folgende Funktionalität beinhalten:&lt;/p>
&lt;ul>
&lt;li>Neue Note für ein bestimmtes Fach erfassen (inkl. Datum)&lt;/li>
&lt;li>Eine bestehende Note löschen&lt;/li>
&lt;li>Eine bestehende Note bearbeiten&lt;/li>
&lt;li>Den aktuellen Notenstand eines Fachs ausgeben (Auflistung aller Noten und die Durchschnittsnote)&lt;/li>
&lt;li>Die Durchschnittsnoten aller Fächer ausgeben (#Zeugnis)&lt;/li>
&lt;/ul>
&lt;p>Verwende eine MariaDB und setzte sie selbst auf. Den nötigen Treiber dazu findest du im Internet.
Die Datenbank muss mindestens die folgenden Tabellen beinhalten:&lt;/p>
&lt;ul>
&lt;li>SCHOOL_SUBJECT - beinhaltet alle Schulfächer&lt;/li>
&lt;li>GRADE - beinhaltet alle gültigen Noten zwischen 1 und 6 (in 0.25 Stufen -&amp;gt; also 1, 1.25. 1.5, 1.75, 2 usw..)&lt;/li>
&lt;li>SCHOOL_SUBJECT_GRADE - beinhaltet die Relation zwischen Schulfächern und Noten. Jede Zeile stellt eine Note für ein Fach an einem bestimmten Tag dar.&lt;/li>
&lt;/ul>
&lt;p>Achte auf korrektes Exception-Handling (denke an &amp;ldquo;try with resources&amp;rdquo;) und sauberen Code.&lt;/p></description></item><item><title>Labs: Lists Basics - Aufgaben</title><link>/labs/java/java-lists-and-streams-basics/01_listexercises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-lists-and-streams-basics/01_listexercises/</guid><description>
&lt;h3 id="aufgabe-1">Aufgabe 1&lt;/h3>
&lt;p>Schreibe ein Programm, welche aus der Kommandozeile eine Reihe von Zahlen liest und die
Zahl an der Position x (x ist die erste Zahl in der Reihe) in der Konsole ausgibt.
Folgende Bedingungen müssen eingehalten werden:&lt;/p>
&lt;ul>
&lt;li>Die Anzahl der Zahlen in der Reihe kann beliebig variert werden.&lt;/li>
&lt;li>Wenn es die Position nicht gibt, wird &amp;ldquo;ERROR! Die Position x existiert nicht&amp;rdquo; in der Konsole ausgegeben&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Bei der Umsetzung dürfen keine Streams verwendet werden!&lt;/em>&lt;/p>
&lt;p>&lt;strong>Beispiel 1&lt;/strong>&lt;/p>
&lt;p>Input: 3 45 6 23 76 34&lt;br>
Output: Die Zahl an der Position 3 ist: 23&lt;/p>
&lt;p>&lt;strong>Beispiel 2&lt;/strong>&lt;/p>
&lt;p>Input: 8 45 6 23 76 34&lt;br>
Output: ERROR! Die Position 8 existiert nicht&lt;/p>
&lt;hr>
&lt;h3 id="aufgabe-2">Aufgabe 2&lt;/h3>
&lt;p>Schreibe ein Programm, welche einen Text mit einer beliebigen Anzahl Wörter aus der Kommandozeile liest und folgendes damit macht:&lt;/p>
&lt;ul>
&lt;li>Die Anzahl gelesene Wörter ausgeben&lt;/li>
&lt;li>Alle gelesenen Wörter in der Konsole wiedergeben&lt;/li>
&lt;li>Alle Nomen aus dem Text (Wörter, die mit einem grossen Buchstaben beginnen) in Grossbuchstaben ausgeben&lt;/li>
&lt;li>Alle gelesene Wörter in umgekehrte Reihenfolge ausgeben&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Bei der Umsetzung dürfen keine Streams verwendet werden!&lt;/em>&lt;/p></description></item><item><title>Docs: Markdown</title><link>/docs/tools/markdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tools/markdown/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich weiss, was Markdown ist und welche Vorteile es hat&lt;/li>
&lt;li>Ich weiss, wie man mit Markdown eine einfache Dokumentation erstellt&lt;/li>
&lt;li>Ich weiss, wie man verschiedene Titel erstellt&lt;/li>
&lt;li>Ich weiss, wie man Paragraphen und Zeilenumbrüche erstellt&lt;/li>
&lt;li>Ich weiss, wie man &lt;strong>fett&lt;/strong> und &lt;em>kursiv&lt;/em> schreibt oder die beiden &lt;em>&lt;strong>kombiniert&lt;/strong>&lt;/em>&lt;/li>
&lt;li>Ich weiss, wie man Texte hervorheben kann&lt;/li>
&lt;li>Ich weiss, wie man Listen erstellt&lt;/li>
&lt;li>Ich weiss, wie man Code-Blöcke mit entsprechender Syntax erstellt&lt;/li>
&lt;li>Ich weiss, wie man Bilder und Links einfügen kann&lt;/li>
&lt;li>Ich weiss, wie man Tabellen erstellt&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="einführung">Einführung&lt;/h3>
&lt;p>Lies den Markdown-Guide zur Einführung &lt;a href="https://www.markdownguide.org/getting-started/">Markdown - Getting started&lt;/a> durch.
Das IntelliJ enthält per Default die Möglichkeit Markdown-Dateien zu bearbeiten und ihr finales Aussehen anzuzeigen.
Um eine Markdown-Datei anzusehen gibt es auch die Möglichkeit den Online Markdown Editor &lt;a href="https://dillinger.io/">Dillinger&lt;/a> zu verwenden.&lt;/p>
&lt;p>Andere Markdown-Editoren sind:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://wereturtle.github.io/ghostwriter/">Ghostwriter&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://markdownmonster.west-wind.com/">Markdown Monster&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Für Linux und Mac stehen jeweils andere Editoren zur Verfügung.&lt;/p>
&lt;hr>
&lt;h3 id="basic-syntax">Basic Syntax&lt;/h3>
&lt;p>Lies die Dokumentation zur &lt;a href="https://www.markdownguide.org/basic-syntax/">Basic Syntax&lt;/a> durch.
Dort erfährst du, wie man die wichtigsten Elemente im Markdown anlegen kann, um eine Dokumentation zu erstellen.&lt;/p>
&lt;hr>
&lt;h3 id="extended-syntax">Extended Syntax&lt;/h3>
&lt;p>In der &lt;a href="https://www.markdownguide.org/extended-syntax/">Erweiterung&lt;/a> lernst du Tabellen und weitere nützliche Funktionen kennen.
Lies das Kapitel durch und mach dich mit den Tabellen und dem Hervorheben von Code vertraut.&lt;/p>
&lt;hr>
&lt;h3 id="hacks">Hacks&lt;/h3>
&lt;p>Wenn du noch mehr wissen willst, bringt dich das Kapitel &lt;a href="https://www.markdownguide.org/hacks/">Hacks&lt;/a> noch tiefer in nicht offizielle Funktionen von Markdown hinein.&lt;/p>
&lt;hr>
&lt;h3 id="cheat-sheet">Cheat Sheet&lt;/h3>
&lt;p>Das Cheat-Sheet mit den wichtigsten Teilen der Markdown-Syntax findest du &lt;a href="https://www.markdownguide.org/cheat-sheet/">hier&lt;/a>&lt;/p></description></item><item><title>Labs: Patienten</title><link>/labs/java/java-oop/01_patienten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-oop/01_patienten/</guid><description>
&lt;p>Schreibe eine Anwendung, in welcher Patienten einen medizinischen Check-Up durchgehen,
um ihre Daten für das Spital zu erfassen.&lt;/p>
&lt;p>Ein Patient&lt;/p>
&lt;ul>
&lt;li>hat einen Namen&lt;/li>
&lt;/ul>
&lt;p>Der Checkup nimmt&lt;/p>
&lt;ul>
&lt;li>die Grösse,&lt;/li>
&lt;li>das Gewicht,&lt;/li>
&lt;li>die Temperatur und&lt;/li>
&lt;li>ob der Patient geimpft ist&lt;/li>
&lt;/ul>
&lt;h4 id="die-anwendung-soll">Die Anwendung soll&lt;/h4>
&lt;ul>
&lt;li>mit einem Patienten einen Check-Up durchführen&lt;/li>
&lt;li>die Grösse eines Patienten zurückgeben&lt;/li>
&lt;li>das Gewicht eines Patienten zurückgeben&lt;/li>
&lt;li>die Temperatur eines Patienten zurückgeben&lt;/li>
&lt;li>Überprüfen ob der Patient geimpft ist&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Es sollen keine Set Methoden für das Einfügen der Werte verwendet werden!&lt;/em>&lt;/p></description></item><item><title>Labs: Streams Basics - Aufgaben</title><link>/labs/java/java-lists-and-streams-basics/02_streamexercises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-lists-and-streams-basics/02_streamexercises/</guid><description>
&lt;h3 id="aufgabe-1">Aufgabe 1&lt;/h3>
&lt;p>Schreibe ein Programm, welches aus der Kommandozeile eine Reihe von Zahlen in einer beliebigen Reihenfolge
liest und die unsortierte wie auch die sortierte Liste in der Konsole ausgibt.&lt;/p>
&lt;h3 id="aufgabe-2">Aufgabe 2&lt;/h3>
&lt;p>Schreibe ein Programm, welches aus der Kommandozeile eine Reihe von Zahlen in einer beliebigen Reihenfolge
liest. Jede Zahl in der Liste wird mit sich selber multipliziert und schlussendlich werden die
ursprüngliche wie auch die neue Liste (mit den Berechnungen) in der Konsole ausgegeben - einmal unsortiert und einmal sortiert.&lt;/p></description></item><item><title>Labs: Unit Testing mit JUnit - Aufgaben</title><link>/labs/java/java-testing/01_unit-testing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-testing/01_unit-testing/</guid><description>
&lt;p>Die folgenden Aufgaben bestehen darin für bestehende Programmlogik entsprechende Unit-Tests zu schreiben.&lt;/p>
&lt;h3 id="aufgabe-1-tageszeit">Aufgabe 1: Tageszeit&lt;/h3>
&lt;p>Schreibe Unit-Tests, um die Logik der folgenden Methode zu testen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> java.time.LocalDateTime&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TimeOfDay&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getTimeOfDay&lt;/span>&lt;span style="color:#f92672">(&lt;/span>LocalDateTime time&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>time&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getHour&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> 6&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Night&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>time&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getHour&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> 12&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Morning&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>time&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getHour&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> 18&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Afternoon&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Evening&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="aufgabe-2">Aufgabe 2&lt;/h3>
&lt;p>Schreibe Unit-Tests, um die Methode &lt;strong>move&lt;/strong> zu testen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Mover&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> LocalDateTime lastMovingTime&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> Direction lastDirection&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">move&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Direction direction&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>Direction&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getOpposite&lt;/span>&lt;span style="color:#f92672">(&lt;/span>direction&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">lastDirection&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">lastDirection&lt;/span> &lt;span style="color:#f92672">=&lt;/span> direction&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">lastMovingTime&lt;/span> &lt;span style="color:#f92672">=&lt;/span> LocalDateTime&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">now&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> LocalDateTime &lt;span style="color:#a6e22e">getLastMovingTime&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> lastMovingTime&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Direction &lt;span style="color:#a6e22e">getLastDirection&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> lastDirection&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> Direction &lt;span style="color:#f92672">{&lt;/span>
NORTH&lt;span style="color:#f92672">,&lt;/span>
EAST&lt;span style="color:#f92672">,&lt;/span>
SOUTH&lt;span style="color:#f92672">,&lt;/span>
WEST&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> Direction &lt;span style="color:#a6e22e">getOpposite&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Direction direction&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>direction&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> NORTH &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> SOUTH&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> EAST &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> WEST&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> SOUTH &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> NORTH&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> WEST &lt;span style="color:#f92672">-&amp;gt;&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> EAST&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Falls du meinst, dass es unmöglich ist diese Methode genau zu testen. Schreibe die Methode um, damit sie einfacher zu testen ist. Benutze dazu ein Clock-Objekt. Weitere Informationen findest du &lt;a href="https://www.baeldung.com/java-override-system-time">hier&lt;/a>.&lt;/p>
&lt;h3 id="aufgabe-3">Aufgabe 3&lt;/h3>
&lt;p>In dieser Aufgabe geht es darum, dass die Unit-Tests für eine bestimmte Methode schon geschrieben wurden. Die Methode muss nun implementiert werden, so dass sie alle Unit-Tests erfüllt. Arbeite dich von Test zu Test durch.&lt;/p>
&lt;p>&lt;strong>Test Source&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import static&lt;/span> org.junit.jupiter.api.Assertions.assertTrue&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> org.junit.jupiter.api.Test&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PasswordValidatorTest&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> PasswordValidator uut&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testPasswordNull&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
assertFalse&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">uut&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isPasswordValid&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">null&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testPasswordTooShort&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
assertFalse&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">uut&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isPasswordValid&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;1234567&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testPasswordTooLong&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
assertFalse&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">uut&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isPasswordValid&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ABCDEFGHIJKLMNOPQRSTU&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testPasswordContainsNoSpace&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
assertFalse&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">uut&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isPasswordValid&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ABCDEFGHIJKLMNOPQR T&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testPasswordContainsNoNumeric&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
assertFalse&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">uut&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isPasswordValid&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ABCDEFGHIJKLMNOPQRST&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testPasswordContainsNoLowercaseChar&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
assertFalse&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">uut&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isPasswordValid&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ABCDEFGHIJ0123456789&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testPasswordContainsNoUppercaseChar&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
assertFalse&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">uut&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isPasswordValid&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;abcdefghij0123456789&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testPasswordContainsNoSpecialChar&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
assertFalse&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">uut&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isPasswordValid&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;abcdeFGHIJ0123456789&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#a6e22e">@Test&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">testPasswordValid&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
assertTrue&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">uut&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isPasswordValid&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;abcdeFGHIJ01234$*%?+&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Source&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PasswordValidator&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> &lt;span style="color:#a6e22e">isPasswordValid&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String password&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// Ersetze die Exception durch deine Implementation...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">throw&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> IllegalStateException&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn du eine Lösung gefunden hast, dann kannst du diese noch aufräumen (Refactoring).&lt;/p></description></item><item><title>Docs: Was ist Git</title><link>/docs/git/was-ist-git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/was-ist-git/</guid><description>
&lt;blockquote>
&lt;p>Git [ɡɪt] ist eine freie Software zur verteilten Versionsverwaltung von Dateien, die durch Linus Torvalds initiiert wurde.&lt;/p>
&lt;/blockquote>
&lt;h2 id="inhalt">Inhalt&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#was-ist-versionsverwaltung">Was ist Versionsverwaltung&lt;/a>&lt;/li>
&lt;li>&lt;a href="#geschichte">Geschichte&lt;/a>&lt;/li>
&lt;li>&lt;a href="#name">Name&lt;/a>&lt;/li>
&lt;li>&lt;a href="#wie-funktioniert-git">Wie funktioniert Git&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="was-ist-versionsverwaltung">Was ist Versionsverwaltung&lt;/h2>
&lt;p>Eine Versionsverwaltung ist ein System, welches Änderungen an einer oder mehreren Dateien über die Zeit protokolliert, um die Entwicklung nachvollziehbar zu machen und womit man jederzeit auf bestimmte vorherige Versionen zugreifen kann.&lt;/p>
&lt;h3 id="lokale-versionsverwaltung">Lokale Versionsverwaltung&lt;/h3>
&lt;p>Eine lokale Versionsverwaltung hat wohl fast jeder schon mal bei sich eingesetzt. Die einfachste Version davon ist, wenn man zum Beispiel eine Datei kopiert und an der Kopie weiter arbeitet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#f92672">[&lt;/span>user@computer ~/gymi/arbeit/&lt;span style="color:#f92672">]&lt;/span>$ ls
matura_arbeit.docx matura_arbeit_fastfertig.docx matura_arbeit_wirklichfertig.docx matura_arbeit_wirklichfertig_formatiert.docx matura_final.docx
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dies ist jedoch sehr Fehleranfällig, da man schnell die falsche Datei erwischt. Aus diesem Grund, haben Programmierer bereits vor langer Zeit, lokale Versionsverwaltungssysteme entwickelt, die alle Änderungen an allen relevanten Dateien in einer Datenbank verwalten. Ein Beispiel dafür ist &lt;a href="https://www.gnu.org/software/rcs/">RCS&lt;/a>&lt;/p>
&lt;h3 id="zentrale-versionsverwaltung">Zentrale Versionsverwaltung&lt;/h3>
&lt;p>Um die Zusammenarbeit von mehreren Personen zu vereinfachen wurden zentrale Versionsverwaltungssysteme entwickelt. Diese Systeme basieren auf einem zentralen Server der alle Dateien verwaltet. User holen eine Datei ab (Auschecken oder engl. to check out) editieren sie und nur berechtigte User dürfen die Datei anschliessend wieder auf den Server stellen. Ein Beispiel dafür ist &lt;a href="https://subversion.apache.org/">SVN&lt;/a>&lt;/p>
&lt;h3 id="verteilte-versionsverwaltung">Verteilte Versionsverwaltung&lt;/h3>
&lt;p>Im Gegensatz zu zentralen Systeme wo der Benutzer nur den letzten Stand zur Verfügung hat, kopiert er bei verteilten Versionsverwaltungen eine vollständiger Klon des Repositories auf sein System und hat somit auch die komplette Geschichte lokal. Dies vereinfacht dem Entwickler das lokale arbeiten und erhöht die Ausfallsicherheit. Zusätzlich können solche System gut mit verschiedenen externen Repositories (Remotes) umgehen was die Zusammenarbeit weiter vereinfacht. Ein Beispiel dafür ist &lt;a href="https://git-scm.com">GIT&lt;/a>&lt;/p>
&lt;h2 id="geschichte">Geschichte&lt;/h2>
&lt;p>Git entstand aufgrund einer Lizenzänderung von &lt;code>BitKeeper&lt;/code>, der Versionsverwaltung welche vom Linux Kernel bis 2005 verwendet wurde. Da die Kernel Entwickler die Software nicht mehr kostenlos nutzen konnten, entwickelten sie selber eine Lösung. Ziele der neuen Software waren Geschwindigkeit, einfaches Design, gute Unterstützung von nicht linearer Entwicklung, dezentrale Struktur und die Fähigkeit grosse Projekte effektiv zu verwalten. Git wird seit 2005 kontinuierlich weiterentwickelt.&lt;/p>
&lt;h2 id="name">Name&lt;/h2>
&lt;p>Der Name „Git“ bedeutet in der britischen Umgangssprache so viel wie „Blödmann“. Linus Torvalds erklärte seine Wahl des ungewöhnlichen Namens mit einem Witz sowie damit, dass das Wort praktikabel und in der Softwarewelt noch weitgehend unbenutzt war:&lt;/p>
&lt;blockquote>
&lt;p>„Ich bin ein egoistischer Mistkerl, und ich benenne all meine Projekte nach mir. Zuerst ‚Linux‘, jetzt eben ‚Git‘.“&lt;/p>
&lt;/blockquote>
&lt;p>– Linus Torvalds&lt;/p>
&lt;p>Dazu muss man anmerken, dass Linus den Namen Linux nur widerwillig akzeptierte.&lt;/p>
&lt;h2 id="wie-funktioniert-git">Wie funktioniert Git&lt;/h2>
&lt;p>Git funktioniert im Gegensatz zu den meisten anderen Versionsverwaltungen nicht indem es eine Liste von Änderungen an einer Datei abspeichert, sondern eher wie ein Dateisystem, welches bei jedem Commit ein Snapshot aller Dateien anlegt. Um effizient zu bleiben, werden unveränderte Dateien nicht kopiert sondern nur verknüpft. Weiter stellt Git die Integrität aller verwalteten Dateien sicher, indem es eine Prüfsumme jeder Datei anlegt. Dies verunmöglicht Änderungen an Dateien, ohne dass es Git mitbekommen würde.&lt;/p>
&lt;h3 id="drei-zustände-einer-datei">Drei Zustände einer Datei&lt;/h3>
&lt;p>Eine Datei in einem Git Repository kann drei (Haupt-) Zustände haben:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Modified&lt;/strong>: Die Datei wurde geändert aber noch nicht in die lokale Datenbank eingecheckt.&lt;/li>
&lt;li>&lt;strong>Staged&lt;/strong>: Die Datei wurde im aktuellen Zustand für den nächsten Commit vorgemerkt.&lt;/li>
&lt;li>&lt;strong>Commited&lt;/strong>: Die Datei ist im aktuellen Zustand in die lokale Datenbank eingecheckt.&lt;/li>
&lt;/ul>
&lt;h3 id="minimaler-workflow">Minimaler Workflow&lt;/h3>
&lt;p>Hat man ein Repository von einem anderen Rechner &lt;em>geklont&lt;/em>, kann man eine oder mehrere Dateien im Verzeichnisbaum editieren. Anschliessend &lt;em>staged&lt;/em> man diese Änderungen und &lt;em>commited&lt;/em> diese anschliessend.&lt;/p></description></item><item><title>Labs: Zoo</title><link>/labs/java/java-ood/01_zoo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-ood/01_zoo/</guid><description>
&lt;p>Schreibe eine Anwendung, welche einen Zoo modelliert. Die Anwendung soll folgende Klassen enthalten:&lt;/p>
&lt;ul>
&lt;li>Personen&lt;/li>
&lt;li>Gehege&lt;/li>
&lt;li>Tiere&lt;/li>
&lt;/ul>
&lt;p>Jede dieser Klassen soll mehrere Spezialisierungen enthalten.&lt;/p>
&lt;p>Bei den Personen wird zwischen Mitarbeitern und Mitgliedern unterschieden.
Ein Mitarbeiter hat beispielsweise einen Lohn, welcher ein Mitglied nicht hat.
Die folgenden Attribute sollen vorhanden sein:&lt;/p>
&lt;ul>
&lt;li>Lohn&lt;/li>
&lt;li>Beschreibung des Jobs&lt;/li>
&lt;li>Telefonnummer&lt;/li>
&lt;li>Mitglied seit&lt;/li>
&lt;li>Nummer der Mitglied-Karte&lt;/li>
&lt;/ul>
&lt;p>Verteile die Attribute also korrekt auf die Generalisierung und die Spezialisierungen.&lt;/p>
&lt;p>Bei den Gehegen wird unterschieden zwischen Gelände, Terrarium, Aquarium und Käfig.
Die einzigartigen Eigenschaften der verschiedenen Gehege sollen wie folgt modelliert werden:&lt;/p>
&lt;ul>
&lt;li>Gehege-Nummer&lt;/li>
&lt;li>Grösse in Quadratmeter&lt;/li>
&lt;li>Temperatur&lt;/li>
&lt;li>Feuchtigkeit&lt;/li>
&lt;li>Süss- / Salzwasser&lt;/li>
&lt;li>Fassungsvermögen&lt;/li>
&lt;li>Zaunhöhe&lt;/li>
&lt;li>Wassergraben vorhanden&lt;/li>
&lt;/ul>
&lt;p>Verteile die Attribute also korrekt auf die Generalisierung und die Spezalisierung.
Selbstverständlich kann ein Gehege auch von einem anderen abgeleitet werden.&lt;/p>
&lt;p>Bei den Tieren könnt ihr selber entscheiden, welche Tiere euer Zoo enthalten soll und wie diese auf die Gehege verteilt werden.&lt;br>
Falls ihr keine Ideen habt, gibt es hier ein paar Beispiele:&lt;/p>
&lt;ul>
&lt;li>Landtiere&lt;/li>
&lt;li>Amphibien&lt;/li>
&lt;li>Wassertiere&lt;/li>
&lt;li>Vögel&lt;/li>
&lt;/ul>
&lt;p>oder&lt;/p>
&lt;ul>
&lt;li>Aufteilung nach Spezies wie Insekten, Säugetiere, Wirbeltiere, Reptilien&lt;/li>
&lt;/ul>
&lt;p>oder&lt;/p>
&lt;ul>
&lt;li>Aufteilung nach Ernährung (Fleischfresser, Pflanzenfresser, Allesfresser :-))&lt;/li>
&lt;/ul>
&lt;p>Der Zoo hat also Mitarbeiter und Mitglieder und verschiedene Tiere, die in verschiedenen Gehegen leben.
Die Beziehung zwischen den einzelnen Klassen wie dem Zoo seinen Gehegen und Tieren soll sich an der realen Welt orientieren.&lt;/p></description></item><item><title>Docs: JavaScript: Konsole</title><link>/docs/web/javascript/02_js_browser_tools/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/javascript/02_js_browser_tools/</guid><description>
&lt;h2 id="eine-nachricht-loggen">Eine Nachricht loggen&lt;/h2>
&lt;p>In Java hast du Text mit &lt;code>System.out.println(...)&lt;/code>, in C# mit &lt;code>Console.WriteLine(...)&lt;/code> und in Python vielleicht mit &lt;code>print(...)&lt;/code> geloggt. Genau das gibt es auch in JavaScript.&lt;/p>
&lt;p>In einer HTML-Datei kannst du folgendes hinzufügen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
...
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;hello world&amp;#39;&lt;/span>);
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Um diese Meldung sehen zu können, musst du die Konsole des Browsers öffnen. Dies kannst du machen, indem du die Entwickler-Tools des Browsers öffnest (z.B. mit der [F12]-Taste). Anschliessend navigierst du zum &amp;ldquo;Konsole&amp;rdquo;-Tab. Nun solltest du die geloggte Nachricht entdecken können:&lt;/p>
&lt;p>&lt;img src="../images/console.png" alt="console">&lt;/p>
&lt;h2 id="code-direkt-im-browser-ausführen">Code direkt im Browser ausführen&lt;/h2>
&lt;p>Du kannst Code direkt in der Konsole des Browsers ausführen lassen. Klicke hierfür in das Eingabefeld unterhalt deiner geloggten Nachricht. Dort kannst du dann folgendes reinkopieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>);
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Nun sollten in deiner Konsole die Zahlen 0 - 9 geloggt worden sein. Den Code solltest du bereits seit deiner Einführung in Java verstehen. Das einzig neue hier ist, dass du hier die Nummer-Variable mit &lt;code>let&lt;/code> deklariert hast.&lt;/p>
&lt;p>Du hast gesehen, wie einfach du Code auf der Website mit Hilfe der Konsole ausführen kannst. Die Konsole ist ein sehr mächtiges Tool, das die Entwicklung mit JavaScript extrem vereinfachen kann. Bevor du Code in der IDE (also deiner Entwicklungsumgebung) eingibst, kannst du vorher in der Konsole ausprobieren, ob dein Code zum gewünschten Resultat führt.&lt;/p></description></item><item><title>Docs: Erste Seite erstellen</title><link>/docs/web/html_css/02_html_first_code/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/02_html_first_code/</guid><description>
&lt;h2 id="eine-html-seite-mit-formatiertem-text-erstellen">Eine HTML-Seite mit formatiertem Text erstellen&lt;/h2>
&lt;p>Wir beginnen ganz unkompliziert. Erstellen wir zuerst eine Text-Datei. Dafür erstellen wir zuerst ein Ordner, in dem wir später unsere Projekt-Dateien speichern. Anschliessend kannst du diesen Ordner mit der IDE (Entwicklungsumgebung) deiner Wahl öffnen (hier VS Code). Erstelle nun eine neue HTML-Datei im soeben erstellten Ordner. In VS Code kannst du das z.B. wie folgt machen:&lt;/p>
&lt;p>&lt;img src="../vs-code-create-file.png" alt="createFile" title="Erstelle eine neue Datei, indem du im Explorer von VS Code mit deiner Maus über deinen Ordner bewegst. Klicke dann auf das Datei-Symbol und gib einen Dateinamen an, der mit .html endet.">&lt;/p>
&lt;p>Fülle diese Datei nun mit irgendeinem Text. Speichere diese Datei. Kopiere nun den Pfad zu dieser Datei. In VS Code kannst du den Pfad mit einem Rechtsklick auf die Datei kopieren:&lt;/p>
&lt;p>&lt;img src="../vs-code-copy-path.png" alt="copyPath" title=" ">&lt;/p>
&lt;p>Gib diesen Pfad nun im Browser deiner Wahl ein. Du solltest nun einen unformatierten Text im Browser sehen:&lt;/p>
&lt;p>&lt;img src="../unformated-html-file.png" alt="unformatedHtmlFile" title=" ">&lt;/p>
&lt;p>Abwohl du vorher evtl. Zeilenumbrüche und mehrer Leerschläge hattest, verschwinden diese im Browser nun. Dies kannst du umgehen, indem den Text mit Hilfe von HTML-Tags formatierst. Den HTML-Code könnte z.B. dann so aussehen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Kleiner Witz&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Wie viele Softwareentwickler braucht man,
um eine Glühbirne auszuwechseln?&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Keinen, das ist ein Hardware-Problem!&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Nun hast du eine Seite mit formatiertem Text:&lt;/p>
&lt;p>&lt;img src="../formated-html.png" alt="formatedHtmlFile" title=" ">&lt;/p>
&lt;p>Was haben wir hier genau gemacht? Das erfährst du auf der nächsten Seite.&lt;/p></description></item><item><title>Docs: Einführung in TypeScript</title><link>/docs/web/angular/03_1_intro_typescript/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/03_1_intro_typescript/</guid><description>
&lt;h2 id="was-ist-typescript">Was ist TypeScript&lt;/h2>
&lt;p>Die Programmiersprache wurde von Microsoft entwickelt und wurde im Jahr 2012 mit der ersten Version veröffentlicht.
Seitdem wird die Programmiersprache kontinuierlich weiterentwickelt. Zahlreiche JavaScript-Frameworks setzen heute auf die Verwendung von TypeScript.
Dazu gehören zum Beispiel Angular 2+ und React.&lt;/p>
&lt;p>TypeScript bildet eine Obermenge von JavaScript, erweitert also JavaScript um bestimmte Features.
Es handelt sich dabei also um ein sogenanntes Superset von JavaScript.&lt;/p>
&lt;p>Da Quellcode geschrieben in TypeScript zu JavaScript transpiliert wird, ist der Code in jedem Browser lauffähig.&lt;/p>
&lt;h2 id="vorteile-von-typescript">Vorteile von TypeScript&lt;/h2>
&lt;ul>
&lt;li>TypeScript hebt Fehler während der Kompilierung hervor, während JavaScript - zur Laufzeit.&lt;/li>
&lt;li>TypeScript unterstützt statische Typisierung.&lt;/li>
&lt;li>Ermöglicht bessere Code-Strukturierung und Objekt-Orientierte Programmiertechniken.&lt;/li>
&lt;li>TypeScript ist in jedem Browser oder JS Engine lauffähig.&lt;/li>
&lt;li>Hervorragendes &amp;ldquo;Tooling&amp;rdquo; mit IntelliSense, das beim Hinzufügen des Codes aktive Hinweise liefert.&lt;/li>
&lt;/ul>
&lt;h2 id="grundlegende-syntax">Grundlegende Syntax&lt;/h2>
&lt;p>Da es sich bei TypeScript um ein Superset von JavaScript handelt, ist JavaScript-Code auch gültiger TypeScript-Code. Jedoch fügt TypeScript darüber hinaus viele neue Funktionen hinzu.&lt;/p>
&lt;p>Mit TypeScript wird JavaScript mehr wie eine stark typisierte, objektorientierte Sprache, die C # und Java ähnelt. Dies bedeutet, dass TypeScript-Code für grosse Projekte leichter zu verwenden ist und dass Code leichter zu verstehen und zu verwalten ist. Die starke Typisierung bedeutet auch, dass die Sprache vorkompiliert werden kann und dass Variablen keine Werte zugewiesen werden können, die ausserhalb ihres angegebenen Bereichs liegen. Wenn zum Beispiel eine TypeScript-Variable als Zahl deklariert ist, kann man dieser Variable keinen Textwert zuweisen.&lt;/p>
&lt;h2 id="typanmeldungen">Typanmeldungen&lt;/h2>
&lt;p>Typdeklarationen können zu Variablen, Funktionsparametern und Funktionsrückgabetypen hinzugefügt werden.
Der Typ folgt jeweils nach einem Doppelpunkt hinter dem Variablennamen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript"> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">num&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Compiler überprüft dann die Typen während des Kompilierens und meldet allfällige Typfehler.&lt;/p>
&lt;p>Die verschiedenen Grundtypen von TypeScript sind &lt;a href="https://www.typescriptlang.org/docs/handbook/basic-types.html">hier&lt;/a> ersichtlich.&lt;/p>
&lt;h2 id="der-objektorientierte-ansatz">Der Objektorientierte Ansatz&lt;/h2>
&lt;p>Bei der objektorientierten Programmierung handelt es sich um einen Programmierstil / eine Denkweise.&lt;/p>
&lt;p>Man kann sich das so vorstellen, dass alles in der objektorientierten Programmierung durch Objekte abgebildet wird.
Jedes &amp;ldquo;Teil&amp;rdquo; eines Programmes wird durch ein Objekt beschrieben.&lt;/p>
&lt;p>Ein Beispiel:&lt;/p>
&lt;blockquote>
&lt;p>In einer Spielewelt gibt es einen frei herumlaufenden Hund.
Dann wäre dieser Hund nichts anderes als ein Objekt.
Nun könnte man sich fragen, wie man diesen Hund wahrnimmt, denn nicht jeder Hund ist gleich.
Sie könnten sich in Rasse, Gattung etc. unterscheiden. Ein Objekt kann also verschiedene Eigenschaften besitzen,
diese werden auch Attribute genannt.&lt;/p>
&lt;/blockquote>
&lt;p>Nun kann sich unser Hund von Anderen unterscheiden, jedoch kann er noch nicht bellen. Deshalb haben
Objekte auch Funktionen (Methoden). In unserem Beispiel könnte der Hund z.B. über die Methode &amp;ldquo;bark()&amp;rdquo; verfügen,
welche ihm erlaubt zu bellen.&lt;/p>
&lt;p>In unserem Beispiel handelt es sich bei dem Hund um eine Klasse. Klassen sind also wie Baupläne für Objekte.&lt;/p>
&lt;p>Nun sagen wir, dass es in unserer Spielwelt auch Katzen gibt.
An dieser Stelle kommt dann die Vererbung ins Spiel.&lt;/p>
&lt;p>Hunde sowie Katzen sind beides Tiere. In der Objektorientierten Programmierung würde man dazu also eine Klasse &amp;ldquo;Animal&amp;rdquo; erstellen.
Die beiden Klassen &amp;ldquo;Cat&amp;rdquo; und &amp;ldquo;Dog&amp;rdquo; würden dann die Klasse &amp;ldquo;Animal&amp;rdquo; erben. Dies Bedeutet, dass sie die Eigenschaften der Klasse &amp;ldquo;Animal&amp;rdquo; übernehmen
und durch ihre eigenen Eigenschaften erweitern.&lt;/p>
&lt;p>Da sich beide Tiere fortbewegen, könnte man also der Klasse &amp;ldquo;Animal&amp;rdquo; die Funktion &amp;ldquo;move()&amp;rdquo; geben, welche dann von den beiden anderen Klassen geerbt werden würde.
Dadurch hat man verhindert, dass sich die Funktion zum bewegen mehrmals im Quellcode befindet.&lt;/p>
&lt;p>&lt;img src="../Vererbung.png" alt="Vererbung" title="Vererbung">&lt;/p>
&lt;h2 id="klassen">Klassen&lt;/h2>
&lt;p>Ein einfaches Beispiel einer Klasse:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span> {
&lt;span style="color:#a6e22e">greeting&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span>;
&lt;span style="color:#a6e22e">constructor&lt;/span>(&lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">greeting&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">message&lt;/span>;
}
&lt;span style="color:#a6e22e">greet&lt;/span>() {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">greeting&lt;/span>;
}
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">greeter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Greeter&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;world&amp;#34;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In diesem Beispiel wird eine neue Klasse &amp;ldquo;Greeter&amp;rdquo; deklariert. Die Klasse enthält 3 Member:&lt;/p>
&lt;ul>
&lt;li>Das Property &amp;ldquo;greeting&amp;rdquo;&lt;/li>
&lt;li>Den Konstruktor&lt;/li>
&lt;li>Die Methode &amp;ldquo;greet&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>Wenn wir in einer Klasse auf ein Member innerhalb der Klasse referenzieren, verwenden wir &lt;code>this.&lt;/code>.&lt;/p>
&lt;p>Auf der letzten Zeile erstellen wir eine neue Instanz der Klasse &lt;code>Greeter&lt;/code> mit &lt;code>new&lt;/code>.&lt;/p>
&lt;h3 id="vererbung">Vererbung&lt;/h3>
&lt;p>In TypeScript können wir allgemeine objektorientierte Muster verwenden. Eines der grundlegendsten Muster in der klassenbasierten Programmierung ist die Möglichkeit, vorhandene Klassen durch Vererbung zu erweitern, um neue Klassen zu erstellen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Animal moved &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">m.`&lt;/span>);
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Dog&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#a6e22e">bark&lt;/span>(){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Woof!&amp;#34;&lt;/span>);
}
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">dog&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Dog&lt;/span>();
&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#a6e22e">bark&lt;/span>();
&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#ae81ff">10&lt;/span>);
&lt;span style="color:#a6e22e">dog&lt;/span>.&lt;span style="color:#a6e22e">bark&lt;/span>();
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dieses Beispiel zeigt die grundlegendste Vererbungsfunktion: Klassen erben Eigenschaften und Methoden von Basisklassen. &lt;code>Dog&lt;/code> ist hier eine abgeleitete Klasse, die mit dem Schlüsselwort &lt;code>extends&lt;/code> von der Basisklasse Animal abgeleitet wird. Abgeleitete Klassen werden häufig als Unterklassen bezeichnet, und Basisklassen als Superklassen.&lt;/p>
&lt;p>Da &lt;code>Dog&lt;/code> die Funktionalität von &lt;code>Animal&lt;/code> erweitert, konnten wir eine Instanz von &lt;code>Dog&lt;/code> erstellen, die sowohl &lt;code>bark()&lt;/code> als auch &lt;code>move()&lt;/code> ausführen konnte.&lt;/p>
&lt;p>&lt;strong>Ein komplexeres Beispiel zur Vertiefung:&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>;
}
&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Animal moved &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">m.`&lt;/span>);
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Snake&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
}
&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Slithering...&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>);
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Horse&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
}
&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">45&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Galloping...&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>);
}
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">sammy&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Snake&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Sammy the Python&amp;#34;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">tom&lt;/span>: &lt;span style="color:#66d9ef">Animal&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Horse&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Tom the Palomino&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">sammy&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>();
&lt;span style="color:#a6e22e">tom&lt;/span>.&lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#ae81ff">35&lt;/span>);
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In diesem Beispiel werden 2 neue Subklassen von &lt;code>Animal&lt;/code> erstellt: &lt;code>Horse&lt;/code> und &lt;code>Snake&lt;/code>.&lt;/p>
&lt;p>Ein Unterschied zum vorherigen Beispiel besteht darin, dass jede abgeleitete Klasse, die eine Konstruktorfunktion enthält, &lt;code>super()&lt;/code> aufrufen muss, wodurch der Konstruktor der Basisklasse ausgeführt wird. Ausserdem müssen wir &lt;code>super()&lt;/code> aufrufen, damit wir im Konstruktorkörper auf &lt;code>name&lt;/code> mit &lt;code>this&lt;/code> zugreifen können.&lt;/p>
&lt;p>Konsolenausgabe des Beispiels:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Slithering...
Sammy the Python moved 5m.
Galloping...
Tom the Palomino moved 34m.
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="public">Public&lt;/h3>
&lt;p>In den gezeigten Beispielen konnten wir frei auf die Eigenschaften und Methoden einer Klasse (Member) zugreifen, die wir deklariert hatten. Jedoch mussten wir dazu &lt;code>public&lt;/code> nie verwenden. Dies liegt daran, dass in TypeScript jedes Member stantardmässig &lt;code>public&lt;/code> ist.&lt;/p>
&lt;p>Ein Member können wir trotzdem als &lt;code>public&lt;/code> markieren. Wir hätten die Klasse &lt;code>Animal&lt;/code> aus dem vorherigen Abschnitt folgendermassen schreiben können:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">move&lt;/span>(&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">`Animal moved &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">distanceInMeters&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">m.`&lt;/span>);
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="private">Private&lt;/h3>
&lt;p>Wenn ein Member einer Klasse als &lt;code>private&lt;/code> markiert ist, kann von ausserhalb der Klasse nicht darauf zugegriffen werden.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">theName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">theName&lt;/span>;
}
}
&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Animal&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Cat&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">name&lt;/span>; &lt;span style="color:#75715e">// Error: &amp;#39;name&amp;#39; is privae;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="protected">Protected&lt;/h3>
&lt;p>Der Modifikator &lt;code>protected&lt;/code> verhält sich ähnlich wie der Modifikator &lt;code>private&lt;/code>, mit der Ausnahme, dass auf als &lt;code>protected&lt;/code> deklarierte Member auch innerhalb von abgeleiteten Klassen zugegriffen werden kann.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>;
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> {
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">departement&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">departement&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>);
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">departement&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">departement&lt;/span>;
}
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">getElevatorPitch&lt;/span>(){
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">`Hello, my name is &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> and I work in &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">departement&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">.`&lt;/span>;
}
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">john&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Employee&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Howard&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Sales&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">john&lt;/span>.&lt;span style="color:#a6e22e">getElevatorPitch&lt;/span>());
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">john&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>); &lt;span style="color:#75715e">// Error
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>name&lt;/code> können wir ausserhalb von &lt;code>Person&lt;/code> nicht verwenden, jedoch innerhalb einer Instanzmethode von &lt;code>Employee&lt;/code>. Dies funktioniert, da &lt;code>Employee&lt;/code> von &lt;code>Person&lt;/code> abgeleitet ist.&lt;/p>
&lt;h3 id="readonly">Readonly&lt;/h3>
&lt;p>Mit &lt;code>readonly&lt;/code> können wir Eigenschaften schreibgeschützt machen. Schreibgeschützte Eigenschaften müssen bei ihrer Deklaration oder im Konstruktor initialisiert werden.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Octopus&lt;/span> {
&lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#66d9ef">readonly&lt;/span> &lt;span style="color:#a6e22e">numberOfLegs&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8&lt;/span>;
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span>;
}
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">dad&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Octopus&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Man with the 8 strong legs&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">dad&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Man with the 3-piece suit&amp;#34;&lt;/span>; &lt;span style="color:#75715e">// Error: name is readonly
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="arrow-functions">Arrow Functions&lt;/h2>
&lt;p>Die ES6-Version von TypeScript bietet eine arrow-function, die die Kurzform für die Definition der anonymen Funktion darstellt.
In anderen Sprachen auch bekannt als Lambda-Function.&lt;/p>
&lt;p>Wieso werden Arrow-Functions benutzt?&lt;/p>
&lt;ul>
&lt;li>Man muss nicht ständig &amp;ldquo;function&amp;rdquo; schreiben&lt;/li>
&lt;li>Es erfasst die Bedeutung des Schlüsselworts &amp;ldquo;this&amp;rdquo;&lt;/li>
&lt;li>Es erfasst die Bedeutung von Argumenten&lt;/li>
&lt;/ul>
&lt;p>Eine Arrow Function können wir in 3 Teile aufteilen:&lt;/p>
&lt;ul>
&lt;li>Parameter&lt;/li>
&lt;li>Die arrow-notation &lt;code>=&amp;gt;&lt;/code>&lt;/li>
&lt;li>Statements&lt;/li>
&lt;/ul>
&lt;p>Schauen wir uns ein Beispiel an:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// ES5: Without arrow function
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">getResult&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">unsername&lt;/span>, &lt;span style="color:#a6e22e">points&lt;/span>){
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">username&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;scored&amp;#39;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">points&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39; points!&amp;#39;&lt;/span>;
}
&lt;span style="color:#75715e">// ES6: With arrow function
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">getResult&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">unsername&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">points&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">`&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">username&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> scored &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">points&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> points!&amp;#39;`&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Arrow-functions benötigen natürlich nicht unbedingt Parameter.
Ein Beispiel mit Parameter würde so aussehen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">sum&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">a&lt;/span>:&lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">b&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">number&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span>{
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">b&lt;/span>;
}
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">sum&lt;/span>(&lt;span style="color:#ae81ff">20&lt;/span>,&lt;span style="color:#ae81ff">30&lt;/span>)); &lt;span style="color:#75715e">// returns 50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ein Beispiel ohne Parameter:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">Print&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello TypeScript&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">Print&lt;/span>() &lt;span style="color:#75715e">// returns &amp;#34;Hello TypeScript&amp;#34;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="async--await">Async / Await&lt;/h2>
&lt;h3 id="async-requests">Async Requests&lt;/h3>
&lt;p>&amp;lsquo;Asynchronität&amp;rsquo; in der Computerwelt bedeutet, dass der Programmfluss unabhängig erfolgt. Es wird nicht darauf gewartet, dass eine Aufgabe erledigt wird, sondern der nächste Task wird ausgeführt.&lt;/p>
&lt;p>Doch was passiert mit der Aufgabe, die noch nicht abgeschlossen ist? Stellt euch vor ein Mitarbeiter erledigt die noch nicht erledigten Aufgaben
im Hintergrund und sendet die Daten zurück, sobald sie erledigt sind.&lt;/p>
&lt;p>Nun ergibt sich die Frage, wie wir mit den zurückgegebenen Daten umgehen. Die Antwort lautet: Promises, Observables, Callbacks und weitere.
Bei einer asynchronen Anforderung wartet der Client nicht auf die Antwort. Nichts ist blockiert. Schauen wir uns dieses Konzept anhand eines häufigen Szenarios an.&lt;/p>
&lt;p>In der Web-Welt wird häufig auf den Server zugegriffen, um Daten wie die Details eines Benutzers, eine Liste usw. abzurufen. Wir wissen, dass dieses Szenario einige Zeit dauern kann.
In diesem Fall werden die Daten nicht abgewartet, sondern asynchron verarbeitet (kein Warten), damit unsere Anwendung nicht blockiert wird. Solche Anfragen sind asynchrone Anfragen.&lt;/p>
&lt;p>Schauen wir uns also an, wie wir mit diesen asynchronen Anforderungen umgehen können.&lt;/p>
&lt;h3 id="callbacks">Callbacks&lt;/h3>
&lt;p>Callback-Funktionen werden aufgerufen wenn die Anforderung abgeschlossen ist und die Daten oder einen Error zurückgegeben wird. Code zum besseren Verständnis:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">request&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">require&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;request&amp;#34;&lt;/span>);
&lt;span style="color:#a6e22e">request&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https://www.example.com&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">response&lt;/span>, &lt;span style="color:#a6e22e">body&lt;/span>){
&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>){
&lt;span style="color:#75715e">// Error handling
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
&lt;span style="color:#66d9ef">else&lt;/span>{
&lt;span style="color:#75715e">// Success
&lt;/span>&lt;span style="color:#75715e">&lt;/span> }
});
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In diesem Beispiel wird nun ein Request verarbeitet. Wie sieht es jedoch aus, falls wir nach dem erfolgreichen Erhalten von Daten nochmals einen Request durchführen wollen?
Bevor Promises in JavaScript integriert wurden, war dies ein mühseliges Problem. &lt;a href="https://hsto.org/getpro/habr/post_images/ad5/c3f/e3b/ad5c3fe3bf0f7a68a4d3444614c3133e.png">Callback-hell Beispiel&lt;/a>.&lt;/p>
&lt;h3 id="promises">Promises&lt;/h3>
&lt;p>Im Wesentlichen ist ein &lt;code>Promise&lt;/code> in JavaScript einem Versprechen im wirklichen Leben sehr ähnlich. Versprechen werden im wirklichen Leben entweder eingehalten oder gebrochen werden, in JavaScript werden &lt;code>Promises&lt;/code> entweder aufgelöst oder abgelehnt.&lt;/p>
&lt;p>Als Beispiel schauen wir, wie ein kleines Kind, das seinen Eltern verspricht, sein Zimmer zu reinigen, in JavaScript aussieht.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">promiseToCleanTheRoom&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">resolve&lt;/span>, &lt;span style="color:#a6e22e">reject&lt;/span>){
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">isClean&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">trueM&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span>(&lt;span style="color:#a6e22e">isClean&lt;/span>){
&lt;span style="color:#a6e22e">resolve&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Clean&amp;#34;&lt;/span>);
}
&lt;span style="color:#66d9ef">else&lt;/span>{
&lt;span style="color:#a6e22e">reject&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;not Clean&amp;#34;&lt;/span>);
}
});
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In JavaScript werden in einem Promise zwei Rückrufe berücksichtigt: &lt;code>resolve&lt;/code> und &lt;code>reject&lt;/code>. Wenn wir den obigen Code durchlesen, ist es offensichtlich, dass unser kleines Kind sein Versprechen, sein Zimmer zu
putzen, erfüllt hat. Daher wird unser Promise-Objekt hier - sobald es aufgerufen wurde - als Antwort &lt;code>Clean&lt;/code> zurückzugeben. Nehmen wir an, unser Kind hat es nicht geschafft, das Schnäppchen zu machen, dann würde &lt;code>isClean&lt;/code> auf &lt;code>false&lt;/code> gesetzt. Dann wird unser Versprechen hier abgelehnt und als Antwort &lt;code>not Clean&lt;/code> zurückgegeben.&lt;/p>
&lt;p>Wir können jetzt unsere Funktion &lt;code>promiseToCleanTheRoom&lt;/code> ausführen, indem wir Folgendes schreiben:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">promiseToCleanTheRoom&lt;/span>.&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the room is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>);
}).&lt;span style="color:#66d9ef">catch&lt;/span>(&lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">result&lt;/span>){
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;the room is &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>);
})
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Sobald &lt;code>promiseToCleanTheRoom&lt;/code> ausgeführt wird, wird unsere then-Funktion nur dann ausgelöst, wenn das Promise resolved wird.
Ebenso wird unsere catch-Funktion nur ausgelöst, wenn das Promise rejected wird.&lt;/p>
&lt;h2 id="observables">Observables&lt;/h2>
&lt;p>Ein Observable ermöglicht die Übergabe von null oder mehr Ereignissen, bei denen der Rückruf für jedes Ereignis aufgerufen wird.&lt;/p>
&lt;p>Bei Observables spielt es keine Rolle, ob man 0, 1 oder mehrere Ereignisse behandeln möchte. Sie können jeweils die gleiche API verwenden.&lt;/p>
&lt;p>Observable hat gegenüber Promise den Vorteil, stornierbar zu sein. Wenn das Ergebnis einer HTTP-Anforderung an einen Server oder eines anderen kostspieligen asynchronen Vorgangs nicht mehr benötigt wird,
kann man mit der Subscription einer Observable das Abonnement abbrechen.&lt;/p>
&lt;p>Codebeispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Observable&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;rxjs/Obvervable&amp;#39;&lt;/span>;
&lt;span style="color:#75715e">// Create a new Obvervable, providing the subscribe function.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">observable&lt;/span>: &lt;span style="color:#66d9ef">Observable&lt;/span>&amp;lt;&lt;span style="color:#f92672">string&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Obvervable&lt;/span>(&lt;span style="color:#a6e22e">observer&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">interval&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">setInterval&lt;/span>(() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#a6e22e">observer&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello from Obvervableland!&amp;#34;&lt;/span>);
}, &lt;span style="color:#ae81ff">1000&lt;/span>);
&lt;span style="color:#75715e">// teardown
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#a6e22e">clearInterval&lt;/span>(&lt;span style="color:#a6e22e">interval&lt;/span>);
}
});
&lt;span style="color:#75715e">// Subscribe to Notifications.
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">observable&lt;/span>.&lt;span style="color:#a6e22e">subscribe&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span>));
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Zunächst müssen wir die Observable-Klasse aus dem RxJS-Modul importieren, da Observables noch nicht Teil von ECMAScript (JavaScript) sind.
Anschliessend erstellen wir ein neues Observable und stellen die Abonnementfunktion bereit, die aufgerufen wird, wenn ein Observer das Observable abonniert.&lt;/p>
&lt;p>Wir verwenden die &lt;code>next()&lt;/code>-Methode für ein Observer-Objekt, um Werte an den Observer zu senden. Das Observer-Interface enthält 3 Methoden: &lt;code>next()&lt;/code>, &lt;code>catch()&lt;/code> and &lt;code>complete()&lt;/code>.
Um asynchrone Ereignisse zu faken, verwenden wir in diesem Beispiel die Funktion &lt;code>setInterval()&lt;/code>, die im Laufe der Zeit Werte ausgibt. Jede Sekunde geben wir den String &lt;code>Hello from Observableland!&lt;/code> aus.
Wir geben dann eine Funktion zurück, die aufgerufen wird, wenn sich alle Observer vom Observable abgemeldet haben.&lt;/p>
&lt;p>Schliesslich rufen wir die Methode &lt;code>subscribe()&lt;/code> auf, die eine Funktion bereitstellt, die jedes Mal aufgerufen wird, wenn der Wert &lt;code>next()&lt;/code> an alle Observer gesendet wird.&lt;/p>
&lt;h2 id="teste-dein-wissen">Teste dein Wissen&lt;/h2>
&lt;p>Du hast nun viel Neues über TypeScript gelernt. Teste &lt;a href="../../../../exams/web/angular/03_2_intro_typescript_exam">hier&lt;/a>, ob du das Wichtigste verstanden hast.&lt;/p></description></item><item><title>Labs: Angular Setup</title><link>/labs/web/angular/angular_setup/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>/labs/web/angular/angular_setup/</guid><description>
&lt;p>In diesem Lab wirst du Angular installieren.&lt;/p>
&lt;p>Das Lab orientiert sich stark an der offiziellen Dokumentation von Angular. Die Dokumentation findest du unter &lt;a href="https://angular.io/docs" target="_blank">angular.io/docs&lt;/a>.&lt;/p>
&lt;h3 id="teil-1---installation-von-nodejs">Teil 1 - Installation von Node.js&lt;/h3>
&lt;p>In diesem ersten Schritt wirst du Node.js installieren, falls Node.js noch nicht bei dir installiert ist.&lt;/p>
&lt;p>Überprüfe zuerst, ob Node.js bereits auf deinem System installiert ist:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">node --version
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Falls Node.js noch nicht auf deinem System installiert ist, kannst du Node.js über nvm (Node Version Manager) installieren.&lt;/p>
&lt;p>Um nvm zu installieren, verwende das Skript&lt;code>install.sh&lt;/code>, das sich innerhalb des repository &lt;a href="https://github.com/nvm-sh/nvm" target="_blank">github.com/nvm-sh/nvm&lt;/a> befindet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Verwende den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nvm --version
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>um zu überprüfen, ob nvm richtig installiert wurde.&lt;/p>
&lt;p>&lt;strong>nvm install&lt;/strong>&lt;/p>
&lt;p>Um eine spezifische Version&lt;code>&amp;lt;x.y.z&amp;gt;&lt;/code>von Node.js zu installieren (Beispiel &lt;code>12.22.7&lt;/code>), verwende den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nvm install &amp;lt;version&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Angular benötigt eine Active LTS (long-term support) oder eine Maintenance LTS Version von Node.js. Die aktuellen Active LTS und Maintenance LTS Versionen von Node.js sind unten abgebildet (Stand Oktober 2021), und unter &lt;a href="https://nodejs.org/en/about/releases/" target="_blank">nodejs.org/en/about/releases&lt;/a> aufgelistet.&lt;/p>
&lt;p>&lt;br />&lt;/p>
&lt;p>&lt;img src="../angular_setup/node_js_schedule.svg" alt="Active LTS und Maintenance LTS Versionen von Node js">&lt;/p>
&lt;p>&lt;strong>nvm list&lt;/strong>&lt;/p>
&lt;p>Verwende den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nvm list
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>um alle installierten Versionen von Node.js aufzulisten.&lt;/p>
&lt;p>&lt;strong>nvm use&lt;/strong>&lt;/p>
&lt;p>Falls bereits eine Version von Node.js auf deinem System installiert war, und du nvm nachträglich installiert hast, kannst du mit dem Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nvm use system
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>die bereits vorher installierte Version zur Verwendung auswählen.&lt;/p>
&lt;p>Eine über nvm installierte Version &amp;lt;x.y.z&amp;gt; von Node.js kannst du mit&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nvm use &amp;lt;x.y.z&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>zur Verwendung auswählen.&lt;/p>
&lt;p>&lt;strong>nvm alias default&lt;/strong>&lt;/p>
&lt;p>Zum Schluss, verwende&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">nvm alias default &amp;lt;version&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>um eine mit Angular kompatible Version &amp;lt;version&amp;gt; (Beispiele &lt;code>system&lt;/code>, &lt;code>12.22.7&lt;/code>) von Node.js als Standard festzulegen.&lt;/p>
&lt;hr>
&lt;p>Für die Installation von Angular im nächsten Schritt brauchst du den package mangager npm von Node.js. Stelle sicher, dass npm ebenfalls auf deinem System installiert ist:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">npm --version
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="teil-2---installation-des-cli-von-angular">Teil 2 - Installation des CLI von Angular&lt;/h3>
&lt;p>In diesem Schritt wirst du das CLI (command line interface) von Angular über npm installieren.&lt;/p>
&lt;p>Verwende dazu den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">npm install -g @angular/cli
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mit der Flag &lt;code>-g&lt;/code> wird das CLI von Angular global installiert. Das heisst unter anderem, dass executables in einem Verzeichnis installiert oder referenziet werden, das in der Umgebungsvariablen &lt;code>PATH&lt;/code> aufgelistet ist. Mehr Informationen dazu findest du &lt;a href="https://nodejs.org/en/blog/npm/npm-1-0-global-vs-local-installation/" target="_blank">hier&lt;/a>.&lt;/p>
&lt;p>Zur Überprüfung, ob Angular richtig installiert wurde, verwende&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ng version
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="teil-3---erstellen-einer-app-mit-dem-cli">Teil 3 - Erstellen einer App mit dem CLI&lt;/h3>
&lt;p>Das Grundgerüst einer Angular-App erstellt man mit dem Befehl &lt;code>ng new&lt;/code>.&lt;/p>
&lt;p>Verwende den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">ng new my-app
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>um eine neue App mit der Bezeichnung &lt;code>my-app&lt;/code> zu erstellen.&lt;/p>
&lt;p>Bei den zwei Eingabeaufforderungen / Prompts kannst du mit Enter die Standardoption bestätigen. Das CLI erstellt anschliessend ein Verzeichnis mit dem Namen &lt;code>my-app&lt;/code> und den generierten Dateien.&lt;/p>
&lt;h3 id="teil-4---ausführen-einer-app-mit-dem-cli">Teil 4 - Ausführen einer App mit dem CLI&lt;/h3>
&lt;p>Das CLI von Angular einthält einen Server, der eine App lokal bereitstellen kann.&lt;/p>
&lt;p>Verwende innerhalb des mit dem CLI erstellten Verzeichnisses den Befehl&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">ng serve
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>um die in der letzten Aufgabe erstellte App zu builden und zu starten.&lt;/p>
&lt;p>Mit der zusätzlichen Option&lt;code>--open&lt;/code>öffnet das CLI die App direkt in einem Browser. Per default wird die App unter der Webadresse &lt;code>localhost:4200&lt;/code> bereitgestellt.&lt;/p>
&lt;p>Falls alles erfolgreich war, wird eine von Angular generierte Standardseite angezeigt. Die Seite ist unten abgebildet.&lt;/p>
&lt;p>&lt;br />&lt;/p>
&lt;p>&lt;img src="../angular_setup/ng_default_app.png" alt="Die von Angular generierte Standardseite.">&lt;/p></description></item><item><title>Exams: Exam zu den HTML- und CSS-Basics</title><link>/exams/web/html_css/01_exam_html_css_rtm/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>/exams/web/html_css/01_exam_html_css_rtm/</guid><description>
&lt;h1 id="exam-1---html5--css3">Exam 1 - HTML5 &amp;amp; CSS3&lt;/h1>
&lt;p>&lt;img src="/images/task.png" alt="task1"> - Einzelarbeit&lt;br>
Erstelle mit Hilfe deines aktuellen Wissen eine neue Webseite. &lt;br>
Sie soll nur die HTML-Elemente und das CSS-Styling besitzen. &lt;br>
Die logischen Instrumente sind nicht nötig, da wir uns im nächsten Kurs mit Javascript/Typescript beschäftigen werden.
Verwende die HTML5 konformen Tags.&lt;/p>
&lt;h2 id="rtm">RTM&lt;/h2>
&lt;p>Nachzubauen ist die neue Webseite vom RTM(login).&lt;br>
Nachfolgend werden die einzelnen Komponenten erklärt. Es werden nur diverse Stylings gegeben, denn Rest müsst ihr selber versuchen zu definieren. &lt;br>
Zu unterst im File findet ihr noch diverse Hints, welche euch helfen könnten.&lt;br>
Die Icons sind &lt;a href="../icons/logos-rtm.zip">hier&lt;/a> hinterlegt. &lt;br>
&lt;img src="../rtm_home_page.png" alt="asset">&lt;/p>
&lt;h3 id="header">Header&lt;/h3>
&lt;p>&lt;img src="../rtm_header.png" alt="asset"> &lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Was&lt;/th>
&lt;th>Farbe&lt;/th>
&lt;th>Logo&lt;/th>
&lt;th>Grösse&lt;/th>
&lt;th>Hover Farbe&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Hintergrundfarbe in Header&lt;/td>
&lt;td>rgba(236,239,242,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>height: 57.25px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>login Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>login_logo.svg&lt;/td>
&lt;td>width: 180px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Text in Header&lt;/td>
&lt;td>rgba(119,119,119,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Datum(Tag)&lt;/td>
&lt;td>rgba(213,45,40,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kommen Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>kommen.svg&lt;/td>
&lt;td>width: 22px; height: 22px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Farbe untere Zeile Logo&lt;/td>
&lt;td>rgba(255,0,0,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 250px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Uhr Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>uhr.svg&lt;/td>
&lt;td>width: 22px; height: 22px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Pfeil (Menu Sprache) Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>pfeil_unten.svg&lt;/td>
&lt;td>-&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Refresh Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>refresh.svg&lt;/td>
&lt;td>width: 22px; height: 22px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Personen Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>persons.svg&lt;/td>
&lt;td>width: 22px; height: 22px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Profil Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>profil.svg&lt;/td>
&lt;td>width: 22px; height: 22px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Logout Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>logout.svg&lt;/td>
&lt;td>width: 22px; height: 22px;&lt;/td>
&lt;td>rgba(255,255,255,1);&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="linke-sidenav">Linke Sidenav&lt;/h3>
&lt;p>&lt;img src="../rtm_left_sidenav.png" alt="asset">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Was&lt;/th>
&lt;th>Farbe&lt;/th>
&lt;th>Logo&lt;/th>
&lt;th>Grösse&lt;/th>
&lt;th>Hover Farbe&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Hintergrund in Sidenav&lt;/td>
&lt;td>rgba(0,158,195,1)&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 180px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Profil Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>profil.svg&lt;/td>
&lt;td>width: 88px;height: 88px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Abwesend Text&lt;/td>
&lt;td>rgb(211, 47, 47);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Cockpit Logo&lt;/td>
&lt;td>background: rgba(230,230,230,1);color: rgba(115,115,115,1);&lt;/td>
&lt;td>cockpit.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Personen Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>persons.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>background: rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Einsatzplan Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>einsatzplan.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>background: rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Abfragen Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>abfragen.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>background: rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Abfragen Pfeil Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>pfeil_oben.svg&lt;/td>
&lt;td>width: 9px; height: 14px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Palungsliste Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>einsatzplan.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tagesübersicht Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>buchung.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Buchungsliste Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>buchung.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Zeitwertliste Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>buchung.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Saldoübersicht Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>saldo.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Spesenauswertung Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>buchung.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Auftragsauswertung Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>buchung.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Berichte Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>drucken.svg&lt;/td>
&lt;td>width: 16px; height: 16px;&lt;/td>
&lt;td>rgba(0,100,128,1);&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="rechte-sidenav">Rechte Sidenav&lt;/h3>
&lt;p>&lt;img src="../rtm_right_sidenav.png" alt="asset">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Was&lt;/th>
&lt;th>Farbe&lt;/th>
&lt;th>Logo&lt;/th>
&lt;th>Grösse&lt;/th>
&lt;th>Hover Farbe&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Hintergrund in Sidenav&lt;/td>
&lt;td>rgba(255, 255, 255, 1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 250px;&lt;/td>
&lt;td>rgba(245, 245, 245, 1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Anwesend Text&lt;/td>
&lt;td>rgba(66,159,70,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Profil Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>profil.svg&lt;/td>
&lt;td>width: 35px; height: 35px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Uhr Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>clock.svg&lt;/td>
&lt;td>width: 24px; height: 28px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Abwesend Text&lt;/td>
&lt;td>rgba(255,0,0,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Text allgemein&lt;/td>
&lt;td>rgba(33,33,33,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="content">Content&lt;/h3>
&lt;p>&lt;img src="../rtm_content.png" alt="asset">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Was&lt;/th>
&lt;th>Farbe&lt;/th>
&lt;th>Logo&lt;/th>
&lt;th>Grösse&lt;/th>
&lt;th>Hover Farbe&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Hintergrund in Content&lt;/td>
&lt;td>background: rgb(243, 243, 243,1); color: rgba(33,33,33,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bearbeiten Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>edit.svg&lt;/td>
&lt;td>width: 14px; height: 14px;&lt;/td>
&lt;td>rgba(250, 250, 250, 1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Plus Logo&lt;/td>
&lt;td>(disabled)&lt;/td>
&lt;td>plus.svg&lt;/td>
&lt;td>color: lightgrey; width: 11px; height: 14px;&lt;/td>
&lt;td>rgba(250, 250, 250, 1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Pfeil-Unten Logo&lt;/td>
&lt;td>(disabled)&lt;/td>
&lt;td>pfeil_unten.svg&lt;/td>
&lt;td>color: lightgrey; width: 9px; height: 14px;&lt;/td>
&lt;td>rgba(250, 250, 250, 1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Speichern Logo&lt;/td>
&lt;td>(disabled)&lt;/td>
&lt;td>save.svg&lt;/td>
&lt;td>color: lightgrey; width: 12px; height: 14px;&lt;/td>
&lt;td>rgba(250, 250, 250, 1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Rückgängig Logo&lt;/td>
&lt;td>(disabled)&lt;/td>
&lt;td>undo.svg&lt;/td>
&lt;td>color: lightgrey; width: 12px; height: 14px;&lt;/td>
&lt;td>rgba(250, 250, 250, 1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SBB Crackhead&lt;/td>
&lt;td>rgba(217,230,242,1);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 716.5px; height: 180px;&lt;/td>
&lt;td>rgba(224,231,235,1);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Profil Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>profil.svg&lt;/td>
&lt;td>width: 140px; height: 140px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ausrufezeichen Logos&lt;/td>
&lt;td>-&lt;/td>
&lt;td>request.svg&lt;/td>
&lt;td>width: 24px; height: 24px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Absenzen Text&lt;/td>
&lt;td>rgb(33, 150, 243);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 352.75px; height: 180px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Visum Text&lt;/td>
&lt;td>rgb(16, 85, 192);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 352.75px; height: 180px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Warnung Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>warning.svg&lt;/td>
&lt;td>width: 24px; height: 24px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Warnung Text&lt;/td>
&lt;td>rgb(219, 73, 216);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 352.75px; height: 180px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alarm Logo&lt;/td>
&lt;td>-&lt;/td>
&lt;td>alert.svg&lt;/td>
&lt;td>width: 24px; height: 24px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alart Text&lt;/td>
&lt;td>rgb(255, 67, 81);&lt;/td>
&lt;td>-&lt;/td>
&lt;td>width: 352.75px; height: 180px;&lt;/td>
&lt;td>-&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="/images/hint.png" alt="task1"> &lt;br>
Hint: über allen hover-Elementen pointer&lt;br>
Schatten: box-shadow&lt;br>
Scrollleiste: overflow-y oder overflow-x&lt;br>&lt;/p>
&lt;h2 id="sobald-du-fertig-bist">Sobald du fertig bist&amp;hellip;&lt;/h2>
&lt;p>Wenn du fertig mit diesem Exam bist, zeige dein Resultat einem Coach. Nach dem Okay des Coaches kannst du mit der Theorie zu &lt;a href="../../../../docs/web/html_css/19_css_bootstrap">Bootstrap&lt;/a> und dann mit &lt;a href="../../../../docs/web/javascript/01_js_intro">JavaScript&lt;/a> beginnen.&lt;/p></description></item><item><title>Exams: Exam zu den TypeScript-Basics</title><link>/exams/web/angular/03_2_intro_typescript_exam/</link><pubDate>Mon, 01 Nov 2021 00:00:00 +0000</pubDate><guid>/exams/web/angular/03_2_intro_typescript_exam/</guid><description>
&lt;h1 id="übungen">Übungen&lt;/h1>
&lt;h2 id="übung-1">Übung 1&lt;/h2>
&lt;p>&lt;img src="/images/task.png" alt="task1"> - Einzelarbeit &lt;a href="/files/exams/angular/uebung1.html">Übung 1&lt;/a>&lt;/p>
&lt;pre>&lt;code>Erstelle eine Website, welche anhand von Observables eine Browsernotification ausgibt.
Dazu soll sich auf der Website ein Button befinden, welcher das Event auslöst, um die Notification im Browser anzuzeigen.
Vorgehen:
Lade die Datei im Titel herunter und öffne sie in VS Code.
Die Datei enthält lediglich das Grundgerüst der Übung, füge an den auskommentierten Stellen den entsprechenden Code ein.
Am Grundgerüst der Datei soll nichts verändert werden.
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="/images/hint.png" alt="asset"> &lt;br>
Damit die Notifications fehlerfrei funktionieren, muss die Extenstion &amp;ldquo;Live Server&amp;rdquo; in VS Code hinzugefügt und angewendet werden.
&lt;br>&lt;/p>
&lt;h2 id="übung-2">Übung 2&lt;/h2>
&lt;h3 id="einrichtung">Einrichtung&lt;/h3>
&lt;p>Da du Node.js bereits installiert hast, kannst du nun anhand des Node Package Manager mühelos typescript installieren.
Dazu öffnest du eine Konsole und gibst diesen Befehl ein: &lt;br>
&lt;code>npm install -g typescript&lt;/code>&lt;/p>
&lt;p>Sobald die Installation abgeschlossen ist, erstellst du eine Datei und nennst diese &lt;code>hello-world.ts&lt;/code>.
Öffne die Datei mit VS Code und schreib die erste Codezeile: &lt;br>
&lt;code>console.log(&amp;quot;Hello World&amp;quot;);&lt;/code>&lt;/p>
&lt;p>Nun hast du unser erstes Typescript &amp;ldquo;Projekt&amp;rdquo; erstellt. Um dies auszuführen, müsst du den Quellcode zu JS transpilieren.
Dazu öffnest du eine Konsole und begibst dich in das Verzeichnis indem sich die Datei befindet.&lt;/p>
&lt;p>Danach gibst du folgenden Befehl in der Konsole ein: &lt;br>
&lt;code>tsc hello-world.ts&lt;/code>&lt;/p>
&lt;p>Wie du nun sehen kannst, befindet sich im Verzeichnis eine gleichnamige JS Datei.&lt;/p>
&lt;p>Diese kannst du nun anhand von Node ausführen: &lt;br>
&lt;code>node hello-word.js&lt;/code>&lt;/p>
&lt;p>Falls alles funktioniert hat, gibt die Konsole &lt;code>Hello World&lt;/code> aus.&lt;/p>
&lt;h3 id="übung">Übung&lt;/h3>
&lt;p>&lt;img src="/images/task.png" alt="task2"> - Einzelarbeit &lt;a href="/files/exams/angular/uebung2.ts">Übung 2&lt;/a>&lt;/p>
&lt;pre>&lt;code>Lade die Datei im Titel herunter und fülle wo nötig Quellcode ein.
Die Person soll sich folgendermassen vorstellen: &amp;quot;Hallo, mein Name ist [Name]&amp;quot;
Die Grundstruktur, sowie die letzten 2 Codezeilen dürfen nicht verändert werden.
&lt;/code>&lt;/pre>
&lt;h2 id="übung-3">Übung 3&lt;/h2>
&lt;p>&lt;img src="/images/task.png" alt="task3"> - Einzelarbeit&lt;/p>
&lt;pre>&lt;code>In dieser Übung wollen wir die Vererbung in einem Fallbeispiel anwenden.
Wir erweitern in dieser Aufgabe den Quellcode von Übung 2.
Erstelle dazu am Besten gleich eine neue Datei und kopiere den Quellcode von Aufgabe 2.
Lösche die letzten 2 Zeilen, sodass nur noch die Klasse &amp;quot;Person&amp;quot; übrig ist.
Erstelle anschliessend die Klasse &amp;quot;Friend&amp;quot;, welche die Klasse &amp;quot;Person&amp;quot; erbt.
Diese Klasse soll die Methode &amp;quot;timeKnown()&amp;quot;, sowie &amp;quot;introduceSelf()&amp;quot; der Parent-Klasse zur Verfügung stellen.
Die Methode &amp;quot;timeKnown()&amp;quot; soll folgendes ausgeben können: &amp;quot;Wir sind Freunde seit [AnzahlJahre] Jahren&amp;quot;
Achte also darauf, welche zusätzlichen Eigenschaften &amp;quot;Friend&amp;quot; besitzen muss.
Erstelle am Schluss (wie bei Übung 2) eine neue Instanz von &amp;quot;Friend&amp;quot;. Verwende als Parameter &amp;quot;Peter&amp;quot; und &amp;quot;5&amp;quot;.
Führe dann &amp;quot;introduceSelf()&amp;quot; und &amp;quot;timeKnown()&amp;quot; aus.
&lt;/code>&lt;/pre>
&lt;p>In der Konsole sollte Dir nun folgendes angezeigt werden.&lt;br>
&lt;em>Hallo, mein Name ist Peter&lt;/em> &lt;br>
&lt;em>Wir sind Freunde seit 5 Jahren&lt;/em>
&lt;br>&lt;/p>
&lt;h2 id="übung-4">Übung 4&lt;/h2>
&lt;p>&lt;img src="/images/task.png" alt="task4"> - Einzelarbeit &lt;a href="/files/exams/angular/uebung4.ts">Übung 4&lt;/a>, &lt;a href="https://nodejs.org/api/readline.html">https://nodejs.org/api/readline.html&lt;/a>&lt;/p>
&lt;pre>&lt;code>In dieser Aufgabe wollen wir Benutzereingabe in der Konsole verarbeiten.
Dazu verwenden wir in diesem Beispiel readline von NodeJS.
Wir wollen nun ein kleines Programm schreiben, welches wie folgt aussieht.
&lt;/code>&lt;/pre>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Wie ist dein name? Hansli
hallo Hansli
War diese Aufgabe lehrreich für dich= [j / n]j
Super!
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">Wie ist dein name? Hansli
hallo Hansli
War diese Aufgabe lehrreich für dich= [j / n]n
Schade! :(
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Zuerst wird der Anwender nach seinem Namen gefragt.
Danach wird er begrüsst.
Und anschliessend wird gefragt ob diese Aufgabe lehrreich für ihn war.&lt;/p>
&lt;p>Fülle in der Aufgabendatei den benötigten Code an den enstprechenden Stellen ein.&lt;/p>
&lt;p>&lt;img src="/images/hint.png" alt="asset"> &lt;br>
Um readline benutzen zu können, musst du erst den entsprechenden npm-Befehl ausführen. Achte darauf, dass du den Befehl im selben Verzeichnis ausführst, indem sich die .ts-Datei befindet!&lt;/p>
&lt;h1 id="zurück-zur-theorie">Zurück zur Theorie&lt;/h1>
&lt;p>&lt;a href="../../../../docs/web/angular/03_1_intro_typescript">Hier&lt;/a> gelangst du zurück zur Theorie.&lt;/p>
&lt;h1 id="eventuell-noch-eine-kleiner-exam-todo">Eventuell noch eine kleiner Exam (ToDo!!!!!)&lt;/h1></description></item><item><title>Labs: Adressbuch</title><link>/labs/java/java-oop/02_adressbuch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-oop/02_adressbuch/</guid><description>
&lt;p>Schreibe ein Programm, welches ein Adressbuch implementiert.
Die Anwendung soll die einzelnen Kontakte der Personen in ein Adressbuch eintragen,
wenn die entsprechende Methode aufgerufen wurde.&lt;/p>
&lt;p>Eine Person besitzt&lt;/p>
&lt;ul>
&lt;li>einen Namen&lt;/li>
&lt;li>eine Email-Adresse&lt;/li>
&lt;li>eine Telefonnummer&lt;/li>
&lt;/ul>
&lt;p>Das Adressbuch soll&lt;/p>
&lt;ul>
&lt;li>die Anzahl der Kontakte im Adressbuch zurückliefern können&lt;/li>
&lt;li>einen neuen Kontakt in das Adressbuch einfügen&lt;/li>
&lt;li>einen Kontakt im Adressbuch durch den Namen finden&lt;/li>
&lt;li>einen Kontakt aus dem Adressbuch über die E-Mail-Adresse entfernen&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Generell gilt die Regel, dass jede E-Mail-Adresse einzigartig sein muss&lt;/em>&lt;/p></description></item><item><title>Labs: Bibliothek</title><link>/labs/java/java-generics/02_bibliothek/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-generics/02_bibliothek/</guid><description>
&lt;p>Schreibe eine Anwendung, welche eine Bibliothek modelliert.
In der Bibliothek findet man unterschiedliche Exemplare. z.B: Bücher, Zeitschriften, CDs, DVDs.&lt;/p>
&lt;p>Ein Item&lt;/p>
&lt;ul>
&lt;li>hat einen Titel&lt;/li>
&lt;/ul>
&lt;p>Folgende Arten von Items können sich in der Bibliothek befinden:&lt;/p>
&lt;ul>
&lt;li>Buch
&lt;ul>
&lt;li>hat einen Autor&lt;/li>
&lt;li>hat ein Genre&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Zeitschrift
&lt;ul>
&lt;li>hat einen Herausgeber&lt;/li>
&lt;li>hat ein Datum&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CD
&lt;ul>
&lt;li>hat den Namen des Interpreten&lt;/li>
&lt;li>hat eine Anzahl von Songs&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DVD
&lt;ul>
&lt;li>hat den Namen des Regisseurs&lt;/li>
&lt;li>hat ein Genre&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="die-anwendung-soll">Die Anwendung soll&lt;/h4>
&lt;ul>
&lt;li>ein Inventar von unterschiedlichen Items verwalten (also Bücher, DVDs usw.)&lt;/li>
&lt;li>es ermöglichen ein Item auszuleihen, wenn es noch nicht ausgeliehen worden ist&lt;/li>
&lt;li>es ermöglichen ein Item zurückzugeben&lt;/li>
&lt;li>Auskunft zu den vorhandenen Items im Inventar geben&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Verwende Generics überall wo es Sinn macht!&lt;/em>&lt;/p></description></item><item><title>Exams: Exam Java Grundlagen - Strings</title><link>/exams/java/java-grundlagen/exam2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/exams/java/java-grundlagen/exam2/</guid><description>
&lt;h2 id="gegeben">Gegeben&lt;/h2>
&lt;p>Gegegeben ist der folgende String:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">52
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">53
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">54
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">55
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">56
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">57
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">58
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">59
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">String endOfTheWorld &lt;span style="color:#f92672">=&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;That&amp;#39;s great, it starts with an earthquake &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Birds and snakes, and aeroplanes &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;And Lenny Bruce is not afraid &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Eye of a hurricane, listen to yourself churn &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;World serves its own needs &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Don&amp;#39;t mis-serve your own needs &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Speed it up a notch, speed, grunt, no, strength &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;The ladder starts to clatter &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;With a fear of height, down, height &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Wire in a fire, represent the seven games &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;And a government for hire and a combat site &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Left her, wasn&amp;#39;t coming in a hurry &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;With the Furies breathing down your neck &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Team by team, reporters baffled, trumped, tethered, cropped &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Look at that low plane, fine, then &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Uh oh, overflow, population, common group &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;But it&amp;#39;ll do, save yourself, serve yourself &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;World serves its own needs, listen to your heart bleed &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Tell me with the Rapture and the reverent in the right, right &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;You vitriolic, patriotic, slam fight, bright light &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Feeling pretty psyched &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it and I feel fine &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Six o&amp;#39;clock, T.V. hour, don&amp;#39;t get caught in foreign tower &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Slash and burn, return, listen to yourself churn &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Lock him in uniform, book burning, bloodletting &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Every motive escalate, automotive incinerate &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Light a candle, light a motive, step down, step down &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Watch your heel crush, crush, uh oh &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;This means no fear, cavalier, renegade and steering clear &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;A tournament, a tournament, a tournament of lies &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Offer me solutions, offer me alternatives and I decline &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it (I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it (I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it and I feel fine (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;I feel fine (I feel fine) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it and I feel fine (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;The other night I drifted nice continental drift divide &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Mountains sit in a line, Leonard Bernstein &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Leonid Brezhnev, Lenny Bruce and Lester Bangs &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;Birthday party, cheesecake, jellybean, boom &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;You symbiotic, patriotic, slam but neck, right, right &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it and I feel fine (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it and I feel fine (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it and I feel fine (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it (time I had some time alone) &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s the end of the world as we know it and I feel fine (time I had some time alone)&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#75715e">// Copyright R.E.M.
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="aufgabe-1">Aufgabe 1&lt;/h2>
&lt;p>Schreibe eine Methode, welche die Anzahl Wörter zählt, welche mindestens zweimal im Text vorkommen. Entferne zu diesem Zweck zuerst die Sonderzeichen.
Die Methode liefert die Anzahl dieser Wörter zurück.&lt;/p>
&lt;h2 id="aufgabe-2">Aufgabe 2&lt;/h2>
&lt;p>Schreibe eine Methode, welche die Wörter aus dem Text oben alphabetisch sortiert. Entferne zu diesem Zweck zuerst die Sonderzeichen.
Die Methode liefert ein Array mit den sortierten Wörtern zurück.&lt;/p>
&lt;h2 id="aufgabe-3">Aufgabe 3&lt;/h2>
&lt;p>Schreibe eine Methode, welche die durchschnittliche Wortlänge berechnet. Entferne zu diesem Zweck zuerst die Sonderzeichen.
Die Methode liefert die durchschnittliche Wortlänge als Gleitkommazahl zurück.&lt;/p>
&lt;h2 id="aufgabe-4">Aufgabe 4&lt;/h2>
&lt;p>Schreibe eine Methode, welche die Wörter aus dem Text nach ihrer Länge sortiert. Kurze Wörter kommen dabei zuerst. Entferne zu diesem Zweck zuerst die Sonderzeichen.
Die Methode liefert ein Array mit den sortierten Wörtern zurück.&lt;/p>
&lt;h2 id="aufgabe-5">Aufgabe 5&lt;/h2>
&lt;p>Schreibe eine Methode, welche das Wort zurückliefert, das im Text oben am häufigsten vorkommt. Entferne zu diesem Zweck zuerst die Sonderzeichen.
Die Methode liefert das gesuchte Wort zurück.&lt;/p>
&lt;h2 id="aufgabe-6">Aufgabe 6&lt;/h2>
&lt;p>Schreibe eine Methode, welche die einzelnen Buchstaben des Textes in ein zweidimensionales Array von Strings überführt.
Die erste Dimension hat dabei die Grösse der verschiedenen vorkommenden Zeichen im Text in alphabetischer Reihenfolge.
Sonderzeichen sind ebenfalls Teil dieser alphabetischen Reihenfolge, die Sortierung richtet sich nach dem Integer-Wert der einzelnen Zeichen.
Die zweite Dimension enthält pro Zeichen ein Array mit den Positionen der Zeichen im Text. An erster Stelle steht dabei das jeweilige Zeichen.
Sämtliche Buchstaben sollen immer nur als kleingeschriebene Buchstaben behandelt werden.&lt;/p>
&lt;p>Beispiel:&lt;/p>
&lt;p>&lt;code>String text = &amp;quot;Hallo mein Name ist Claudio&amp;quot;&lt;/code>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>a&lt;/th>
&lt;th>c&lt;/th>
&lt;th>d&lt;/th>
&lt;th>e&lt;/th>
&lt;th>h&lt;/th>
&lt;th>i&lt;/th>
&lt;th>l&lt;/th>
&lt;th>m&lt;/th>
&lt;th>n&lt;/th>
&lt;th>o&lt;/th>
&lt;th>s&lt;/th>
&lt;th>t&lt;/th>
&lt;th>u&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>1&lt;/td>
&lt;td>20&lt;/td>
&lt;td>24&lt;/td>
&lt;td>7&lt;/td>
&lt;td>0&lt;/td>
&lt;td>8&lt;/td>
&lt;td>2&lt;/td>
&lt;td>6&lt;/td>
&lt;td>9&lt;/td>
&lt;td>4&lt;/td>
&lt;td>17&lt;/td>
&lt;td>18&lt;/td>
&lt;td>23&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>12&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>14&lt;/td>
&lt;td>&lt;/td>
&lt;td>16&lt;/td>
&lt;td>3&lt;/td>
&lt;td>13&lt;/td>
&lt;td>11&lt;/td>
&lt;td>26&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>15&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>19&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Install Git</title><link>/docs/git/git-install/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/git-install/</guid><description>
&lt;h2 id="inhalt">Inhalt&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#git-unter-windows-installieren">Git unter Windows installieren&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="git-unter-windows-installieren">Git unter Windows installieren&lt;/h2>
&lt;ol>
&lt;li>Navigiere zum &lt;a href="https://git-scm.com/download/win">Git für Windows Installer&lt;/a> und lade die neuste Version herunter.&lt;/li>
&lt;li>Folge den Installationsanweisungen bis die Installation abgeschlossen ist.
&lt;ul>
&lt;li>Es wird empfohlen während der Installation Git Bash zu installieren
&lt;img src="../git-install/git-setup-bash.png" alt="Git Setup Bash" title="Git Setup Bash">&lt;/li>
&lt;li>Es wird empfohlen während der Installation den PATH zu ändern.
&lt;img src="../git-install/git-setup-path.png" alt="Git Setup PATH" title="Git Setup PATH">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Öffne Git Bash&lt;/li>
&lt;li>Schreibe &lt;code>git version&lt;/code> zum Überprüfen, ob Git erfolgreich installiert wurde.&lt;/li>
&lt;/ol></description></item><item><title>Docs: IntelliJ IDEA einrichten</title><link>/docs/java/intellij-einrichten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/java/intellij-einrichten/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich kenne die wichtigsten Funktionen der IntelliJ IDEA&lt;/li>
&lt;li>Ich kann Projekte innerhalb IntelliJ IDEA neu anlegen, konfigurieren und verwalten&lt;/li>
&lt;li>Ich kann IntelliJ IDEA zusammen mit einem GIT-Repository verwenden&lt;/li>
&lt;li>Ich kann Plugins suchen und installieren&lt;/li>
&lt;li>Ich verstehe das Grundprinzip von Debugging&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="einführung-in-intellij-idea">Einführung in IntelliJ IDEA&lt;/h3>
&lt;p>Besuche die folgenden Links und lies die Informationen durch:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.jetbrains.com/help/idea/discover-intellij-idea.html#navigation-and-search">Navigation und Suche&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jetbrains.com/help/idea/guided-tour-around-the-user-interface.html">Benutzer Interface&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Die Ansicht und/oder das Verhalten kann abhängig von den installierten Plugins, der IntelliJ IDEA Version oder den Benutzereinstellungen variieren.&lt;/p>
&lt;h3 id="default-keymap">Default Keymap&lt;/h3>
&lt;p>IntelliJ verfügt über diverse Tastenkombinationen, um die Produktivität zu erhöhen.
Im unten stehenden PDF findest du die standardmässig eingestellten Tastenkombinationen.
&lt;a href="https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf">IntelliJ IDEA Reference Card&lt;/a>&lt;/p>
&lt;h3 id="personalisierte-keymap">Personalisierte Keymap&lt;/h3>
&lt;p>Es kann vorkommen, dass einige Tastenkombinationen nicht ausführbar sind, als Beispiel ist die Kombination Ctrl + / nur ausführbar, wenn die Tastatur über einen Nummernblock verfügt.
Um die Tastenkombinationen deinen Bedürfnissen anzupassen, kannst du in den Einstellungen im IntelliJ nach Keymap und der entsprechenden Funktion suchen und diese anpassen.
Zusätzlich bietet IntelliJ IDEA diverse Keymaps an, welche sich z.B. an den Tastenkombinationen von Eclipse oder Visual Studio orientieren und die Umstellung erleichtern sollen.&lt;/p>
&lt;p>Falls Du die Tastenkombinationen deinen Bedürfnissen angepasst hast, kannst du dir deine personalisierte Keymap als PDF von IntelliJ IDEA erstellen lassen unter Help → Keymap Reference.&lt;/p>
&lt;h4 id="wichtige-kombinationen-für-den-anfang">Wichtige Kombinationen für den Anfang&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Funktion&lt;/th>
&lt;th>Shortcut&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Einstellungen öffnen&lt;/td>
&lt;td>Ctrl + Alt + S&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Überall suchen&lt;/td>
&lt;td>2x Shift&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Smart Code Completion&lt;/td>
&lt;td>Ctr + Alt + Space&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Code formatieren&lt;/td>
&lt;td>Ctrl + Alt + L&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Imports optimieren&lt;/td>
&lt;td>Ctrl + Alt + O&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Generiere Code (Constructor, Getter, Setter, etc.)&lt;/td>
&lt;td>Alt + Insert&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="wichtige-kombinationen-zur-code-generierung">Wichtige Kombinationen zur Code-Generierung&lt;/h4>
&lt;p>IntelliJ bietet nicht nur Tastenkombinationen, um die Produktivität zu verbessern, sondern auch vordefinierte Wörter, Kürzel oder Buchstaben, welche automatisch Code generieren.
Mit der Tastenkombination Ctrl + J kannst du diese anzeigen lassen.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Code&lt;/th>
&lt;th>Shortcut&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>eine main()-Methode&lt;/td>
&lt;td>psvm&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>eine forEach-Schleife&lt;/td>
&lt;td>foreach&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>eine for-Schleife mit &amp;ldquo;i&amp;rdquo; als Zähler&lt;/td>
&lt;td>fori&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>einen if == null check&lt;/td>
&lt;td>ifn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>eine Iteration (while-Schleife) über einen Iterator&lt;/td>
&lt;td>itit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>eine Iteration (for-Schleife) über eine Liste&lt;/td>
&lt;td>itli&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>eine print()-Methode, welche einen Error auf der Konsole ausgibt&lt;/td>
&lt;td>serr&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>eine print()-Methode&lt;/td>
&lt;td>sout&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>eine formatierte print()-Methode&lt;/td>
&lt;td>souf&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="neues-projekt-anlegen">Neues Projekt anlegen&lt;/h3>
&lt;p>Um einen ersten Einblick in die Erstellung eines neuen Projektes zu erhalten kann das folgende Tutorial von IntelliJ IDEA absolviert werden:
&lt;a href="https://www.jetbrains.com/help/idea/creating-and-running-your-first-java-application.html">https://www.jetbrains.com/help/idea/creating-and-running-your-first-java-application.html&lt;/a>&lt;/p>
&lt;h3 id="installation-von-plugins">Installation von Plugins&lt;/h3>
&lt;p>Plugins erweitern die Kernfunktionalität von IntelliJ IDEA.&lt;/p>
&lt;ul>
&lt;li>Plugins ermöglichen die Integration mit Versionskontrollsystemen, Anwendungsservern und anderen externen Applikationen&lt;/li>
&lt;li>Plugins fügen Unterstützung bei der Kodierungshilfe für verschiedene Sprachen und Frameworks hinzu&lt;/li>
&lt;li>Plugins steigern die Produktivität mit Shortcut-Hinweisen, Live-Vorschauen, File Watchers etc.&lt;/li>
&lt;li>Plugins helfen dir beim Erlernen einer neuen Programmiersprache mit Programmierübungen und Verifizierung&lt;/li>
&lt;/ul>
&lt;p>Plugins müssen über den Marktplatz von IntelliJ installiert werden. Dieser ist über die Einstellungen unter Plugins verfügbar.
Dort können Plugins gesucht und über einen Klick auf Install einfach und unkompliziert installiert werden.&lt;/p>
&lt;h4 id="hilfreiche-plugins-für-den-anfang">Hilfreiche Plugins für den Anfang&lt;/h4>
&lt;p>Ein sehr hilfreiches Plugin ist der &amp;ldquo;Key Promoter X&amp;rdquo;. Dieses Plugin ermöglicht das Erlernen der IntelliJ IDEA Tastenkombinationen.
Jede verfügbare Tastenkombinationen wird dir bei Verwendung eines Menüs oder Kontextmenüs angezeigt.&lt;/p>
&lt;h3 id="code-formatierung-hinterlegen">Code-Formatierung hinterlegen&lt;/h3>
&lt;p>Die SBB verwendet den Google Java Code Style und passt ihn nur dort an wo es notwendig ist.
Der Java Code Styleguide der SBB in der Version 5 ist hier zu finden:
&lt;a href="https://confluence.sbb.ch/x/tZQsew">Java Code Styleguide SBB&lt;/a>&lt;/p>
&lt;p>Der Import dieses Code Styles in das IntelliJ wird über eine XML-Datei gemacht, welche hier zu finden ist:
&lt;a href="https://code.sbb.ch/projects/KD_WZU/repos/eaio/browse/packs/intellij-community/config/codestyles/SbbStyle.xml#1">SbbStyle&lt;/a>&lt;/p>
&lt;p>Die XML-Datei kann im IntelliJ als Konfiguration hinterlegt werden. Die folgenden Schritte sind dazu notwendig:&lt;/p>
&lt;p>Code-Formatierung:
File → Settings → Editor → Code-Style → Java&lt;br>
Neben dem Profilnamen auf das Zahnrad-Icon klicken und den Eintrag &lt;em>Import Scheme&lt;/em> → &lt;em>Intellij IDEA code style XML&lt;/em> auswählen. Anschliessend die XML-Datei auswählen.
Das Profil wird importiert und kann anschliessend aus dem Drop-Down ausgewählt und aktiviert werden.&lt;/p>
&lt;p>Die Anordnung von Imports muss manuell angepasst werden. Nach der Auswahl des Profils aus dem Drop-Down klickst du auf den Tab Imports.
Die Einstellungen richten sich nach den beiden folgenden Screenshots:
&lt;img src="../intellij-einrichten/Import-Order_1.png" alt="Import-Order #1">
&lt;img src="../intellij-einrichten/Import-Order_2.png" alt="Import-Order #2">&lt;/p>
&lt;h3 id="debugging-grundlagen">Debugging-Grundlagen&lt;/h3>
&lt;p>Der Debugger wird benutzt, um mithilfe von Breakpoints den Code während der Ausführung anzuhalten, zu analysieren und Fehler im Code zu finden.
Mehr Informationen dazu gibt es unter dem folgenden Link:
&lt;a href="https://www.jetbrains.com/help/idea/debugging-code.html">Debug Code&lt;/a>&lt;/p></description></item><item><title>Docs: Microsoft Word</title><link>/docs/tools/ms-word/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/tools/ms-word/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich weiss, wie man mit Microsoft Word eine einfache Dokumentation erstellt&lt;/li>
&lt;li>Ich weiss, wie man ein Deckblatt einfügt&lt;/li>
&lt;li>Ich weiss, wie man eine Kopf- und Fusszeile einfügt und bearbeitet&lt;/li>
&lt;li>Ich weiss, wie man Bilder einfügt und bearbeitet&lt;/li>
&lt;li>Ich weiss, wie man die Formatvorlagen benutzt&lt;/li>
&lt;li>Ich weiss, wie man ein Inhaltsverzeichnis generieren und aktualisieren kann&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="deckblatt-einfügen">Deckblatt einfügen&lt;/h3>
&lt;p>Um einen guten Einstieg in eine Dokumentation zu erhalten, kann man ein Deckblatt einfügen. Dies geht ganz simpel über
das Register &lt;strong>Einfügen&lt;/strong> und dann die Option Deckblatt auswählen. Dort gibt es einige Vorlagen, welche man aber auch
anpassen kann. Es dient als gute Vorlage um wichtige Informationen wie den Autor oder den Titel des Dokuments darzustellen.&lt;/p>
&lt;hr>
&lt;h3 id="kopf--und-fusszeile">Kopf- und Fusszeile&lt;/h3>
&lt;p>In den Kopf- und Fusszeilen werden Texte eingegeben (oder auch Bilder eingefügt), die im gesamten Dokument oder einem gewissen Bereich des Dokuments
am oberen oder unteren Seitenrand dargestellt werden. Typische Anwendungen sind zum Beispiel ein Firmenlogo in der Kopfzeile
und die Seitenzahl oder der Dateiname in der Fusszeile.&lt;/p>
&lt;p>Um für das Dokument Kopf- und Fusszeile zu erstellen kann man in der Menüleiste auf das Register &lt;strong>Einfügen&lt;/strong> wechseln.
Im Abschnitt &lt;strong>Kopfzeile&lt;/strong> oder &lt;strong>Fusszeile&lt;/strong> können wir nun diese einfügen. Word hat schon einige Vorlagen, die wir benutzen können, aber es
ist auch möglich eigene Formatvorlagen zu erstellen. Sobald man eine Kopf- oder Fusszeile erstellt hat, wechselt Word
automatisch das Register. Nun können wir einige Einstellungen anpassen.&lt;/p>
&lt;p>Die wichtigsten Anpassungen sind folgende:&lt;/p>
&lt;p>&lt;strong>Seitenzahl&lt;/strong>&lt;/p>
&lt;p>Um die Seitenzahl automatisch generieren zu lassen, kann man diese direkt einfügen lassen. Auch dort ist uns Word sehr
behilflich und bietet uns einige Vorlagen an.&lt;/p>
&lt;p>&lt;img src="../word/Seitenzahl.png" alt="Seitenzahl">&lt;/p>
&lt;p>&lt;strong>Optionen&lt;/strong>&lt;/p>
&lt;p>In den meisten Fällen ist die erste Seite eines Dokuments ein Titelblatt. Dort werden die Kopf- und Fusszeilen nicht dargestellt.
Um das einzustellen, kann man unter &lt;strong>Optionen&lt;/strong> den Punkt &lt;strong>Erste Seite anders&lt;/strong> auswählen. Damit bekommt die erste
Seite eine eigene Kopf- und Fusszeile.&lt;/p>
&lt;p>&lt;img src="../word/Kopf-Fusszeile.png" alt="Kopf- und Fusszeile">&lt;/p>
&lt;hr>
&lt;h3 id="bilder-einfügen">Bilder einfügen&lt;/h3>
&lt;p>Um ein Bild einzufügen, kann man entweder über das Register &lt;strong>Einfügen&lt;/strong> ein Bild über einen Dateipfad einfügen oder
man kann das Bild auch direkt in das Dokument kopieren. Das Bild können wir nun bearbeiten. Zum Beispiel können wir es
zuschneiden, die Grösse anpassen, eine Formatvorlage hinzufügen oder verschiedene Effekte hinzufügen.&lt;/p>
&lt;p>Damit man in einer Dokumentation die Bilder zusammen mit Text darstellen kann, gibt es für die Bilder Layoutoptionen.
Mit diesen Optionen kann man den Textumbruch verändern und somit das Bild in den Text integrieren.&lt;/p>
&lt;p>&lt;img src="../word/Layoutoptionen.png" alt="Layoutoptionen">&lt;/p>
&lt;hr>
&lt;h3 id="formatvorlagen">Formatvorlagen&lt;/h3>
&lt;p>Formatvorlagen vereinheitlichen das Dokument und lassen es professioneller wirken.
Diese sind direkt im Register &lt;strong>Start&lt;/strong> zu finden. Die verschiedenen Formatvorlagen kann man anpassen oder auch selbst
neue Formatvorlagen erstellen. Um eine Vorlage zu bearbeiten, macht man einfach einen Rechtsklick auf die Vorlage und
wählt dort &lt;strong>Ändern&lt;/strong> aus. Nun kann man alle Optionen individuell anpassen.&lt;/p>
&lt;p>&lt;img src="../word/Formatvorlagen.png" alt="Formatvorlagen">&lt;/p>
&lt;hr>
&lt;h3 id="inhaltsverzeichnis">Inhaltsverzeichnis&lt;/h3>
&lt;p>Um eine Übersicht über das Dokument zu erhalten, kann man ein Inhaltsverzeichnis generieren lassen. Dafür ist unter dem
Register &lt;strong>Referenzen&lt;/strong> die Option Inhaltsverzeichnis. Dort finden wir Vorlagen für integrierte Inhaltsverzeichnisse,
die von Word selber bearbeitet werden. Wenn wir mit Inhaltsverzeichnissen arbeiten, müssen wir auch mit dem Formatvorlagen
für die Titel arbeiten. So können Titel und Untertitel im Inhaltsverzeichnis erkannt und abgebildet werden. Zum Beispiel
die Formatvorlage Überschrift 2 wird im Inhaltsverzeichnis eingerückt, da sie als Untertitel verwendet wird.&lt;/p>
&lt;p>Nimmt man nach dem Einfügen vom Inhaltsverzeichnis noch weitere Änderungen am Dokument vor, muss man das Verzeichnis
aktualisieren. Dafür klickt man einfach auf das Inhaltsverzeichnis im Dokument und kann dann oberhalb vom Verzeichnis
auf &lt;strong>Inhaltsverzeichnis aktualisieren&lt;/strong> klicken. Damit werden die Titel und Seitenzahlen aktualisiert.&lt;/p>
&lt;p>&lt;img src="../word/Inhaltsverzeichnis.png" alt="Inhaltsverzeichnis">&lt;/p></description></item><item><title>Labs: Mockito - Aufgaben</title><link>/labs/java/java-testing/02_mockito/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-testing/02_mockito/</guid><description>
&lt;p>Eine Wörterbuch-Anwendung bewahrt die Einträge in einer Datenbank.
Die Interaktion mit der Datenbank wird durch ein DictionaryRepository umgesetzt.&lt;/p>
&lt;p>Ein DictionaryRepository setzt folgendes Interface um:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">DictionaryRepository&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Die Methode erhält ein Wort und die Definition dazu und speichert diese als Eintrag in der Datenbank
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @Param word das Wort, welche in dem Wörterbuch hinzugefügt werden soll
&lt;/span>&lt;span style="color:#75715e"> * @Param definition die Definition des Wortes
&lt;/span>&lt;span style="color:#75715e"> * */&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String key&lt;span style="color:#f92672">,&lt;/span> String value&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Die Methode aktualisiert die Definition des Wortes in der Wörterbuch-Datenbank
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @Param word das Wort, welche in dem Wörterbuch bereits existiert
&lt;/span>&lt;span style="color:#75715e"> * @Param definition die aktualisierte Definition des Wortes
&lt;/span>&lt;span style="color:#75715e"> * */&lt;/span>
&lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">update&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String key&lt;span style="color:#f92672">,&lt;/span> String value&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Die Methode liefert die Definition für das gegebene Wort aus der Wörterbuch-Datenbank zurück.
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @Param word das Wort, dessen Definition gesucht wird
&lt;/span>&lt;span style="color:#75715e"> * @Return die Definition des Wortes aus der Wörterbuch-Datenbank, falls vorhanden, ansonsten null
&lt;/span>&lt;span style="color:#75715e"> * */&lt;/span>
String &lt;span style="color:#a6e22e">getDefinition&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String word&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Klasse &lt;em>Dictionary&lt;/em> beinhaltet die Business-Logik des Wörterbuchs und verwendet ein &lt;em>DictionaryRepository&lt;/em>,
um die Einträge in der Datenbank zu speichern und zu finden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">enum&lt;/span> DictionaryStatus &lt;span style="color:#f92672">{&lt;/span>
ADDED&lt;span style="color:#f92672">,&lt;/span>
UPDATED&lt;span style="color:#f92672">,&lt;/span>
INVALID&lt;span style="color:#f92672">,&lt;/span>
NOT_FOUND
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Dictionary&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> DictionaryRepository repository&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Dictionary&lt;/span>&lt;span style="color:#f92672">(&lt;/span>DictionaryRepository repository&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">repository&lt;/span> &lt;span style="color:#f92672">=&lt;/span> repository&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Die Methode schreibt eine Definition für ein Wort in der Wörterbuch-Datenbank.
&lt;/span>&lt;span style="color:#75715e"> * Zuerst wird geschaut, ob das Wort in der Datenbank bereits existiert.
&lt;/span>&lt;span style="color:#75715e"> * Falls das Wort noch nicht existiert, wird einen neuen Eintrag in der Datenbank erstellt.
&lt;/span>&lt;span style="color:#75715e"> * Falls das Wort bereits existiert, wird seine Definition aktualisiert.
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @Param word das Wort, welche in dem Wörterbuch hinzugefügt oder aktualisiert werden soll
&lt;/span>&lt;span style="color:#75715e"> * @Param definition die Definition des Wortes
&lt;/span>&lt;span style="color:#75715e"> * @Return DictionaryStatus.ADDED falls das Wort neu ist, DictionaryStatus.UPDATED falls das Wort
&lt;/span>&lt;span style="color:#75715e"> * bereits vorhanden war und DictionaryStatus.INVALID, falls das Wort ein leerer String ist oder Zahlen beinhaltet
&lt;/span>&lt;span style="color:#75715e"> * */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> DictionaryStatus &lt;span style="color:#a6e22e">addOrUpdateWord&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String word&lt;span style="color:#f92672">,&lt;/span> String definition&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">//TODO gemäss JavaDoc umsetzen
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Die Methode sucht nach der Definition des gegebenen Worts.
&lt;/span>&lt;span style="color:#75715e"> * Falls das Wort existiert, wird die Definition zurückgeliefert und ansonsten einen
&lt;/span>&lt;span style="color:#75715e"> * Text, welcher darauf hinweist, dass das Wort nicht vorhanden ist.
&lt;/span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;span style="color:#75715e"> * @Param word das Wort, dessen Definition gesucht wird
&lt;/span>&lt;span style="color:#75715e"> * @Return die Definition des Wortes, falls das Wort im Wörterbuch existiert. Ansonsten folgenden Text:
&lt;/span>&lt;span style="color:#75715e"> * &amp;#34;Das Wort xxx konnte im Wörterbuch nicht gefunden werden&amp;#34; (xxx steht als Platzhalter für das gesuchte Wort)
&lt;/span>&lt;span style="color:#75715e"> * */&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getDefinition&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String word&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">//TODO gemäss JavaDoc umsetzen
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="aufgabe">Aufgabe&lt;/h4>
&lt;p>Schreibe eine Test-Klasse für &lt;em>Dictionary&lt;/em>, welche folgende Tests beinhaltet:&lt;/p>
&lt;ul>
&lt;li>Tests der Methode &lt;em>addOrUpdateWord&lt;/em>:
&lt;ul>
&lt;li>Das Wort befindet sich noch nicht in der Datenbank&lt;/li>
&lt;li>Das Wort befindet sich bereits in der Datenbank&lt;/li>
&lt;li>Das Wort ist ein leerer String&lt;/li>
&lt;li>Das Wort beinhaltet Zahlen&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Tests der Methode &lt;em>getDefinition&lt;/em>:
&lt;ul>
&lt;li>Das gesuchte Wort existiert in der Datenbank&lt;/li>
&lt;li>Das gesuchte Wort existiert nicht in der Datenbank&lt;/li>
&lt;li>Das gesuchte Wort is ungültig: leerer String&lt;/li>
&lt;li>Das gesuchte Wort is ungültig: das Wort beinhaltet Zahlen&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Anforderungen&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Schreibe jeweils einen Test und erweitere den Code dann nur soweit bis der Test grün ist. Wiederhole dies für alle Tests (die bestehende Tests müssen weiterhin funktionieren!).&lt;/li>
&lt;li>Der Interface &lt;em>DictionaryRepository&lt;/em> darf nicht umgesetzt werden. Für die Tests wird ein Mock oder ein Spy aus dem Mockito-Framework verwendet.&lt;/li>
&lt;li>Jede Test-Methode hat folgendes Namensschema:
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">given_when_then&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wobei:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>given&lt;/strong> die Ausgangslage definiert&lt;/li>
&lt;li>&lt;strong>when&lt;/strong> ist der Name der Methode, welche getestet wird&lt;/li>
&lt;li>&lt;strong>then&lt;/strong> ist das Ergebnis, welche erwartet wird&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Jede Test-Methode prüft, dass alle Methoden eines Mocks/Spy&amp;rsquo;s welche aufgerufen werden müssen, auch aufgerufen wurden.&lt;/li>
&lt;li>Jede Test-Methode prüft, dass alle Methoden eines Mocks/Spy&amp;rsquo;s welche NICHT aufgerufen werden sollen, auch nicht aufgerufen wurden.&lt;/li>
&lt;/ul></description></item><item><title>Challenges: Objektorientierte Programmierung Challenge</title><link>/challenges/java/java-oop/01_oop_challenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/challenges/java/java-oop/01_oop_challenge/</guid><description>
&lt;h3 id="hogwarts-sorting-hat-system">Hogwarts Sorting Hat System&lt;/h3>
&lt;p>Hogwarts ist bekanntlich die beste Schule für Hexerei und Zauberei.
Alle Hogwarts Schüler:innen werden vor Beginn des ersten Schuljahres gemäss ihren
Charakter-Eigenschaften und Fähigkeiten in einem der vier Hogwarts &amp;ldquo;Häuser&amp;rdquo; eingeteilt.
Die Einteilung in die Häuser ist die Aufgabe des &amp;ldquo;sprechenden Hutes&amp;rdquo; (engl. &amp;ldquo;Sorting Hat&amp;rdquo;).&lt;/p>
&lt;p>Der sprechende Hut ist mittlerweile mehr als 1000 Jahre alt und soll in den verdienten Ruhestand gehen.
Dazu ist die Digitalisierung auch bei Hogwarts endlich angekommen und der Schulmeister möchte dich beauftragen
ein Sorting-Hat System zu bauen, welche die Aufgabe des sprechenden Hutes übernimmt und neue Schüler:innen
in eines der vier Hogwarts-Häuser aufgrund von bestimmten Kriterien und Eigenschaften einteilt.&lt;/p>
&lt;h4 id="die-hogwarts-häuser-und-ihre-eigenschaftenmerkmale">Die Hogwarts Häuser und ihre Eigenschaften/Merkmale&lt;/h4>
&lt;p>Die vier Hogwarts Häuser - Gryffindor, Hufflepuff, Ravenclaw und Slytherin - haben bestimmte Merkmale
und Eigenschaften, welche dem sprechenden Hut dabei helfen, die Schüler:innen in das richtige Haus einzuteilen.&lt;/p>
&lt;p>Die folgende Tabelle listet ein paar wichtige Merkmale für jedes Haus auf:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Haus&lt;/th>
&lt;th>Wichtigste Charakter-Eigenschaften&lt;/th>
&lt;th>Hausfarben&lt;/th>
&lt;th>Haustier&lt;/th>
&lt;th>Element&lt;/th>
&lt;th>Gründer:in&lt;/th>
&lt;th>Anzahl Schüler:innen&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Gryffindor&lt;/td>
&lt;td>Tapferkeit, Kühnheit, Courage, Ritterlichkeit, Entschlossenheit&lt;/td>
&lt;td>Gold, Scharlachrot&lt;/td>
&lt;td>Löwe&lt;/td>
&lt;td>Feuer&lt;/td>
&lt;td>Godric Gryffindor&lt;/td>
&lt;td>31&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hufflepuff&lt;/td>
&lt;td>Fleiss, Hingabe, Geduld, Loyalität, Fairplay&lt;/td>
&lt;td>Gelb, Schwarz&lt;/td>
&lt;td>Dachs&lt;/td>
&lt;td>Erde&lt;/td>
&lt;td>Helga Hufflepuff&lt;/td>
&lt;td>15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ravenclaw&lt;/td>
&lt;td>Intelligenz, Wissen, Neugier, Kreativität, geistige Wendigkeit&lt;/td>
&lt;td>Blau, Bronze&lt;/td>
&lt;td>Adler&lt;/td>
&lt;td>Luft&lt;/td>
&lt;td>Rowena Ravenclaw&lt;/td>
&lt;td>33&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Slytherin&lt;/td>
&lt;td>Ehrgeiz, Führerschaft, Selbsterhaltung, List, Einfallsreichtum&lt;/td>
&lt;td>Smaragdgrün, Silber&lt;/td>
&lt;td>Schlange&lt;/td>
&lt;td>Wasser&lt;/td>
&lt;td>Salazar Slytherin&lt;/td>
&lt;td>48&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="einteilungsalgorithmus">Einteilungsalgorithmus&lt;/h4>
&lt;p>Der sprechende Hut teilt angehende Hogwarts Schüler:innen in eines der vier Hogwarts-Häuser
anhand von bestimmten Kriterien ein. Diese Kriterien sind:&lt;/p>
&lt;ul>
&lt;li>Charakter-Eigenschaften der Person, verglichen mit den Charakter-Eigenschaften, welche dem/der Gründer:in des Hauses wichtig waren&lt;/li>
&lt;li>Lieblingsfarbe, verglichen mit den Hausfarben&lt;/li>
&lt;li>Verwandtschaft mit einem ehemaligen Mitglied eines der Häuser&lt;/li>
&lt;li>Das Wunschhaus der Person, welche eingeteilt werden soll&lt;/li>
&lt;/ul>
&lt;p>Der/die Schüler:in wird zu jedem Kriterium befragt (mehrere Antworten sind bei den meisten Kriterien möglich!).
Die Antworten zu jedem Kriterium werden bewertet, sodass am Schluss für jedes Haus eine Gesamtbewertung vorliegt.
Der/die Schüler:in wird in das Haus mit dem höchsten Wert eingeteilt.&lt;/p>
&lt;p>Aber vorsicht, es gelten auch folgende Bestimmungen, welche die Auswertung des gewählten Hauses beeinflussen:&lt;/p>
&lt;ul>
&lt;li>Nicht alle Kriterien/Werte werden beim Einteilungsentscheid gleich gewichtet (die Gewichtung wird später erläutert).&lt;/li>
&lt;li>Wenn zwei Häuser die gleiche Bewertung erhalten, wird das Haus mit der niedrigeren Anzahl Schüler:innen ausgewählt.&lt;/li>
&lt;li>Das Wunschhaus wird bei der Gesamtbeurteilung manchmal berücksichtigt und manchmal nicht (mehr dazu später)&lt;/li>
&lt;/ul>
&lt;h4 id="gewichtung-der-kriterien">Gewichtung der Kriterien&lt;/h4>
&lt;p>Folgend findest du die Bestimmungen und Gewichtungen, welche bei der Auswertung des passenden Hauses eingehalten werden müssen.
Die Gesamtauswertung eines Hauses besteht aus der Summe aller Punkte, welche bei jedem Kriterium für dieses Haus berechnet worden sind.&lt;/p>
&lt;h5 id="charakter-eigenschaften">Charakter-Eigenschaften&lt;/h5>
&lt;p>Es sind insgesamt 20 Charakter-Eigenschaften möglich (siehe Tabelle der Hogwarts-Häuser hier oben).
Der/die Benutzer:in muss mindestens drei Charakter-Eigenschaften auswählen, welche zu ihm/ihr passen.&lt;/p>
&lt;p>Per Haus, hat jede Charakter-Eigenschaft ein Gewicht zwischen 1 und 20.
Die wichtigsten Charakter-Eigenschaften eines Hauses erhalten die höchsten Gewichtswerte für dieses Haus.
Die anderen Charakter-Eigenschaften bekommen niedrigere Werte.
Bei der Auswertung werden für jedes Haus die Gewichtswerte für die eingegebenen Eigenschaften zusammenaddiert.&lt;/p>
&lt;h5 id="farben">Farben&lt;/h5>
&lt;p>In Hogwarts gibt es vier Hausfarben-Paare, also insgesamt acht Hausfarben (siehe Tabelle der Hogwarts-Häuser hier oben).
Der/die Benutzer:in gibt seine/ihre Lieblingsfarbe ein.
Wenn die Farbe, mit einer Hausfarbe übereinstimmt, erhält dieses Haus zusätzliche 10 Punkte.&lt;/p>
&lt;h5 id="verwandtschaft">Verwandtschaft&lt;/h5>
&lt;p>Eine Person kann mehrere Verwandte haben, welche in Hogwarts studiert haben und entsprechend
einem Haus eingeteilt wurden.&lt;br>
Die Anzahl Verwandte, welche einem Haus eingeteilt wurden, gibt diesem Haus einen zusätzlichen Wert,
welcher der Fakultät dieser Anzahl Verwandten entspricht.&lt;/p>
&lt;p>&lt;em>Hinweis:&lt;/em> eine Person kann mehrere Verwandte haben, welche in unterschiedliche Häuser eingeteilt worden waren&amp;hellip;&lt;/p>
&lt;h5 id="wunschhaus">Wunschhaus&lt;/h5>
&lt;p>Der/die Benutzer:in kann sein/ihr Wunschhaus eingeben.
Das Wunschhaus &amp;ldquo;schenkt&amp;rdquo; dem gewählten Haus eine zufällige Anzahl Punkte zwischen 5 und 10 zur
Gesamtbeurteilung aber nur wenn der/die Benutzer:in auch eine der Hausfarben dieses Hauses als Lieblingsfarbe ausgewählt hat.&lt;/p>
&lt;h4 id="anforderungen-an-das-system">Anforderungen an das System&lt;/h4>
&lt;ul>
&lt;li>Verwende viele verschiedene Klassen, um dein System zu modellieren&lt;/li>
&lt;li>Erzeuge ein gutes Abbild der Aufgabenstellung&lt;/li>
&lt;li>Die &lt;em>main&lt;/em> Methode soll nur zur Interaktion mit dem/der Benutzer:in dienen.&lt;/li>
&lt;li>Skizziere dein Modell, sodass du es danach auch erklären kannst&lt;/li>
&lt;li>Teil der Aufgabe ist es, bestimmte Prinzipien kennenzulernen und zu verstehen. Wende entsprechend bei der Umsetzung folgende Prinzipien an:
&lt;ul>
&lt;li>Single Responsibility Principle&lt;/li>
&lt;li>Immutable Objects&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Bonus Anforderungen&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Wenn sinnvoll, wende Generics an&lt;/li>
&lt;li>Verwende, wenn möglich, Streams statt Loops&lt;/li>
&lt;li>Füge ein Einteilungskriterium hinzu&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Wenn du an der Challenge teilnehmen willst, dann musst du die Aufgabe alleine lösen.
Die Lösung vom Pult-Nachbar interessiert uns also nicht.&lt;/em>&lt;/p></description></item><item><title>Exams: Objektorientierte Programmierung Exam</title><link>/exams/java/java-oop/oopexam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/exams/java/java-oop/oopexam/</guid><description>
&lt;p>&lt;em>Für dieses Exam dürfen auch Inhalte der Themen Lists und Generics verwendet werden&lt;/em>&lt;/p>
&lt;h2 id="cøøp">CØØP&lt;/h2>
&lt;p>Unsere Supermarkt-Kette heisst CØØP.
CØØP ist ein Supermarkt welcher an vielen Orten in der Schweiz vertreten ist.
Der Name einer Filiale ist einzigartig, dies macht es dem ganzen System ein wenig einfacher.&lt;/p>
&lt;p>Im CØØP findet man verschiedenste Artikel von Lebensmitteln, über Haushaltsgeräte bis zu Baustoffen wie Holz und Metall.
CØØP ist sehr modern eingerichtet und es ist es dem System genau bekannt wie viele Regale jeder Standort besitzt.
Das System weiss auch, welcher Artikel sich bei welchem Laden in welchem Regal befindet.&lt;/p>
&lt;p>Natürlich hat nicht jeder Artikel im CØØP einen Barcode für die Kasse, da ja z.B. ein Gipfeli kein Barcode hat.
Also muss an der Kasse beim Scannen bemerkt werden, ob der Artikel einen Barcode hat oder nicht.
Falls dies nicht der Fall ist, muss der Artikel von Hand in die Kasse eingetragen werden.&lt;/p>
&lt;p>Hab ich schon erwähnt, dass einige Filialen im CØØP auch Self-Service Kassen besitzen?
Dort kann der Kunde seine Ware selber &amp;ldquo;scannen&amp;rdquo; und anschliessend bezahlen.&lt;/p>
&lt;p>Um den Kunden den Einkauf zu erleichtern, haben unsere Kunden die Möglichkeit unser System über dedizierte Tablets ansprechen zu können.
Über das Tablet kann ein Kunde abfragen, ob ein gewünschtes Produkt in einer bestimmten Filiale vorhanden ist.
Falls dies der Fall ist, soll dem Kunden zusätzlich angezeigt werden, in welchem Regal sich der Artikel befindet.&lt;/p>
&lt;p>CØØP hat eine eigene Karte namens &lt;em>Schüpercard&lt;/em> (ja mit ü). Diese kann beim Einkaufen gescannt werden.
Denke daran, dass jede Schüpercard einzigartig ist.
Falls die Schüpercard beim Einkaufen gescannt, so wird dem Konto des Kunden pro 1.- CHF Einkaufswert 1 Schüperpunkt gutgeschrieben
(Es werden keine halben Punkte verteilt und es wird immer abgerundet).&lt;/p>
&lt;p>Jeder Mitarbeiter einer CØØP Filiale ist im System hinterlegt.
Es wird auch jederzeit nachgeführt, welcher Mitarbeiter sich zurzeit in welcher Filiale befindet.
So kann der Chef die Anwesenheit aller Mitarbeiter sauber überprüfen.&lt;/p></description></item><item><title>Labs: Reflection API - Aufgaben</title><link>/labs/java/java-reflection-and-annotations/02_reflection_exercises/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-reflection-and-annotations/02_reflection_exercises/</guid><description>
&lt;p>Die folgende Aufgabe dient der Vertiefung der beiden Themen Reflection API und Annotations.&lt;/p>
&lt;h2 id="aufgabe-1">Aufgabe 1&lt;/h2>
&lt;p>Implementiere eine Klasse &lt;em>Person&lt;/em> mit den Attributen Namen und Alter.
Die Klasse muss einen Konstruktor mit beiden Attributen aufweisen. Für beide Attribute muss eine
Get-Methode implementiert werden.&lt;br>
Implementiere zudem eine toString Methode.&lt;/p>
&lt;h2 id="aufgabe-2">Aufgabe 2&lt;/h2>
&lt;p>Implementiere eine eigene Annotation. Die Annotation soll der Auffindung der Klasse zur Erzeugung
von Instanzen der oben genannten Klasse dienen und die folgenden Eigenschaften aufweisen:&lt;/p>
&lt;ul>
&lt;li>Verfügbar zur Laufzeit&lt;/li>
&lt;li>Verfügbar auf Klassen&lt;/li>
&lt;/ul>
&lt;p>Der Name der Annotation soll anhand ihres Zwecks gewählt werden. Die Annotation hat keine Attribute.&lt;/p>
&lt;h2 id="aufgabe-3">Aufgabe 3&lt;/h2>
&lt;p>Implementiere eine weitere Annotation. Die Annotation soll der Angabe von Daten für Personen dienen.
Sie muss die folgenden Eigenschaften aufweisen:&lt;/p>
&lt;ul>
&lt;li>Verfügbar zur Laufzeit&lt;/li>
&lt;li>Verfügbar auf Konstruktoren&lt;/li>
&lt;li>Attribut für die Namen von Personen als String-Array&lt;/li>
&lt;li>Attribut für das Alter von Personen als Integer-Array&lt;/li>
&lt;/ul>
&lt;h2 id="aufgabe-4">Aufgabe 4&lt;/h2>
&lt;p>Wende die beiden Annotationen auf deine Person-Klasse an. Eine auf der Klasse, die Andere auf dem
Konstruktor.&lt;br>
Die Annotation auf dem Konstruktor muss mindestens drei Namen und drei Altersangaben aufweisen.&lt;/p>
&lt;h2 id="aufgabe-5">Aufgabe 5&lt;/h2>
&lt;p>Implementiere eine Main-Klasse mit einer Main-Methode und nutze Reflection, um Instanzen anhand der
Konstruktor-Annotation zu erzeugen. Gehe dabei wie folgt vor:&lt;/p>
&lt;ul>
&lt;li>Hol dir eine Klasseninstanz über den Package- und Klassennamen oder über das statische Feld class&lt;/li>
&lt;li>Hol dir auf der Klasseninstanz den Konstruktor&lt;/li>
&lt;li>Hol dir vom Konstruktor die Annotation&lt;/li>
&lt;li>Hol aus der Annotation die Namen und Altersangaben&lt;/li>
&lt;li>Nutze die Angaben in einem Loop, um entsprechend viele Instanzen der Klasse Person zu erzeugen&lt;/li>
&lt;li>Drucke die Angaben der Personen auf der Kommandozeile aus&lt;/li>
&lt;/ul></description></item><item><title>Labs: Rollenspiel</title><link>/labs/java/java-ood/02_rollenspiel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-ood/02_rollenspiel/</guid><description>
&lt;p>In dieser Aufgabe wird ein Fantasy-Rollenspiel mit Vererbung modelliert.
Lies zuerst die Einführung und arbeite dann die untenstehenden Aufgaben ab.&lt;/p>
&lt;h2 id="einführung">Einführung&lt;/h2>
&lt;h3 id="spielfiguren">Spielfiguren&lt;/h3>
&lt;ul>
&lt;li>Es gibt verschiedene Spielfiguren:
&lt;ul>
&lt;li>Menschen&lt;/li>
&lt;li>Zwerge&lt;/li>
&lt;li>Elfen&lt;/li>
&lt;li>Orks&lt;/li>
&lt;li>Goblins&lt;/li>
&lt;li>Trolle&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Jede Spielfigur hat einen Namen und besitzt eine bestimmte Anzahl an Lebenspunkten. Diese Lebenspunkte werden später im Kampf mit anderen Spielfiguren verringert&lt;/li>
&lt;li>Jede Spielfigur hat eine gewisse Tragkraft um Gegenstände und Ausrüstung mit sich herumtragen zu können (siehe weiter unten)&lt;/li>
&lt;li>Elfen können zaubern und haben einen Zauberwert&lt;/li>
&lt;li>Alle Spielfigur-Klassen sollen in einem entsprechenden Package angelegt werden&lt;/li>
&lt;/ul>
&lt;h3 id="waffen">Waffen&lt;/h3>
&lt;ul>
&lt;li>Es gibt verschiedene Waffenarten
&lt;ul>
&lt;li>Nahkampfwaffen (Schwert und Keule)&lt;/li>
&lt;li>Fernkampfwaffen (Bogen und Wurfmesser)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Alle Waffen haben einen Angriffswert&lt;/li>
&lt;li>Nahkampfwaffen haben zusätzlich zu ihrem Angriffswert noch einen Verteidigungswert&lt;/li>
&lt;li>Alle Waffen haben ein Gewicht&lt;/li>
&lt;li>Alle Waffen-Klassen sollen in einem entsprechenden Package angelegt werden&lt;/li>
&lt;/ul>
&lt;h3 id="gegenstände">Gegenstände&lt;/h3>
&lt;ul>
&lt;li>Es gibt verschiedene Gegenstände
&lt;ul>
&lt;li>Tränke (Heiltrank und Stärketrank)
&lt;ul>
&lt;li>Ein Heiltrank kann bei einer Spielfigur eine bestimmte Anzahl an Lebenspunkten wiederherstellen&lt;/li>
&lt;li>Ein Stärketrank erhöht den Angriffswert einer Spielfigur dauerhaft um einen bestimmten Wert&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Zauberringe (Kraftring, Schutzring)
&lt;ul>
&lt;li>Ein Kraftring erhöht die Tragkraft einer Spielfigur dauerhaft um einen bestimmten Wert&lt;/li>
&lt;li>Ein Schutzring verringert dauerhaft den erlittenen Schaden&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Jeder Gegenstand hat eine Bezeichnung und ein Gewicht&lt;/li>
&lt;li>Alle Gegenstand-Klassen sollen in einem entsprechenden Package angelegt werden&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="aufgabe-1">Aufgabe 1&lt;/h2>
&lt;p>Implementation&lt;/p>
&lt;ul>
&lt;li>der Packages&lt;/li>
&lt;li>der Klassen&lt;/li>
&lt;li>der Instanzvariablen in den Klassen&lt;/li>
&lt;li>der Beziehungen zwischen den einzelnen Klassen&lt;/li>
&lt;/ul>
&lt;p>Vergiss nicht, dass es Generalisierungen und Spezalisierungen gibt. Achte auf eine gute Namensgebung bei Klassen und Variablen.&lt;/p>
&lt;hr>
&lt;h2 id="aufgabe-2">Aufgabe 2&lt;/h2>
&lt;p>Ergänze die Applikation mit den folgenden Möglichkeiten:&lt;/p>
&lt;h4 id="spielfigur">Spielfigur&lt;/h4>
&lt;ul>
&lt;li>Jede Spielfigur braucht einen Namen um instanziiert werden zu können&lt;/li>
&lt;li>Zu Beginn hat eine Spielfigur keine Waffe&lt;/li>
&lt;li>Jede Spielfigur hat eine Methode, die ihren Kampfwert zurückgibt
&lt;ul>
&lt;li>Der Kampfwert der Spielfigur setzt sich aus dem Kampfwert der akitven Waffe und der Multiplikation mit einer Zufallszahl zusammen. Die Zufallszahl liegt zwischen 0.9 und 1.1&lt;/li>
&lt;li>Wenn eine Spielfigur keine Waffe besitzt, so ist ihr Kampfwert 1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Elfen&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Um einen Elfen instanziieren zu können, muss zusätzlich zum Namen der Zauberwert des Elfen angegeben werden&lt;/li>
&lt;li>Einem Elfen wird die Hälfte seines Zauberwerts zum Kampfwert addiert&lt;/li>
&lt;li>Elfen sind gute Bogenschützen, ihr Kampfwert erhöht sich um 50%, wenn sie einen Bogen als aktive Waffe benutzen&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Goblins&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Goblins sind gute Bogenschützen, ihr Kampfwert erhöht sich um 50%, wenn sie einen Bogen als aktive Waffe benutzen&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Trolle&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Trolle verdoppeln ihren Kampfwert wenn sie eine Keule verwenden&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Orks&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Orks können in einen Kampfrausch verfallen, wenn ihre Lebenspunkte unter 25% fallen. Sie erhalten dann den dreifachen Kampfwert und erleiden nur den halben Schaden&lt;/li>
&lt;/ul>
&lt;h4 id="waffen-1">Waffen&lt;/h4>
&lt;ul>
&lt;li>Jede Spielfigur kann mit einer Waffe ausgerüstet werden
&lt;ul>
&lt;li>Wird eine Waffe aufgenommen, wird die Tragkraft entsprechend reduziert&lt;/li>
&lt;li>Ist die Waffe zu schwer für die verbleibende Tragkraft, so kann die Spielfigur die Waffe nicht aufnehmen&lt;/li>
&lt;li>Eine Spielfigur kann mehrere Waffen mit sich rumtragen, aber jeweils nur eine Waffe aktiv verwenden&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Spielfiguren können Waffen ablegen, um die verbleibende Tragkraft zu erhöhen&lt;/li>
&lt;li>Alle Keulen haben den Angriffswert 5 und den Verteidigungswert 5. Die beiden Werte sind also konstant&lt;/li>
&lt;li>Jede Waffe hat einen Kampfwert
&lt;ul>
&lt;li>Waffen geben als Kampfwert ihren Angriffswert zurück&lt;/li>
&lt;li>Bei Nahkampfwaffen wird zum Angriffswert der halbe Verteidigungswert hinzuaddiert&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="gegenstände-1">Gegenstände&lt;/h4>
&lt;ul>
&lt;li>Jede Spielfigur kann Gegenstände bis zur maximalen Tragkraft aufnehmen
&lt;ul>
&lt;li>Wird ein Gegenstand aufgenommen, wird die Tragkraft entsprechend reduziert&lt;/li>
&lt;li>Ist der Gegenstand zu schwer für die verbleibende Tragkraft, so kann die Spielfigur den Gegenstand nicht aufnehmen&lt;/li>
&lt;li>Eine Spielfigur kann mehrere Gegenstände mit sich rumtragen und diese Gegenstände später im Kampf aktiv einsetzen&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="kampf">Kampf&lt;/h4>
&lt;ul>
&lt;li>Jede Spielfigur kann gegen eine andere Spielfigur kämpfen
&lt;ul>
&lt;li>Der Kampf findet in Runden statt&lt;/li>
&lt;li>Es wird solange gekämpft, bis eine oder beide Spielfiguren keine Lebenspunkte mehr haben&lt;/li>
&lt;li>Steht nach 20 Runden noch kein Sieger fest, wird der Kampf abgebrochen&lt;/li>
&lt;li>Bei jeder Runde wird der Kampfwert der einen Spielfigur den Lebenspunkten des Gegners abgezogen und umgekehrt&lt;/li>
&lt;li>Diejenige Spielfigur mit den meisten verbliebenen Lebenspunkten gewinnt&lt;/li>
&lt;li>Jede Spielfigur kann in einem Kampf von ihren Gegenständen Gebrauch machen&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="aufgabe-3">Aufgabe 3&lt;/h2>
&lt;ul>
&lt;li>Definiere nun eigene Regeln für deine Spielfiguren, damit das Spiel ein wenig ausgeglichener wird&lt;/li>
&lt;li>Die Regeln können beliebig geändert werden&lt;/li>
&lt;li>Es dürfen natürlich auch neue Waffen und Gegenstände eingeführt werden&lt;/li>
&lt;li>Dein Entwurf soll mindestens eine neue Spielfigur, eine neue Waffe, einen neuen Gegenstand und eine neue Spezialität für eine Spielfigur enthalten&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="aufgabe-4">Aufgabe 4&lt;/h2>
&lt;ul>
&lt;li>Die Kämpfe können sehr unausgeglichen sein&lt;/li>
&lt;li>Das Spiel soll so gestaltet werden, dass nicht immer die gleichen Spielfiguren gewinnen&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="aufgabe-5">Aufgabe 5&lt;/h2>
&lt;ul>
&lt;li>Das Spiel soll für alle Aktionen einen übersichtlichen Log generieren&lt;/li>
&lt;li>Eine Ausgabe für die Kommandozeile genügt, wenn sie sauber formatiert ist&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="aufgabe-6">Aufgabe 6&lt;/h2>
&lt;p>Die Applikation hat nun aufgrund der vielen Klassen und Möglichkeiten eine gewisse Grösse erreicht und damit auch an Übersichtlichkeit verloren.
Die Logik der Applikation ist nun, je nach Implementation, in sehr vielen unterschiedlichen Klassen vorhanden.
In bestimmten Fällen, wie der Spezalisierung einer bestimmten Klasse, ist dies in Ordnung.&lt;/p>
&lt;p>Wir arbeiten aber wenn immer möglich nach dem Single-Responsibility-Principle. Dieses Prinzip besagt, dass jeder Teil (bspw. Klasse, Methode) einer Applikation
nur für genau eine Aufgabe innerhalb dieser Applikation zuständig und verantwortlich ist. Kurz gesagt: eine Methode macht beispielsweise niemals zwei verschiedene Dinge gleichzeitig.&lt;/p>
&lt;ul>
&lt;li>Erstelle eine Klasse, welche den Kampf zwischen zwei Spielfiguren verwaltet. Diese Klasse enthält diverse Methoden und ist verantwortlich für:
&lt;ul>
&lt;li>das Starten eines neuen Kampfes zwischen zwei Spielfiguren&lt;/li>
&lt;li>das Zählen der Kampfrunden&lt;/li>
&lt;li>das Verrechnen von Schaden&lt;/li>
&lt;li>das Ermitteln des Gewinners&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Stelle sicher, dass die spezalisierten Modell-Klassen (Elf, Heiltrank) nur die Logik enthalten, die für eine Spezalisierung gerechtfertigt ist
&lt;ul>
&lt;li>Beispiel 1: die Berechnung des Kampfwerts eines Elfen gehört in die Elf-Klasse, die diese die Spezialisierung für einen Elfen enthält&lt;/li>
&lt;li>Beispiel 2: der Kampf zwischen zwei Spielfiguren gehört NICHT in die Spielfigur-Klasse, da diese generell gültige Informationen zu einer Spielfigur enthält und das eigentliche &amp;ldquo;Spiel&amp;rdquo; mit dem Kampf zweier Spielfiguren nicht die Aufgabe dieser Klasse ist&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="aufgabe-7">Aufgabe 7&lt;/h2>
&lt;ul>
&lt;li>Das Spiel soll erweitert werden, dass eine Spielfigur eine Rüstung tragen kann&lt;/li>
&lt;li>Es gibt leichte und schwere Rüstungen
&lt;ul>
&lt;li>Elfen und Goblins dürfen nur leichte Rüstungen tragen&lt;/li>
&lt;li>Menschen, Zwerge und Orks dürfen schwere Rüstungen tragen&lt;/li>
&lt;li>Trolle können aufgrund ihrer Grösse keine Rüstung tragen&lt;/li>
&lt;li>Eine Spielfigur, welche eine schwere Rüstung tragen kann, kann selbstverständlich auch eine leichte Rüstung anziehen&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Eine Spielfigur muss nicht zwingend eine Rüstung tragen&lt;/li>
&lt;li>Jede Rüstung hat ein Gewicht, welches die Tragkraft der Spielfigur entsprechend verringert&lt;/li>
&lt;li>Eine Spielfigur kann eine Rüstung anziehen oder sie ablegen&lt;/li>
&lt;li>Mit dem Tragen einer Rüstung ist es einer Spielfigur möglich im Kampf pro Runde den Schaden komplett zu verhindern. Die schwere Rüstung ist dabei erfolgreicher. Das Verhindern von Schaden passiert zufällig&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="aufgabe-8">Aufgabe 8&lt;/h2>
&lt;ul>
&lt;li>Verhindere die Instanziierung von Klassen, die keinen Sinn ergeben (Beispiel Waffe, Spielfigur, &amp;hellip;)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="aufgabe-9">Aufgabe 9&lt;/h2>
&lt;ul>
&lt;li>Jede Spielfigur erhält einen Initiative-Wert&lt;/li>
&lt;li>Je höher der Wert, desto früher darf die Spielfigur im Kampf zuschlagen&lt;/li>
&lt;li>Tiefere Werte verteilen also ihren Schaden später als höhere Werte&lt;/li>
&lt;li>Eine Spielfigur mit tiefem Initiative-Wert kann nicht mehr zurückschlagen wenn sie getötet wird&lt;/li>
&lt;li>Das Tragen von schweren Rüstungen verringert den Initiative-Wert&lt;/li>
&lt;/ul></description></item><item><title>Exams: Exam zu JavaScript</title><link>/exams/web/html_css/02_exam_js/</link><pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate><guid>/exams/web/html_css/02_exam_js/</guid><description>
&lt;h1 id="exam---zeiterfassungs-dashboard-mit-javascript-ergänzen">Exam - Zeiterfassungs-Dashboard mit JavaScript ergänzen&lt;/h1>
&lt;p>&lt;img src="/images/task.png" alt="task1"> - Einzelarbeit&lt;/p>
&lt;p>Bei diesem Exam geht es darum, dass du das Dashboard, welches du im &lt;a href="../01_exam_html_css_rtm">HTML-CSS-Exam&lt;/a> geschrieben hast, mit JavaScript-Logik ergänzt.&lt;/p>
&lt;p>Die Seite sollte ungefähr so aussehen:&lt;/p>
&lt;p>&lt;img src="../rtm_home_page.png" alt="asset">&lt;/p>
&lt;h2 id="zeitangaben-aktualisieren">Zeitangaben aktualisieren&lt;/h2>
&lt;p>Oben links im Zeiterfassungstool ist die aktuelle Zeit zu finden.&lt;/p>
&lt;pre>&lt;code>Schreibe ein JavaScript auf dieser Seite, das die aktuelle Zeit oben links anzeigt.
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="/images/hint.png" alt="task1"> Hinweis:&lt;/p>
&lt;p>Um auf die aktuelle Uhrzeit und auf das Datum zuzugreifen, wirst du sicher auf die Klasse &lt;code>Date&lt;/code> zugreifen müssen. Hier findest du mehr Informationen darüber: &lt;a href="https://www.w3schools.com/jsref/jsref_obj_date.asp">https://www.w3schools.com/jsref/jsref_obj_date.asp&lt;/a>&lt;/p>
&lt;p>Die Kalenderwoche (KW) hinzuzufügen, ist ein bisschen tricky und deswegen optional. Wenn du diese trotzdem hinzufügen möchtest, dann informiere dich bitte zuerst darüber, was genau eine Kalenderwoche ist. Soweit ich weiss, gibt es keine eingebaute Methode, mit der du die Kalenderwoche bekommst, aber du kannst sie berechnen.&lt;/p>
&lt;h2 id="navigation-zuklappen">Navigation zuklappen&lt;/h2>
&lt;p>Auf der linken Seite hast du eine Navigation. Das Element für &amp;ldquo;Abfragen&amp;rdquo; hat wiederum Elemente untergeordnet. Diese Unterelemente sollten beim Klick auf den Pfeil gegen oben (^) verschwinden/zugeklappt werden.&lt;/p>
&lt;pre>&lt;code>Schreibe ein JavaScript, das dem User erlaubt,
das &amp;quot;Abfragen&amp;quot;-Element zuzuklappen und wenn es zugeklappt ist, wieder aufzuklappen.
&lt;/code>&lt;/pre>
&lt;details>
&lt;summary>Animationen&lt;/summary>
&lt;p>Wenn du möchtest, kannst du dem Ganzen Animationen verleihen:&lt;/p>
&lt;ul>
&lt;li>der Pfleil dreht sich, jenachdem ob das Element zu- oder aufgeklappt ist&lt;/li>
&lt;li>das &amp;ldquo;Berichte&amp;rdquo;-Element geht langsam nach oben (bzw. der Container mit den Unterelementen wird immer kleiner)&lt;/li>
&lt;/ul>
&lt;p>Animationen (bzw. &lt;code>transition&lt;/code>s) können sehr einfach mit CSS umgesetzt werden, siehe &lt;a href="https://www.w3schools.com/css/css3_transitions.asp">https://www.w3schools.com/css/css3_transitions.asp&lt;/a>.&lt;/p>
&lt;p>Damit du weniger Schwierigkeiten damit hast, hier ein kleiner Tipp:
Gib allen CSS-Properties einen Default-Wert. Wenn du z.B. einen Wert ändern möchtest, füge dem Element eine genauere CSS-Klasse mit JavaScript hinzu, welche die entsprechenden Regeln überschreibt. Du kannst einem Element eine Klasse hinzufügen bzw. entfernen mit &lt;code>.classList.toggle(className, show?)&lt;/code> (Beispiel: &lt;code>document.getElementById('abfragen').classList.toggle('show-child-elements', true)&lt;/code>).&lt;/p>
&lt;/details>
&lt;h2 id="dashboard-daten-dynamisch-laden">Dashboard-Daten dynamisch laden&lt;/h2>
&lt;p>Im HTML-CSS-Exam hast du den Text für die Kacheln hartcodiert. Das soll sich nun ändern.&lt;/p>
&lt;pre>&lt;code>Schreibe nun ein JavaScript, dass den Inhalt der Kacheln dynamisch befüllt.
Dein Script soll die Daten von hier laden:
https://raw.githubusercontent.com/it-ninjas/labs/master/static/files/json/dashboard.json
&lt;/code>&lt;/pre>
&lt;h2 id="personen-für-den-chat-dynamisch-laden">Personen für den Chat dynamisch laden&lt;/h2>
&lt;p>Auf der rechten Seite hast du eine Liste mit Personen für einen Chat. Nun geht es darum, auch diese Liste anhand eines JSONs zu generieren.&lt;/p>
&lt;pre>&lt;code>Ergänze dein JavaScript so, dass die Namen für die Chat-Liste von hier geladen werden:
https://raw.githubusercontent.com/it-ninjas/labs/master/static/files/json/chat.json
Zeige die Personen dann zeitlich versetzt an:
Füge zuerst die erste Person ein, warte dann ca. 0.3 Sekunden, zeige dann die zweite Person an usw.
&lt;/code>&lt;/pre>
&lt;h2 id="suchfunktion">Suchfunktion&lt;/h2>
&lt;p>Oben rechts hast du eine &amp;ldquo;Suche&amp;rdquo;.&lt;/p>
&lt;pre>&lt;code>Implementiere eine Suchfunktion, die nur noch diejenigen Chat-Kontakte anzeigt,
wenn der Suchbegriff in deren Namen vorkommt.
Implementiere die Suche so, dass die Liste beim Tippen aktualisiert wird.
&lt;/code>&lt;/pre>
&lt;h2 id="refresh-button">Refresh-Button&lt;/h2>
&lt;p>Oben rechts gibt es einen Refresh-Button.&lt;/p>
&lt;pre>&lt;code>Verändere dein HTML und JavaScript so, dass die Daten neu geladen werden, wenn der User auf diesen Refresh-Button klickt.
Neu geladen werden sollen die Zeitangaben, die Kacheln und der Chat
Achte darauf, dass du möglichst keine Code-Duplikation hast.
&lt;/code>&lt;/pre></description></item><item><title>Docs: Mit JavaScript das DOM verändern</title><link>/docs/web/javascript/03_js_dom_manipulation/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/javascript/03_js_dom_manipulation/</guid><description>
&lt;h2 id="auf-dom-elemente-zugreifen">Auf DOM-Elemente zugreifen&lt;/h2>
&lt;p>Eines der häufigsten Anwendungszwecke von JavaScript ist es, mit Elementen auf einer Website zu interagieren.&lt;/p>
&lt;p>Nehmen wir folgendes Code-schnipsel als Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;message-div&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;This page has &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;likes-count&amp;#34;&lt;/span>&amp;gt;0&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt; likes.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;button&amp;#34;&lt;/span>&amp;gt;+1&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mit JavaScript möchten wir, dass sich die Zahl im &lt;code>&amp;lt;span&amp;gt;&lt;/code> erhöht. In einem ersten Schritt versuchen wir, auf das &lt;code>&amp;lt;span&amp;gt;&lt;/code>-Element zuzugreifen und eine andere Zahl reinzuschreiben. Das probieren wir direkt in der Konsole des Browsers aus:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;likes-count&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">999&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Du wirst sehen, dass sich die Zahl im &lt;code>&amp;lt;span&amp;gt;&lt;/code> tatsächlich verändert hat. Probieren wir aber zuerst, den Code zu verstehen!&lt;/p>
&lt;details>
&lt;summary>Erläuterung (click to expand)&lt;/summary>
&lt;ul>
&lt;li>&lt;code>document&lt;/code> ist ein Objekt, das uns im Browser zur Verfügung steht. Dieses Objekt repräsentiert das DOM. Mit diesem &lt;code>document&lt;/code>-Objekt können wir auf die Elemente im Browser zugreifen.&lt;/li>
&lt;li>&lt;code>getElementById(...)&lt;/code> ist eine Methode auf diesem &lt;code>document&lt;/code>-Objekt. Diese Methode sucht auf der aktuellen Seite ein Element, das die übergebene &lt;code>id&lt;/code> besitzt.&lt;/li>
&lt;li>Das gefundene Element möchten wir in einer Variablen namens &lt;code>span&lt;/code> zwischenspeichern.&lt;/li>
&lt;li>&lt;code>textContent&lt;/code> ist ein Feld (= ein Attribut) auf diesem Element, das den Inhalt des Elements (als Text) repräsentiert. Diesen Wert können wir einfach so kopieren.&lt;/li>
&lt;/ul>
&lt;/details>
&lt;p>Mit diesem Code konnten wir die Anzahl Likes auf eine andere Zahl setzen. Nun möchten wir aber, dass sich diese Anzahl um genau 1 erhöht. Dafür benötigen wir noch zwei Zwischenschritte:&lt;/p>
&lt;ol>
&lt;li>Die aktuelle Zahl auslesen&lt;/li>
&lt;li>Diese Zahl von einem String in eine Nummer konvertieren&lt;/li>
&lt;li>Und die erhöhte Zahl ins &lt;code>&amp;lt;span&amp;gt;&lt;/code> schreiben.&lt;/li>
&lt;/ol>
&lt;p>Versuche dies zu implementieren, bevor du dir die Lösung ansiehst.&lt;/p>
&lt;details>
&lt;summary>Lösung (click to expand)&lt;/summary>
Das könnte ungefähr so aussehen:
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;likes-count&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> parseInt(&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span>);
&lt;span style="color:#a6e22e">likes&lt;/span>&lt;span style="color:#f92672">++&lt;/span>;
&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Neu dazugekommen ist&lt;/p>
&lt;ul>
&lt;li>der Aufruf von &lt;code>parseInt(...)&lt;/code>. Diese Methode ist standartmässig Global verfügbar und kann somit ohne imports verwendet werden. Diese Methode versucht, den übergeben Wert in eine Ganzzahl (Integer) zu konvertieren.&lt;/li>
&lt;li>&lt;code>likes++&lt;/code> bedeutet gleich viel wie &lt;code>likes = likes + 1&lt;/code>. Damit erhöhen wir die &lt;code>likes&lt;/code>-Variable also um 1.&lt;/li>
&lt;li>Mit &lt;code>span.textContent = likes&lt;/code> setzen wir den Text des &lt;code>span&lt;/code>s neu. Eine Umwandlung in String ist nicht notwendig.&lt;/li>
&lt;/ul>
&lt;p>Versuche das ganze nun mal ohne die parseInt Methode.
Du wirst sehen, dass es trotzdem funktioniert. Das liegt daran, dass JS keine &amp;ldquo;starke&amp;rdquo; typen (strong types) kennt. Sprich der JS-Interpreter versucht auch einen String als Zahl zu verwenden und wenn es sich wirklich um eine Zahl handelt, funktioniert das auch:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js"> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">onLikeClick&lt;/span>() {
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;likes-count&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span>;
&lt;span style="color:#a6e22e">likes&lt;/span>&lt;span style="color:#f92672">++&lt;/span>;
&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span>;
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dies ist aber sehr fragil, daher ist es good practice, die Variablen trotzdem in die korrekten typen umzuwandeln.
Gut zu wissen, ist das sich JavaScript teilweise etwas unerwartet verhält.&lt;/p>
&lt;/details>
&lt;h3 id="manipulation-beim-button-klick-ausführen-lassen">Manipulation beim Button-Klick ausführen lassen&lt;/h3>
&lt;p>Nun wollen wir noch, dass das, was wir vorher programmiert haben, dann passiert, wenn der User auf den Button klickt. Ändere die HTML-Seite wie folgt ab:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">...
&amp;lt;&lt;span style="color:#f92672">button&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;button&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">onclick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;onLikeClick()&amp;#34;&lt;/span>&amp;gt;+1&amp;lt;/&lt;span style="color:#f92672">button&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">onLikeClick&lt;/span>() {
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">span&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;likes-count&amp;#39;&lt;/span>);
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span> &lt;span style="color:#f92672">=&lt;/span> parseInt(&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span>);
&lt;span style="color:#a6e22e">likes&lt;/span>&lt;span style="color:#f92672">++&lt;/span>;
&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span>;
}
&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
...
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="ein-neues-element-hinzufügen">Ein neues Element hinzufügen&lt;/h2>
&lt;p>Manchmal möchtest du ein neues Element auf der Website generieren lassen.&lt;/p>
&lt;p>Im kommenden Beispiel möchten wir so viele Bilder von &amp;ldquo;Thumbs Ups&amp;rdquo; (also 👍) wie Likes anzeigen.&lt;/p>
&lt;p>Um das zu erzielen, kannst du die &lt;code>onLikeClick&lt;/code>-Funktion wie folgt erweitern:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#75715e">// draw a thumb up for every like:
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">imgHtml&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;img src=&amp;#34;https://upload.wikimedia.org/wikipedia/commons/c/ce/Emoji_u1f44d.svg&amp;#34; alt=&amp;#34;like&amp;#34; height=&amp;#34;25&amp;#34;&amp;gt;&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">insertHtml&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">likes&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#a6e22e">insertHtml&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">imgHtml&lt;/span>;
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">messageDiv&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">querySelector&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;div#message-div&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">messageDiv&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">insertHtml&lt;/span>;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dieser Code macht folgendes:&lt;/p>
&lt;ul>
&lt;li>für jedes Like, wird im &lt;code>&amp;lt;div id=&amp;quot;message-div&amp;quot;&amp;gt;&lt;/code> folgendes Element/Bild hinzugefügt: &lt;code>&amp;lt;img src=&amp;quot;https://upload.wikimedia.org/wikipedia/commons/c/ce/Emoji_u1f44d.svg&amp;quot; alt=&amp;quot;like&amp;quot; height=&amp;quot;25&amp;quot;&amp;gt;&lt;/code>&lt;/li>
&lt;li>Das HTML für dieses Bild haben wir zuerst in einer Konstante (&lt;code>const&lt;/code>) gespeichert. &lt;code>const&lt;/code> ist das Gleiche wie &lt;code>let&lt;/code> mit dem Unterschied, dass sich dieser Wert nie verändern darf innerhalb dieser Methode. Wenn sich eine Variable nie im definierten Block verändert, so wird empfohlen, &lt;code>const&lt;/code> statt &lt;code>let&lt;/code> zu verwenden.&lt;/li>
&lt;li>Die String-Variable &lt;code>insertHtml&lt;/code> brauchen wir als Zwischenspeicher, in welcher wir den HTML-String zusammensetzen, welche wir später im HTML/DOM haben möchten.&lt;/li>
&lt;li>Die &lt;code>for&lt;/code>-Schlaufe wird so oft durchlaufen, wie es Likes gab. Das bedeutet, dass pro Like ein Bild ins &lt;code>insertHtml&lt;/code> kopiert wird.&lt;/li>
&lt;li>Anschliessend holen wir uns das &lt;code>&amp;lt;div id=&amp;quot;message-div&amp;quot;&amp;gt;&lt;/code> via JavaScript. Wir hätten hier auch &lt;code>document.getElementById('message-div')&lt;/code> verwenden können. Aber &lt;code>querySelector&lt;/code> funktioniert hier auch. Die &lt;code>querySelector&lt;/code>-Methode akzeptiert ein CSS-Selektor und gibt dann das Element zurück, das damit angesprochen wird. In diesem Beispiel war &lt;code>div#message-div&lt;/code> ein möglicher CSS-Selektor (wie &lt;code>#message-div&lt;/code> eigentlich auch), der das &lt;code>&amp;lt;div id=&amp;quot;message-div&amp;quot;&lt;/code> anspricht.&lt;/li>
&lt;li>Als letztes verändern wir das HTML dieses &lt;code>&amp;lt;div&amp;gt;&lt;/code>s, indem wir das &lt;code>innerHTML&lt;/code>-Feld neu setzen.&lt;/li>
&lt;/ul>
&lt;p>Super, nun hast du schon ein paar Dinge auf deiner Seite mit JavaScript dynamisch verändert.&lt;/p>
&lt;p>Bitte denke daran, dass das Verwenden von &lt;code>.innerHTML&lt;/code> als eine Art &amp;ldquo;Holzfäller-Methode&amp;rdquo; angesehen wird. JavaScript bietet hierfür bereits eine elegantere Möglichkeit, die aber oft viel zu umständlich ist. Bitte schaue dir diese trotzdem kurz an: &lt;a href="https://www.w3schools.com/js/js_htmldom_nodes.asp">https://www.w3schools.com/js/js_htmldom_nodes.asp&lt;/a>&lt;/p></description></item><item><title>Docs: Basics zu HTML</title><link>/docs/web/html_css/03_html_basics/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/03_html_basics/</guid><description>
&lt;h2 id="erklärung-zum-vorherigen-beispiel">Erklärung zum vorherigen Beispiel&lt;/h2>
&lt;p>Im vorherigen Beispiel hatten wir diesen Code:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Kleiner Witz&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Wie viele Softwareentwickler braucht man,
um eine Glühbirne auszuwechseln?&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Keinen, das ist ein Hardware-Problem!&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Du hast gesehen, dass es das zwischen &lt;code>&amp;lt;h1&amp;gt;&lt;/code> und &lt;code>&amp;lt;/h1&amp;gt;&lt;/code> wie ein Titel formatiert wurde. Der Text zwischen &lt;code>&amp;lt;p&amp;gt;&lt;/code> und &lt;code>&amp;lt;/p&amp;gt;&lt;/code> in eigenen Abschnitten dargestellt.&lt;/p>
&lt;h2 id="html-tags">HTML Tags&lt;/h2>
&lt;p>Du hast schon die ersten &amp;ldquo;HTML Tags&amp;rdquo; kennengelernt: &lt;code>&amp;lt;h1&amp;gt;&lt;/code> und &lt;code>&amp;lt;p&amp;gt;&lt;/code>. &lt;code>&amp;lt;h1&amp;gt;&lt;/code> wird für Titel und &lt;code>&amp;lt;p&amp;gt;&lt;/code> wird für Paragrafen verwendet.&lt;/p>
&lt;p>HTML Tags sind wie Keywords (Schlüsselbegriffe), die beschreiben, wie der Browser deren Inhalt (Content) formatiert bzw. darstellt.&lt;/p>
&lt;p>Die Tags inklusiv deren Inhalt nennen wir &amp;ldquo;Element&amp;rdquo;. Das Element ist wie folgt aufgebaut:&lt;/p>
&lt;p>&lt;img src="../html-tag.svg" alt="htmlElement" title="(Bild, das den Aufbau eines HTML-Elements zeigt.)">&lt;/p>
&lt;p>Jedes Element beginnt mit einem &amp;ldquo;Opening Tag&amp;rdquo;. Zwischen diesem und dem Closing Tag befindet sich der Content, der auf Grundlage des Tags formatiert wird. Der Content wird oft &amp;ldquo;InnerText&amp;rdquo; oder &amp;ldquo;InnerHtml&amp;rdquo; genannt. Das Closing Tag hat immer vor dem Tag-Namen ein &amp;ldquo;/&amp;rdquo;, das symbolisiert, dass es sich um ein Closing Tag handelt.&lt;/p>
&lt;p>Im Opening Tag können Attribute vorkommen, die den Tag &amp;ldquo;konfigurieren&amp;rdquo;. Eine solche Konfiguration beinhaltet in den meisten Fällen ein Attribut-Key und -Value, welche mit einem Gleichzeichen verbunden werden. Der Attribut-Value (Wert) beginnt und endet IN JEDEM FALL mit einem Anführungs- bzw. Schlusszeichen, auch wenn der Wert eine Zahl oder true bzw. false ist.&lt;/p></description></item><item><title>Docs: Einführung Angular</title><link>/docs/web/angular/04_1_einf%C3%BChrung_angular/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_1_einf%C3%BChrung_angular/</guid><description>
&lt;h2 id="architektur">Architektur&lt;/h2>
&lt;p>Angular wird für Frontend-Applikationen verwendet. Oft wird ein Backend via HTTP(s) angebunden.
&lt;img src="/images/angular/angular_einf%C3%BChrung.png" alt="Angular">&lt;br>
&lt;img src="/images/angular/architektur.png" alt="Angular">&lt;/p>
&lt;h2 id="angular-data-bindings">Angular Data Bindings&lt;/h2>
&lt;h3 id="interpolation">Interpolation&lt;/h3>
&lt;ul>
&lt;li>Anhand von diesem One-Way Binding kann man Properties des Components im Template anzeigen.&lt;br>
Wenn sich das Property im Component ändert, wird das Template aktualisiert, um die neuen Änderungen anzuzeigen.&lt;/li>
&lt;/ul>
&lt;h3 id="property-binding">Property Binding&lt;/h3>
&lt;ul>
&lt;li>Anhand von Property Bindings können wir einen Wert unseres Components auf eine Eigenschaft eines Elements binden.&lt;br>
Wenn sich also der bestimme Wert im Component verändern sollte, wird dies im Template aktualisiert.&lt;/li>
&lt;/ul>
&lt;h3 id="event-binding">Event Binding&lt;/h3>
&lt;ul>
&lt;li>Event Binding ist definiert als das Aktualisieren/Senden des Werts/der Information einer bestimmten Variablen vom Template zum Component.&lt;br>
Zum Beispiel das Klicken eines Buttons.&lt;/li>
&lt;/ul>
&lt;h3 id="two-way-binding">Two-Way-Binding&lt;/h3>
&lt;ul>
&lt;li>Two-Way-Binding ist eine Kombination aus Property- und Eventbinding. Daten werden kontinuierlich synchronisiert: vom Template zum Component und vom Component zum Template.&lt;br>
Dies bedeutet also, dass Änderungen, die an den Daten des Components vorgenommen wurden, werden mit dem Template synchronisiert und sofort aktualisiert.&lt;br>
Umgekehrt funktioniert es auf dieselbe Weise, daher auch der Name &amp;ldquo;Two-Way-Binding&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images/angular/component-of-Data-Binding.png" alt="Databinding">&lt;/p>
&lt;h2 id="aufgabe-1">Aufgabe 1&lt;/h2>
&lt;p>Folgender Code ist gegeben:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Fahrrad&lt;/span>{
&lt;span style="color:#a6e22e">name?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
&lt;span style="color:#a6e22e">url?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>;
}
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">HttpClient&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/common/http&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">Component&lt;/span>, &lt;span style="color:#a6e22e">OnInit&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@angular/core&amp;#39;&lt;/span>;
&lt;span style="color:#66d9ef">@Component&lt;/span>({
&lt;span style="color:#a6e22e">selector&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;app-fahrrad&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">templateUrl&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./fahrrad.component.html&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">styleUrls&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#e6db74">&amp;#39;./fahrrad.component.scss&amp;#39;&lt;/span>]
})
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FahrradComponent&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">OnInit&lt;/span> {
&lt;span style="color:#a6e22e">fahrrad&lt;/span>: &lt;span style="color:#66d9ef">Fahrrad&lt;/span>;
&lt;span style="color:#a6e22e">liebslingsFahrraeder&lt;/span>:&lt;span style="color:#66d9ef">any&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [];
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#66d9ef">protected&lt;/span> &lt;span style="color:#a6e22e">httpClient&lt;/span>: &lt;span style="color:#66d9ef">HttpClient&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">fahrrad&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Fahrrad&lt;/span>();
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">fahrrad&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Specialized Diverge Pro Carbon&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">fahrrad&lt;/span>.&lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;https://assets.specialized.com/i/specialized/96220-10_DIVERGE-PRO-CARBON-ETAP-REDWD-SMK-CHRM_HERO?bg=rgb(241,241,241)&amp;amp;w=2500&amp;amp;h=1406&amp;amp;fmt=auto&amp;#34;&lt;/span>
}
&lt;span style="color:#a6e22e">ngOnInit&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
}
&lt;span style="color:#a6e22e">nameDesFahrrads&lt;/span>(){
&lt;span style="color:#a6e22e">alert&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">fahrrad&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>);
}
&lt;span style="color:#a6e22e">bildLiebslingsFahrrad&lt;/span>(){
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">liebslingsFahrraeder&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [];
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">url&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;https://www.googleapis.com/customsearch/v1?key=AIzaSyDNGfS6NUdgwXOwKu9xlZPJFm84ylG6J4g&amp;amp;cx=005124428384360536924:rstfldysumw&amp;amp;q=&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">fahrrad&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;amp;searchType=image&amp;amp;safe=high&amp;#34;&lt;/span>;
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">httpClient&lt;/span>.&lt;span style="color:#66d9ef">get&lt;/span>(&lt;span style="color:#a6e22e">url&lt;/span>).&lt;span style="color:#a6e22e">subscribe&lt;/span>((&lt;span style="color:#a6e22e">response&lt;/span>:&lt;span style="color:#66d9ef">any&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span>{
&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">items&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>];
&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">image&lt;/span>.&lt;span style="color:#a6e22e">height&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span> &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">image&lt;/span>.&lt;span style="color:#a6e22e">width&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">image&lt;/span>.&lt;span style="color:#a6e22e">height&lt;/span>;
&lt;span style="color:#a6e22e">item&lt;/span>.&lt;span style="color:#a6e22e">image&lt;/span>.&lt;span style="color:#a6e22e">width&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">200&lt;/span>;
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">liebslingsFahrraeder&lt;/span>.&lt;span style="color:#a6e22e">push&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span>);
}
});
}
}
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Folgendes muss angezeigt werden, wenn die Seite geladen wurde:&lt;/p>
&lt;img src="../04_01_First_Page.PNG" alt="Components Description" style="width:20%"/>
&lt;ul>
&lt;li>&amp;ldquo;Wie heisst mein Fahrrad?&amp;rdquo; ist mit der Funktion &amp;ldquo;nameDesFahrrads()&amp;rdquo; verknüpft.&lt;/li>
&lt;li>&amp;ldquo;Mein Liebslingsfahrrad suchen&amp;rdquo; ist mit der Funktion &amp;ldquo;bildLiebslingsFahrrad()&amp;rdquo; verknüpft.&lt;/li>
&lt;li>Für die Anzeige der Lieblingsfahrräder muss ein &lt;code>*ngFor&lt;/code> gebraucht werden.&lt;/li>
&lt;li>Tipp: Die Weite und Höhe der Bilder kann direkt mit einem Propertybinding gemacht werden.&lt;/li>
&lt;/ul>
&lt;p>Folgende Seite wird nach dem Klick auf &amp;ldquo;Mein Lieblingsfahrrad suchen&amp;rdquo; angezeigt:&lt;/p>
&lt;img src="../04_01_Second_Page.PNG" alt="Components Description" style="width:40%"/></description></item><item><title>Exams: Exam zu den Angular-Basics</title><link>/exams/web/angular/07_2_exam_angular/</link><pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate><guid>/exams/web/angular/07_2_exam_angular/</guid><description>
&lt;h1 id="exam-2---angular">Exam 2 - Angular&lt;/h1>
&lt;p>&lt;img src="/images/task.png" alt="task1"> - Einzelarbeit&lt;br>&lt;/p>
&lt;h2 id="ausgangslage">Ausgangslage&lt;/h2>
&lt;p>In deinem Unternehmen werden die Arbeitszeiten immer noch im Excel erfasst. Dein Linienvorgesetzter ist mit diesem Excel-File nicht mehr so zufrieden. Er verlangt von dir, dass du ein Angular-Projekt realisieren sollst, welches das aktuelle Excel-File ablöst. Designtechnisch ist alles dir überlassen. Du kannst entweder mit einem lokalen Projekt arbeiten oder eine Backendschnittstelle basteln.&lt;/p>
&lt;h2 id="anforderungen">Anforderungen&lt;/h2>
&lt;h3 id="funktionale-anforderungen">Funktionale Anforderungen&lt;/h3>
&lt;p>Dein Linienvorgesetzter gibt dir folgende funktionale Anforderungen für das Arbeitszeitprogramm:&lt;/p>
&lt;ul>
&lt;li>Die Mittagszeit von 30 Minuten &lt;strong>muss&lt;/strong> gemacht werden. Sofern über 9h gearbeitet wird, &lt;strong>muss&lt;/strong> mindestens 1h Mittagspause gemacht werden.&lt;/li>
&lt;li>Man kann entweder von Hand oder mit Hilfe eines QR-Codes ein- und ausstempeln.&lt;/li>
&lt;li>Es gibt drei Rollen: &lt;em>Admin, Vorgesetzter und Mitarbeiter&lt;/em>.&lt;br>Der &lt;em>Admin&lt;/em> kann neue Mitglieder (&lt;em>Admin, Vorgesetzter, Mitarbeiter&lt;/em>) hinzufügen und den &lt;em>Vorgesetzten&lt;/em> zuweisen. Sieht aber keine Zeitaufschreibung ausser die eigene. Der &lt;em>Vorgesetzte&lt;/em> sieht die eigene Zeit, wieauch die Zeit seiner Mitarbeiter. Der &lt;em>Mitarbeiter&lt;/em> sieht nur seine eigene Zeit.&lt;/li>
&lt;li>Der &lt;em>Admin&lt;/em> kann neue Auftragszeiten (Projekt X, Projekt Y, Daily Business, etc.) hinzufügen, welche von allen Mitarbeitern gewählt werden können.&lt;/li>
&lt;li>Jedes Mitglied &lt;strong>muss&lt;/strong> bei der Zeitaufschreibung ein Auftrag wählen, wo er gerade arbeitet. Diese Projekte können favorisiert werden, damit man sie nicht jedes Mal wählen muss.&lt;/li>
&lt;li>Jedes Mitglied kann zudem diverse Zeitcodes anwenden, welche vom Admin hinzugefügt werden. Das sind beispielsweise: Krank, Kompensation, Berufsschule, Ferien,etc.&lt;/li>
&lt;li>Man kann die Zeiten im späteren Verlauf noch ändern. Hierzu werden aber alle geänderten Zeiten (Datum bearbeitung, etc.) angezeigt.&lt;/li>
&lt;li>Jedes Mitglied kann sein Passwort (und Profilbild) ändern.&lt;/li>
&lt;li>Der &lt;em>Admin&lt;/em> kann die Daten jedes Mitglieds ändern(Nachname, Vorname, Abteilung, etc.) oder löschen.&lt;/li>
&lt;/ul>
&lt;h3 id="nicht-funktionale-anforderungen">Nicht-funktionale Anforderungen&lt;/h3>
&lt;ul>
&lt;li>Das System muss innerhalb von 100ms die Daten liefern.&lt;/li>
&lt;li>IT-Sicherheit: Das System bockiert nach drei Fehlrversuchen die Anmeldung.&lt;/li>
&lt;li>Abfragen können nur mit einem JWT ausgeführt werden.&lt;/li>
&lt;/ul>
&lt;h2 id="daten">Daten&lt;/h2>
&lt;h3 id="mitglieder-daten">Mitglieder-Daten&lt;/h3>
&lt;p>Die Mitglieder bestehen aus folgenden Werten:&lt;/p>
&lt;ul>
&lt;li>Nachname&lt;/li>
&lt;li>Vorname&lt;/li>
&lt;li>Passwort(muss bei der ersten Anmeldung geändert werden)&lt;/li>
&lt;li>Abteilung&lt;/li>
&lt;li>Arbeitszeit(bspw. 100% oder 8h)&lt;/li>
&lt;li>Rolle&lt;/li>
&lt;li>(nicht zwingend Profilbild)&lt;/li>
&lt;/ul>
&lt;h3 id="zeit-daten">Zeit-Daten&lt;/h3>
&lt;p>Die Zeit besteht aus folgenden Werten:&lt;/p>
&lt;ul>
&lt;li>Von&lt;/li>
&lt;li>Bis&lt;/li>
&lt;li>Datum&lt;/li>
&lt;/ul>
&lt;h3 id="auftragszeit-daten">Auftragszeit-Daten&lt;/h3>
&lt;p>Die Auftragszeit besteht aus folgenden Werten:&lt;/p>
&lt;ul>
&lt;li>Auftragsnummer&lt;/li>
&lt;li>Text&lt;/li>
&lt;/ul>
&lt;h3 id="zeitcodes-daten">Zeitcodes-Daten&lt;/h3>
&lt;p>Die Zeitcodes besteht aus folgenden Werten:&lt;/p>
&lt;ul>
&lt;li>Nummer&lt;/li>
&lt;li>Beschreibung&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/images/hint.png" alt="hint1"> - Hinweis:&lt;/p>
&lt;p>Beziehungen zwischen Daten nicht vergessen.&lt;/p>
&lt;p>Bei Fragen ungeniert melden.&lt;/p></description></item><item><title>Docs: Git Basics</title><link>/docs/git/git-basics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/git-basics/</guid><description>
&lt;p>Git kann auf unterschiedliche Arten eingesetzt werden, es gibt graphische Oberflächen und die meisten Git-Server Software bieten Weboberflächen, welche das interagieren mit Git Repositories kinderleicht gestalten. Da diese Oberflächen meist sehr Produktspezifisch sind und oft auch nicht alle Funktionen beinhaltet werden hier nur die Kommandozeilen Befehle angeschaut. Ausserdem empfiehlt es sich mit git auf der Kommandozeile zu starten da es so viel verständlicher ist.&lt;/p>
&lt;h2 id="inhalt">Inhalt&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#konfiguration-von-git">Konfiguration von Git&lt;/a>&lt;/li>
&lt;li>&lt;a href="#hilfe">Hilfe&lt;/a>&lt;/li>
&lt;li>&lt;a href="#ein-git-repository-anlegen">Ein Git Repository anlegen&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%C3%A4nderungen-verfolgen-und-im-repository-speichern">Änderungen verfolgen und im Repository speichern&lt;/a>&lt;/li>
&lt;li>&lt;a href="#anzeigen-der-commit-historie">Anzeigen der Commit Historie&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%C3%A4nderungen-r%C3%BCckg%C3%A4ngig-machen">Änderungen rückgängig machen&lt;/a>&lt;/li>
&lt;li>&lt;a href="#mit-remotes-arbeiten">Mit Remotes arbeiten&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="konfiguration-von-git">Konfiguration von Git&lt;/h2>
&lt;p>Git kann, wie die viele Software unter Linux, auf unterschiedlichen Level konfiguriert werden:&lt;/p>
&lt;ul>
&lt;li>&lt;code>/etc/gitconfig&lt;/code> enthält die Werte, welche für alle Benutzer auf dem System gelten. Die Datei kann mit &lt;code>git config --system&lt;/code> gelesen oder editiert werden. Man braucht Administrator- oder Superuser-Rechte um die Datei zu editieren.&lt;/li>
&lt;li>&lt;code>~/.gitconfig&lt;/code> oder &lt;code>~/.config/git/config&lt;/code> enthält die Werte, welche für den aktuellen Benutzer konfiguriert sind. Mit &lt;code>git config --global&lt;/code> können Werte gesetzt oder ausgelesen werden.&lt;/li>
&lt;li>Die Datei &lt;code>config&lt;/code> im &lt;code>.git&lt;/code> Verzeichnis innerhalb eines Repositories enthält die Konfiguration, welche nur für dieses Repository zählt. Das Flag für &lt;code>git config&lt;/code> ist in diesem Fall &lt;code>--local&lt;/code>, ist jedoch in der Regel die Standardoption und kann weggelassen werden.&lt;/li>
&lt;/ul>
&lt;p>Jede dieser Konfiguration wird von der nächsten überschrieben, sodass die Repository bezogene Konfiguration den höchsten Wert hat. Um zu die aktuelle Konfiguration und ihren Ursprung anzusehen kann folgender Befehl ausgeführt werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git config --list --show-origin
file:/home/lehrling/.gitconfig user.email&lt;span style="color:#f92672">=&lt;/span>lehrling@puzzle.ch
file:/home/lehrling/.gitconfig user.name&lt;span style="color:#f92672">=&lt;/span>Lehrling Puzzle
file:/home/lehrling/.gitconfig push.default&lt;span style="color:#f92672">=&lt;/span>simple
file:/home/lehrling/.gitconfig merge.tool&lt;span style="color:#f92672">=&lt;/span>meld
file:.git/config core.repositoryformatversion&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
file:.git/config core.filemode&lt;span style="color:#f92672">=&lt;/span>true
file:.git/config core.bare&lt;span style="color:#f92672">=&lt;/span>false
file:.git/config core.logallrefupdates&lt;span style="color:#f92672">=&lt;/span>true
file:.git/config remote.origin.url&lt;span style="color:#f92672">=&lt;/span>git@github.com:puzzle-bbt/training-sbb-puzzle.git
file:.git/config remote.origin.fetch&lt;span style="color:#f92672">=&lt;/span>+refs/heads/*:refs/remotes/origin/*
file:.git/config branch.master.remote&lt;span style="color:#f92672">=&lt;/span>origin
file:.git/config branch.master.merge&lt;span style="color:#f92672">=&lt;/span>refs/heads/master
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="konfigurationsbeispiele">Konfigurationsbeispiele&lt;/h3>
&lt;p>Nach der Installation von Git sollte als erstes der Name und die Email Adresse konfiguriert werden, da diese beiden Angaben bei jedem Commit benötigt werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git config --global user.name &lt;span style="color:#e6db74">&amp;#34;John Doe&amp;#34;&lt;/span>
$ git config --global user.email johndoe@example.com
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wie wir bereits gelernt haben, schreiben wir mit dem &lt;code>--global&lt;/code> Flag in die Konfiguration in unserem &lt;code>home&lt;/code> Verzeichnis und sie gilt somit für alle Repositories, welche wir mit unserem User bearbeiten. Wollen wir dies fur ein bestimmtes Repo übersteuern, haben wir immer noch die Möglichkeit dies mit &lt;code>--local&lt;/code> zu machen.&lt;/p>
&lt;p>Eine weitere Konfiguration die evtl. hilfreich sein kann ist &lt;code>core.editor&lt;/code> mit welcher, der Texteditor definiert werden kann. Git benutzt, falls hier nichts definiert ist, den standard Editor des Systems.&lt;/p>
&lt;h2 id="hilfe">Hilfe&lt;/h2>
&lt;p>Git bietet mehrere Möglichkeit, wie man an Hilfe gelangt, wenn mal einmal nicht weiter weiss:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git help &amp;lt;verb&amp;gt;
$ git &amp;lt;verb&amp;gt; --help
$ man git-&amp;lt;verb&amp;gt;
&lt;span style="color:#75715e"># Kurzversion:&lt;/span>
$ git &amp;lt;verb&amp;gt; -h
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn man also nicht mehr genau weiss, wie dies mit der Konfiguration von Git funktioniert kann man sich folgendermassen weiterhelfen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">44
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git help config &lt;span style="color:#75715e">#ruft die Manpage auf&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>..&lt;span style="color:#f92672">]&lt;/span>
$ git config -h
usage: git config &lt;span style="color:#f92672">[&lt;/span>&amp;lt;options&amp;gt;&lt;span style="color:#f92672">]&lt;/span>
Config file location
--global use global config file
--system use system config file
--local use repository config file
--worktree use per-worktree config file
-f, --file &amp;lt;file&amp;gt; use given config file
--blob &amp;lt;blob-id&amp;gt; read config from given blob object
Action
--get get value: name &lt;span style="color:#f92672">[&lt;/span>value-regex&lt;span style="color:#f92672">]&lt;/span>
--get-all get all values: key &lt;span style="color:#f92672">[&lt;/span>value-regex&lt;span style="color:#f92672">]&lt;/span>
--get-regexp get values &lt;span style="color:#66d9ef">for&lt;/span> regexp: name-regex &lt;span style="color:#f92672">[&lt;/span>value-regex&lt;span style="color:#f92672">]&lt;/span>
--get-urlmatch get value specific &lt;span style="color:#66d9ef">for&lt;/span> the URL: section&lt;span style="color:#f92672">[&lt;/span>.var&lt;span style="color:#f92672">]&lt;/span> URL
--replace-all replace all matching variables: name value &lt;span style="color:#f92672">[&lt;/span>value_regex&lt;span style="color:#f92672">]&lt;/span>
--add add a new variable: name value
--unset remove a variable: name &lt;span style="color:#f92672">[&lt;/span>value-regex&lt;span style="color:#f92672">]&lt;/span>
--unset-all remove all matches: name &lt;span style="color:#f92672">[&lt;/span>value-regex&lt;span style="color:#f92672">]&lt;/span>
--rename-section rename section: old-name new-name
--remove-section remove a section: name
-l, --list list all
-e, --edit open an editor
--get-color find the color configured: slot &lt;span style="color:#f92672">[&lt;/span>default&lt;span style="color:#f92672">]&lt;/span>
--get-colorbool find the color setting: slot &lt;span style="color:#f92672">[&lt;/span>stdout-is-tty&lt;span style="color:#f92672">]&lt;/span>
Type
-t, --type &amp;lt;&amp;gt; value is given this type
--bool value is &lt;span style="color:#e6db74">&amp;#34;true&amp;#34;&lt;/span> or &lt;span style="color:#e6db74">&amp;#34;false&amp;#34;&lt;/span>
--int value is decimal number
--bool-or-int value is --bool or --int
--path value is a path &lt;span style="color:#f92672">(&lt;/span>file or directory name&lt;span style="color:#f92672">)&lt;/span>
--expiry-date value is an expiry date
Other
-z, --null terminate values with NUL byte
--name-only show variable names only
--includes respect include directives on lookup
--show-origin show origin of config &lt;span style="color:#f92672">(&lt;/span>file, standard input, blob, command line&lt;span style="color:#f92672">)&lt;/span>
--show-scope show scope of config &lt;span style="color:#f92672">(&lt;/span>worktree, local, global, system, command&lt;span style="color:#f92672">)&lt;/span>
--default &amp;lt;value&amp;gt; with --get, use default value when missing entry
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="ein-git-repository-anlegen">Ein Git Repository anlegen&lt;/h2>
&lt;p>Um lokal ein neues Git Repository anzulegen gibt es zwei Varianten:&lt;/p>
&lt;ul>
&lt;li>Umwandeln eines Verzeichnis, welches (noch) nicht mit Git verwaltet wird zu einem Git Repository&lt;/li>
&lt;li>Klonen eines existierenden Repositories von einem anderen Ort&lt;/li>
&lt;/ul>
&lt;h3 id="ein-verzeichnis-zu-einem-git-repository-verwandeln">Ein Verzeichnis zu einem Git Repository verwandeln&lt;/h3>
&lt;p>Um aus einem Ordner ein Git Repository zu erstellen, muss man zuerst in den Ordner wechseln und anschliessend das Repository initialisieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cd ~/path/to/folder
$ git init
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der zweite Befehl erzeugt ein &lt;code>.git&lt;/code> Unterverzeichnis, welches die Repository Daten beinhaltet. Im Moment werden noch keine Dateien von Git verwaltet, sondern die müssen zuerst hinzugefügt (&lt;code>git add&lt;/code>) werden und committed werden (&lt;code>git commit&lt;/code>). Wenn wir von einem leeren Ordner aus gehen, müssen die Dateien natürlich zuerst noch erstellt werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ vim README.md
$ git add README.md
$ git commit -m &lt;span style="color:#e6db74">&amp;#39;Initial Commit&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="ein-bestehendes-repository-klonen">Ein bestehendes Repository klonen&lt;/h3>
&lt;p>Um ein Repository zu klonen wird der Befehl &lt;code>git clone&lt;/code> verwendet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/libgit2/libgit2
$ ls
libgit2
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Git legt dann automatisch ein Verzeichnis &lt;code>libgit2&lt;/code> an mit allen Dateien und initialisiert das Repository mit einem &lt;code>.git&lt;/code> Verzeichnis im Hauptverzeichnis. Wird hinter der URL noch etwas angegeben, wird dies als Name des Zielverzeichnisses interpretiert:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone https://github.com/libgit2/libgit2 mylibgit
$ ls
mylibgit
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="änderungen-verfolgen-und-im-repository-speichern">Änderungen verfolgen und im Repository speichern&lt;/h2>
&lt;p>Zur Erinnerung, eine Datei in einem Git Folder kann vier Zustände haben:&lt;/p>
&lt;ul>
&lt;li>Untracked: Die Datei liegt im Ordner, wird aber nicht von Git versioniert&lt;/li>
&lt;li>Unmodified: Die Datei wird von Git versioniert, sie ist seit dem letzten Commit unverändert.&lt;/li>
&lt;li>Modified: Die Datei wurde seit dem letzten Commit verändert&lt;/li>
&lt;li>Staged: eine neue oder editierte Datei wurde für den nächsten Commit vorgemerkt.&lt;/li>
&lt;/ul>
&lt;p>Der Befehl zum überprüfen, ob man Dateien in einem anderen Zustand als &lt;code>unmodified&lt;/code> hat ist &lt;code>git status&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git status
On branch feature/git-basics
Your branch is up to date with &lt;span style="color:#e6db74">&amp;#39;origin/feature/git-basics&amp;#39;&lt;/span>.
Changes to be committed:
&lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git restore --staged &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to unstage&lt;span style="color:#f92672">)&lt;/span>
modified: content/en/docs/02.0/02.md
Changes not staged &lt;span style="color:#66d9ef">for&lt;/span> commit:
&lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to update what will be committed&lt;span style="color:#f92672">)&lt;/span>
&lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git restore &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to discard changes in working directory&lt;span style="color:#f92672">)&lt;/span>
modified: content/en/docs/02.0/02.md
Untracked files:
&lt;span style="color:#f92672">(&lt;/span>use &lt;span style="color:#e6db74">&amp;#34;git add &amp;lt;file&amp;gt;...&amp;#34;&lt;/span> to include in what will be committed&lt;span style="color:#f92672">)&lt;/span>
.gitignore
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wollen wir nun die Änderungen der Datei &lt;code>content/en/docs/02.0/02.md&lt;/code> (oder die Datei &lt;code>.gitignore&lt;/code>) zum nächsten Commit hinzufügen können wir dies mit &lt;code>git add &amp;lt;pfad/zur/datei&amp;gt;&lt;/code>. Im Beispiel oben sehen wir, dass die Datei &lt;code>content/en/docs/02.0/02.md&lt;/code> bereits gestaged ist. Ändern wir diese Datei erneut, wird die Datei sowohl bei &lt;em>Changes to be committed:&lt;/em> wie auch bei &lt;em>Changes not staged for commit:&lt;/em> auftauchen. Einmal mit den Änderungen, welche wir bereits gestaged haben und einmal mit den Änderungen, welche wir nach dem Stagen (&lt;code>git add&lt;/code>) gemacht haben. Wollen wir beide Änderungen im gleichen Commit, können wir die Datei einfach wieder mit &lt;code>git add&lt;/code> stagen und anschliessend commiten, wollen wir die Änderungen in separaten Commit, commiten wir zuerst die gestagten Änderungen und stagen anschliessend die zweite Änderungen und commiten erneut.&lt;/p>
&lt;h3 id="gitignore">.gitignore&lt;/h3>
&lt;p>Bevor wir lernen, wie man seine Änderungen commited wollen wir noch kurz die spezielle Datei &lt;code>.gitignore&lt;/code> anschauen. In dieser Datei können Dateien erfasst werden, welche Git nicht als untracked aufzählen soll, respektive ignorieren soll. Die Datei wird ganz normal wie jede andere auch ins Repo eingecheckt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ cat .gitignore
&lt;span style="color:#75715e"># ignore all .a files&lt;/span>
*.a
&lt;span style="color:#75715e"># but do track lib.a, even though you&amp;#39;re ignoring .a files above&lt;/span>
!lib.a
&lt;span style="color:#75715e"># only ignore the TODO file in the current directory, not subdir/TODO&lt;/span>
/TODO
&lt;span style="color:#75715e"># ignore all files in any directory named build&lt;/span>
build/
&lt;span style="color:#75715e"># ignore doc/notes.txt, but not doc/server/arch.txt&lt;/span>
doc/*.txt
&lt;span style="color:#75715e"># ignore all .pdf files in the doc/ directory and any of its subdirectories&lt;/span>
doc/**/*.pdf
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Weitere Informationen bekommt man mit &lt;code>man gitignore&lt;/code> oder unter &lt;a href="https://github.com/github/gitignore">https://github.com/github/gitignore&lt;/a> findet man nützliche Beispiele.&lt;/p>
&lt;h3 id="überprüfen-der-änderungen">Überprüfen der Änderungen&lt;/h3>
&lt;p>Bevor man seine Änderungen commited, empfiehlt es sich diese nochmals zu überprüfen. Mit &lt;code>git status&lt;/code> sieht man, welche Dateien geändert wurden, jedoch nicht, was sich geändert hat. Dafür gibt es den Befehl &lt;code>git diff&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-diff" data-lang="diff">diff --git a/content/en/docs/02.0/02.md b/content/en/docs/02.0/02.md
index 1e6db46..dd7161b 100644
&lt;span style="color:#f92672">--- a/content/en/docs/02.0/02.md
&lt;/span>&lt;span style="color:#f92672">&lt;/span>&lt;span style="color:#a6e22e">+++ b/content/en/docs/02.0/02.md
&lt;/span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#75715e">@@ -145,3 +145,60 @@ mylibgit
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
## Änderungen verfolgen und im Repository speichern
&lt;span style="color:#a6e22e">+Zur Erinnerung, eine Datei in einem Git Folder kann vier Zustände haben:
&lt;/span>&lt;span style="color:#a6e22e">&lt;/span>&lt;span style="color:#f92672">-Zur Erinnerung, eine Datei in einem Git Folder kann vier Zustaende haben
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>git diff&lt;/code> vergleicht die Änderungen welche noch nicht gestaged wurden, will man bereits gestagte Änderungen überprüfen braucht es zusätzlich das Flag &lt;code>--staged&lt;/code> oder &lt;code>--cached&lt;/code> (die beiden Flags sind Synonyme).&lt;/p>
&lt;p>Anders als &lt;code>git diff&lt;/code> funktioniert &lt;code>git diff-tool&lt;/code> mit einem externen Tool, welches dir die Änderungen anzeigt. Beispiele dafür sind &amp;lsquo;P4Merge&amp;rsquo; oder auch &amp;lsquo;Beyond Compare&amp;rsquo;. Sie versuchen die Bearbeitungen besser zu visualisieren
und es dem Benutzer einfacher zu machen, diese in einer Datei / im Code einzusehen.
Jetzt bleibt die Frage: Wann brauchen wir was? Grundsätzlich
wird &lt;code>git diff&lt;/code> bei folgenden Situationen gebraucht:&lt;/p>
&lt;ul>
&lt;li>Wenn wir kein GUI haben und nur mit dem Output des Terminals arbeiten&lt;/li>
&lt;li>Falls wir gar kein externes Tool zur Verfügung haben&lt;/li>
&lt;li>Wenn du keine &amp;lsquo;schweren&amp;rsquo; externen Tools starten möchtest, sondern so schnell wie möglich zum Ergebnis kommen willst.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>git diff-tool&lt;/code> kann man dann überall dort einsetzen, bei denen die oben erwähnten Situationen nicht zutreffen. Zu Beachten ist aber, dass es noch viele weitere Situationen gibt, in welchen man auf &lt;code>git diff-tool&lt;/code> verzichten kann.
Zur genaueren Einsicht ist Googel immer eine gute Anhaltestelle.&lt;/p>
&lt;h3 id="commiten">Commiten&lt;/h3>
&lt;p>Ist man sicher, dass man nur die Änderungen gestaged hat, welche man auch commiten will, kann man dies mit dem Befehl &lt;code>git commit&lt;/code> bewerkstelligen. Dadurch wird ein Editor geöffnet und man wird gebeten eine Beschreibung für die Änderungen anzugeben. Wie solche Beschreibungen gestaltet werden sollen und was alles in eine &amp;ldquo;Commit Message&amp;rdquo; gehört, darüber gibt es ganz unterschiedliche Meinungen. Idealerweise probiert man sich vorzustellen, was man an Zusätzlichen Informationen braucht, wenn man die Änderungen in zwei Jahren wieder anschaut, um zu verstehen, was und warum das geändert wurde.&lt;/p>
&lt;p>Oft gibt es pro Projekt Konventionen wie eine Commit Message aussehen soll. Falls dies nicht existiert gibt es ein paar wenige Punkte welche die Messages einiges lesbarer und verständlicher machen:&lt;/p>
&lt;ul>
&lt;li>Sprache: Englisch&lt;/li>
&lt;li>Kurze und prägnante Message, idealerweise unter 50 Zeichen &lt;a href="https://chris.beams.io/posts/git-commit/#limit-50">Details&lt;/a>&lt;/li>
&lt;li>Mit Grossbuchstaben beginnen &lt;a href="https://chris.beams.io/posts/git-commit/#capitalize">Details&lt;/a>&lt;/li>
&lt;li>Kein Punkt am Schluss &lt;a href="https://chris.beams.io/posts/git-commit/#end">Details&lt;/a>&lt;/li>
&lt;li>Den &lt;em>imperative mood&lt;/em> (Befehlsform) verwenden, also «Fix bug with X» statt «Fixed bug with X» oder «More fixes for broken stuff» &lt;a href="https://chris.beams.io/posts/git-commit/#imperative">Details&lt;/a>&lt;/li>
&lt;li>Wenn vorhanden das Ticket referenzieren:
&lt;ul>
&lt;li>Bei Gitlab/Github Issues: «Add X #12345»&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>(&lt;a href="https://docs.puzzle.ch/qm-guide/latest/source-code-management/index.html#_konvention_commit_message">Puzzle Docs&lt;/a>)&lt;/p>
&lt;p>Weitere Quellen dazu:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://chris.beams.io/posts/git-commit/">https://chris.beams.io/posts/git-commit/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.conventionalcommits.org/en/v1.0.0/">https://www.conventionalcommits.org/en/v1.0.0/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Ein paar hilfreiche Flags zu &lt;code>git commit&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>-m&lt;/code> um eine Message gleich anzugeben und nicht den Editor zu öffnen (kann je nach Commit Message Guideline hinderlich sein, da es keine Multiline Kommentare erlaubt):&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git commit -m &lt;span style="color:#e6db74">&amp;#34;Story 182: added important Information to Readme&amp;#34;&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>master 463dc4f&lt;span style="color:#f92672">]&lt;/span> Story 182: added important Information to Readme
&lt;span style="color:#ae81ff">2&lt;/span> files changed, &lt;span style="color:#ae81ff">2&lt;/span> insertions&lt;span style="color:#f92672">(&lt;/span>+&lt;span style="color:#f92672">)&lt;/span>
create mode &lt;span style="color:#ae81ff">100644&lt;/span> README
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>
&lt;p>&lt;code>-a&lt;/code> um alle editierten Dateien gleich mitzustagen. (Kurzform von &lt;code>git add --all &amp;amp;&amp;amp; git commit&lt;/code>) &lt;strong>!ACHTUNG!&lt;/strong> kann gefährlich sein da so schnell Änderungen in einen Commit rutschen die nicht rein gehören!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>-v&lt;/code> um ein &lt;code>git diff --staged&lt;/code> im Editor angezeigt zu bekommen. So muss man sich nicht merken, was man eigentlich geändert hat und bekommt es beim schreiben der Commit Message noch einmal präsentiert.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>WICHTIG:&lt;/strong> Es ist einiges einfacher Fehler vor dem Commiten als nach dem Commiten zu beheben, ein zweites mal über die Änderungen schauen ist sehr empfehlenswert!&lt;/p>
&lt;h3 id="dateien-löschen">Dateien löschen&lt;/h3>
&lt;p>Um eine Datei zu löschen muss diese zuerst entfernt und dann gestaged werden, damit dies in der Git Datenbank ankommt. Um nicht zuerst &lt;code>rm foo&lt;/code> und dann &lt;code>git add foo&lt;/code> eingeben zu müssen, gibt es den Befehl &lt;code>git rm foo&lt;/code>. Will man eine bereits gestagte Datei aus der Versionsverwaltung jedoch nicht vom Filesystem löschen, weil man diese zum Beispiel im &lt;code>.gitignore&lt;/code> ergänzen möchte, dann kann man dies mit &lt;code>git rm --cached foo&lt;/code> erledigen.&lt;/p>
&lt;p>&lt;strong>WICHTIG:&lt;/strong> Jede Datei die irgendwann mal commited wurde ist für immer in der Git Geschichte und kann nur durch neu schreiben der selbigen wieder entfernt werden. Wer also zum Beispiel sein Passwort commited weil dies in einer &lt;code>secret.yml&lt;/code> Datei steht, der sollte sich sofort bei einem 10x-Git-Profi-Engineer Hilfe holen.&lt;/p>
&lt;h3 id="dateien-verschieben">Dateien Verschieben&lt;/h3>
&lt;p>Genauso wie löschen, muss auch beim Verschieben die Änderung Git mitgeteilt werden: &lt;code>mv README.md README &amp;amp;&amp;amp; git rm README.md &amp;amp;&amp;amp; git add README&lt;/code> oder in kurz und hübsch: &lt;code>git mv README.md README&lt;/code>.&lt;/p>
&lt;h2 id="anzeigen-der-commit-historie">Anzeigen der Commit Historie&lt;/h2>
&lt;p>Um die Geschichte eines Git Repositories anzuzeigen gibt es den Befehl &lt;code>git log&lt;/code>. Ohne Argumente zeigt &lt;code>git log&lt;/code> die Commits in umgekehrter chronologischer Reihenfolge, sprich jüngster Commit zuoberst. Pro Commit wird jeweils der Commit-Hash, der Name und Email Adresse des Authors, das Datum und die Commit-Message angezeigt. Um die effektiven Änderungen anzuzeigen gibt es das &lt;code>-p&lt;/code> oder &lt;code>--patch&lt;/code> Flag verwendet werden. Da der Output schnell gross wird und man wahrscheinlich auch nicht bis an den Ursprung der Geschichte zurück will empfiehlt es sich die Anzahl Commits anzugeben, will man zum Beispiel die letzten drei Commits anschauen macht man dies mit &lt;code>-3&lt;/code>. Oder man schränkt die Änderungen basierend auf die Zeit ein mit &lt;code>--since=&lt;/code> und &lt;code>--until=&lt;/code> ein (es werden die unterschiedlichsten Zeitangaben akzeptiert, am besten probiert man etwas aus. Bsp: &lt;code>--since=2.weeks&lt;/code> oder &lt;code>--until=&amp;quot;2020-06-03&amp;quot;&lt;/code>). Auch mit &lt;code>--grep&lt;/code> oder &lt;code>--author&lt;/code> kann man die Resultate einschränken. Weitere Information liefert die Manpage &lt;code>man git log&lt;/code> und die Hilfefunktion &lt;code>git log -h&lt;/code>.&lt;/p>
&lt;h2 id="änderungen-rückgängig-machen">Änderungen rückgängig machen&lt;/h2>
&lt;p>Wo gehobelt wird fallen Späne. Die meisten Schnitzer kann man jedoch selber wieder ausglätten. Am häufigsten committed man wohl zu schnell, hat eine Datei vergessen dazuzufügen oder hat sich bei der Commit Message vertan. Hier kann man ganz einfach die Änderungen noch vornehmen und an den letzten Commit berichtigen mit &lt;code>git commit --amend&lt;/code> (Wichtig, man editiert nicht den letzten Commit, sondern man löscht ihn und erstellt eine korrigierte neue Version davon. Dies kann dazuführen, dass ein Remote den Commit nicht mehr annimmt, da die History nicht mehr übereinstimmt. Aber mehr dazu später.)&lt;/p>
&lt;p>Um eine gestagte Datei wieder zu modified (aber eben nicht gestaged) zu verschieben kann man &lt;code>git reset HEAD &amp;lt;file&amp;gt;&lt;/code> verwenden. Um die Änderungen einer Datei rückgängig zu machen (also modified zu unmodified)
kann sie neu ausgecheckt werden mit &lt;code>git checkout -- &amp;lt;file&amp;gt;&lt;/code>. &lt;strong>Achtung&lt;/strong> Alle Änderungen seit dem letzte Commit gehen damit verloren!!! Wenn man sich an die beiden Befehle gerade mal nicht erinnern kann, dann kann man einfach ein &lt;code>git status&lt;/code> eingeben und den Hilfetext studieren 😉.&lt;/p>
&lt;h2 id="mit-remotes-arbeiten">Mit Remotes arbeiten&lt;/h2>
&lt;p>Um mit anderen an einem Git-Projekt mitarbeiten zu können, braucht es Remotes, sprich eine Version des Projekts im Netzwerk, wo alle Beteiligten ihre Änderungen hin pushen und die Änderungen der Anderen pullen können.&lt;/p>
&lt;p>Nachdem man ein Repo gecloned hat sieht man ein Remote, man kann jedoch auch weitere definieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">$ git clone git@github.com:puzzle-bbt/training-sbb-puzzle.git
Cloning into &lt;span style="color:#e6db74">&amp;#39;training-sbb-puzzle&amp;#39;&lt;/span>...
remote: Enumerating objects: 8485, &lt;span style="color:#66d9ef">done&lt;/span>.
remote: Counting objects: 100% &lt;span style="color:#f92672">(&lt;/span>8485/8485&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#66d9ef">done&lt;/span>.
remote: Compressing objects: 100% &lt;span style="color:#f92672">(&lt;/span>5276/5276&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#66d9ef">done&lt;/span>.
remote: Total &lt;span style="color:#ae81ff">8485&lt;/span> &lt;span style="color:#f92672">(&lt;/span>delta 3095&lt;span style="color:#f92672">)&lt;/span>, reused &lt;span style="color:#ae81ff">8456&lt;/span> &lt;span style="color:#f92672">(&lt;/span>delta 3079&lt;span style="color:#f92672">)&lt;/span>, pack-reused &lt;span style="color:#ae81ff">0&lt;/span>
Receiving objects: 100% &lt;span style="color:#f92672">(&lt;/span>8485/8485&lt;span style="color:#f92672">)&lt;/span>, 17.06 MiB | 5.11 MiB/s, &lt;span style="color:#66d9ef">done&lt;/span>.
Resolving deltas: 100% &lt;span style="color:#f92672">(&lt;/span>3095/3095&lt;span style="color:#f92672">)&lt;/span>, &lt;span style="color:#66d9ef">done&lt;/span>.
$ cd training-sbb-puzzle
$ git remote
origin
$ git remote -v
origin git@github.com:puzzle-bbt/training-sbb-puzzle.git &lt;span style="color:#f92672">(&lt;/span>fetch&lt;span style="color:#f92672">)&lt;/span>
origin git@github.com:puzzle-bbt/training-sbb-puzzle.git &lt;span style="color:#f92672">(&lt;/span>push&lt;span style="color:#f92672">)&lt;/span>
$ git remote add private git remote add private git@github.com:Lehrling/training-sbb-puzzle.git
$ git remote -v
origin git@github.com:puzzle-bbt/training-sbb-puzzle.git &lt;span style="color:#f92672">(&lt;/span>fetch&lt;span style="color:#f92672">)&lt;/span>
origin git@github.com:puzzle-bbt/training-sbb-puzzle.git &lt;span style="color:#f92672">(&lt;/span>push&lt;span style="color:#f92672">)&lt;/span>
private git@github.com:Lehrling/training-sbb-puzzle.git &lt;span style="color:#f92672">(&lt;/span>fetch&lt;span style="color:#f92672">)&lt;/span>
private git@github.com:Lehrling/training-sbb-puzzle.git &lt;span style="color:#f92672">(&lt;/span>push&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wollen wir nun alle Information holen, welches der Lehrling hat, jedoch noch nicht im Repo sind kann man dies mit &lt;code>git fetch private&lt;/code> ausführen.&lt;/p>
&lt;h3 id="fetching-und-pulling">Fetching und Pulling&lt;/h3>
&lt;p>Es gibt zwei Arten, wie man Daten von einem Remote abholen kann, nach dem man das Repo gecloned hat.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>git fetch &amp;lt;remote&amp;gt;&lt;/code>: holt alle Änderungen vom Remote seit dem letzten abholen und speichert die lokal. Wichtig zu beachten ist, dass &lt;code>git fetch&lt;/code> die Änderungen nicht mit den lokalen Änderungen zusammenfügt, sondern dies manuell ausgeführt werden muss.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>git pull&lt;/code>: Wenn der lokale Branch mit einem remote Branch verknüpft ist, holt &lt;code>git pull&lt;/code> die Änderungen dieses remotes und fügt sie gleich mit den Änderungen im lokalen Branch zusammen (merge). Was Branches sind und wie ein Merge funktioniert schauen wir uns in kürze an, nur soviel, wird ein Repo gecloned, wird der lokale sogenannte &lt;code>master&lt;/code> Branch mit dem &lt;code>master&lt;/code> Branch des &lt;code>origin&lt;/code> Remotes verknüpft.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="pushen">Pushen&lt;/h3>
&lt;p>Wenn man seine Änderungen soweit hat, dass man sie mit dem Rest vom Team teilen will, dann kann man diese mit &lt;code>git push &amp;lt;remote&amp;gt; &amp;lt;branch&amp;gt;&lt;/code> auf den Server laden. Dies funktioniert jedoch nur, wenn man auf dem Server auch Schreibrechte hat und niemand anderes vor einem gepusht hat.&lt;/p></description></item><item><title>Docs: Java Grundlagen</title><link>/docs/java/java-grundlagen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/java/java-grundlagen/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich weiss, was eine Klasse ist&lt;/li>
&lt;li>Ich weiss, was Variablen und Datentypen sind&lt;/li>
&lt;li>Ich kenne die primitiven Datentypen in Java: boolean, byte, short, int, long, double, float, char&lt;/li>
&lt;li>Ich kenne die Klasse String&lt;/li>
&lt;li>Ich kenne Arrays und kann diese instanzieren, ihnen Werte von Indexen entnehmen und Werte an Indexe zuweisen&lt;/li>
&lt;li>Ich kann eine Variable deklarieren und initialisieren&lt;/li>
&lt;li>Ich kenne den Unterschied zwischen statischen und nicht statischen Elementen&lt;/li>
&lt;li>Ich weiss, wann ich das Schlüsselwort static verwenden sollte und wann nicht&lt;/li>
&lt;li>Ich kenne den Zugriff auf statische und nicht statische Elemente&lt;/li>
&lt;li>Ich weiss, was eine statische Methode ist und kann sie aufrufen&lt;/li>
&lt;li>Ich weiss, was eine Utility-Klasse ist und kenne deren wichtigste Bestandteile&lt;/li>
&lt;li>Ich verstehe den Unterschied zwischen Methoden mit und ohne Rückgabewert&lt;/li>
&lt;li>Ich kann eine Methodensignatur für Methoden mit und ohne Rückgabewert richtig schreiben&lt;/li>
&lt;li>Ich kann Methoden schreiben, die Parameter entgegennehmen&lt;/li>
&lt;li>Ich weiss, dass jede Anweisung mit einem Strichpunkt abgeschlossen werden muss&lt;/li>
&lt;li>Ich weiss, dass geschweifte Klammern einen Block definieren und ich verwende sie in jeder Kontrollstruktur, um die Code-Blocks voneinander abzugrenzen (lieber zu viel klammern als zu wenig)&lt;/li>
&lt;li>Ich kenne die Main-Methode und weiß, warum eine Applikation nur EINE Main-Methode haben sollte&lt;/li>
&lt;li>Ich kenne die Methode &amp;lsquo;System.out.println&amp;rsquo; und kann sie anwenden&lt;/li>
&lt;li>Ich kann eine Eingabe von der Konsole lesen und in einer Variablen speichern&lt;/li>
&lt;li>Ich kann arithmetische Ausdrücke schreiben: Addition, Subtraktion, Multiplikation, Division, Modulo (Rest einer Division)&lt;/li>
&lt;li>Ich kenne die relationalen Operatoren: ==, &amp;gt;=, &amp;lt;=, &amp;gt;, &amp;lt;, !=&lt;/li>
&lt;li>Ich kenne die booleschen Operatoren: &amp;amp;&amp;amp; (AND), || (OR), ! (NOT), ^(XOR)&lt;/li>
&lt;li>Ich weiß, was eine bedingte Anweisung ist und kann sie korrekt anwenden&lt;/li>
&lt;li>Ich kann eine Schleife programmieren: for, foreach, while und do-while&lt;/li>
&lt;li>Ich kenne die switch-Anweisung&lt;/li>
&lt;/ul>
&lt;h4 id="cheatsheet-zum-herunterladen">Cheatsheet zum Herunterladen&lt;/h4>
&lt;p>&lt;a href="../java-grundlagen/cheatsheet.pdf">Core Java Cheatsheet&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="einführung">Einführung&lt;/h2>
&lt;h3 id="was-ist-java">Was ist Java?&lt;/h3>
&lt;p>Java ist eine objektorientierte Programmiersprache, die schon seit ca. zwei Jahrzehnten große Popularität genießt.
Die Entwicklung von Java begann Anfang der 1990er-Jahre beim US-amerikanischen Hard- und Softwarehersteller Sun Microsystems.
1995 wurde die erste Version veröffentlicht. 2010 wurde Sun Microsystems von Oracle übernommen.
Gegenwärtig erscheinen im Halbjahrestakt neue Java-Versionen; die neuste Version, Java 17, wurde im September 2022 veröffentlicht.&lt;/p>
&lt;hr>
&lt;h3 id="wichtigste-merkmale-von-java">Wichtigste Merkmale von Java&lt;/h3>
&lt;h4 id="plattformunabhängigkeit-write-once-run-anywhere">Plattformunabhängigkeit: «Write once, Run anywhere»&lt;/h4>
&lt;p>Der Compiler wandelt den Quellcode in Bytecode um (Kompilat) und anschliessend führt die Java Virtual Machine (JVM) den Bytecode aus.
Jedes Betriebssystem hat eine andere JVM, aber jede JVM kann den Bytecode ausführen, daher kann ein- und dieselbe Java-Anwendung auf Windows, Linux, Mac OS und anderen Plattformen lauffähig sein.&lt;/p>
&lt;h4 id="mehrfach-paradigma">Mehrfach-Paradigma&lt;/h4>
&lt;p>Java ist in erster Linie eine objektorientierte und imperative Programmiersprache, bei der fast alles ein Objekt einer Klasse (eines Typs) ist.
Wir können ein typisches Java-Programm als eine Menge von interagierenden Objekten betrachten. Die Objekte können Entitäten aus der realen Welt oder eine Art von Programmierabstraktionen darstellen.
Wenn wir ein Programm schreiben, erklären wir, wie die Objekte miteinander interagieren sollen.
Java unterstützt aber auch andere Programmierparadigmen, darunter generische Programmierung, parallele Programmierung, funktionale Programmierung (teilweise unterstützt) und andere.&lt;/p>
&lt;h4 id="ausführbarer-bytecode">Ausführbarer Bytecode&lt;/h4>
&lt;p>Eine kompilierte Klasse, welche bestimmte Voraussetzungen erfüllt (dazu später), kann eigenständig ausgeführt werden.
Applikationen und Klassenbibliotheken bestehen oft aus mehreren Klassen und werden als Java Archive (JAR-Datei genannt) verpackt, verteilt und bereitgestellt.
Eine JAR-Datei ist technisch gesehen eine komprimierte Datei in ZIP-Format und kann auch so erstellt werden, dass sie von der JVM ausgeführt werden kann.&lt;/p>
&lt;h4 id="klassenpfad">Klassenpfad&lt;/h4>
&lt;p>Um den Bytecode ausführen zu können, muss die JVM wissen wo sich dieser befindet.
Damit die JVM nicht überall suchen muss, wird mit einem Klassenpfad (Classpath) angegeben, wo sie nach dem Bytecode suchen soll.
Der Klassenpfad besteht aus einer Liste von Ordnern und .jar Dateien (sog. Java-Archive) und kann entweder als Parameter bei der Ausführung des Programms oder als eine Umgebungsvariable angegeben werden.&lt;/p>
&lt;h4 id="garbage-collector">Garbage Collector&lt;/h4>
&lt;p>Der Garbage Collector (Teil der JVM) führt zur Laufzeit eine automatische Speicherbereinigung von unbenutzten Objekten durch. Der Entwickler muss sich also nicht um das Aufräumen von unbenutzen Objekten kümmern.&lt;/p>
&lt;h4 id="multithreading">Multithreading&lt;/h4>
&lt;p>Java unterstützt Multithreading auf der Ebene der Sprache und der Standardbibliothek. Es ermöglicht die gleichzeitige und parallele Ausführung mehrerer Teile eines Java-Programms.&lt;/p>
&lt;hr>
&lt;h3 id="code-compile-run">Code, Compile, Run&lt;/h3>
&lt;p>Ein/e Java-Entwickler/in schreibt ein Programm in eine Textdatei mit der Erweiterung .java. Ein Programm kann eine Vielzahl solcher Dateien enthalten. Dann übersetzt der Compiler (normalerweise javac) das Programm in eine .class-Datei, die den Bytecode des Programms enthält. Danach führt die JVM das Programm aus und gibt Low-Level-Befehle an den Computer. Der Computer ist hier eine Abstraktion, welche ein Server, ein PC oder sogar ein mobiles Gerät sein kann.
Tatsächlich sind die Prozesse komplexer, als hier gezeigt wird. Es ist wichtig, Folgendes zu verstehen: Der Teil vor der JVM ist plattformunabhängig, der Teil nach der JVM ist plattformabhängig.
&lt;img src="../java-grundlagen/code-compile-run.png" alt="">&lt;/p>
&lt;hr>
&lt;h2 id="terminologie">Terminologie&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Begriff&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Programm&lt;/td>
&lt;td>Eine Folge von Anweisungen (engl. “statement”), welche nacheinander ausgeführt werden (von oben nach unten)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Anweisung (statement)&lt;/td>
&lt;td>Eine einzelne Aktion, wie zum Beispiel das Ausgeben eines Satzes auf der Konsole. Ein Statement wird mit einem Semikolon abgeschlossen&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Block&lt;/td>
&lt;td>Eine Gruppe von keiner, einer oder mehreren Anweisungen, die von geschweiften Klammern {&amp;hellip;} umgeben ist&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Methode&lt;/td>
&lt;td>Was in anderen Programmiersprachen als «Funktion» bezeichnet wird, heißt in Java «Methode». Eine Methode ist eine Folge von Anweisungen, welche eine bestimmte Aufgabe ausführt (auch bekannt als Unterprogramm oder Prozedur)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Syntax&lt;/td>
&lt;td>Eine Reihe von Regeln, die definieren wie ein Programm geschrieben werden muss, um gültig zu sein. Es handelt sich um eine Art Grammatik&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Keyword&lt;/td>
&lt;td>Ein Wort, welches in der Programmiersprache eine besondere Bedeutung hat (public, class und viele andere). Diese Wörter können nicht als Variablennamen verwendet werden&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Bezeichner (identifier) oder Name&lt;/td>
&lt;td>Ein Wort, das sich auf etwas in einem Programm bezieht (z. B. eine Variable oder einen Methodennamen)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kommentar&lt;/td>
&lt;td>Eine Erklärung dazu, was eine bestimmte Anweisung oder Methode macht. Einzeilige Java-Kommentare beginnen mit // und mehrzeilige sind von den Zeichen /* */ umgeben&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Whitespace&lt;/td>
&lt;td>Tabulator- oder Leerzeichen dienen lediglich der Lesbarkeit, vom Compiler werden sie ignoriert&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="hello-world">Hello World&lt;/h2>
&lt;p>Anhand des simplen Hello-World-Programms können wir bereits vieles über die zentralen Bestandteile einer Java-Anwendung erklären. Der folgende Sourcecode ist in einer Datei mit dem Namen HelloWorld.java abgelegt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HelloWorld&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Hello, world!&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Bei diesem Beispiel arbeiten wir uns nun von aussen nach innen vor. Der erste Teil definiert eine neue Klasse mit dem Namen &lt;em>HelloWorld&lt;/em>. Die Deklaration der Klasse besteht aus dem Zugriffsmodifizierer &lt;em>public&lt;/em> (dazu später mehr) gefolgt vom Keyword &lt;em>class&lt;/em> und dem Klassennamen. Jede Java-Datei darf nur eine Klasse mit dem Zugriffsmodifizierer &lt;em>public&lt;/em> enthalten, weitere Klassen ohne &lt;em>public&lt;/em> sind jedoch erlaubt. Der Name der Klasse mit dem Modifizierer &lt;em>public&lt;/em> muss stets mit dem Dateinamen übereinstimmen. Der Klassenname wird stets gross geschrieben, einzelne Wörter werden durch einen erneuten Grossbuchstaben getrennt. Dies wird CamelCase genannt. Der &lt;em>Block&lt;/em> der Klasse wird durch geschweifte Klammern angegeben.&lt;/p>
&lt;p>Innerhalb der Klasse wird nun eine Main-Methode definiert. Diese Methode ist der Einstiegspunkt eines jeden Java-Programms. Nur über eine solche Methode kann eine Java-Anwendung gestartet werden. Die Methode besteht aus dem Zugriffsmodifizierer &lt;em>public&lt;/em>, dem Keyword &lt;em>static&lt;/em>, dem Rückgabewert &lt;em>void&lt;/em> und dem Methodennamen &lt;em>main&lt;/em>.
An den Namen der Methode schliesst sich ein paar runde Klammern an. Innerhalb dieser Klammern befinden sich die &lt;em>Parameter&lt;/em> der Methode, in diesem Fall handelt es sich um ein &lt;em>String&lt;/em>-&lt;em>Array&lt;/em>. Die Angabe der genannten Teile einer Methode nennt man Methodensignatur. Der &lt;em>Block&lt;/em> der Methode wird durch geschweifte Klammern angegeben. Die Main-Methode hat immer die oben gezeigte Signatur.&lt;/p>
&lt;p>Innerhalb der Main-Methode sehen wir ein einzelnes Statement. Es besteht aus einer einfachen Anweisung, welche den Text &amp;ldquo;Hello, world!&amp;rdquo; auf die Kommandozeile ausgibt.
Die statische Methode &lt;em>println()&lt;/em> auf dem öffentlich zugänglichen &lt;em>Feld&lt;/em> der Klasse &lt;em>System&lt;/em> dient dazu Text auf der Konsole auszugeben. Das Statement wird mit einem Semikolon abgeschlossen.&lt;/p>
&lt;hr>
&lt;h2 id="variablen">Variablen&lt;/h2>
&lt;h4 id="namensgebung">Namensgebung&lt;/h4>
&lt;p>Variablen dienen dazu Werte aufzunehmen. Je nach &lt;em>Scope&lt;/em> leben diese Variablen unterschiedlich lang. Zur Benennung von Variablen gibt es vier Regeln:&lt;/p>
&lt;ul>
&lt;li>Variablennamen beginnen mit einem Kleinbuchstaben&lt;/li>
&lt;li>Ein Variablenname darf die Buchstaben A-Z und a-z enthalten&lt;/li>
&lt;li>Ein Variablenname darf beliebige Zahlen von 0-9 enthalten&lt;/li>
&lt;li>Ein Variablenname darf die Sonderzeichen $ und _ enthalten&lt;/li>
&lt;/ul>
&lt;h4 id="best-practices">Best Practices&lt;/h4>
&lt;p>Der Name einer Variable sollte so gewählt werden, dass klar ist, welcher Wert darin gespeichert wird. Als Beispiel wählen wir den Namen &lt;em>sum&lt;/em> für eine Variable, welche das Resultat einer Addition enthält.&lt;/p>
&lt;h4 id="deklaration">Deklaration&lt;/h4>
&lt;p>Unter der Deklaration einer Variable versteht man das erste &amp;ldquo;Erwähnen&amp;rdquo; einer Variable. In einer statisch typisierten Sprache wie Java bedeutet dies, dass der Typ der Variable festgelegt wird. Der Wert selbst muss bei der Deklaration je nach &lt;em>Scope&lt;/em> nicht festgelegt werden. Zur Laufzeit wird für die Variable ein Bereich im Arbeitsspeicher reserviert. Hier werden später Werte, die der Variablen zugewiesen werden, gespeichert. Die Größe des Speicherbereichs hängt vom Typ der Variable ab.&lt;/p>
&lt;p>Formal gilt:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;variable type&amp;gt; &amp;lt;variable identifier&amp;gt;;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wir geben also den Datentyp und den Namen der Variable an.&lt;/p>
&lt;h4 id="initialisierung">Initialisierung&lt;/h4>
&lt;p>Unter dem Begriff Initialisierung wird die direkte Zuweisen eines Wertes bei der Deklaration einer Variablen verstanden.
Lokale Variablen (Variablen, die lediglich innerhalb einer Methode gültig sind) müssen initialisiert werden, bevor sie verwendet werden können.&lt;/p>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> firstSummand &lt;span style="color:#f92672">=&lt;/span> 2&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> secondSummand&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> sum &lt;span style="color:#f92672">=&lt;/span> firstSummand &lt;span style="color:#f92672">+&lt;/span> secondSummand&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Variable &lt;strong>secondSummand&lt;/strong> wurde nicht initialisiert. Die Zuweisung &lt;strong>int sum = firstSummand + secondSummand&lt;/strong> wird also nicht funktionieren.&lt;/p>
&lt;h4 id="deklaration-mit-initialisierung">Deklaration mit Initialisierung&lt;/h4>
&lt;p>Wir können eine Variable nacheinander deklarieren und dann initialisieren oder beides zusammen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span> number&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// 1. Deklaration
&lt;/span>&lt;span style="color:#75715e">&lt;/span>number &lt;span style="color:#f92672">=&lt;/span> 2&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// 2. Initialisierung
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> number &lt;span style="color:#f92672">=&lt;/span> 2&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// beides in einer Zeile
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Formal:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;lt;variable type&amp;gt; &amp;lt;variable identifier&amp;gt; = &amp;lt;initial value&amp;gt;;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="datentypen">Datentypen&lt;/h2>
&lt;p>In Java sind Variablen stark typisiert. Das heisst, dass alle Variablen bei ihrer Erstellung mit einem Datentyp versehen werden müssen.
Seit Java 10 gibt es Typinferenz für lokale Variablen, das heisst, eine lokale Variable kann deklariert und initialisiert werden (muss gleichzeitig geschehen), ohne dass ein Datentyp angegeben werden muss - anstelle des Datentyps kann &lt;em>var&lt;/em> verwendet werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">var sum &lt;span style="color:#f92672">=&lt;/span> 20&lt;span style="color:#f92672">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Es gibt zwei Arten von Datentypen: Primitive Datentypen und Referenztypen. Der grundlegende Unterschied besteht darin, dass eine primitive Variable den tatsächlichen Wert speichert, während eine Referenzvariable die Adresse des Objekts speichert, auf welches sie sich bezieht. Dies hat mit dem Java Memory Modell zu tun. Das nachfolgende Bild zeigt das Java Memory Modell als einfache Darstellung, es besteht grundsätzlich aus dem Stack Memory und dem Heap Space. Primitive Datentypen werden nur auf dem Stack angelegt. Objekte, wie das im Bild gezeigte Auto (Car), sind im Heap abgelegt. Die Referenz auf das Objekt wird auf dem Stack angelegt. Die Referenz &amp;ldquo;zeigt&amp;rdquo; also auf das Objekt im Heap.
&lt;img src="../java-grundlagen/Datentypen.png" alt="">&lt;/p>
&lt;p>Dieser fundamentale Unterschied ist relevant beim Vergleich von Werten und Referenzen. Der Operator für den Vergleich ==, vergleicht stets die Werte auf dem Stack miteinander. Bei Referenzen wird dort also überprüft, ob sie auf dasselbe Objekt zeigen. Wenn der Inhalt von Objekten verglichen werden soll, so muss dies mit der Methode &lt;em>equals&lt;/em> gemacht werden.&lt;/p>
&lt;hr>
&lt;h3 id="primitive-datentypen">Primitive Datentypen&lt;/h3>
&lt;h4 id="integraler-datentyp">Integraler Datentyp&lt;/h4>
&lt;p>Integrale Datentypen sind immer ganze Zahlen, sie besitzen also keine Nachkommastellen.
Die folgenden Datentypen speichern ganzzahlige Werte, sie unterscheiden sich nur in ihrer Grösse:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Datentyp&lt;/th>
&lt;th>Speicherbedarf&lt;/th>
&lt;th>Bereich&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>byte&lt;/td>
&lt;td>8 Bit&lt;/td>
&lt;td>-128 &amp;hellip; 127&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>short&lt;/td>
&lt;td>16 Bit&lt;/td>
&lt;td>-32768 &amp;hellip; 32767&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>int&lt;/td>
&lt;td>32 Bit&lt;/td>
&lt;td>-2 147 483 648 &amp;hellip; 2 147 483 647 (-2^31 &amp;hellip; 2^31-1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>long&lt;/td>
&lt;td>64 Bit&lt;/td>
&lt;td>-2^63 &amp;hellip; 2^63-1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>In den Werten von integralen Datentypen sind Underscores erlaubt, um die Lesbarkeit zu erhöhen (1_000_000).&lt;/p>
&lt;p>Beispiele:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span> count &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> million &lt;span style="color:#f92672">=&lt;/span> 1_000_000&lt;span style="color:#f92672">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="gleitkomma-datentyp">Gleitkomma-Datentyp&lt;/h4>
&lt;p>Gleitkomma-Datentypen speichern wie der Name bereits sagt, Zahlen mit Nachkommastellen. Diese Zahlen besitzen nur eine bestimmte Genauigkeit, sie dürfen also nicht als unendlich genau betrachtet werden.
Die folgenden Datentypen speichern Zahlen mit Nachkommastellen, sie unterscheiden sich in ihrer Grösse und der Art und Weise wie sie innerhalb von Java abgelegt werden:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Datentyp&lt;/th>
&lt;th>Speicherbedarf&lt;/th>
&lt;th>Bereich&lt;/th>
&lt;th>Interne Ablage&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>float&lt;/td>
&lt;td>32 Bit&lt;/td>
&lt;td>+/-1,4E-45 &amp;hellip; +/-3,4E+38&lt;/td>
&lt;td>Dezimalbruch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double&lt;/td>
&lt;td>64 Bit&lt;/td>
&lt;td>+/-4,9E-324 &amp;hellip; +/-1,7E+308&lt;/td>
&lt;td>Gleitkommazahl&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Beispiele:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">float&lt;/span> radius &lt;span style="color:#f92672">=&lt;/span> 8&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">5f&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">double&lt;/span> area &lt;span style="color:#f92672">=&lt;/span> 16&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">48739d&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Trotz Nachkommastellen dürfen Fliesskommzahlen des Typs float niemals zur Berechnung von Währungen verwendet werden. Innerhalb von Java wird ein float stets als Dezimalbruch geführt und die Ungenauigkeit verunmöglicht es diesen Datentyp für Währungsrechnungen zu verwenden.&lt;/p>
&lt;h4 id="zeichen-datentyp">Zeichen-Datentyp&lt;/h4>
&lt;p>Ein &lt;strong>char&lt;/strong> ist ein (vorzeichenloser) 16-Bit-Integer-Datentyp, der ein einzelnes Zeichen darstellt. Dieser Datentyp erlaubt die Repräsentation von Zeichen im so genannten Unicode-Zeichensatz.&lt;/p>
&lt;p>Ein einzelnes Zeichen kann eine Ziffer, einen Buchstaben oder ein anderes Symbol sein. Um ein Zeichen zu schreiben, verwenden wir einfache Anführungszeichen wie folgt:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;, &amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;, &amp;#39;z&amp;#39;, &amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;9&amp;#39;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Zeichenliterale können Symbole eines Alphabets, Ziffern von &amp;lsquo;0&amp;rsquo; bis &amp;lsquo;9&amp;rsquo;, Whitespaces (' &amp;lsquo;) oder andere Zeichen oder Symbole ('$') darstellen. Verwechsle nicht die Zeichen, die Zahlen (&amp;lsquo;9&amp;rsquo;) darstellen mit den Zahlen selbst (9).
Ein Zeichen kann nicht zwei und mehr Ziffern oder Buchstaben enthalten, da es nur ein einziges Symbol darstellt.&lt;/p>
&lt;p>Wir können Zeichen auf verschiedene Arten initialisieren:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Beschreibung&lt;/th>
&lt;th>Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Einfache Anführungszeichen&lt;/td>
&lt;td>&lt;code>char A = 'A';&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Wir können ein Char-Literal als Integral-Literal angeben, das den Unicode-Wert des Zeichens darstellt, und Integral-Literale können entweder in Dezimal-, Oktal- oder Hexadezimalform angegeben werden.Der zulässige Bereich liegt zwischen 0 und 65535.&lt;/td>
&lt;td>&lt;code>char A = 65;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>In der Unicode-Darstellung &lt;code>'\\uxxxx'&lt;/code> können Zeichenliterale angegeben werden. Hier steht xxxx für 4 Hexadezimalzahlen.&lt;/td>
&lt;td>&lt;code>char A = '\u0041';&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Beispiele:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">char&lt;/span> letter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">char&lt;/span> point &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;.&amp;#39;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
letter&lt;span style="color:#f92672">++;&lt;/span> &lt;span style="color:#75715e">// &amp;#39;b&amp;#39;
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="_dont-get-confused_">&lt;em>Don’t get confused:&lt;/em>&lt;/h5>
&lt;ul>
&lt;li>123 ist ein Integer, &amp;ldquo;123&amp;rdquo; ist ein String;&lt;/li>
&lt;li>&amp;lsquo;A&amp;rsquo; ein Zeichen (char), &amp;ldquo;A&amp;rdquo; ist ein String;&lt;/li>
&lt;li>&amp;lsquo;1&amp;rsquo; ist ein Zeichen (char), 1 ist ein Integer;&lt;/li>
&lt;/ul>
&lt;h4 id="logischer-datentyp">Logischer Datentyp&lt;/h4>
&lt;p>Dieser Datentyp bezieht sich nur auf die zwei Werte &lt;em>true&lt;/em> und &lt;em>false&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">boolean&lt;/span> done &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> isBigger &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="referenztypen">Referenztypen&lt;/h3>
&lt;p>Nebst primitiven Datentypen gibt es Referenzdatentypen. Eine Variable diesen Typs enthält nicht die Werte selbst wie eine Variable primitiven Typs, sondern nur einen Verweis (Referenz) auf den&lt;br>
Speicherort der Daten. Der Standardwert von Referenzvariablen ist null, welcher besagt, dass die Variable auf kein Objekt verweist.&lt;/p>
&lt;p>Es gibt zwei Unterarten von Referenztypen:&lt;/p>
&lt;ol>
&lt;li>Array: Eine Datenstruktur fester Grösse, die dazu dient, mehrere Elemente gleichen Typs zu speichern&lt;/li>
&lt;li>Objektdatentyp, repräsentiert ein beliebiges Objekt&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h4 id="arrays">Arrays&lt;/h4>
&lt;h5 id="definition">Definition&lt;/h5>
&lt;p>Häufig benötigen Software-Entwickler mehrere zusammengehörige Variablen desselben Datentyps, die logisch oder verwaltungstechnisch zusammengehören. Es wäre aber sehr aufwendig, diese Variablen alle einzeln zu deklarieren und zu verarbeiten. Zudem ist es möglich, dass die Anzahl an Objekten noch unbekannt ist und erst bei der Ausführung des Programms definiert wird. Deswegen wird in Java, wie in anderen Programmiersprachen auch, die Verwendung von Arrays unterstützt. In Arrays lassen sich beliebige primitiven Datentypen und Objekte speichern und systematisch bearbeiten. Alle Variablen haben einen gemeinsamen Namen, werden aber über unterschiedliche Indizes angesprochen.&lt;/p>
&lt;h5 id="deklaration-1">Deklaration&lt;/h5>
&lt;p>Die Deklaration eines Arrays enthält folgende Bestandteile:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Reihenfolge&lt;/th>
&lt;th>Bedeutung&lt;/th>
&lt;th>Beispiel&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1.&lt;/td>
&lt;td>Typ&lt;/td>
&lt;td>&lt;code>String, int, double, char, ...&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2.&lt;/td>
&lt;td>Eckige Klammern&lt;/td>
&lt;td>&lt;code>[]&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3.&lt;/td>
&lt;td>Bezeichner / Namen&lt;/td>
&lt;td>&lt;code>words, numbers, values, letters...&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">String&lt;span style="color:#f92672">[]&lt;/span> words&lt;span style="color:#f92672">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="länge-eines-arrays">Länge eines Arrays&lt;/h5>
&lt;p>Die Anzahl der Elemente in einem Array wird als Länge eines Arrays bezeichnet. Diese Länge wird zum Zeitpunkt der Erstellung eines Arrays einmal festgelegt. Sie kann später in einem Programm nur durch Definition eines neuen Arrays und dem Kopieren von Werten geändert werden.&lt;/p>
&lt;p>Wir können die Länge eines Arrays mithilfe einer in Java integrierten Funktionalität überprüfen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">words&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="indizierung">Indizierung&lt;/h5>
&lt;p>Die Indizes in einem Array reichen immer von 0 bis length-1. Ein Array mit den ersten 100 natürlichen Zahlen hat beispielsweise eine Länge von 100 und Indizes von 0 bis 99.&lt;/p>
&lt;h5 id="syntax">Syntax&lt;/h5>
&lt;p>In Java müssen wir zum Zeitpunkt der Deklaration eines Arrays folgendes angeben:&lt;/p>
&lt;ul>
&lt;li>den Datentyp&lt;/li>
&lt;li>den Namen&lt;/li>
&lt;/ul>
&lt;p>und zum Zeitpunkt der Initialisierung:&lt;/p>
&lt;ul>
&lt;li>die Größe&lt;/li>
&lt;/ul>
&lt;p>Syntaktisch können wir ein Array eines ganzzahligen Datentyps auf folgende Weise deklarieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">String&lt;span style="color:#f92672">[]&lt;/span> words&lt;span style="color:#f92672">;&lt;/span>
String words&lt;span style="color:#f92672">[];&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die zweite Form wird bei uns nicht verwendet.&lt;/p>
&lt;p>Dieser Code deklariert die Variable &lt;em>words&lt;/em>, erstellt das Array-Objekt jedoch noch nicht. Der Operator &lt;em>new&lt;/em> wird in Java zum Erstellen von neuen Objekten verwendet.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">String&lt;span style="color:#f92672">[]&lt;/span> words &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> String&lt;span style="color:#f92672">[&lt;/span>5&lt;span style="color:#f92672">];&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Damit wird ein Array-Objekt der Länge 5 instanziiert. Die fünf Elemente dieses Arrays wurden mit Standardwerten initialisiert. Bei einem Array des Datentyps String ist der Default-Wert null. Alle Werte im Array werden also mit null aufgefüllt.&lt;/p>
&lt;p>Wir können auch direkt die Werte der Array-Elemente angeben:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">String&lt;span style="color:#f92672">[]&lt;/span> words &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hai&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Oktopus&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Rochen&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Wal&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Fisch&amp;#34;&lt;/span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Es wird also ein Array mit der Grösse 5 und den angegebenen Werten erstellt.&lt;/p>
&lt;h5 id="zugriff-auf-elemente">Zugriff auf Elemente&lt;/h5>
&lt;p>Wenn wir den Wert eines Elements in unserem Array verändern möchten, geschieht dies folgendermaßen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">words&lt;span style="color:#f92672">[&lt;/span>index&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> value&lt;span style="color:#f92672">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn wir den Wert eines Array-Elements in einer Variablen außerhalb des Arrays speichern wollen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">String value &lt;span style="color:#f92672">=&lt;/span> words&lt;span style="color:#f92672">[&lt;/span>index&lt;span style="color:#f92672">];&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h4 id="string">String&lt;/h4>
&lt;p>Eine Variable, die eine Zeichenkette enthält, hat den Typ String.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">String hello &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello, Java&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Diese Zeichenkette besteht aus 11 Zeichen, einschließlich eines Leerzeichens. Wie wir hier ebenfalls sehen, müssen String-Literale von doppelten Anführungszeichen umgeben sein. Ein Objekt des Typs String ist unveränderlich, die Werte innerhalb eines Strings können also nach dessen Erstellung nicht mehr verändert werden.&lt;/p>
&lt;h5 id="methoden">Methoden&lt;/h5>
&lt;p>Der folgende Code zeigt die Verwendung einiger Methoden der Klasse String. Alle Methoden sind in der API unter &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html">java.lang.String&lt;/a> zu finden.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 36
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 37
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 38
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 39
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 40
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 41
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 42
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 43
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 44
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 45
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 46
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 47
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 48
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 49
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 50
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 51
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 52
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 53
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 54
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 55
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 56
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 57
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 58
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 59
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 60
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 61
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 62
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 63
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 64
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 65
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 66
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 67
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 68
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 69
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 70
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 71
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 72
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 73
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 74
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 75
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 76
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 77
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 78
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 79
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 80
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 81
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 82
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 83
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 84
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 85
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 86
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 87
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 88
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 89
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 90
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 91
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 92
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 93
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 94
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 95
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 96
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 97
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 98
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 99
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">100
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">101
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">102
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">103
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">104
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">105
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">106
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">107
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">108
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">109
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">110
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">111
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">112
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">113
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">114
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">115
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">116
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">117
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">118
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">119
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">120
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">121
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">122
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">123
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">124
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">StringMethoden&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
String house &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;house&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Returns the char value at the specified index (indexing starts from 0)
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">char&lt;/span> o &lt;span style="color:#f92672">=&lt;/span> house&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">charAt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>1&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Returns the length of this string.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> length &lt;span style="color:#f92672">=&lt;/span> house&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Returns true if and only if this string contains the specified sequence of char values
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> isContaining &lt;span style="color:#f92672">=&lt;/span> house&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">contains&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;us&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Returns the index within this string of the first occurrence of the specified character
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> indexChar &lt;span style="color:#f92672">=&lt;/span> house&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">indexOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;s&amp;#39;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Returns the index within this string of the first occurrence of the specified substring
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> indexSubstring &lt;span style="color:#f92672">=&lt;/span> house&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">indexOf&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;us&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Tests if this string starts with the specified prefix
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> startsWithPrefix &lt;span style="color:#f92672">=&lt;/span> house&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">startsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Ho&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// false
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">boolean&lt;/span> startsWithPrefix2 &lt;span style="color:#f92672">=&lt;/span> house&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">startsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ho&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Tests if this string ends with the specified suffix
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> endsWithSuffix &lt;span style="color:#f92672">=&lt;/span> house&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">endsWith&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;se&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// true
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Returns a new string resulting from replacing all occurrences of oldChar in this string with newChar
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
String mouse &lt;span style="color:#f92672">=&lt;/span> house&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">replace&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;h&amp;#39;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#39;m&amp;#39;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
String houseHouse &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;House, House&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
String mouseMouse &lt;span style="color:#f92672">=&lt;/span> houseHouse&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">replace&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#39;H&amp;#39;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#39;M&amp;#39;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Returns a new string that is a substring of this string, starting from the specified index
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
String applePearLemon &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Apple, pear, lemon&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
String pearLemon &lt;span style="color:#f92672">=&lt;/span> applePearLemon&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>7&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Returns a new string that is a substring of this string
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
String pear &lt;span style="color:#f92672">=&lt;/span> applePearLemon&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">substring&lt;/span>&lt;span style="color:#f92672">(&lt;/span>7&lt;span style="color:#f92672">,&lt;/span> 11&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Converts all of the characters in this String to upper case
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
String apple &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
String appleUpperCase &lt;span style="color:#f92672">=&lt;/span> apple&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toUpperCase&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// APPLE
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Converts all of the characters in this String to lower case.
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
String appleLowerCase &lt;span style="color:#f92672">=&lt;/span> apple&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toLowerCase&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// apple
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Splits this string around matches of the given regular expression, puts them in a String array
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
String applePear &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Apple, pear&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
String&lt;span style="color:#f92672">[]&lt;/span> fruits &lt;span style="color:#f92672">=&lt;/span> applePear&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">split&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;,\\s&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// \\s means whitespace
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Converts this string to a new character array
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;span style="color:#66d9ef">char&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> charArray &lt;span style="color:#f92672">=&lt;/span> applePearLemon&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toCharArray&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Compares this string to the specified object
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
String appleOne &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
String appleTwo &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Apple&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">boolean&lt;/span> isEqual &lt;span style="color:#f92672">=&lt;/span> appleOne&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">equals&lt;/span>&lt;span style="color:#f92672">(&lt;/span>appleTwo&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Compares two strings lexicographically.
&lt;/span>&lt;span style="color:#75715e"> * The comparison is based on the Unicode value of each character in the strings.
&lt;/span>&lt;span style="color:#75715e"> * The result is a negative integer if this String object lexicographically precedes the argument string.
&lt;/span>&lt;span style="color:#75715e"> * The result is a positive integer if this String object lexicographically follows the argument string.
&lt;/span>&lt;span style="color:#75715e"> * The result is zero if the strings are equal
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
String abcd &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;abcd&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
String cdef &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;cdef&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>abcd&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">compareTo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>cdef&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> 0&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>abcd &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; precedes &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> cdef&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>house&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">compareTo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>house&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">==&lt;/span> 0&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>house &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; is equal to &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> house&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>cdef&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">compareTo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>abcd&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>cdef &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; follows &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> abcd&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Capital letters precede lower case letters
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
String houseLowerCase &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;house&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
String houseUpperCase &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;HOUSE&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>houseLowerCase&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">compareTo&lt;/span>&lt;span style="color:#f92672">(&lt;/span>houseUpperCase&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> 0&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>houseUpperCase &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; precedes + &amp;#34;&lt;/span> houseLowerCase&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">/**
&lt;/span>&lt;span style="color:#75715e"> * Compares two strings lexicographically, ignoring case differences
&lt;/span>&lt;span style="color:#75715e"> */&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>houseLowerCase&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">compareToIgnoreCase&lt;/span>&lt;span style="color:#f92672">(&lt;/span>houseUpperCase&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="scanner">Scanner&lt;/h2>
&lt;p>Eine Möglichkeit, Benutzereingaben in Java vorzunehmen, besteht in der Verwendung der Scanner-Klasse, die verwendet wird, indem zuerst die Definition der Klasse wie in Zeile 1 importiert und dann ein Objekt dieser Klasse wie in Zeile 6 erstellt wird.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> java.util.Scanner&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TakeInput&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span> &lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Scanner scanner &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Scanner&lt;span style="color:#f92672">(&lt;/span>System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">in&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Enter your name: &amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
String name &lt;span style="color:#f92672">=&lt;/span> scanner&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextLine&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Your name is: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> name&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Zeile 1&lt;/strong>&lt;/p>
&lt;p>Der erste Schritt besteht darin, die Scanner-Klasse zu importieren, damit sie im folgenden Code verwendet werden kann. Die &lt;em>Java&lt;/em> Scanner-Klasse stammt aus dem Paket &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/package-summary.html">java.util&lt;/a>.
Es ist einfach zu bedienen, muss jedoch importiert werden, damit die Klasse funktioniert.&lt;/p>
&lt;p>&lt;strong>Zeile 6&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Wir deklarieren den Datentyp als &lt;em>Scanner&lt;/em> und geben ihm den Bezeichner &lt;em>scanner&lt;/em>&lt;/li>
&lt;li>Wir weisen der Variable scanner ein neues Objekt zu, welches den System-Eingabestream enthält (&lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/System.html#in">System.in&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Zeile 8&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Wir deklarieren eine Variable vom Datentyp String mit dem Bezeichner name&lt;/li>
&lt;li>Wir weisen der Variable name das Resultat der Methode &lt;em>scanner.nextLine()&lt;/em> zu&lt;/li>
&lt;li>Diese Methode nimmt die Tastatureingabe vom Benutzer auf der Kommandozeile entgegen. Sie wird beendet, wenn der Benutzer die Enter-Taste drückt&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="static--non-static">Static / Non-Static&lt;/h2>
&lt;p>Statische Elemente (Variablen und Methoden) existieren innerhalb des Java-Ökosystems pro Klasse nur einmal.
Es spielt also keine Rolle wie viele Objekte einer Klasse erzeugt werden, eine statische Variable bleibt über alle Instanzen stets gleich.&lt;/p>
&lt;p>Das folgende Beispiel soll dies zeigen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Student&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> numberOfStudents &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Student&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String name&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> name&lt;span style="color:#f92672">;&lt;/span>
numberOfStudents&lt;span style="color:#f92672">++;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Variable &lt;code>numberOfStudents&lt;/code> gibt es in Bezug auf die Klasse Student nur einmal. Der Zugriff erfolgt über den Namen der Klasse.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Student maria &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Student&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Maria&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Student&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">numberOfStudents&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// output will be 1
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
Student rick &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Student&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Rick&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Student&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">numberOfStudents&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// output will be 2
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Will man hingegen den Namen eines der Studenten holen, so erfolgt der Zugriff über die Instanz des entsprechenden Objektes.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Student maria &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Student&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Maria&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>maria&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// output will be &amp;#34;Maria&amp;#34;
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
Student rick &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Student&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Rick&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>rick&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span> &lt;span style="color:#75715e">// output will be &amp;#34;Rick&amp;#34;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Verwendung des Schlüsselworts &lt;code>this&lt;/code> ist in einem statischen Kontext nicht möglich, da dieser ja wie erwähnt keine Referenzen verwendet.&lt;/p>
&lt;h3 id="statische-methoden">Statische Methoden&lt;/h3>
&lt;p>Mittlerweile hast du bereits einige statische Methoden kennengelernt, wie zum Beispiel die Main-Methode oder die Methode println() der Klasse System oder die Methode valueOf() der String-Klasse.
Hier wollen wir uns nun genauer anschauen, was statische Methoden sind, denn diese wirst du unter anderem für das Lösen der Übungen benötigen.
Das Keyword &lt;em>static&lt;/em> ist ein sehr nützliches Werkzeug in Java. Bei statischen Methoden sind einige wichtige Punkte zu beachten.&lt;/p>
&lt;ul>
&lt;li>Diese Methoden gehören nicht zu einer Referenz von einem bestimmten Objekt&lt;/li>
&lt;li>Diese Methoden werden über den Klassennamen aufgerufen und nicht über eine Referenz von einem bestimmten Objekt&lt;/li>
&lt;/ul>
&lt;p>Wenn also in einem Methodenkopf das Keyword &lt;em>static&lt;/em> steht, dann weisst du, dass es sich um eine statische Methode handeln muss.
Schauen wir uns unterschiedliche Methodendeklarationen an (folgendes gilt für statische Methoden wie auch für nicht-statische Methoden):
Wenn eine Methode einen Wert an ihren Aufrufer zurückgeben soll, sprechen wir von einer Methode mit einem &lt;em>Rückgabewert&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> returnType &lt;span style="color:#a6e22e">methodName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> returnValue&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// der Typ des Rückgabewerts muss vom Typ sein, welcher im Methodenkopf steht
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wir sehen, dass in der Methodendeklaration angeben werden muss, welcher Typ zurückgegeben wird.&lt;/p>
&lt;p>Wenn eine Methode keinen Wert zurückgegeben soll, verwenden wir das Keyword &lt;em>void&lt;/em>:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das Keyword &lt;em>return&lt;/em> ist in Methoden ohne Rückgabewert weiterhin zulässig um die Methode zu verlassen. Die Angabe eines Rückgabewerts entfällt in diesem Fall.&lt;/p>
&lt;p>Wir können auch Werte einer Methode übergeben – hierbei sprechen wir von &lt;em>Parametern&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">methodName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>type identifier&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ein Parameter besteht immer aus dem Datentyp und einem Bezeichner. Wir können beliebig viele Parameter an eine Methode übergeben. Gemäss den SBB Code Conventions (Regeln für den Programmcode) sollte eine Methode nicht mehr als acht Parameter haben.&lt;/p>
&lt;h4 id="regeln">Regeln&lt;/h4>
&lt;ul>
&lt;li>Die Reihenfolge der Schlüsselwörter im Methodenkopf darf nicht verändert werden&lt;/li>
&lt;li>Bei der Auswahl des Methodennamens müssen die gleichen Regeln wie bei der Benennung einer Variablen eingehalten werden&lt;/li>
&lt;li>Keine doppelten Methoden: Jede Methodensignatur darf in einer Klasse nur einmal vorkommen&lt;/li>
&lt;/ul>
&lt;h4 id="aufruf">Aufruf&lt;/h4>
&lt;p>Innerhalb der gleichen Klasse&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">methodName();
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ausserhalb:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">ClassName.methodName();
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="utility-klassen">Utility-Klassen&lt;/h3>
&lt;p>Eine Klasse, welche ausschliesslich statische Elemente besitzt nennt man Utility-Klasse. Ein gutes Beispiel dafür ist die Klasse &lt;code>Math&lt;/code>.
Eine solche Klasse sollte einen privaten Konstruktor aufweisen, da es keinen Sinn macht von ihr eine Referenz zu erstellen.
Zudem sollte die Klasse als &lt;code>final&lt;/code> deklariert werden, da eine Vererbung aufgrund des statischen Kontextes ebenfalls keinen Sinn ergibt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">SpeedConverter&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#a6e22e">SpeedConverter&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// Utility class
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> &lt;span style="color:#a6e22e">toMilesPerHour&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">double&lt;/span> kmh&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> kmh &lt;span style="color:#f92672">*&lt;/span> 0&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">621&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> &lt;span style="color:#a6e22e">toKilometersPerHour&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">double&lt;/span> mph&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> mph &lt;span style="color:#f92672">*&lt;/span> 1&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">609&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="mathematik--logik">Mathematik &amp;amp; Logik&lt;/h2>
&lt;p>Mathe in Java ist sehr einfach. Beachte, dass mathematische Java-Operationen einer bestimmten Reihenfolge folgen (Punkt-Operationen vor Strich-Operationen)&lt;/p>
&lt;h4 id="arithmetische-operatoren">Arithmetische Operatoren&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Symbol&lt;/th>
&lt;th>Arithmetische Operation&lt;/th>
&lt;th>Beispiel&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>+&lt;/td>
&lt;td>Addition&lt;/td>
&lt;td>&lt;code>int sum = 2 + 3;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-&lt;/td>
&lt;td>Subtraktion&lt;/td>
&lt;td>&lt;code>int difference = 5 – 2;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/&lt;/td>
&lt;td>Division&lt;/td>
&lt;td>&lt;code>int quotient = 15 / 5;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>*&lt;/td>
&lt;td>Multiplikation&lt;/td>
&lt;td>&lt;code>int product = 3 * 4;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>%&lt;/td>
&lt;td>Division mit Rest&lt;/td>
&lt;td>&lt;code>int remainder = 7 % 3;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>++&lt;/td>
&lt;td>Post und Prä-Inkrement (1 addieren)&lt;/td>
&lt;td>&lt;code>count++; // (count = count + 1)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>- -&lt;/td>
&lt;td>Post und Prä-Dekrement (1 subtrahieren)&lt;/td>
&lt;td>&lt;code>count--; // (count = count – 1)&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="post--und-prä-inkrement">Post- und Prä-Inkrement&lt;/h4>
&lt;p>Das Inkrementieren und Dekrementieren von Variablen ist eine sehr häufige Operation.
Von diesem Operator gibt es zwei Varianten:&lt;/p>
&lt;ul>
&lt;li>Er kann vor der Variable stehen, wie in &lt;code>++i&lt;/code> (Präfix-Schreibweise) oder&lt;/li>
&lt;li>dahinter, wie bei &lt;code>i++&lt;/code> (Postfix-Schreibweise)&lt;/li>
&lt;/ul>
&lt;p>Der Präfix-Operator verändert die Variable vor der Auswertung der Programmzeile, und der Postfix-Operator ändert sie nach der Auswertung der Programmzeile. Mit anderen Worten: Nutzen wir einen Präfix-Operator, so wird die Variable erst herauf- bzw. heruntergesetzt und dann der Wert geliefert. Und beim Post-Operator ist es genau umgekehrt.&lt;/p>
&lt;h4 id="postinkrement">Postinkrement&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 5&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> c &lt;span style="color:#f92672">=&lt;/span> i&lt;span style="color:#f92672">++;&lt;/span> &lt;span style="color:#75715e">// c = 5
&lt;/span>&lt;span style="color:#75715e">// ab hier ist i = 6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="präinkrement">Präinkrement&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 5&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> d &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">++&lt;/span>i&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// d = 6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="postdekrement">Postdekrement&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 5&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> e &lt;span style="color:#f92672">=&lt;/span> i&lt;span style="color:#f92672">--;&lt;/span> &lt;span style="color:#75715e">// e = 5
&lt;/span>&lt;span style="color:#75715e">// ab hier ist i = 4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="prädekrement">Prädekrement&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 5&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> f &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">--&lt;/span>i&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// f = 4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h4 id="vegleichsoperatoren">Vegleichsoperatoren&lt;/h4>
&lt;p>Die Ergebnisse dieser Operationen sind stets Boolean-Werte.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Symbol&lt;/th>
&lt;th>Vergleich&lt;/th>
&lt;th>Beispiel&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;gt;&lt;/td>
&lt;td>grösser als&lt;/td>
&lt;td>5 &amp;gt; 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;&lt;/td>
&lt;td>kleiner als&lt;/td>
&lt;td>4 &amp;lt; 5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt;=&lt;/td>
&lt;td>grösser gleich&lt;/td>
&lt;td>3 &amp;gt;= 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;=&lt;/td>
&lt;td>kleiner gleich&lt;/td>
&lt;td>3 &amp;lt;= 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>==&lt;/td>
&lt;td>gleich&lt;/td>
&lt;td>2 == 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!=&lt;/td>
&lt;td>ungleich&lt;/td>
&lt;td>2 != 4&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="boolsche-operatoren">Boolsche Operatoren&lt;/h4>
&lt;p>Diese Operatoren basieren auf der boolschen Algebra. Daher arbeiten boolsche Operatoren direkt mit boolschen Werten. Es gibt vier Arten von boolschen Operatoren. Schauen wir uns zunächst ihre Symbole und deren Inhalt in der folgenden Tabelle an, bevor wir erläutern, welche Funktionen sie ausführen.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Symbol&lt;/th>
&lt;th>Boolsche Operation&lt;/th>
&lt;th>Erklärung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&amp;amp;&amp;amp;&lt;/td>
&lt;td>Logisches UND (AND)&lt;/td>
&lt;td>&lt;em>AND&lt;/em> gibt nur dann true zurück, wenn die Ausdrücke auf beiden Seiten des Operators true sind (Hinweis: Dieser Ausdruck wird &lt;em>lazy&lt;/em> evaluiert. Dies bedeuetet, wenn der erste Ausdruck &lt;em>false&lt;/em> ist, wird der zweite Ausdruck nicht mehr ausgewertet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>||&lt;/td>
&lt;td>Logisches ODER (OR)&lt;/td>
&lt;td>&lt;em>OR&lt;/em> gibt true zurück, wenn der Ausdruck auf einer oder beiden Seiten des Operators true ist (Hinweis: Dieser Ausdruck wird &lt;em>lazy&lt;/em> evaluiert. Dies bedeuetet, wenn der erste Ausdruck &lt;em>true&lt;/em> ist, wird der zweite Ausdruck nicht mehr ausgewertet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!&lt;/td>
&lt;td>Logisches NICHT (NOT)&lt;/td>
&lt;td>&lt;em>NOT&lt;/em> kehrt den Wert des darauffolgenden booleschen Ausdrucks um. Aus &lt;em>true&lt;/em> wird also &lt;em>false&lt;/em> und umgekehrt&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>^&lt;/td>
&lt;td>Logisches ENTWEDER-ODER (XOR)&lt;/td>
&lt;td>&lt;em>XOR&lt;/em> gibt true zurück, wenn die beiden Ausdrücke unterschiedlich sind&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;amp;&lt;/td>
&lt;td>Logisches UND (AND)&lt;/td>
&lt;td>Im Unterschied zum obigen &lt;em>AND&lt;/em> wertet dieses immer beide Ausdrücke aus&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>|&lt;/td>
&lt;td>Logisches ODER (OR)&lt;/td>
&lt;td>Im Unterschied zum obigen &lt;em>OR&lt;/em> wertet dieses immer beide Ausdrücke aus.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="kontrollstrukturen">Kontrollstrukturen&lt;/h2>
&lt;p>Kontrollstrukturen dienen dazu, den Ablauf eines Programms zu steuern.
Damit bietet eine Kontrollstruktur die Möglichkeit, Programmteile nur unter gewissen Bedingungen ( → bedingte Anweisungen) auszuführen oder Programmteile zu wiederholen ( → Schleifen).&lt;/p>
&lt;h4 id="bedingte-anweisungen">Bedingte Anweisungen&lt;/h4>
&lt;p>Eine bedingte Anweisung ist eine Konstruktion, mit der ein Programm abhängig vom Wert eines boolschen Ausdrucks (true oder false) unterschiedliche Wege geht.&lt;/p>
&lt;h5 id="if-statement">If-Statement&lt;/h5>
&lt;p>Die einfachste Form der bedingten Anweisung besteht aus dem Schlüsselwort if, einem boolschen Ausdruck und einem Block.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>expression&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn der Ausdruck true ist, werden die Anweisungen im Codeblock ausgeführt. Andernfalls werden sie übersprungen.&lt;/p>
&lt;h5 id="if-else-statement">If-Else Statement&lt;/h5>
&lt;p>Der obige if-Fall kann mit dem Schlüsselwort else erweitert werden, um alternative Aktionen auszuführen, wenn der Ausdruck false ist.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>expression&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// do something
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// do something else
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Im folgenden Beispiel gibt das Programm je nach Wert von num (gerade oder ungerade) unterschiedlichen Text aus.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span> num &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">...;&lt;/span> &lt;span style="color:#75715e">// the num is initialized by some value
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>num &lt;span style="color:#f92672">%&lt;/span> 2 &lt;span style="color:#f92672">==&lt;/span> 0&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s an even number&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;It&amp;#39;s an odd number&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Da eine Zahl nur gerade oder ungerade sein kann, wird nur eine der beiden Ausgaben gemacht.&lt;/p>
&lt;h5 id="else-if-statements">Else-If-Statements&lt;/h5>
&lt;p>Ein Else-Statement kann durch ein If-Statement erweitert werden.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>expression0&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// do something
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>expression1&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// do something else 1
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>expressionN&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// do something else N
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// in all other cases: do this…
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn also der erste Ausdruck false ist, wird der zweite Ausdruck überprüft, usw.&lt;/p>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">long&lt;/span> dollars &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">...;&lt;/span> &lt;span style="color:#75715e">// your budget
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>dollars &lt;span style="color:#f92672">&amp;lt;&lt;/span> 1000&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Buy a laptop&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>dollars &lt;span style="color:#f92672">&amp;lt;&lt;/span> 2000&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Buy a personal computer&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#f92672">(&lt;/span>dollars &lt;span style="color:#f92672">&amp;lt;&lt;/span> 100_000&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Buy a server&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Buy a data center or a quantum computer&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="switch-statement">Switch-Statement&lt;/h5>
&lt;p>Die Switch-Anweisung bietet eine Möglichkeit, basierend auf dem Wert einer einzelnen Variablen (kein Ausdruck!) zwischen mehreren Fällen zu wählen. Die Variable kann eine Ganzzahl, ein Zeichen, eine Zeichenfolge oder eine Aufzählung sein.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>variable&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> value1&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#75715e">// do something here
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> value2&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#75715e">// do something here
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#75715e">//... other cases
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">case&lt;/span> valueN&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#75715e">// do something here
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#75715e">// do something by default
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// it can be omitted
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Schlüsselwörter switch und case werden hier immer benötigt. Die Schlüsselwörter break und default sind optional. Das Schlüsselwort break verlässt die Switch-Anweisung.
Wenn ein Fall nicht über das Keyword &lt;em>break&lt;/em> verfügt, wird auch der darauffolgende Fall ausgewertet. Dies ist spannend, um die einzelnen Auswertungen verketten zu können. Der Default-Fall wird ausgewertet, wenn kein Fall mit dem Variablenwert übereinstimmt.&lt;/p>
&lt;h4 id="schleifen-loops">Schleifen (Loops)&lt;/h4>
&lt;p>Manchmal müssen wir einen Codeblock für eine bestimmte Anzahl wiederholen. Zu diesem Zweck stellt Java die Schleife bereit. Diese Schleife wird häufig verwendet, um über einen Wertebereich oder durch ein Array zu iterieren. For-Loops arbeiten mit einem Schleifenzähler, welcher sehr gut für Indizes von Arrays verwendet werden kann. Bei allen Schleifen ist Vorsicht geboten, da es rasch zu einer unendlichen Anzahl von Ausführungen kommen kann.&lt;/p>
&lt;h5 id="for-loop">For-Loop&lt;/h5>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>initialization&lt;span style="color:#f92672">;&lt;/span> condition&lt;span style="color:#f92672">;&lt;/span> modification&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// do something
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Bevor die Schleife beginnt, wird einmal die Initialisierungsanweisung (initialization) ausgeführt. Wir bezeichnen diese Variable als Schleifenvariable. Es sind mehrere Schleifenvariablen erlaubt, sie können durch Kommas getrennt werden.&lt;/li>
&lt;li>Die Bedingung (condition) ist ein boolscher Ausdruck, der die Notwendigkeit der nächsten Iteration bestimmt. Wenn die Auswertung der Bedingung false ist, wird die Schleife beendet – ansonsten folgt eine weitere Iteration&lt;/li>
&lt;li>Die Modifikation ist eine Anweisung, die den Wert der Schleifenvariablen verändert. Sie wird nach jeder Iteration aufgerufen. Normalerweise wird der Wert der Variable inkrementiert oder dekrementiert.&lt;/li>
&lt;/ul>
&lt;p>Beispiel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span> n &lt;span style="color:#f92672">=&lt;/span> 9&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;=&lt;/span> n&lt;span style="color:#f92672">;&lt;/span> i&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">print&lt;/span>&lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">// Output: 0 1 2 3 4 5 6 7 8 9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Innerhalb des Schleifenkörpers kann das Programm wiederum alle möglichen Java-Anweisungen ausführen. Es kann sogar andere Schleifen enthalten. Wie bei allen Blöcken sind die Schleifenvariablen nur innerhalb des Schleifenkörpers sichtbar.
Die Schleifenvariable wird meistens mit einfachen Variablennamen wie i, j, k oder index benannt.&lt;/p>
&lt;p>Hier ist ein weiteres Beispiel. Berechnen wir die Summe der Ganzzahlen von 1 bis 10 mit der for-Schleife.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span> startIncl &lt;span style="color:#f92672">=&lt;/span> 1&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> endExcl &lt;span style="color:#f92672">=&lt;/span> 11&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> sum &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> startIncl&lt;span style="color:#f92672">;&lt;/span> i &lt;span style="color:#f92672">&amp;lt;&lt;/span> endExcl&lt;span style="color:#f92672">;&lt;/span> i&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
sum &lt;span style="color:#f92672">+=&lt;/span> i&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>sum&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: 55
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="for-each-loop">For-Each Loop&lt;/h5>
&lt;p>Der For-Each-Loop durchläuft alle Elemente eines Arrays oder einer Collection. Die Angaben aus dem For-Loop werden durch eine Schleifenvariable und ein Doppelpunkt ersetzt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> numbers &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span> 125&lt;span style="color:#f92672">,&lt;/span> 381&lt;span style="color:#f92672">,&lt;/span> 98&lt;span style="color:#f92672">,&lt;/span> 12&lt;span style="color:#f92672">,&lt;/span> 235 &lt;span style="color:#f92672">};&lt;/span>
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> number&lt;span style="color:#f92672">:&lt;/span> numbers&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">print&lt;/span>&lt;span style="color:#f92672">(&lt;/span>number &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">// Output: 125 381 98 12 235
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der gezeigte Loop wird also fünfmal ausgeführt und der Wert der Variable &lt;em>number&lt;/em> nimmt bei jedem Durchlauf den jeweils nächsten Wert aus dem Array an.&lt;/p>
&lt;h5 id="while-loop">While-Loop&lt;/h5>
&lt;p>Die while- Schleife besteht aus einem Codeblock und einer Bedingung (einem booleschen Ausdruck). Wenn die Bedingung erfüllt ist, wird der Code innerhalb des Blocks ausgeführt. Dieser Code wird solange wiederholt, bis die Bedingung nicht mehr erfüllt ist.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>condition&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// body: do something
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Innerhalb des Schleifenkörpers kann das Programm wiederum alle möglichen Java-Anweisungen ausführen. Es kann sogar andere Schleifen enthalten.&lt;/p>
&lt;p>Beispiel: Die folgende Schleife gibt Ganzzahlen aus, während eine Variable kleiner als 5 ist.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">&amp;lt;&lt;/span> 5&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">print&lt;/span>&lt;span style="color:#f92672">(&lt;/span>i &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
i&lt;span style="color:#f92672">++;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">// Output: 0 1 2 3 4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h5 id="do-while-loop">Do-While Loop&lt;/h5>
&lt;p>Die Do-While-Schleife besteht aus einem Codeblock und einer Bedingung (einem boolschen Ausdruck) am Ende. Im Gegensatz zur While-Schleife wird die Do-While-Schleife mindestens einmal ausgeführt, da die Bedingung am Ende steht.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">do&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// body: do something
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span> &lt;span style="color:#66d9ef">while&lt;/span> &lt;span style="color:#f92672">(&lt;/span>condition&lt;span style="color:#f92672">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Labs: Streaming Dienst</title><link>/labs/java/java-oop/03_streaming_dienst/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-oop/03_streaming_dienst/</guid><description>
&lt;p>Schreibe ein Programm, welches einen Streaming Dienst nachstellt.
Die Anwendung soll die Filme und Serien in einem Streaming Dienst abspeichern,
wenn die entsprechende Methode aufgerufen wurde.
Der Streaming Dienst hat auch eine Liste an Personen,
welche ein Abonnement bei dem Streaming Dienst gelöst haben.&lt;/p>
&lt;p>Eine Person besitzt&lt;/p>
&lt;ul>
&lt;li>einen Namen&lt;/li>
&lt;li>eine Email-Adresse&lt;/li>
&lt;li>eine Kreditkarte&lt;/li>
&lt;/ul>
&lt;p>Ein Film&lt;/p>
&lt;ul>
&lt;li>einen Namen&lt;/li>
&lt;li>eine Dauer&lt;/li>
&lt;li>ein Genre&lt;/li>
&lt;li>einen Produzenten&lt;/li>
&lt;/ul>
&lt;p>Eine Person kann&lt;/p>
&lt;ul>
&lt;li>einen Film als gesehen markieren (&lt;em>View&lt;/em>)&lt;/li>
&lt;li>seine Kreditkarte ändern&lt;/li>
&lt;li>zwischen der Zahlungsart Monatlich oder Jährlich entscheiden&lt;/li>
&lt;/ul>
&lt;p>Der Streaming Dienst kann&lt;/p>
&lt;ul>
&lt;li>die Anzahl der Personen zurückliefern, welche ein Abonnement gelöst haben&lt;/li>
&lt;li>eine neue Person registrieren&lt;/li>
&lt;li>eine Person löschen&lt;/li>
&lt;li>nach einem Film über den Namen suchen&lt;/li>
&lt;li>nach Filmen eines bestimmten Genres suchen&lt;/li>
&lt;li>die anzahl &lt;em>Views&lt;/em> auf einem Film wiedergeben&lt;/li>
&lt;li>alle Kreditkarten der Kunden ausgeben &lt;em>(println)&lt;/em>
die das Abonnemente per Monatlichen Zahlung bezahlen&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Generell gilt die Regel, dass jede E-Mail-Adresse und jeder Film-Name einzigartig sein muss&lt;/em>&lt;/p>
&lt;h2 id="zusatzaufgabe-muss-nicht-gelöst-werden">Zusatzaufgabe (muss nicht gelöst werden):&lt;/h2>
&lt;p>Dies ist eine Liste aller europäischen Sprachen:
&lt;code>BULGARIAN,CROATIAN,CZECH,DANISH,DUTCH,ENGLISH,ESTONIAN,FINNISH,FRENCH,GERMAN,GREEK,HUNGARIAN,IRISH,ITALIAN,SLOVENIA,LATVIAN,LITHUANIAN,MALTESE,POLISH,PORTUGUESE,ROMANIAN,SLOVAK,SLOVENE,SPANISH,SWEDISH&lt;/code>&lt;/p>
&lt;p>Ein Film soll um den Wert &lt;em>Sprachen&lt;/em> erweitert werden. Darin wird gepseichert, in welchen Sprachen der Film verfügbar ist.
&lt;strong>Speichert die Sprache nicht in Form eines Strings!!!&lt;/strong>&lt;/p></description></item><item><title>Docs: JavaScript trainieren</title><link>/docs/web/javascript/04_js_training/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/javascript/04_js_training/</guid><description>
&lt;h2 id="übung-macht-den-meiser">Übung macht den Meiser&lt;/h2>
&lt;p>Bevor wir mit fortgeschrittenen JavaScript-Technologien weiterfahren, sollst du die Basics von JavaScript verstanden haben.&lt;/p>
&lt;p>Hierfür empfehlen wir dir folgenden Online-Kurs: &lt;a href="https://www.codecademy.com/learn/introduction-to-javascript">https://www.codecademy.com/learn/introduction-to-javascript&lt;/a>&lt;/p>
&lt;p>Dieser Kurs ist grundlegend. Da JavaScript und Java in der Syntax sehr ähnlich sind sollte ein grosser Teil für dich Repetition von Java-Teil sein.&lt;/p>
&lt;p>Möchtest du z.B. zur nächsten Aufgabe ohne die aktuelle lösen zu müssen, dann kannst du 2x auf &amp;ldquo;Run&amp;rdquo; klicken, dann auf &amp;ldquo;View Solution&amp;rdquo; und anschliessend auf &amp;ldquo;Replace with Solution&amp;rdquo;.&lt;/p>
&lt;p>Eine Übersicht über die Themen erhältst du via Klick oben links auf &amp;ldquo;Course Menu&amp;rdquo;.&lt;/p>
&lt;p>Schaue, dass du mindestens folgendes verstanden hast und anwenden kannst:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Kaptiel&lt;/th>
&lt;th>Das musst du anwenden können&lt;/th>
&lt;th>Bemerkungen&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Introduction&lt;/td>
&lt;td>Variablen definieren, Unterschied {var, let, const}, mathematische Operationen, typeof-Operator, String-Methoden wie {trim, startsWith, &amp;hellip;}&lt;/td>
&lt;td>Prüfe zudem dein Wissen mit dem &amp;ldquo;Introduction to JavaScript&amp;rdquo;-Quiz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Conditionals&lt;/td>
&lt;td>if/else/switch statements, Vergleichsoperatoren, du kennst truthy und falsy Werte&lt;/td>
&lt;td>Löse auch ein paar Aufgaben und den Test &amp;ldquo;Conditional Statements&amp;rdquo; solltest du fehlerfrei abschliessen können.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Functions&lt;/td>
&lt;td>Funktions-Definition, -Aufruf, Default-Parameter, Arrow Functions, Function Expressions, Globaler und Block-Scope&lt;/td>
&lt;td>Die Tests sind leider nicht mehr in der kostenlosen Version inbegriffen.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Arrays&lt;/td>
&lt;td>Arrays/Listen erstellen, updaten, Länge bestimmen, durch Array durch iterieren&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Loops&lt;/td>
&lt;td>Du kannst &lt;code>for&lt;/code>-, &lt;code>while&lt;/code>- und &lt;code>do while&lt;/code>-Schlaufen benutzen und mit &lt;code>break&lt;/code> kontrolliert abbrechen.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Iterators&lt;/td>
&lt;td>Functions as Data and Parameters, Iteratoren wie .forEach, .map, .filter, .reduce anwenden können&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Objects&lt;/td>
&lt;td>Objekte erstellen mit Properties und Methoden, Pass By Reference verstehen, durch Objekte durchiterieren, Advanced Objects mit dem &lt;code>this&lt;/code>-Keyword, Getter und Setter&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Weitere HTML-Tags</title><link>/docs/web/html_css/04_weitere_tags/</link><pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate><guid>/docs/web/html_css/04_weitere_tags/</guid><description>
&lt;h2 id="titel-heading">Titel (Heading)&lt;/h2>
&lt;p>Du hast bereits erfahren, dass du mit &lt;code>&amp;lt;h1&amp;gt;&lt;/code> für Titel verwenden kannst. Oft hast du aber einen Titel für die Seite und dann Titel, die diesem Titel untergeordnet sind. Wie in einem Word-Dokument kannst du auch in HTML Titel hierarchisch verschachteln. Das geht so:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Heading 1&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Hello&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Heading 2&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h3&lt;/span>&amp;gt;Heading 3&amp;lt;/&lt;span style="color:#f92672">h3&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;Heading 4&amp;lt;/&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h5&lt;/span>&amp;gt;Heading 5&amp;lt;/&lt;span style="color:#f92672">h5&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">h6&lt;/span>&amp;gt;Heading 6&amp;lt;/&lt;span style="color:#f92672">h6&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;Hello&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dies führt zu folgendem Ergebnis:&lt;/p>
&lt;p>&lt;img src="../headings.jpg" alt="headings" title="(Bild, das zeigt, wie Headings dargestellt werden.)">&lt;/p>
&lt;p>Es gibt also Tags für Titel erster bis sechste Stufe. Grundsätzlich gilt, je kleiner die Zahl der Stufe, je grösser wird der Titel dargestellt. Das obrige Ergebnis zeigt, wie Titel per Default gestylt werden. Du kannst das Styling dieser Titel selbstverständlich anpassen (kommt im CSS-Teil).&lt;/p>
&lt;h2 id="paragrafen">Paragrafen&lt;/h2>
&lt;p>Du hast bereits erfahren, dass Zeilenumbrüche in HTML keine Wirkung haben. Möchtest du eine neue Zeile einfügen, könnte dir das &lt;code>&amp;lt;br/&amp;gt;&lt;/code>-Tag weiterhelfen. Besser ist aber, wenn du den Text, der zusammengehört, auch entsprechend markierst: Das kannst du mit dem &lt;code>&amp;lt;p&amp;gt;&lt;/code>-Tag erreichen. Der Text, der innerhalb dieses Tags steht, wird in einem gleichen Abschnitt dargestellt. Ausserdem trennt es diesen Inhalt mit Leerschlag zum nächsten Element. Das wird im folgenden Beispiel verdeutlicht:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Title&amp;lt;/&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;
This is one line.
This the second one. &amp;lt;&lt;span style="color:#f92672">br&lt;/span>/&amp;gt; And the third one.
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;And this is inside a paragraph.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;This too.&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div style="border: 2px solid black; padding: 2em">
&lt;h2>Title&lt;/h2>
&lt;p>
This is one line.
This the second one. &lt;br/> And the third one.&lt;/p>
&lt;p>And this is inside a paragraph.&lt;/p>
&lt;p>This too.&lt;/p>
&lt;/div>
&lt;p>Beachte hier, dass &lt;code>&amp;lt;p&amp;gt;&lt;/code>-Tags mehr Leerraum erzeugen als &lt;code>&amp;lt;br/&amp;gt;&lt;/code>.&lt;/p>
&lt;h2 id="text-formatieren">Text formatieren&lt;/h2>
&lt;p>Du wirst in die Situation kommen, wo du einen bestimmten Teil eines Textes z.B. fett oder kursiv formatieren musst.&lt;/p>
&lt;p>Das kannst du mit HTML sehr einfach erreichen, denn dafür gibt es spezielle Tags:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">strong&lt;/span>&amp;gt;Heared&amp;lt;/&lt;span style="color:#f92672">strong&lt;/span>&amp;gt; about
the new restaurant called
&amp;lt;&lt;span style="color:#f92672">em&lt;/span>&amp;gt;Karma?&amp;lt;/&lt;span style="color:#f92672">em&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
    There&amp;#39;s &amp;lt;&lt;span style="color:#f92672">b&lt;/span>&amp;gt;no menu&amp;lt;/&lt;span style="color:#f92672">b&lt;/span>&amp;gt;:
    You get what you &amp;lt;&lt;span style="color:#f92672">i&lt;/span>&amp;gt;deserve&amp;lt;/&lt;span style="color:#f92672">i&lt;/span>&amp;gt;.
&amp;lt;/&lt;span style="color:#f92672">p&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Um also einen bestimmten Text fett darzustellen, kannst du es in ein &lt;code>&amp;lt;strong&amp;gt;&lt;/code>- oder &lt;code>&amp;lt;b&amp;gt;&lt;/code>-Element schmeissen. Beide Tags MACHEN im Prinzip genau das Gleiche, MEINEN aber nicht zwingend das Gleiche: &lt;code>&amp;lt;b&amp;gt;&lt;/code>-Elemente sind einfach fett-gedruckt, während &lt;code>&amp;lt;strong&amp;gt;&lt;/code>-Elemente betont sein sollen. &lt;code>&amp;lt;strong&amp;gt;&lt;/code> soll dem fett-gedruckten Wort also mehr Ausdruck verleihen. Mit einem eigenen Styling (kommt im CSS-Teil) könntest du &lt;code>&amp;lt;strong&amp;gt;&lt;/code>-Elemente z.B. auch grösser oder rot darstellen. Mit einem &lt;code>&amp;lt;b&amp;gt;&lt;/code>-Element sagt man im Prinzip nur, dass der Text fett-gedruckt sein soll.&lt;/p>
&lt;p>Einen Text kursiv darzustellen kannst du mit &lt;code>&amp;lt;i&amp;gt;&lt;/code> bzw. &lt;code>&amp;lt;em&amp;gt;&lt;/code>. Das Pendant zu &lt;code>&amp;lt;b&amp;gt;&lt;/code> ist &lt;code>&amp;lt;i&amp;gt;&lt;/code> (italic), und dasjenige zu &lt;code>&amp;lt;strong&amp;gt;&lt;/code> das &lt;code>&amp;lt;em&amp;gt;&lt;/code> (emphasis = Betonung).&lt;/p>
&lt;p>Das obige Beispiel wird so gerendert:&lt;/p>
&lt;div style="border: 2px solid black; padding: 2em">
&lt;p>
    &lt;strong>Heared&lt;/strong> about
the new restaurant called
&lt;em>Karma?&lt;/em>
&lt;/p>
&lt;p>
    There's &lt;b>no menu&lt;/b>: You get what you &lt;i>deserve&lt;/i>.
&lt;/p>
&lt;/div>
&lt;p>Text zu formatieren ist Styling, was besser mit CSS statt HTML gemacht wird. Verwende diese Tags also mit Bedacht.&lt;/p>
&lt;h2 id="links-und-bilder">Links und Bilder&lt;/h2>
&lt;p>Eines der wichtigsten Elemente in HTML sind Links auf andere Seiten. Links werden mit &lt;code>a&lt;/code>-Elementen (anchor) realisiert. Einen Link kannn wie folgt erstellt werden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://www.sbb.ch/&amp;#34;&lt;/span>&amp;gt;Home&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Probiere das einmal aus.&lt;/p>
&lt;p>Du wirst einen blauen und unterstrichenen Text &amp;ldquo;Home&amp;rdquo; sehen. &lt;code>&amp;lt;a&amp;gt;&lt;/code> ist der Tag, der generell für Hyperlinks verwendet wird. &lt;code>href&lt;/code> ist ein Attribut des &lt;code>a&lt;/code>-Tags,
mit dem die URL des Links spezifiziert wird. In unserem Fall ist &lt;code>https://www.sbb.ch/&lt;/code> die URL, die beim Klick aufgerufen wird. &lt;code>Home&lt;/code> ist der Text, der dem User angezeigt wird.&lt;/p>
&lt;p>Ziemlich ähnlich kannst du auch ein Bild aus dem Internet einbinden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">img&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://it-ninjas.ch/img/png/Ninja%20Elements_ninja_phone.png&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">alt&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;IT Ninjas&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;300&amp;#34;&lt;/span> /&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Ganz offensichtlich wird das &lt;code>&amp;lt;img/&amp;gt;&lt;/code>-Tag (Image) für Bilder verwendet. Das &lt;code>&amp;lt;img/&amp;gt;&lt;/code>-Tag ist ein Tag, welches keinen Inhalt zwischen Opening- und Closing-Tag hat. Mit dem &lt;code>/&lt;/code> im Opening-Tag kann man symbolisieren, dass das Tag ohne Closing-Tag geschlossen wird.&lt;/p>
&lt;p>Das wichtigste Attribut im &lt;code>img&lt;/code>-Tag ist &lt;code>src&lt;/code> (source = Quelle). Als &lt;code>src&lt;/code> wird eine URL zu einem Bild erwartet. Vergiss bei absoluten Pfaden (wird später noch erklärt) nicht das Protokoll (also https://) anzugeben. Nicht zwingend aber erwartet ist auch das &lt;code>alt&lt;/code>-Attribut (alternative). Dieser Text wird angezeigt, wenn das Bild nicht geladen werden konnte. Optional sind hingegen Attribute wie &lt;code>width&lt;/code> oder &lt;code>height&lt;/code>, welche die Breite und Höhe des Bildes festlegen. Diese Grössen werden aber besser mit CSS spezifiziert, da CSS genauere Spezifikationen zulässt (also nicht nur in &amp;lsquo;Pixel&amp;rsquo; sondern auch anderen Einheiten).&lt;/p>
&lt;p>Wenn du willst, dass man beim Klick auf ein Bild weitergeleitet wird, kannst du dein Bild in ein &lt;code>&amp;lt;a&amp;gt;&lt;/code>-Element schmeissen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">a&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://it-ninjas.ch/&amp;#34;&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">img&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;https://it-ninjas.ch/img/png/Ninja%20Elements_ninja_phone.png&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">alt&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;IT Ninjas&amp;#34;&lt;/span> /&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">a&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="listen">Listen&lt;/h2>
&lt;p>In HTML gibt es verschiedene Arten, um Aufzählungen darzustellen. Wir schauen uns Bullet-Point-Listen, Nummerierte-Listen und Definitions-Listen an.&lt;/p>
&lt;p>Eine Bullet-Point-Liste kann man mit einer unsortierten Liste (unordered list) kreieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;What do you do in case of emergency?&amp;lt;/&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;git commit -m &amp;#34;message&amp;#34;&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;git push&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Leave the building.&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ul&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Möchtest du hingegen eine Nummerierung, dann verwende eine sortierte Liste (ordered list):&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;Most Difficult Programming Languages&amp;lt;/&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ol&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Brainfuck&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Cow&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Intercal&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Malbolge&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">li&lt;/span>&amp;gt;Whitespace&amp;lt;/&lt;span style="color:#f92672">li&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">ol&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das Ganze sieht dann ungefähr so aus:&lt;/p>
&lt;div style="border: 2px solid black; padding: 2em">
&lt;h4 id="what-do-you-do-in-case-of-emergencyh4">What do you do in case of emergency?&lt;/h4>&lt;/h4>
&lt;ul>
&lt;li>git commit -m &amp;ldquo;message&amp;rdquo;&lt;/li>
&lt;li>git push&lt;/li>
&lt;li>Leave the building&lt;/li>
&lt;/ul>
&lt;h4 id="most-difficult-programming-languages">Most Difficult Programming Languages&lt;/h4>
&lt;ol>
&lt;li>Brainfuck&lt;/li>
&lt;li>Cow&lt;/li>
&lt;li>Intercal&lt;/li>
&lt;li>Malbolge&lt;/li>
&lt;li>Whitespace&lt;/li>
&lt;/ol>
&lt;/div>
&lt;p>Eine 3. Art von Listen sind Definitionslisten. Diese Art von Liste wird zwar nicht oft verwendet, kann aber hilfreich für ein Glossar oder ähnliches sein. Schaue dir dieses Beispiel an:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">h2&lt;/span>&amp;gt;Glossary&amp;lt;/&lt;span style="color:#f92672">h4&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">dl&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">dt&lt;/span>&amp;gt;buffoonish&amp;lt;/&lt;span style="color:#f92672">dt&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">dd&lt;/span>&amp;gt;like a clown &amp;lt;/&lt;span style="color:#f92672">dd&lt;/span>&amp;gt;
   
    &amp;lt;&lt;span style="color:#f92672">dt&lt;/span>&amp;gt;heyday&amp;lt;/&lt;span style="color:#f92672">dt&lt;/span>&amp;gt;
    &amp;lt;&lt;span style="color:#f92672">dd&lt;/span>&amp;gt;the period of greatest prosperity or productivity&amp;lt;/&lt;span style="color:#f92672">dd&lt;/span>&amp;gt;
&amp;lt;/&lt;span style="color:#f92672">dl&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div style="border: 2px solid black; padding: 2em">
&lt;h4 id="glossary">Glossary&lt;/h4>
&lt;dl>
    &lt;dt>buffoonish&lt;/dt>
    &lt;dd>like a clown &lt;/dd>
   
    &lt;dt>heyday&lt;/dt>
    &lt;dd>the period of greatest prosperity or productivity&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;h2 id="todo">Todo&lt;/h2>
&lt;p>relative Links&lt;/p></description></item><item><title>Docs: Components und Templates</title><link>/docs/web/angular/04_2_components_und_templates/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>/docs/web/angular/04_2_components_und_templates/</guid><description>
&lt;img src="/images/angular/angular_components_description.png" alt="Components" style="width:60%"/>
&lt;p>Ein Angular Component setzt sich aus 4 Dateien zusammen:&lt;/p>
&lt;ul>
&lt;li>Template&lt;/li>
&lt;li>Unit Test File&lt;/li>
&lt;li>Stylesheet&lt;/li>
&lt;li>Component (Class)&lt;/li>
&lt;/ul>
&lt;img src="/images/angular/componentDesc.png" alt="Components Description" style="width:50%"/>
&lt;h2 id="templates">Templates&lt;/h2>
&lt;h3 id="was-ist-ein-template">Was ist ein Template?&lt;/h3>
&lt;ul>
&lt;li>Templates definieren die Views der Components.&lt;/li>
&lt;li>Ein Template ist ein HTML Dokument, das Angular Elemente zum Rendern des Components enthält&lt;/li>
&lt;li>Dank Angular kann unser HTML Dokument anhand von Direktiven mehr Logik beinhalten.&lt;br>
Beispielsweise können wir im Template eine if-Kontrollstruktur wie folgt anwenden:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-html" data-lang="html">&amp;lt;&lt;span style="color:#f92672">div&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">*&lt;/span>&lt;span style="color:#a6e22e">ngIf&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;condition; else elseBlock&amp;#34;&lt;/span>&amp;gt;Content to render when condition is true.&amp;lt;/&lt;span style="color:#f92672">div&lt;/span>&amp;gt;
&amp;lt;&lt;span style="color:#f92672">ng-template&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">#&lt;/span>&lt;span style="color:#a6e22e">elseBlock&lt;/span>&amp;gt;Content to render when condition is false.&amp;lt;/&lt;span style="color:#f92672">ng-template&lt;/span>&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Welche weiteren Direktiven es gibt, könnt ihr in der &lt;a href="https://angular.io/api/common">offiziellen Dokumentation&lt;/a> unter dem Abschnitt &lt;code>Directives&lt;/code> nachlesen.&lt;/p></description></item><item><title>Docs: Git Erweitert</title><link>/docs/git/git-extended/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/git-extended/</guid><description>
&lt;p>Nachdem du die Basics von git gelernt hast, ist es Zeit dich weiter zu vertiefen.&lt;/p>
&lt;h2 id="inhalt">Inhalt&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="#Stash">Stash&lt;/a>&lt;/li>
&lt;li>&lt;a href="#CherryPick">Cherry Pick&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Tag">Tag&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Alias">Alias&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="stash">Stash&lt;/h2>
&lt;h4 id="was-ist-stash">Was ist stash?&lt;/h4>
&lt;p>Mit git stash ist es möglich Änderungen zwischenzuspeichern und diese später abzurufen.
Nach dem stashen kannst du an anderen Dateien arbeiten bis du die zwischengespeicherten Daten problemlos wieder abrufen kannst.&lt;/p>
&lt;h4 id="wie-funktioniert-stash">Wie funktioniert stash?&lt;/h4>
&lt;p>Um Dateien zu stashen wird der folgende Befehl verwendet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git stash
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Um Dateien im Anschluss abzurufen wird der folgende Befehl verwendet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git stash pop
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mit &lt;code>git stash pop&lt;/code> werden alle Änderungen des stashes gelöscht und der ursprünglichen Datei hinzugefügt.&lt;/p>
&lt;p>Die Alternative dazu ist:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git stash apply
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Mit &lt;code>git stash apply&lt;/code> werden die änderungen ebenfalls übernommen,
der Unterschied zu &lt;code>git stash pop&lt;/code> liegt darin das stash apply die Dateien nicht aus dem Stash löscht,
dies kann nützlich sein, wenn dieselbe Änderung mehreren Branches hinzugefügt werden soll.&lt;/p>
&lt;h2 id="squash">Squash&lt;/h2>
&lt;h4 id="was-ist-squash">Was ist Squash&lt;/h4>
&lt;p>squash in Git meint mehrere Commits zu vereinen.
Squash wird meistens benutzt, wenn Branches gemerged werden.
An dieser Stelle ist es jedoch wichtig zu erwähnen das es keinen &lt;code>git squash&lt;/code> Befehl gibt.&lt;/p>
&lt;h4 id="wie-funktioniert-squash">Wie funktioniert squash?&lt;/h4>
&lt;p>Es gibt verschiedene Wege um Commits zu squashen.
Zum Beispiel gibt es die Methode des manuellen squashens, dazu wird das Interactive rebase feature von Git genutzt.
Um die Interactive Rebase session zu starten wird der folgende Befehl verwendet:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">git rebase -i HEAD~3
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Danach öffnet sich ein Editor der die letzten n Commits anzeigt, n wird durch die Zahl nach dem &amp;ldquo;~&amp;rdquo; definiert.
Um jetzt die Commits zu squashen muss das pick zu beginn der zeile mit squash ersetzt werden.
Jetzt werden alle Commits mit dem squash Schlüsselwort an den obersten Commit hinzugefügt.&lt;/p>
&lt;h5 id="wieso-sollte-man-squashen">Wieso sollte man Squashen:&lt;/h5>
&lt;p>Angenommen du beendest die Arbeit an einem Featurebranch und willst diese in den Main branch mergen,
jedoch enthält der Featurebranch viele Commits die nicht zwingend im Mainbranch aufgeführt werden sollen,
in diesem Fall eignet sich das squashen, um diese Commits zusammenzufassen.&lt;/p>
&lt;h2 id="mergepull-requests">Merge/Pull Requests&lt;/h2>
&lt;h3 id="was-ist-der-unterschied-zwischen-einer-merge-request-und-einer-pull-request">Was ist der Unterschied zwischen einer Merge Request und einer Pull Request?&lt;/h3>
&lt;p>Beide Begriffe meinen dasselbe, werden jedoch mit einer anderen Plattform assoziiert.
Der Begriff Merge Request wird im Zusammenhang mit GitLab verwendet.
Im Zusammenhang mit GitHub wird jedoch der Begriff Pull Request verwendet.
Der Einfachheit wird im folgenden Text nur von Pull Request gesprochen.&lt;/p>
&lt;h3 id="was-ist-eine-pull-request-bzw-eine-merge-request">Was ist eine Pull Request bzw. eine Merge Request?&lt;/h3>
&lt;p>In ihrer einfachsten Form sind Pull-Requests eine Funktion für Entwickler
die andere Teammitglieder darüber informiert, dass ein Feature fertiggestellt wurde.
Dies lässt alle Beteiligten wissen, dass der Code bereit für eine überprüfung ist und danach in Hauptzweig eingeführt werden kann.&lt;/p>
&lt;h3 id="wie-kann-eine-pull-request-erstellt-werden-intellij">Wie kann eine Pull Request erstellt werden (IntelliJ)&lt;/h3>
&lt;p>Um eine Pull Request direkt aus Intelij zu erstellen, muss zuerst sichergestellt werden das man selber berechtigt ist eine Pull Request zu erstellen.
Sind diese Berechtigungen vorhanden, kann die Pull Request in wenigen Schritten erstellt werden.
Oben Links in IntelliJ befindet sich einen Button der mit Pull Request beschriftet ist.
Danach öffnet sich ein Fenster in dem ausgewählt werden kann, welchen der lokalen Branches in das Ziel Repo gemerged werden soll.
Danach muss nach noch einen Titel festgelegt werden. Es besteht ebenfalls die Möglichkeit eine Beschreibung hinzuzufügen, dies ist jedoch nur optional.
Im Anschluss besteht die Möglichkeit einen Reviewer hinzuzufügen.
Jetzt kann die Pull Request erstellt werden.&lt;/p>
&lt;h3 id="wie-kann-eine-pull-request-erstellt-werden-github">Wie kann eine Pull Request erstellt werden (Github)&lt;/h3>
&lt;p>Um eine Pull Request direkt von GitHub aus zu senden, muss zuerst der Reiter Pull Request ausgewählt werden,
Jetzt stehen verschiedene Möglichkeiten zu Auswahl, in unserem Fall wollen wir aber nur eine neue Pull Request erstellen.
Im Anschluss erscheint ein neues Panel, das wichtigste dabei ist die Wahl des richtigen source und target branches.
Als nächstes kann noch ein Name und eine Beschreibung für die Pull Request gesetzt werden.
Wie in IntelliJ besteht auch hier die Möglichkeit einen Reviewer hinzuzufügen, der Button dazu befindet sich mittig auf der linken Seite.
Da nun alle Einstellungen vorgenommen wurden, kann die Pull Request erstellt werden.&lt;/p>
&lt;h2 id="cherry-pick">Cherry Pick&lt;/h2>
&lt;h3 id="was-ist-cherry-pick-">Was ist Cherry-Pick ?&lt;/h3>
&lt;p>git cherry-pick ist ein Befehl welcher es ermöglicht beliebige Git-Commits per Referenz
anzusprechen und diese an den momentanen Arbeitskopf (HEAD) anzuheften.
git cherry-pick kann sehr nützlich für das rückgängig Machen von Änderungen sein.&lt;/p>
&lt;p>Zum Beispiel: Ein Commit ist aus Versehen im falschen Branch. Nun kannst du zum korrekten
Branch wechselt und brauchst git cherry-pick um den Commit am richtigen Ort zu befestigen.&lt;/p>
&lt;h3 id="wie-funktioniert-cherry-pick-">Wie funktioniert Cherry-Pick ?&lt;/h3>
&lt;p>Um Cherry Pick anzuwenden gibt man folgenden Befehl ein:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git cherry-pick &amp;lt;commit-hash&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der &lt;commit-hash> muss natürlich noch mit dem korrekten Hash des Commits ersetzt werden, welchen
man verschieben will. Anschliessend wird der Commit an den Branch angeheftet, auf dem man sich gerade
befindet. Darum Achtung!: Immer zuerst kontrollieren ob man derzeit auch wirklich auf dem korrekten
Branch ist.&lt;/p>
&lt;h2 id="tag">Tag&lt;/h2>
&lt;h3 id="was-sind-tags-">Was sind Tags ?&lt;/h3>
&lt;p>Tags sind Referenzen, welche an einen bestimmten Punkt der History
zeigen. Tagging wird üblicherweise benutzt um wichtige Ereignisse wie z.B.
das Release einer Applikation festzuhalten. Ein Tag ist etwas ähnliches
wie ein Branch, nur das ein Tag sich nicht verändert. Anders als ein Branch,
kann ein Tag nach dem Erstellen keine weiteren Commits
beinhalten.&lt;/p>
&lt;h3 id="wie-funktionieren-tags-">Wie funktionieren Tags ?&lt;/h3>
&lt;p>Um ein Tag zu erstellen wird folgender Befehl benötigt:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git tag &amp;lt;tagname&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wobei der &lt;tagname> auch wieder durch den gewünschten String ersetzt werden muss.
Will man zusätzlich zum Tag eine Beschriftung hinzufügen, macht man das mit:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git tag &amp;lt;tagname&amp;gt; -a
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Damit wird ein annotated tag erstellt.&lt;/p>
&lt;p>Auch wichtig anzumerken: Wenn du normal auf den Branch pushst, werden die Tags
nicht standardmässig mitgepusht. Dazu brauchst du dann:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git push origin --tags
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Willst du nur ein einzelnes Tag pushen, brauche:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git push origin &amp;lt;tag&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="alias">Alias&lt;/h2>
&lt;h3 id="was-sind-aliasse-">Was sind Aliasse ?&lt;/h3>
&lt;p>Ein Git-Alias ist zu vergleichen mit einem Shortcut. Aliasse werden z.b.
auch beim Arbeiten mit der Bash-Konsole eingesetzt. Aliase werden gebraucht um kürzere Befehle
zu realisieren. Sie ermöglichen effizienteres Programmieren.&lt;/p>
&lt;p>Nehmen wir zum Beispiel den git-checkout Befehl.
Dieser Befehl wird häufig verwendet und muss immer wieder neu eingetippt werden. Mit den Git-Aliassen
jedoch kann man git-checkout z.B. in git.co verwandeln. Dies spart enorme Schreibarbeit über längere Zeit
und verliert dennoch nicht an Wirksamkeit.&lt;/p>
&lt;h3 id="wie-funktionieren-aliasse">Wie funktionieren Aliasse?&lt;/h3>
&lt;p>Um Aliasse festzulegen, müssen wir diese in der gitconfig-Datei definieren. Dort erstellen wir das
Stichwort [alias]. Danach könnte das etwa so aussehen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">[alias]
st = status
ci = commit -v
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Aliasse können beliebig definiert werden, Ziel davon soll nur sein, die Schreibarbeit zu
minimieren und das eigene Programmieren praktischer zu machen.&lt;/p>
&lt;h2 id="gitg">Gitg&lt;/h2>
&lt;h3 id="was-ist-gitg">Was ist Gitg&lt;/h3>
&lt;p>Gitg ist eine grafische Benutzeroberfläche für git. Es zielt darauf ab, ein kleines,
schnelles und bequemes Werkzeug zu sein, um Git-Repositories zu visualisieren.
Neben der Visualisierung bietet Gitg auch einfache Möglichkeiten zur Verwaltung eines Repositorys.
Jedoch bietet IntelliJ standardmässig die dieselben Möglichkeiten, sollte man jedoch eine IDE ohne Git integration verwenden ist gitg ein praktisches Tool.&lt;/p>
&lt;h3 id="installationsanleitung">Installationsanleitung&lt;/h3>
&lt;p>Unter Linux kann gitg mit folgendem Befehl installieren:
&lt;br>&lt;code>sudo apt install gitg&lt;/code>&lt;br>
Leider ist git unter Windows nicht verfügbar.
Eine empfehlenswerte Alternative dazu ist der offizielle GitHub Client.&lt;/p>
&lt;h2 id="github-client">Github Client&lt;/h2>
&lt;h3 id="was-ist-der-github-client">Was ist der GitHub Client&lt;/h3>
&lt;p>Der GitHub Client ist ein Windows Programm für die Verwaltung von Git Repositorys.
Der GitHub Client funktioniert am besten mit GitHub repositorys,
das bedeutet aber nicht das dieser keine Repositorys von anderen Quellen unterstützt.
Es ist lediglich ein wenig aufwändiger Repositorys aus anderen Quellen einzubinden.&lt;/p>
&lt;h3 id="installationsanleitung-1">Installationsanleitung&lt;/h3>
&lt;p>Unter Windows kann der GitHub Client auf der folgenden Seite heruntergeladen werden:
&lt;code>https://desktop.github.com/&lt;/code>
Unter Linux der Client mithilfe des folgenden Scripts heruntergeladen werden:
&lt;code>https://gist.github.com/berkorbay/6feda478a00b0432d13f1fc0a50467f1&lt;/code>&lt;/p>
&lt;h2 id="git-blame">Git Blame&lt;/h2>
&lt;h3 id="was-ist-git-blame">Was ist Git-Blame?&lt;/h3>
&lt;p>Ist ein Befehl, welcher dazu dient den Author der letzten Änderung anzuzeigen. Deswegen auch
git &amp;ldquo;blame&amp;rdquo;. Man &amp;ldquo;blamed&amp;rdquo; den Verfasser der letzten Änderung für seinen Fehler (falls er
einen gemacht hat).&lt;/p>
&lt;h3 id="wie-funktioniert-git-blame">Wie funktioniert Git-Blame?&lt;/h3>
&lt;p>Um git blame anzuwenden braucht es nicht viel:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git blame &amp;lt;filename&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Und schon haben wir den Verantwortlichen für die letzte Änderung an einem unserer
Files. Jedoch bietet &lt;code>git blame&lt;/code> auch andere Anwendungsmöglichkeiten:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-Bash" data-lang="Bash">git blame -L 1,5 &amp;lt;filename&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Hier zum Beispiel definieren wir eine Range von der Zeile 1 bis zur Zeile 5. Oder hier, noch
eine weitere Variante:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git blame -e &amp;lt;filename&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Option -e zeigt uns anstatt des usernames des Authors, direkt die E-mail Adresse von
ihm, so dass wir gerade Kontakt aufnehmen können.&lt;/p>
&lt;p>Zum Schluss haben wir noch die -w Option&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-fallback" data-lang="fallback">git blame -w &amp;lt;filename&amp;gt;
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Dieser Befehl ignoriert wenn ein Author nur Leerschläge geändert hat. Das hat den Vorteil, dass
wir nur die Authoren bekommen, welche auch wirklich etwas am Code selbst geändert und ihn
nicht nur formatiert haben.&lt;/p>
&lt;h2 id="blobs-und-trees">Blobs und Trees&lt;/h2>
&lt;h3 id="was-sind-blobs-und-trees-show">Was sind Blobs und Trees show?&lt;/h3>
&lt;p>Zuerst zu den Blobs: Blobs werden benutzt, um die Inhalte einzelner Dateien zu speichern.
Trees wiederum beinhalten Referenzen zu anderen Blobs oder Unterbäumen.&lt;/p>
&lt;h3 id="wozu-braucht-es-sie">Wozu braucht es sie?&lt;/h3>
&lt;p>Wenn man eine Datei staged wird eine Blob-Datei erstellt. Dieser Blob hat den
Inhalt der Datei und hat den Typ &amp;ldquo;blob&amp;rdquo;. Ein Blob eigentlich der Inhalt der Datei
an einer bestimmten Instanz. Die verschiedenen Blobs fallen danach unter einen
Tree.&lt;/p>
&lt;p>Nun bildet sich hier eine Kette: Das Commit-Objekt greift auf die Tree-Objekte zu.
Diese wiederum geben uns die Blob-Objekte zurück. Deshalb brauchen wir diese Konstellation also.
Ohne die Trees und Blobs hätten wir keinen Zugriff auf die Inhalte unserer Dateien mehr.&lt;/p>
&lt;img src="https://miro.medium.com/max/541/1*ZGVkiRbMErfng2CqpU3YQQ.png">
Im Diagramm kann die Abhängigkeit dementsprechend besichtigt werden.</description></item><item><title>Labs: Immobilienfirma</title><link>/labs/java/java-oop/04_immofirma/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/labs/java/java-oop/04_immofirma/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich kann Namen für Objekte in einem Text identifizieren&lt;/li>
&lt;li>Ich kann gute Namen für Attribute und Methoden wählen&lt;/li>
&lt;li>Ich kann Objekte erstellen und ihnen entsprechende Eigenschaften geben&lt;/li>
&lt;li>Ich kann Objekte untereinander verknüpfen&lt;/li>
&lt;/ul>
&lt;h3 id="immobilienfirma">Immobilienfirma&lt;/h3>
&lt;p>In dieser Aufgabe soll eine Immobilienfirma mit Objekten abgebildet werden.
Eine solche Firma besitzt beliebige Immobilien und hat einen Firmensitz an einer bestimmten Adresse.
Die Firma hat diverse Angestellte und einen Namen.
Eine Immobilie kann aus diversen Wohnungen bestehen, welche vermietet werden.
Eine Immobilie hat eine bestimmte Adresse und ein Angestellter der Firma ist der Immobilie als Abwart zugeteilt.
Ein Angestellter der Firma ist zudem der Verwalter einer solchen Immobilie.
Eine Wohnung befindet sich in einem bestimmten Stockwerk, besitzt eine Wohnungsnummer und eine Beschreibung.
Wenn ein Mieter in eine Wohnung einzieht, so gibt es zwischen Firma und Mieter einen Vertrag für eine bestimmte Wohnung.
Jeder Vertrag hat ein Start- und ein End-Datum, zudem regelt der Vertrag den monatlichen Preis für eine Wohnung.
Die Standardangaben für eine Person werden durch ein Geburtsdatum und ein Geschlecht ergänzt.&lt;/p>
&lt;h4 id="teil-1">Teil 1&lt;/h4>
&lt;p>Ermittle aus dem Text oben die verschiedenen Objekte und ihre Eigenschaften.
Verknüpfe dann die Objekte miteinander, zum Beispiel hat eine Immobilienfirma eine Adresse als Firmensitz.&lt;/p>
&lt;h4 id="teil-2">Teil 2&lt;/h4>
&lt;p>Erstelle für deine Firma mindestens zwei Immobilien mit unterschiedlichen Wohnungen.
Definiere Angestellte und Abwarte. Erstelle Mieter und Verträge.&lt;/p>
&lt;h4 id="teil-3">Teil 3&lt;/h4>
&lt;p>Erstelle für die Firma die folgenden Funktionen:&lt;/p>
&lt;ul>
&lt;li>Ermittle die total Anzahl an Wohnungen von allen Immobilien&lt;/li>
&lt;li>Ermittle den Abwart für eine bestimmte Wohnung&lt;/li>
&lt;li>Ermittle die Verträge für eine bestimmte Immobilie&lt;/li>
&lt;li>Ermittle die leeren Wohnungen für eine bestimmte Immobilie&lt;/li>
&lt;li>Ermittle die Verträge, die im nächsten Monat ablaufen&lt;/li>
&lt;li>Ermittle alle Verträge sortiert nach Personen (eine Person kann mehrere Wohnungen mieten)&lt;/li>
&lt;li>Ermittle das monatliche Einkommen pro Immobilie&lt;/li>
&lt;li>Ermittle das jährliche Einkommen der Firma (ein Vertrag kann während dem Jahr ablaufen)&lt;/li>
&lt;/ul></description></item><item><title>Docs: Objektorientierte Programmierung</title><link>/docs/java/java-oop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/java/java-oop/</guid><description>
&lt;h4 id="ziele">Ziele&lt;/h4>
&lt;ul>
&lt;li>Ich verstehe, wie eine Klasse aufgebaut ist&lt;/li>
&lt;li>Ich verstehe den Unterschied zwischen einer Klasse und einem Objekt&lt;/li>
&lt;li>Ich weiss, was Datenfelder sind und verstehe den Unterschied zwischen statischen und nicht-statischen Feldern&lt;/li>
&lt;li>Ich weiss, was ein Konstruktor ist&lt;/li>
&lt;li>Ich kann Objekte instanziieren (erzeugen)&lt;/li>
&lt;li>Ich kann Getter- und Setter-Methoden schreiben&lt;/li>
&lt;li>Ich kenne die Zugriffsmodifikatoren &amp;lsquo;public&amp;rsquo;, &amp;lsquo;private&amp;rsquo; und &amp;lsquo;protected&amp;rsquo;&lt;/li>
&lt;li>Ich weiss, dass Instanzvariablen immer mit dem Schlüsselwort &amp;lsquo;private&amp;rsquo; deklariert werden&lt;/li>
&lt;li>Ich kenne die Methoden equals() und hashCode() und weiss unter welchen Umständen und wie ich diese überschreiben soll&lt;/li>
&lt;li>Ich weiss was ein Enum ist und wann es benötigt wird&lt;/li>
&lt;li>Ich kann Enums sinnvoll einsetzen&lt;/li>
&lt;li>Ich kann Methoden und Konstruktoren in Enums anwenden&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="einführung">Einführung&lt;/h2>
&lt;p>In der realen Welt können wir viele Objekte um uns herum finden, wie Autos, Gebäude und Menschen. Alle diese Objekte haben einen bestimmten Zustand und ein bestimmtes Verhalten. Wenn wir ein Auto betrachten so könnte sein Zustand einen Markennamen, eine bestimmte Geschwindigkeit oder den zu tankenden Kraftstoff enthalten. Mögliche Verhaltensweisen eines Autos sind normalerweise fahren und einparken.&lt;/p>
&lt;h3 id="definitionen">Definitionen&lt;/h3>
&lt;h4 id="klasse">Klasse&lt;/h4>
&lt;p>Unter einer Klasse versteht man in der objektorientierten Programmierung ein abstraktes Modell bzw. einen Bauplan für eine Reihe von ähnlichen Objekten. Die Klasse dient als Bauplan für die Abbildung von realen Objekten in Softwareobjekte und beschreibt Attribute (Eigenschaften) und Methoden (Verhaltensweisen) der Objekte.&lt;/p>
&lt;h4 id="objekt">Objekt&lt;/h4>
&lt;p>Ein Objekt bezeichnet in der objektorientierten Programmierung ein Exemplar eines bestimmten Datentyps oder einer bestimmter Klasse. Objekte sind konkrete Ausprägungen (=Instanzen) einer Klasse und werden zur Laufzeit erzeugt (Instanziierung).&lt;/p>
&lt;h4 id="datenfelder">Datenfelder&lt;/h4>
&lt;p>Datenfelder (Attribute) enthalten Informationen, die für Objekte dieser Klasse relevant sind. Ein Auto hat eine Höchstgeschwindigkeit, eine bestimmte Anzahl von Sitzen, usw. Das heisst, ein Feld ist eine Variable, in der Daten gespeichert werden können. Es kann einen beliebigen Typ haben, einschließlich primitiver Typen (int, float, boolean usw.) und Klassen. Eine Klasse kann auch sich selber als Feld enthalten. Eine Klasse kann beliebig viele Felder haben&lt;/p>
&lt;h4 id="methoden">Methoden&lt;/h4>
&lt;p>Methoden dienen dazu, den Zustand eines Objekts zu verändern. Refuel() (siehe Klassendiagramm unten) füllt beispielsweise den Tank, bis dessen Kapazität erreicht wird.
Klassen werden verwendet, um benutzerdefinierte Datentypen zu erstellen. Beginnen wir mit einem Beispiel einer Auto-Klasse, hier siehst du das UML-Klassendiagramm der Klasse Car:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>class Car&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>- topSpeed: int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>- totalSeats: int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>- fuelCapacity: int&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>- manufacturer: String&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>+ refuel(): void&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>+ park(): void&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>+ drive(): void&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="klassen-und-objekte-im-schnelldurchlauf">Klassen und Objekte im Schnelldurchlauf&lt;/h2>
&lt;h3 id="klassen-deklarieren">Klassen deklarieren&lt;/h3>
&lt;p>Klassenkopf: Eine neue Klasse wird mit dem Keyword &lt;em>class&lt;/em> gefolgt vom Namen der Klasse deklariert.
So kannst du beispielsweise eine Klasse mit dem Namen &lt;em>Nothing&lt;/em> erstellen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Nothing&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Block kann Felder, Methoden und Konstruktoren enthalten. Felder speichern Daten, Methoden definieren das Verhalten und Konstruktoren ermöglichen es uns, neue Objekte der Klasse zu erstellen und zu initialisieren. Felder und Methoden gelten als Klassenmitglieder (&lt;em>class members&lt;/em>).&lt;/p>
&lt;p>Der Quellcode einer Klasse wird in eine .java-Datei eingefügt. Normalerweise enthält eine Quellcodedatei nur eine Klasse und hat denselben Namen wie diese Klasse. Manchmal kann eine Datei jedoch auch mehrere Klassen enthalten, jedoch darf es nur eine öffentliche (public) Klasse pro Datei geben. Deren Name muss mit dem Dateinamen übereinstimmen.&lt;/p>
&lt;p>Patient.java&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Patient&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
String name&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// Feld bzw. Instanzvariable vom Datentyp String mit dem Bezeichner &amp;#39;name&amp;#39;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> age&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// Feld bzw. Instanzvariable vom Datentyp int mit dem Bezeichner &amp;#39;age&amp;#39;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> size&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// Feld bzw. Instanzvariable vom Datentyp float mit dem Bezeichner &amp;#39;size&amp;#39;
&lt;/span>&lt;span style="color:#75715e">&lt;/span> String&lt;span style="color:#f92672">[]&lt;/span> complaints&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// ein Feld kann auch ein Array sein
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Diese Klasse repräsentiert einen Patienten in einem Krankenhausinformationssystem. Sie verfügt über vier Felder: &lt;em>name, age, size&lt;/em> und &lt;em>complaints&lt;/em>. Alle Objekte der Klasse Patient haben dieselben Felder, aber ihre Werte können für jedes Objekt unterschiedlich sein.&lt;/p>
&lt;h3 id="objekte-erstellen">Objekte erstellen&lt;/h3>
&lt;p>Wir können eine Instanz der Klasse Patient mit dem Operator &lt;em>new&lt;/em> erstellen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">Patient patient &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Patient&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn du ein neues Objekt erstellst, wird jedes Feld mit dem Standardwert des entsprechenden Typs initialisiert (insofern du keinen Konstruktor mit Argumenten verwendest, dazu aber später mehr). Wenn die Instanzvariablen eines Objektes nicht mit einem Zugriffsmodifikator wie &lt;em>private&lt;/em> versehen sind (dazu unten mehr), können wir mittels Punkt-Operator auf die Variablen des Objekts zugreifen:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>patient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// es wird null ausgeben
&lt;/span>&lt;span style="color:#75715e">&lt;/span>System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>patient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// es wird 0 ausgeben
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Das folgende Programm erstellt zwei Objekte der Klasse Patient und druckt die Informationen der Objekte aus.&lt;/p>
&lt;p>&lt;strong>PatientDemo.java&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">PatientDemo&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// Wir erstellen einen neuen Patienten, alle Variablen werden mit ihren Standardwerten initialisiert
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Patient john &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Patient&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">// Wir greifen über den Punkt-Operator auf die Variablen zu und speichern Werte darin
&lt;/span>&lt;span style="color:#75715e">&lt;/span> john&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;John&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
john&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 30&lt;span style="color:#f92672">;&lt;/span>
john&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">size&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 180f&lt;span style="color:#f92672">;&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>john&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> john&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> john&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">height&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
Patient alice &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Patient&lt;span style="color:#f92672">();&lt;/span>
alice&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
alice&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 22&lt;span style="color:#f92672">;&lt;/span>
alice&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">height&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 165f&lt;span style="color:#f92672">;&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>alice&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> alice&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> alice&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">height&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;strong>Patient.java&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Patient&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> age&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">float&lt;/span> size&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Im obigen Code haben wir zwei Patienten erstellt, John und Alice, die Werte ihrer Felder definiert und dann die Informationen über sie ausgedruckt. Wir sehen, dass wir mit dem Punkt-Operator auf die Felder des Objekts zugreifen können (john.name = &amp;ldquo;John&amp;rdquo;). Allerdings soll hier erwähnt sein, dass das nur geht, wenn die Instanzvariablen nicht private sind (wir behandeln das Thema Zugriffsmodifikatoren weiter unten).&lt;/p>
&lt;h3 id="veränderungen-an-objekten---immutable--mutable-objects">Veränderungen an Objekten - Immutable &amp;amp; mutable objects&lt;/h3>
&lt;p>In der Programmierung gibt es ein wichtiges Konzept, das Unveränderlichkeit genannt wird. Unveränderlichkeit bedeutet, dass ein Objekt immer dieselben Werte speichert. Wenn wir diese Werte ändern wollen, müssen wir ein neues Objekt erstellen. Das klassische Beispiel ist die Klasse &lt;em>String&lt;/em>. Zeichenfolgen sind unveränderliche Objekte, sodass alle String-Operationen einen neuen String erzeugen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">String alice &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;alice&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
alice&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toUpperCase&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>alice&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: alice --&amp;gt; unveränderlich!
&lt;/span>&lt;span style="color:#75715e">&lt;/span>String aliceCapitalLetters &lt;span style="color:#f92672">=&lt;/span> alice&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toUpperCase&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>aliceCapitalLetters&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: ALICE
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Klasse Patient ist nicht unveränderlich, da jedes Feld eines Objekts geändert werden kann.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">Patient patient &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Patient&lt;span style="color:#f92672">();&lt;/span>
patient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Mary&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
patient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="referenzen-teilen">Referenzen teilen&lt;/h3>
&lt;p>Objekte sind Referenztypen. In einer Variable wird also nicht das Objekt selbst, sondern die Speicheradresse hinterlegt, welche auf das Objekt zeigt. Es können sich also mehrere Referenzen auf dasselbe Objekt beziehen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">Patient patient &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Patient&lt;span style="color:#f92672">();&lt;/span>
patient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Mary&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
patient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 24&lt;span style="color:#f92672">;&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>patient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> patient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Mary 24
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// Wir weisen der Variablen patient2 die Speicheradresse der Variablen patient zu
&lt;/span>&lt;span style="color:#75715e">&lt;/span>Patient patient2 &lt;span style="color:#f92672">=&lt;/span> patient&lt;span style="color:#f92672">;&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>patient2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> patient2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Mary 24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Es ist wichtig zu verstehen, dass sich die zwei Referenzen oben auf das gleiche Objekt im Speicher beziehen und nicht auf zwei unabhängige Kopien. Da unsere Klasse veränderbar ist, können wir das Objekt mit Hilfe beider Referenzen ändern.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">patient&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> 25&lt;span style="color:#f92672">;&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>patient2&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// 25
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="packages">Packages&lt;/h2>
&lt;p>Bevor wir uns intensiver mit den Bestandteilen einer Klasse auseinandersetzen, schauen wir uns Packages an.
Ein Package dient der Gruppierung und Organisation von Klassen, Schnittstellen und anderen Packages.
Es wird zwischen zwei Arten von Packages unterschieden:&lt;/p>
&lt;ul>
&lt;li>implizit importierte Packages&lt;/li>
&lt;li>explizit zu importierende Packages&lt;/li>
&lt;/ul>
&lt;p>Wenn wir beispielsweise die Klasse Scanner benötigen, müssen wir dies durch ein &lt;em>import&lt;/em> Statement machen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> java.util.Scanner
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Die Klasse Scanner befindet sich also im Package &lt;em>java&lt;/em> und darin im Package &lt;em>util&lt;/em>.
Ein Package kann beliebig viele andere Packages enthalten. Ein Package wird auf dem Dateisystem als Verzeichnis behandelt.&lt;/p>
&lt;h3 id="vorteile">Vorteile&lt;/h3>
&lt;ul>
&lt;li>Code-Organisation. Klassen von gleicher Natur (wie beispielsweise Modelle oder Services) befinden sich im gleichen Package&lt;/li>
&lt;li>Auffindbarkeit. Klassen sind durch die Organisation einfacher zu finden&lt;/li>
&lt;li>Vermeiden von Namenskonflikten. Zwei Klassen dürfen den gleichen Namen haben, solange sie in unterschiedlichen Packages liegen&lt;/li>
&lt;li>Zugriffsteuerung. Bestimmte Zugriffsmodifikatoren erlauben den Zugriff auf Klassen im gleichen Package&lt;/li>
&lt;/ul>
&lt;h3 id="namenskonventionen">Namenskonventionen&lt;/h3>
&lt;p>Gemäß der Namenskonvention werden Package-Namen immer in Kleinbuchstaben geschrieben.
Die Trennung der verschiedenen Packages erfolgt beim Import-Statement durch einen Punkt.&lt;/p>
&lt;h3 id="ordnerstruktur">Ordnerstruktur&lt;/h3>
&lt;p>Programmcode muss organisiert sein. Grundsätzlich legen wir Quellcode im einem Verzeichnis ab, das &lt;em>src&lt;/em> genannt wird.
Innerhalb dieses Verzeichnisses legen wir ein Verzeichnis &lt;em>main&lt;/em> und ein Verzeichnis &lt;em>java&lt;/em> an. Innerhalb des Java-Verzeichnisses können wir beliebig viele eigene Packages anlegen, um unseren Programmcode zu organisieren.&lt;/p>
&lt;h3 id="klassen-mit-gleichem-namen">Klassen mit gleichem Namen&lt;/h3>
&lt;p>Es kann passieren, dass wir zwei Klassen haben, die den gleichen Namen haben. Beispiel: Wir arbeiten mit der externen Bibliothek Abstract Window Toolkit (AWT). Darin gibt es eine Klasse mit dem Namen &lt;em>Rectangle&lt;/em>. Es ist natürlich erlaubt eine eigene Klasse mit diesem Namen anzulegen, solang sie sich nicht in einem Package mit dem gleichen Namen befindet.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">package&lt;/span> ch.sbb.main&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import&lt;/span> ch.sbb.rectangle.Rectangle&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
java&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">awt&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Rectangle&lt;/span> rectAWT &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> java&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">awt&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Rectangle&lt;/span>&lt;span style="color:#f92672">()&lt;/span>
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Rectangle myRect &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Rectangle&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#75715e">// ...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Wir importieren die eigene Rectangle-Klasse mit der Import-Anweisung&lt;/li>
&lt;li>Wir deklarieren und initialisieren ein AWT-Rectangle, indem wir den vollständigen Namen (Package und Klassennamen) angeben&lt;/li>
&lt;/ul>
&lt;h3 id="import-">Import *&lt;/h3>
&lt;p>Wenn sich zwei Klassen im selben Paket befinden und eine Klasse in der anderen verwendet wird, muss die Klasse nicht importiert werden.
Es ist auch möglich, alle Klassen aus dem Paket zu importieren. Dazu müssen wir einen * anstelle eines bestimmten Klassennamens in das Import-Statement schreiben.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">import&lt;/span> java.awt.*&lt;span style="color:#f92672">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="package-javalang">Package java.lang&lt;/h3>
&lt;p>Obwohl wir die meisten Pakete importieren müssen, gibt es ein Java-Paket, das immer automatisch importiert wird. Es ist java.lang. Dieses Paket enthält viele weit verbreitete Klassen, wie String, System, Long, Integer, NullPointerException und andere.&lt;/p>
&lt;h3 id="statischer-import">Statischer Import&lt;/h3>
&lt;p>Wir können auch statische Elemente (Konstanten) einer Klasse in eine andere Klasse importieren. Wenn wir * in die import-Anweisung schreiben, müssen wir den importierten Klassennamen nicht angeben, bevor wir statische Methoden aufrufen oder statische Felder lesen.
Hier ist ein Beispiel für den statischen Import der Klasse Arrays, die viele nützliche Methoden zur Verarbeitung von Arrays enthält:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#f92672">package&lt;/span> org.hyperskill.java.packages.theory&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">import static&lt;/span> java.util.Arrays.*&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Main&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> numbers &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span> 10&lt;span style="color:#f92672">,&lt;/span> 4&lt;span style="color:#f92672">,&lt;/span> 5&lt;span style="color:#f92672">,&lt;/span> 47&lt;span style="color:#f92672">,&lt;/span> 5&lt;span style="color:#f92672">,&lt;/span> 12 &lt;span style="color:#f92672">};&lt;/span> &lt;span style="color:#75715e">// an array
&lt;/span>&lt;span style="color:#75715e">&lt;/span> sort&lt;span style="color:#f92672">(&lt;/span>numbers&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// instead of writing Arrays.sort(...)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> copy &lt;span style="color:#f92672">=&lt;/span> copyOf&lt;span style="color:#f92672">(&lt;/span>numbers&lt;span style="color:#f92672">,&lt;/span> numbers&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// instead of writing Arrays.copyOf(...)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wenn wir bei der Implementation von Klassen keine Package-Anweisung schreiben, wird die Klasse ins Default-Package eingefügt. Dies sollte vermieden werden, da Klassen aus dem Default-Package nicht in andere Klasse importiert werden können, welche sich nicht auch im Default-Package befinden.&lt;/p>
&lt;hr>
&lt;h2 id="zugriffsmodifikatoren">Zugriffsmodifikatoren&lt;/h2>
&lt;p>In Java können wir Feldern und Methoden Zugriffsbeschränkungen auferlegen. Diese Einschränkungen werden durch Zugriffsmodifikatoren festgelegt.
Zugriffsmodifikatoren bestimmen die Sichtbarkeit von Feldern und Methoden und damit deren Verwendbarkeit aus anderen Programmteilen.
Es gibt vier Zugriffsmodifikatoren.&lt;/p>
&lt;h3 id="private">Private&lt;/h3>
&lt;p>Auf eine private Instanzvariable oder -methode kann von ausserhalb der Klasse nicht zugegriffen werden.
Es ist eine gängige Praxis, Instanzvariablen privat zu halten. Wir möchten schliesslich nicht, dass jemand unsere Daten direkt manipuliert. Dieses Prinzip nennt man auch Kapselung.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>UML-Symbol: -&lt;/p>
&lt;h3 id="public">Public&lt;/h3>
&lt;p>Auf Variablen und Methoden, die mit dem Schlüsselwort public deklariert sind, kann von einem beliebigen Ort des Programms zugegriffen werden.
Sie sind also öffentlich.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> String &lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Auf öffentliche Methoden und Felder kann ein Objekt über den Punkt-Operator zugreifen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">Person p &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Person&lt;span style="color:#f92672">();&lt;/span>
c&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>UML-Symbol: +&lt;/p>
&lt;h3 id="protected">Protected&lt;/h3>
&lt;p>Wenn eine Variable oder Methode protected deklariert ist, dann kann nur vom gleichen Package oder von Unterklassen darauf zugegriffen werden (Unterklassen bzw. Vererbung folgt im Modul «Objektorientiertes Design»).
UML-Symbol: #&lt;/p>
&lt;h3 id="package-private">Package-Private&lt;/h3>
&lt;p>Wenn eine Variable oder Methode keinen Zugriffsmodifikator hat, so besitzt sie trotzdem einen. Dieser wird Package-Private genannt. Die Sichtbarkeit ist grundsätzlich private, wird aber auf Klasse im gleichen Package ausgeweitet.&lt;/p>
&lt;h3 id="zusammenfassung">Zusammenfassung&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Modifikator&lt;/th>
&lt;th>Eigene Klasse&lt;/th>
&lt;th>Klasse im gleichen Package / innere-Klassen&lt;/th>
&lt;th>Unterklassen&lt;/th>
&lt;th>Sonstige Klassen&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>private&lt;/td>
&lt;td>ja&lt;/td>
&lt;td>nein&lt;/td>
&lt;td>nein&lt;/td>
&lt;td>nein&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>public&lt;/td>
&lt;td>ja&lt;/td>
&lt;td>ja&lt;/td>
&lt;td>ja&lt;/td>
&lt;td>ja&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>protected&lt;/td>
&lt;td>ja&lt;/td>
&lt;td>ja&lt;/td>
&lt;td>ja&lt;/td>
&lt;td>nein&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ohne / package&lt;/td>
&lt;td>ja&lt;/td>
&lt;td>ja&lt;/td>
&lt;td>nein&lt;/td>
&lt;td>nein&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="felder">Felder&lt;/h2>
&lt;p>Wir haben bereits verschiedene Arten von Variablen kennengelernt:&lt;/p>
&lt;ul>
&lt;li>Variablen in einer Methode oder einem Codeblock - diese werden als &lt;em>lokale Variablen&lt;/em> bezeichnet&lt;/li>
&lt;li>Variablen in Methodendeklarationen oder Konstruktoren - diese werden als &lt;em>Parameter&lt;/em> bezeichnet&lt;/li>
&lt;li>Mitgliedsvariablen (member variables) in einer Klasse - diese werden als &lt;em>Felder&lt;/em> oder &lt;em>Instanzvariablen&lt;/em> bezeichnet&lt;/li>
&lt;/ul>
&lt;p>Wir werden uns nun den Feldern widmen. Felder sind Variablen, die innerhalb einer Klasse, aber außerhalb aller Methoden deklariert werden. Wir definieren sie üblicherweise am Anfang einer Klasse (vor den Methoden).
Es gibt zwei verschiedene Typen von Feldern, statische und nicht-statische.&lt;/p>
&lt;h3 id="statische-felder---klassenvariablen--konstanten">Statische Felder - Klassenvariablen / Konstanten&lt;/h3>
&lt;p>Manchmal brauchen wir eine Variable, die allen Objekten gemeinsam ist. Dann verwenden wir eine Variable, die mit Schlüsselwort &lt;em>static&lt;/em> deklariert ist. Diese Variable bezeichnen wir als statisches Feld oder Klassenvariable. Ein statisches Feld ist der Klasse selbst zugeordnet und nicht den Referenzen dieser Klasse. Denn jede Instanz der Klasse teilt sich diese Klassenvariable, die sich an einem festen Ort im Speicher befindet. Egal wie viele Objekte dieser Klasse existieren, der Wert des statischen Feldes ist für alle exakt gleich. Jedes Objekt kann grundsätzlich den Wert einer Klassenvariablen lese und verändern.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Counter&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> count &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Counter counter &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Counter&lt;span style="color:#f92672">();&lt;/span>
counter&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">++;&lt;/span> &lt;span style="color:#75715e">// Erhöhen der Klassenvariable count über ein Objekt
&lt;/span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>count&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: 1
&lt;/span>&lt;span style="color:#75715e">&lt;/span> Counter&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">count&lt;/span>&lt;span style="color:#f92672">++;&lt;/span> &lt;span style="color:#75715e">// Erhöhen des statischen Feldes count über den Klassennamen (ohne Objekt!)
&lt;/span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>count&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: 2
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Angenommen, wir möchten eine Reihe von Bicycle-Objekten erstellen und jedem eine Seriennummer zuweisen, beginnend mit 1 für das erste Objekt. Diese ID-Nummer ist für jedes Objekt eindeutig und daher eine Instanzvariable (was Instanzvariablen sind, dazu kommen wir gleich). Um das zu realisieren, benötigen wir eine Variable, die die Anzahl Fahrräder (Anzahl erzeugter Bicycle-Instanzen) zählt. Vorsicht, diese Art von Implementation ist für mehrere Threads nicht geeignet. Da wir noch nichts von Multithreading wissen, genügt es zu wissen, dass diese Art der Implementation nicht thread-sicher ist.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Bicycle&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> cadence&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> gear&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> speed&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> id&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> numberOfBicycles &lt;span style="color:#f92672">=&lt;/span> 0&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// Klassenvariable, die zählt, wieviele Objekte erzeugt werden
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#75715e">// Diese spezielle Methode, Konstruktor genannt, wird benötigt, um Objekte zu instanzieren --&amp;gt; siehe Kapitel Konstruktoren
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Bicycle&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> startCadence&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> startSpeed&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> startGear&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">gear&lt;/span> &lt;span style="color:#f92672">=&lt;/span> startGear&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">cadence&lt;/span> &lt;span style="color:#f92672">=&lt;/span> startCadence&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">speed&lt;/span> &lt;span style="color:#f92672">=&lt;/span> startSpeed&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">++&lt;/span>numberOfBicycles&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// inkrementiere die Anzahl Fahrräder und weise den Wert der Instanzvariablen id zu
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Manchmal verwenden wir statische Felder, um Konstanten zu definieren. Eine &lt;em>Konstante&lt;/em> ist eine Variable, deren Wert nicht mehr verändert werden kann, sobald man ihr einmal einen Wert zugewiesen hat. Um eine Variable als Konstante zu kennzeichnen, verwenden wir zusätzlich das Keyword &lt;em>final&lt;/em>. Der Name der Konstante wird zudem immer in Grossbuchstaben geschrieben. Um mehrere Wörter abzutrennen verwenden wir den Underscore (_).
Zum Beispiel definiert die folgende Variablendeklaration eine Konstante mit dem Namen PI:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> PI &lt;span style="color:#f92672">=&lt;/span> 3&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">141592653589793&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="nicht-statische-felder---instanzvariablen">Nicht-statische Felder - Instanzvariablen&lt;/h3>
&lt;p>Unter einer Instanzvariablen versteht man eine Variable, die einer Instanz einer Klasse, also einem Objekt, zugeordnet ist. Wenn eine neue Instanz erzeugt wird, werden Kopien der Instanzvariablen angelegt. Im Fall der Bicycle-Klasse sind die Instanzvariablen &lt;em>cadence&lt;/em>, &lt;em>gear&lt;/em>, &lt;em>speed&lt;/em> und &lt;em>id&lt;/em>. Jedes Bicycle-Objekt hat seine eigenen Werte für diese Variablen, d.h. sie werden an unterschiedlichen Orten gespeichert.&lt;/p>
&lt;hr>
&lt;h2 id="konstruktoren">Konstruktoren&lt;/h2>
&lt;p>Konstruktoren sind spezielle Methoden, die benutzt werden sobald ein neues Objekt einer Klasse erstellt wird. Ein Konstruktor einer Klasse wird aufgerufen, wenn eine neue Instanz mit dem Schlüsselwort &lt;em>new&lt;/em> erstellt wird.
Ein Konstruktor unterscheidet sich von anderen Methoden darin, dass:&lt;/p>
&lt;ul>
&lt;li>er den gleichen Namen haben muss wie die Klasse, die ihn enthält&lt;/li>
&lt;li>er keinen Rückgabetyp (nicht einmal void) hat&lt;/li>
&lt;/ul>
&lt;p>Konstruktoren initialisieren Instanzen (Objekte) der Klasse. Sie können beliebige Parameter enthalten, um beispielsweise Instanzvariablen zu initialisieren.&lt;/p>
&lt;h3 id="konstruktoren-verwenden">Konstruktoren verwenden&lt;/h3>
&lt;p>Im folgenden Beispiel benutzen wir eine Klasse mit dem Namen &lt;em>Patient&lt;/em>. Ein Objekt der Klasse hat einen Namen, ein Alter und eine Größe. Die Klasse verfügt über einen Konstruktor mit drei Parametern, um ein neues Objekt mit bestimmten Werten zu initialisieren.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Patient&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> age&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> height&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Patient&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String name&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> age&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> height&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">age&lt;/span> &lt;span style="color:#f92672">=&lt;/span> age&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">height&lt;/span> &lt;span style="color:#f92672">=&lt;/span> height&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Der Konstruktor akzeptiert drei Parameter. Zum Initialisieren der Felder wird das Schlüsselwort &lt;em>this&lt;/em> verwendet. Es ist ein Verweis auf die aktuelle Instanz der Klasse. Dieses Schlüsselwort ist nur erforderlich, wenn die Parameter des Konstruktors denselben Namen wie die Felder der Klasse haben (um sie voneinander unterscheiden zu können). Es ist aber allgemein Best Practices das Schlüsselwort &lt;em>this&lt;/em> zu verwenden.
Nun erstellen wir einige Objekte der Klasse Patient:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">Patient heinrich &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Patient&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Heinrich&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> 40&lt;span style="color:#f92672">,&lt;/span> 182&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">0f&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
Patient mary &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Patient&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Mary&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span> 33&lt;span style="color:#f92672">,&lt;/span> 171&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">5f&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Jetzt haben wir zwei Objekte der Klasse &lt;em>Patient&lt;/em>. Die beiden Referenzen &lt;em>heinrich&lt;/em> und &lt;em>mary&lt;/em> besitzen im Objekt die gleichen Felder, aber die Werte dieser Felder sind pro Objekt unterschiedlich.&lt;/p>
&lt;p>Eine Klasse kann mehrere Konstruktoren enthalten, solange sich die Deklarationen der Konstruktoren unterscheiden. Zum Beispiel unterschiedliche Anzahl an Argumenten oder unterschiedliche Datentypen der Argumente.&lt;/p>
&lt;h3 id="default-konstruktor">Default Konstruktor&lt;/h3>
&lt;p>Der Compiler stellt automatisch einen Standardkonstruktor ohne Argumente für jede Klasse ohne Konstruktor bereit (das heisst, wir können auch Objekte einer Klasse erstellen, deren Klassenkörper leer ist).&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Patient&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> age&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> height&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Wir können eine Instanz der Klasse Patient mit dem Standardkonstruktor ohne Argumente erstellen.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">Patient patient &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Patient&lt;span style="color:#f92672">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In diesem Fall werden alle Felder mit den Standardwerten ihrer Typen gefüllt.
Wenn wir einen bestimmten Konstruktor definieren, wird der Standardkonstruktor nicht mehr automatisch erstellt.
Wir können einen Konstruktor auch ohne Argumente definieren, aber damit Standardwerte für Felder einer Klasse festlegen. Zum Beispiel können wir das Feld &lt;em>name&lt;/em> mit &amp;ldquo;Unknown&amp;rdquo; initialisieren. Durch eine solche Definition wird der Default-Konstruktor ersetzt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Patient&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> String name&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> age&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">float&lt;/span> height&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">Patient&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Unknown&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="zusammenfassung-1">Zusammenfassung&lt;/h3>
&lt;ul>
&lt;li>Jede Java-Klasse verfügt über mindestens einen Konstruktor zum Initialisieren von Objekten&lt;/li>
&lt;li>Ein Konstruktor hat denselben Namen wie die Klasse, die ihn enthält&lt;/li>
&lt;li>Ein Konstruktor hat keinen Rückgabewert&lt;/li>
&lt;li>Wenn eine Klasse keine expliziten Konstruktoren hat, stellt der Java-Compiler automatisch einen Standardkonstruktor ohne Argumente bereit&lt;/li>
&lt;li>Wird ein eigener Konstruktor definiert, so entfällt der Standardkonstruktor&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="initialisierungsblöcke">Initialisierungsblöcke&lt;/h2>
&lt;p>Neben Konstruktoren gibt es noch zwei weitere Konstrukte, die der Initialisierung dienen. Statische und nicht-statische Initialisierungsblöcke.
Diese sehen wie folgt aus:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Car&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// Statischer Initialisierungsblock
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// Instanzblock
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> Car &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// Konstruktor
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Innerhalb dieser Initialisierungblöcke können ähnlich wie bei den Konstruktoren bestimmte Initialisierungen durchgeführt werden. Grundsätzlich können die beiden Blöcke beliebigen Programmcode enthalten. Die Reihenfolge bei der Erstellung eines neuen Objekts ist wie folgt:&lt;/p>
&lt;ol>
&lt;li>Statische Variablen&lt;/li>
&lt;li>Statische Initialisierungblöcke&lt;/li>
&lt;li>Instanzvariablen&lt;/li>
&lt;li>Instanzblöcke&lt;/li>
&lt;li>Konstruktoren&lt;/li>
&lt;/ol>
&lt;p>Eine Java-Klasse kann beliebig viele statische und nicht-statische Initialisierungsblöcke aufweisen. Die Reihenfolge des Aufrufs bei mehreren Blöcken richtet sich nach der Reihenfolge der Implementation.&lt;/p>
&lt;p>&lt;strong>Beispiele&lt;/strong>&lt;/p>
&lt;p>Nicht-statischer Initialisierungsblock:
&lt;a href="https://www.tutorialspoint.com/a-non-static-initialization-block-in-java">https://www.tutorialspoint.com/a-non-static-initialization-block-in-java&lt;/a>&lt;/p>
&lt;p>Statischer Initialisierungblock:
&lt;a href="https://www.tutorialspoint.com/a-static-initialization-block-in-java">https://www.tutorialspoint.com/a-static-initialization-block-in-java&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="instanzmethoden">Instanzmethoden&lt;/h2>
&lt;p>Methoden werden benutzt, um Funktionen zur Verfügung zu stellen. Diese Funktionalitäten reichen von einfachen Änderungen am Zustand eines Objekts bis zu komplexen Algorithmen zur Berechnung von mathematischen Dingen. Hier passiert also die Magie in einer Applikation.
Diese Methoden können also entweder den Inhalt von Datenfelder ändern oder ihre Werte verwenden, um eine bestimmte Berechnung durchzuführen.
Der Zugriffsmodifizierer einer Methode sollte immer so restriktiv wie möglich gewählt werden.&lt;/p>
&lt;p>Eine Methodendeklaration besteht aus bis zu sieben Komponenten:&lt;/p>
&lt;ol>
&lt;li>Zugriffsmodifikator. public, protected, private oder package-private&lt;/li>
&lt;li>Sonstige Modifikatoren. Beispielsweise static oder synchronized&lt;/li>
&lt;li>Rückgabewert. Der Datentyp des von der Methode zurückgegebenen Werts oder &lt;em>void&lt;/em>, wenn die Methode keinen Wert zurückgibt&lt;/li>
&lt;li>Methodenname / Bezeichner&lt;/li>
&lt;li>Parameterliste in Klammern. Eine durch Kommas getrennte Liste von Eingabeparametern (Datentyp + Bezeichner). Wenn keine Parameter vorhanden sind, genügt die Angabe der beiden Klammern&lt;/li>
&lt;li>Exceptions. Dazu mehr später im Modul Exception Handling&lt;/li>
&lt;li>Methodenkörper.&lt;/li>
&lt;/ol>
&lt;h3 id="namenskonventionen-für-methoden">Namenskonventionen für Methoden&lt;/h3>
&lt;ul>
&lt;li>Erster Buchstabe immer klein&lt;/li>
&lt;li>CamelCase&lt;/li>
&lt;li>sollten aus einem Verb und einem Nomen zusammengesetzt werden&lt;/li>
&lt;li>Möglichst aussagekräftige Namen&lt;/li>
&lt;li>Möglichst keine Abkürzungen&lt;/li>
&lt;/ul>
&lt;h3 id="getter-und-setter">Getter und Setter&lt;/h3>
&lt;p>Diese beiden Arten von Methoden sind in der objektorientierten Programmierung unverzichtbar. Eine get-Methode (Getter) ruft den Wert eines bestimmten Datenfelds ab, während eine set-Methode (Setter) ihren Wert verändert. Dies dient dem Prinzip der Kapselung und kann unter anderem dazu verwendet werden, ein bestimmtes Datenfeld read-only zu gestalten (wenn es keine Setter-Methode dazu gibt).&lt;/p>
&lt;h4 id="namenskonventionen-1">Namenskonventionen&lt;/h4>
&lt;p>Für Getter- und Setter-Methoden werden immer die gleichen Methodennamen verwendet. Als Präfix benutzen wir &lt;em>get&lt;/em> und &lt;em>set&lt;/em> gefolgt vom Namen des Datenfelds worauf sich die Methode bezieht.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Car&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> speed&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">getSpeed&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> speed&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setSpeed&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> speed&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">speed&lt;/span> &lt;span style="color:#f92672">=&lt;/span> speed&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Demo&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Car car &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Car&lt;span style="color:#f92672">();&lt;/span>
car&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setSpeed&lt;/span>&lt;span style="color:#f92672">(&lt;/span>100&lt;span style="color:#f92672">);&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>car&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getSpeed&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="methoden-überladen">Methoden überladen&lt;/h3>
&lt;p>In Java können wir Methoden überladen. Das heisst, wir können mehrere Methoden mit demselben Namen definieren, solange die Anzahl an Parametern oder die Datentypen der Parameter variiert. Beim Aufruf der Methode wird vom Compiler die entsprechende Definition ausgewählt.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Calculator&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> &lt;span style="color:#a6e22e">product&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">double&lt;/span> x&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> y&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> y&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">// Overloading the function to handle three arguments
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> &lt;span style="color:#a6e22e">product&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">double&lt;/span> x&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> y&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> z&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> y &lt;span style="color:#f92672">*&lt;/span> z&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">// Overloading the function to handle int
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">product&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> x&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> y&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> x &lt;span style="color:#f92672">*&lt;/span> y&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Demo&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Calculator cal &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Calculator&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#66d9ef">double&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> 10&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">double&lt;/span> y &lt;span style="color:#f92672">=&lt;/span> 20&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">double&lt;/span> z &lt;span style="color:#f92672">=&lt;/span> 5
&lt;span style="color:#66d9ef">int&lt;/span> a &lt;span style="color:#f92672">=&lt;/span> 12&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">int&lt;/span> b &lt;span style="color:#f92672">=&lt;/span> 4&lt;span style="color:#f92672">;&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>cal&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">product&lt;/span>&lt;span style="color:#f92672">(&lt;/span>x&lt;span style="color:#f92672">,&lt;/span> y&lt;span style="color:#f92672">));&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>cal&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">product&lt;/span>&lt;span style="color:#f92672">(&lt;/span>x&lt;span style="color:#f92672">,&lt;/span> y&lt;span style="color:#f92672">,&lt;/span> z&lt;span style="color:#f92672">));&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>cal&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">product&lt;/span>&lt;span style="color:#f92672">(&lt;/span>a&lt;span style="color:#f92672">,&lt;/span> b&lt;span style="color:#f92672">));&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Methoden, deren Parameter gleich sind (gleiche Anzahl, gleiche Datentypen) und sich lediglich in ihren Rückgabetypen unterscheiden, können nicht überladen werden, da der Compiler nicht in der Lage ist, zwischen ihren Aufrufen zu unterscheiden.&lt;/p>
&lt;h3 id="die-methoden-equals-und-hashcode">Die Methoden equals() und hashCode()&lt;/h3>
&lt;p>Die Methoden &lt;em>equals()&lt;/em> und &lt;em>hashCode()&lt;/em> gehören zu den grundlegenden Java APIs.
Beide Methoden gehören automatisch zur öffentlichen Schnittstelle jeder Klasse, da sie durch die implizite Ableitung von der Object-Klasse geerbt werden (mehr dazu im Teil &amp;ldquo;Objektorientiertes Design&amp;rdquo; in diesem Modul).&lt;br>
Ob die Default-Umsetzung beider Methoden ausreicht, wird aufgrund von den fachlichen Gegebenheiten entschieden und ggf. werden &lt;strong>beide&lt;/strong> Methoden überschrieben.&lt;/p>
&lt;h4 id="equals">equals()&lt;/h4>
&lt;p>Die Methode &lt;em>equals()&lt;/em> ermöglicht uns das aus dem fachlichen Kontext stammende Gleichheitsverständnis im Code umzusetzen.&lt;br>
Die Default-Umsetzung der Methode in der Object-Klasse definiert, dass zwei Objekte nur dann gleich sind wenn sie die gleiche Identität haben. Das heisst, zwei unterschiedliche Instanzen (also zwei Objekte) einer Klasse sind gemäss dieser Umsetzung nicht gleich auch wenn alle Felder der beiden Objekten mit den gleichen Werte befüllt werden.
Aufgrund der fachlichen Gegebenheiten kann diese Definition der Gleichheit nicht korrekt sein. In so einem Fall muss die Methode &lt;em>equals()&lt;/em> überschrieben werden.&lt;/p>
&lt;p>Bei der Umsetzung müssen folgende Bedingungen für die Definition der Gleichheit bei nicht-null Objekten gemäss &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#equals(java.lang.Object)">API-Definition für equals()&lt;/a> erfüllt werden:&lt;br>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Reflexivität&lt;/strong>: Das Objekt liefert beim Vergleich mit sich selbst true.&lt;/li>
&lt;li>&lt;strong>Symmetrie&lt;/strong>: Das Resultat des Vergleichs x mit y ist gleich wie das des Vergleichs y mit x. Es ist also egal wie verglichen wird.&lt;/li>
&lt;li>&lt;strong>Transivität&lt;/strong>: Wenn x gleich y ist und y gleich z, dann ist x gleich z.&lt;/li>
&lt;li>&lt;strong>Konsistenz&lt;/strong>: Egal wie häufig der Vergleich durchgeführt wird, es kommt immer dasselbe heraus, sofern sich der Inhalt der Objekte nicht verändert.&lt;/li>
&lt;li>&lt;strong>Behandlung von null&lt;/strong>: Der Vergleich mit null liefert immer false.&lt;/li>
&lt;/ul>
&lt;h4 id="hashcode">hashCode()&lt;/h4>
&lt;p>Die Methode &lt;em>hashCode()&lt;/em> sollte für jedes Objekt einen Hashwert (Fingerabdruck) liefern, der das Objekt möglichst eindeutig identifiziert.&lt;br>
Der berechnete Hashwert ermöglicht einen effizienten und schnellen Zugriff auf ein bestimmtes Objekt innerhalb eines Hash-basierten Containers wie z.B. einer &lt;em>HashMap&lt;/em>.&lt;br>
Auch für diese Methode definiert die &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#hashCode()">API-Definition für hashCode()&lt;/a> Bedingungen, welche erfüllt werden müssen damit die Methode zweckmässig verwendet werden kann:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Konsistenz&lt;/strong>: Egal wie häufig hashCode() aufgerufen wird, es kommt stets dasselbe Resultat zurück, sofern der Inhalt des Objekts nicht geändert wurde.&lt;/li>
&lt;li>&lt;strong>Zusammenhang equals&lt;/strong>: Zwei Objekte, die gemäss equals() gleich sind, müssen den gleichen Hashwert liefern.&lt;/li>
&lt;li>&lt;strong>Zusammenhang not-equals&lt;/strong>: Zwei Objekte die gemäss equals() verschieden sind, müssen nicht zwingend unterschiedliche Hashwerte liefern. Grundsätzlich wäre es aber besser für die Performanz, wenn verschiedene Objekte auch verschiedene Hashwerte liefern würden.&lt;/li>
&lt;/ul>
&lt;p>In der Regel entscheiden wir uns aufgrund von fachlichen Gegebenheiten für die Überschreibung der Methode &lt;em>equals()&lt;/em>. Die Überschreibung von &lt;em>hashCode()&lt;/em> resultiert daraus als Konsequenz der Bedingung &amp;ldquo;Zusammenhang equals&amp;rdquo;.&lt;/p>
&lt;h2 id="enums">Enums&lt;/h2>
&lt;p>Enums (kurz für &amp;ldquo;enumeration&amp;rdquo;, zu Deutsch: Aufzählung) bieten die Möglichkeit, vordefinierte Konstanten zusammen zu gruppieren.
Enums werden dann verwendet, wenn alle mögliche Werte zur Kompilierzeit bekannt sind (z.B. alle Wochentage, alle Planeten im Sonnensystem usw.).&lt;/p>
&lt;p>In Java sind Aufzählungstypen als Klassen realisiert und die definierten Werte sind als Objekte implementiert.
Daraus ergeben sich folgenden nützlichen Eigenschaften:&lt;/p>
&lt;ul>
&lt;li>Enums können Konstruktoren, Instanzvariablen und Instanz-Methoden beinhalten&lt;/li>
&lt;li>Der Name der Enum-Werte kann mithilfe der toString-Methode (oder mit dem Keywort &lt;em>this&lt;/em>) im Klartext ausgegeben werden.&lt;/li>
&lt;li>Mithilfe des &amp;ldquo;==&amp;quot;-Operators kann auf Gleichheit geprüft werden.&lt;/li>
&lt;li>Enumerations können in switch-Anweisungen verwendet werden.&lt;/li>
&lt;li>Mithilfe der values-Methode wird ein Array zurückgegeben, das alle Elemente der Enumeration enthält. In Verbindung mit der erweiterten for-Schleife (for-each) können die Elemente sehr einfach durchlaufen werden.&lt;/li>
&lt;/ul>
&lt;p>Obwohl Java Enums als Klassen realisiert werden, müssen sie nicht mit &lt;em>new&lt;/em> instanziiert werden.
Im Gegensatz zu Klassen können Java-Enums weder erweitert werden noch von anderen Klassen erben.&lt;/p>
&lt;h3 id="enums-definieren">Enums definieren&lt;/h3>
&lt;p>Enums können innerhalb oder ausserhalb einer Klasse definiert werden (nicht aber innerhalb einer Methode!).
Um ein Enum zu definieren, wird das Java-Schlüsselwort &lt;em>enum&lt;/em> verwendet.&lt;/p>
&lt;p>Die erste Zeile(n) innerhalb der Enum-Definition soll eine kommagetrennte Liste von Konstanten beinhalten (in Java per Konvention mit Grossbuchstaben geschrieben).
Danach werden allfällige Variablen, Methoden und Konstruktoren definiert.&lt;/p>
&lt;p>Jede Enum-Konstante ist implizit &lt;em>&lt;strong>public static final&lt;/strong>&lt;/em>.
Weil es &lt;em>static&lt;/em> ist, kann über den Enum-Namen darauf zugegriffen werden.
Weil es &lt;em>final&lt;/em> ist, kann es nicht erweitert werden.&lt;/p>
&lt;h4 id="beispiel-definition-ausserhalb-einer-klasse">Beispiel: Definition ausserhalb einer Klasse&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">enum&lt;/span> Weekday &lt;span style="color:#f92672">{&lt;/span>
MONDAY&lt;span style="color:#f92672">,&lt;/span> TUESDAY&lt;span style="color:#f92672">,&lt;/span> WEDNESDAY&lt;span style="color:#f92672">,&lt;/span> THURSDAY&lt;span style="color:#f92672">,&lt;/span> FRIDAY&lt;span style="color:#f92672">,&lt;/span> SATURDAY&lt;span style="color:#f92672">,&lt;/span> SUNDAY
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DailyPlanner&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">dailyMood&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Weekday weekday&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">switch&lt;/span> &lt;span style="color:#f92672">(&lt;/span>weekday&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> MONDAY&lt;span style="color:#f92672">:&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;I don&amp;#39;t like Mondays&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> FRIDAY&lt;span style="color:#f92672">:&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Thank God it&amp;#39;s Friday&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> SATURDAY&lt;span style="color:#f92672">:&lt;/span>
&lt;span style="color:#66d9ef">case&lt;/span> SUNDAY&lt;span style="color:#f92672">:&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;There aren&amp;#39;t enough days in the weekend&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#66d9ef">default&lt;/span>&lt;span style="color:#f92672">:&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Some Midweek days feel like Mondays when I wish the were Fridays&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">break&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
dailyMood&lt;span style="color:#f92672">(&lt;/span>Weekday&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">MONDAY&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="beispiel-definition-innerhalb-einer-klasse">Beispiel: Definition innerhalb einer Klasse&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DailyPlanner&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">enum&lt;/span> Weekday &lt;span style="color:#f92672">{&lt;/span>
MONDAY&lt;span style="color:#f92672">,&lt;/span> TUESDAY&lt;span style="color:#f92672">,&lt;/span> WEDNESDAY&lt;span style="color:#f92672">,&lt;/span> THURSDAY&lt;span style="color:#f92672">,&lt;/span> FRIDAY&lt;span style="color:#f92672">,&lt;/span> SATURDAY&lt;span style="color:#f92672">,&lt;/span> SUNDAY
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;I like &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> Weekday&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">SATURDAY&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; and &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> Weekday&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">SUNDAY&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; the best&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="enum-mit-einem-konstruktor">Enum mit einem Konstruktor&lt;/h3>
&lt;p>Ein Enum-Konstruktor wird für jeder Enum-Konstante während dem Klassenladen des Enums ausgeführt.
Es ist unmöglich Enum-Objekte explizit zu erzeugen. Darum kann ein Enum-Konstruktor auch nicht direkt aufgerufen werden.&lt;/p>
&lt;h4 id="beispiel-enum-mit-einem-konstruktor">Beispiel: Enum mit einem Konstruktor&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">enum&lt;/span> Weekday &lt;span style="color:#f92672">{&lt;/span>
MONDAY&lt;span style="color:#f92672">(&lt;/span>1&lt;span style="color:#f92672">),&lt;/span> TUESDAY&lt;span style="color:#f92672">(&lt;/span>2&lt;span style="color:#f92672">),&lt;/span> WEDNESDAY&lt;span style="color:#f92672">(&lt;/span>3&lt;span style="color:#f92672">),&lt;/span> THURSDAY&lt;span style="color:#f92672">(&lt;/span>4&lt;span style="color:#f92672">),&lt;/span> FRIDAY&lt;span style="color:#f92672">(&lt;/span>5&lt;span style="color:#f92672">),&lt;/span> SATURDAY&lt;span style="color:#f92672">(&lt;/span>6&lt;span style="color:#f92672">),&lt;/span> SUNDAY&lt;span style="color:#f92672">(&lt;/span>7&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#66d9ef">final&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> dayNumber&lt;span style="color:#f92672">;&lt;/span>
Weekday&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Konstruktor für Tag &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">toString&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; wird ausgeführt. Das ist der &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">dayNumber&lt;/span>&lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;. Tag in der Woche&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TestDays&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Weekday monday &lt;span style="color:#f92672">=&lt;/span> Weekday&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">MONDAY&lt;/span>&lt;span style="color:#f92672">;&lt;/span> &lt;span style="color:#75715e">// Output:
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Konstruktor für Tag MONDAY wird ausgeführt. Das ist der 1. Tag in der Woche
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Konstruktor für Tag TUESDAY wird ausgeführt. Das ist der 2. Tag in der Woche
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Konstruktor für Tag WEDNESDAY wird ausgeführt. Das ist der 3. Tag in der Woche
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Konstruktor für Tag THURSDAY wird ausgeführt. Das ist der 4. Tag in der Woche
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Konstruktor für Tag FRIDAY wird ausgeführt. Das ist der 5. Tag in der Woche
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Konstruktor für Tag SATURDAY wird ausgeführt. Das ist der 6. Tag in der Woche
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// Konstruktor für Tag SUNDAY wird ausgeführt. Das ist der 7. Tag in der Woche
&lt;/span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>monday&lt;span style="color:#f92672">);&lt;/span> &lt;span style="color:#75715e">// Output: MONDAY
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="enum-mit-methoden">Enum mit Methoden&lt;/h3>
&lt;p>Ein Enum kann konkrete wie auch abstrakte Methoden beinhalten. Wenn ein Enum eine abstrakte Methode beinhaltet,
muss jede Instanz (also jede Konstante) dieses Enums diese Methode umsetzen (mehr Information über abstrakten Methoden findest du im Modul OOD).&lt;/p>
&lt;h4 id="beispiel-enum-mit-konkreten-und-abstrakten-methoden">Beispiel: Enum mit konkreten und abstrakten Methoden&lt;/h4>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">30
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">31
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">32
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">33
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">34
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">35
&lt;/span>&lt;span style="margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-java" data-lang="java">&lt;span style="color:#66d9ef">enum&lt;/span> Color &lt;span style="color:#f92672">{&lt;/span>
RED &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// Umsetzung der abstrakten Methode für die Farbe RED
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">colorPoem&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Roses are red&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">},&lt;/span>
VIOLET &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">// Umsetzung der abstrakten Methode für die Farbe VIOLET
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">colorPoem&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Violets are blue&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">};&lt;/span>
&lt;span style="color:#75715e">// Konkrete Methode, welche für alle Werte im Enum, dasselbe tut
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">generalColorInfo&lt;/span>&lt;span style="color:#f92672">(){&lt;/span>
System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Everyday color is a great color!&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">// Abstrakte Methode, welche von jedem Wert im Enum umgesetzt werden muss
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">abstract&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">colorPoem&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Test&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
Color violet &lt;span style="color:#f92672">=&lt;/span> Color&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">VIOLET&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
violet&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">generalColorInfo&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// Output: Everyday color is a great color!
&lt;/span>&lt;span style="color:#75715e">&lt;/span> violet&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">colorPoem&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// Output: Violets are blue
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
Color red &lt;span style="color:#f92672">=&lt;/span> Color&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">RED&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
red&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">generalColorInfo&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// Output: Everyday color is a great color!
&lt;/span>&lt;span style="color:#75715e">&lt;/span> red&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">colorPoem&lt;/span>&lt;span style="color:#f92672">();&lt;/span> &lt;span style="color:#75715e">// Output: Roses are red
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>