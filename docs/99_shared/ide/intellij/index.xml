<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Welcome Ninja – IntelliJ IDEA – dein Einstieg ins professionelle Programmieren</title><link>/docs/99_shared/ide/intellij/</link><description>Recent content in IntelliJ IDEA – dein Einstieg ins professionelle Programmieren on Welcome Ninja</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/docs/99_shared/ide/intellij/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: IntelliJ installieren</title><link>/docs/99_shared/ide/intellij/01_installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/99_shared/ide/intellij/01_installation/</guid><description>
&lt;h2 id="ziel">Ziel&lt;/h2>
&lt;ul>
&lt;li>IntelliJ IDEA ist auf deinem Rechner installiert.&lt;/li>
&lt;li>Du kannst ein einfaches Projekt laden und ausführen.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="intellij-idea-installieren">IntelliJ IDEA installieren&lt;/h2>
&lt;h3 id="schritt-1-download">Schritt 1: Download&lt;/h3>
&lt;div class="is-a-sbb" style="display: none;" data-should-display="flex">
&lt;div style="width: 100%; margin: 1rem auto;">
&lt;div style="
display: flex;
align-items: flex-start;
border: 2px solid #002b36;
border-radius: 16px;
padding: 1rem;
background-color: #fdfdfd;
">
&lt;div style="flex-shrink: 0; margin-right: 1rem;">
&lt;img src="/images/sbb-logo.png" alt="SBB Logo" style="width: 60px; height: 60px; border-radius: 12px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1;">
&lt;p>Wenn du bei der SBB in Ausbildung bist dann wähle hier die &lt;strong>Ultimate Edition&lt;/strong>. Damit stehen dir alle Features zur
Verfügung.&lt;/p>
&lt;p>Wie du diese Version aktivierst, erfährst du weiter unten.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;ol>
&lt;li>Öffne &lt;a href="https://www.jetbrains.com/idea/download">https://www.jetbrains.com/idea/download&lt;/a>.&lt;/li>
&lt;li>Wähle die &lt;strong>Community Edition&lt;/strong> für dein Betriebssystem.&lt;/li>
&lt;/ol>
&lt;h3 id="unterschied-community-und-ultimate-edition">Unterschied Community und Ultimate Edition&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Feature&lt;/th>
&lt;th>Community Edition&lt;/th>
&lt;th>Ultimate Edition&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Lizenz&lt;/strong>&lt;/td>
&lt;td>Kostenlos (Open Source)&lt;/td>
&lt;td>Kostenpflichtig (kommerziell)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Sprachen-Support&lt;/strong>&lt;/td>
&lt;td>Java, Kotlin, Groovy, Scala&lt;/td>
&lt;td>Alle aus Community + mehr&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Web-Entwicklung&lt;/strong>&lt;/td>
&lt;td>❌&lt;/td>
&lt;td>✅ HTML, CSS, JavaScript, etc.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Framework-Support&lt;/strong>&lt;/td>
&lt;td>Grundlegend (z. B. Maven)&lt;/td>
&lt;td>✅ Spring, Java EE, Micronaut&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Datenbank-Tools &amp;amp; SQL&lt;/strong>&lt;/td>
&lt;td>❌&lt;/td>
&lt;td>✅ Integrierter DB-Support&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Remote Development&lt;/strong>&lt;/td>
&lt;td>❌&lt;/td>
&lt;td>✅ (z. B. via JetBrains Gateway)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Erweiterte Debugging-Tools&lt;/strong>&lt;/td>
&lt;td>Einfaches Debugging&lt;/td>
&lt;td>✅ HTTP Client, Performance Profiler&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Enterprise Features&lt;/strong>&lt;/td>
&lt;td>❌&lt;/td>
&lt;td>✅ (z. B. Jakarta EE, Web Services)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Support &amp;amp; Updates&lt;/strong>&lt;/td>
&lt;td>Community-Support&lt;/td>
&lt;td>✅ JetBrains-Support&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>Die Community Edition eignet sich gut für reine Java/Kotlin-Entwicklung und reicht für die grundlegenden Module auf IT-Ninjas.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>Die Ultimate Edition ist ideal für professionelle Full-Stack- und Enterprise-Entwicklung. Sie wird in späteren Modulen (Angular, Spring Boot) benötigt wenn man nicht auf Visual Studio Code wechseln will.&lt;/p>&lt;/blockquote>
&lt;h3 id="schritt-2-installation">Schritt 2: Installation&lt;/h3>
&lt;div class="is-os-windows" style="display: none; margin: 1em 0;">
&lt;ol>
&lt;li>Lade die &lt;code>.exe&lt;/code>-Datei herunter und starte sie.&lt;/li>
&lt;li>Wähle:
&lt;ul>
&lt;li>Installationsverzeichnis&lt;/li>
&lt;li>Optional: &lt;code>Add launchers dir to the PATH&lt;/code>&lt;/li>
&lt;li>Optional: &lt;code>.java&lt;/code>-Dateien mit IntelliJ verknüpfen&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Klicke auf &lt;strong>Install&lt;/strong>.&lt;/li>
&lt;li>Starte IntelliJ IDEA nach Abschluss der Installation.&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="is-os-macos" style="display: none; margin: 1em 0;">
&lt;ol>
&lt;li>Lade die &lt;code>.dmg&lt;/code>-Datei herunter und öffne sie.&lt;/li>
&lt;li>Ziehe das IntelliJ-Icon in den Ordner &lt;code>Applications&lt;/code>.&lt;/li>
&lt;li>Starte IntelliJ IDEA.&lt;/li>
&lt;/ol>
&lt;/div>
&lt;div class="is-os-linux" style="display: none;">
&lt;ol>
&lt;li>Lade das &lt;code>.tar.gz&lt;/code>-Archiv herunter.&lt;/li>
&lt;li>Entpacke das Archiv (z. B. in &lt;code>~/apps&lt;/code>).&lt;/li>
&lt;li>Führe das Startskript &lt;code>bin/idea.sh&lt;/code> aus.&lt;/li>
&lt;/ol>
&lt;/div>
&lt;h3 id="schritt-3-erststart">Schritt 3: Erststart&lt;/h3>
&lt;p>Beim ersten Start:&lt;/p>
&lt;ul>
&lt;li>Frühere Einstellungen übernehmen? → Optional&lt;/li>
&lt;li>UI-Stil wählen (hell/dunkel)&lt;/li>
&lt;/ul>
&lt;p>Diese Einstellungen kannst du später jederzeit anpassen.&lt;/p>
&lt;div class="is-a-sbb" style="display: none;" data-should-display="flex">
&lt;div style="width: 100%; margin: 1rem auto;">
&lt;div style="
display: flex;
align-items: flex-start;
border: 2px solid #002b36;
border-radius: 16px;
padding: 1rem;
background-color: #fdfdfd;
">
&lt;div style="flex-shrink: 0; margin-right: 1rem;">
&lt;img src="/images/sbb-logo.png" alt="SBB Logo" style="width: 60px; height: 60px; border-radius: 12px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1;">
&lt;div style="display: flex; align-items: flex-start; background-color: #fef3c7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-warning.png" alt="it-ninja warning" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Das hier musst Du unbedingt lesen!
&lt;/div>
&lt;/div>
&lt;p>Um einen positiven Lerneffekt zu erhalten, verzichten wir am Anfang auf die Unterstützung von KI.&lt;/p>
&lt;p>Die folgenden Schritte &lt;strong>must&lt;/strong> du ausführen um Code-Vervollständigung innerhalb von IntelliJ auszuschalten.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>ZIP-Datei herunterladen&lt;/strong>&lt;br>
Lade die bereitgestellte ZIP-Datei mit den IntelliJ-Settings herunter:&lt;br>
&lt;a href="/files/tools/ide/intellij/BaseProfil.zip">Download Editor-Settings&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ZIP entpacken&lt;/strong>&lt;br>
Entpacke die ZIP-Datei an einem Ort deiner Wahl.&lt;br>
Du solltest danach die beiden Dateien sehen:&lt;/p>
&lt;ul>
&lt;li>&lt;code>editor.xml&lt;/code>&lt;/li>
&lt;li>&lt;code>full.line.xml&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>IntelliJ-Options-Verzeichnis finden&lt;/strong>&lt;br>
Das Options-Verzeichnis liegt im &lt;strong>Benutzereinstellungen-Ordner&lt;/strong> von IntelliJ IDEA.&lt;br>
Je nach Betriebssystem findest du diesen hier:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Windows&lt;/strong>:&lt;br>
&lt;code>C:\Users\&amp;lt;BENUTZERNAME&amp;gt;\AppData\Roaming\JetBrains\IntelliJIdea&amp;lt;Version&amp;gt;\options&lt;/code>&lt;/li>
&lt;li>&lt;strong>macOS&lt;/strong>:&lt;br>
&lt;code>~/Library/Application Support/JetBrains/IntelliJIdea&amp;lt;Version&amp;gt;/options&lt;/code>&lt;/li>
&lt;li>&lt;strong>Linux&lt;/strong>:&lt;br>
&lt;code>~/.config/JetBrains/IntelliJIdea&amp;lt;Version&amp;gt;/options&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Ersetze &lt;code>&amp;lt;Version&amp;gt;&lt;/code> durch deine IntelliJ-Version, z. B. &lt;code>2025.2&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Dateien kopieren&lt;/strong>&lt;br>
Kopiere die beiden Dateien &lt;code>editor.xml&lt;/code> und &lt;code>full.line.xml&lt;/code> in das &lt;strong>options&lt;/strong>-Verzeichnis.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>IntelliJ neu starten&lt;/strong>&lt;br>
Schließe IntelliJ IDEA vollständig und starte es neu, damit die Änderungen übernommen werden.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div style="display: flex; align-items: flex-start; background-color: #e0f2fe; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-info.png" alt="it-ninja info" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Falls das &lt;code>options&lt;/code>-Verzeichnis noch nicht existiert, starte IntelliJ einmal und beende es wieder – danach wird es automatisch angelegt.
&lt;/div>
&lt;/div>
&lt;div style="display: flex; align-items: flex-start; background-color: #fef3c7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-warning.png" alt="it-ninja warning" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Denk daran, dass du dich verpflichtet hast, auf den Einsatz von KI zu verzichten. Bei Unsicherheiten gehe auf deinen
Praxisbildner zu, damit er mit dir zusammen prüfen kann, ob alles korrekt eingestellt ist.
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="is-a-sbb" style="display: none;" data-should-display="flex">
&lt;div style="width: 100%; margin: 1rem auto;">
&lt;div style="
display: flex;
align-items: flex-start;
border: 2px solid #002b36;
border-radius: 16px;
padding: 1rem;
background-color: #fdfdfd;
">
&lt;div style="flex-shrink: 0; margin-right: 1rem;">
&lt;img src="/images/sbb-logo.png" alt="SBB Logo" style="width: 60px; height: 60px; border-radius: 12px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1;">
&lt;p>Nach der Installation beginnt ein 30-tägiger Testzeitraum der &lt;strong>Ultimate Edition&lt;/strong>.&lt;br>
Nutze diesen Zeitraum und fordere eine Lizenz an:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Besuche &lt;a href="https://omada.sbb.ch/home">https://omada.sbb.ch/home&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Suche nach der Gruppe &lt;code>DG_RBT_INTELLIJ-LICENSE&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Klicke auf &lt;strong>Zugriff anfordern&lt;/strong>&lt;br>
&lt;img src="./images/omada.png" alt="Omada">&lt;br>
&lt;img src="./images/omada_zugriff.png" alt="Omada Zugriff">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Sobald du Zugriff hast, registriere IntelliJ:&lt;/p>
&lt;ul>
&lt;li>Wähle &lt;strong>Activate (another) License&lt;/strong>&lt;/li>
&lt;li>Wähle &lt;strong>License Server&lt;/strong>&lt;/li>
&lt;li>Gib die Adresse &lt;code>https://sbb-license.fls.jetbrains.com&lt;/code> ein&lt;/li>
&lt;li>Klicke auf &lt;strong>Activate&lt;/strong>&lt;br>
&lt;img src="./images/intellij_register.png" alt="IntelliJ Register">&lt;br>
&lt;img src="./images/intellij_register1.png" alt="IntelliJ Register Schritt 2">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Danach ist IntelliJ Ultimate aktiviert.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h3 id="schritt-4-jdk-einrichten">Schritt 4: JDK einrichten&lt;/h3>
&lt;p>In der Ausbildung nutzen wir Eclipse Temurin &lt;strong>JDK 21 (LTS)&lt;/strong> als Standard JDK.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Öffne &lt;strong>File → Project Structure…&lt;/strong> (&lt;code>Strg+Alt+Shift+S&lt;/code>).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Links &lt;strong>Platform Settings → SDKs&lt;/strong>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Klicke &lt;strong>+ → Download JDK&lt;/strong>&lt;br>
&lt;img src="/docs/99_shared/ide/intellij/01_installation/images/add_new_sdk.png" alt="Add new SDK">
&lt;img src="/docs/99_shared/ide/intellij/01_installation/images/download_sdk.png" alt="Download SDK">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Wähle:&lt;/p>
&lt;ul>
&lt;li>Version: &lt;strong>21&lt;/strong>&lt;/li>
&lt;li>Anbieter: &lt;strong>Eclipse Temurin&lt;/strong>, nicht Oracle!&lt;/li>
&lt;li>Den Installationsordner so belassen wie vorgeschlagen&lt;br>
&lt;img src="/docs/99_shared/ide/intellij/01_installation/images/select_sdk.png" alt="alt text">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>IntelliJ lädt und installiert das JDK automatisch.&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Docs: IntelliJ einrichten</title><link>/docs/99_shared/ide/intellij/02_einrichten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/99_shared/ide/intellij/02_einrichten/</guid><description>
&lt;h2 id="ziele">Ziele&lt;/h2>
&lt;ul>
&lt;li>Du kennst die wichtigsten Funktionen von IntelliJ IDEA.&lt;/li>
&lt;li>Du kannst Projekte in IntelliJ IDEA anlegen, konfigurieren und verwalten.&lt;/li>
&lt;li>Du kannst Plugins suchen und installieren.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="einführung-in-intellij-idea">Einführung in IntelliJ IDEA&lt;/h2>
&lt;p>Besuche die folgenden Links und lies dir die Inhalte aufmerksam durch:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.jetbrains.com/help/idea/discover-intellij-idea.html#navigation-and-search">Navigation und Suche&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jetbrains.com/help/idea/guided-tour-around-the-user-interface.html">Benutzeroberfläche&lt;/a>&lt;/li>
&lt;/ul>
&lt;div style="display: flex; align-items: flex-start; background-color: #e0f2fe; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-info.png" alt="it-ninja info" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Ansicht und Verhalten können je nach IntelliJ-Version, installierten Plugins oder deinen Einstellungen leicht abweichen.
&lt;/div>
&lt;/div>
&lt;h2 id="tastenkombinationen-keymap">Tastenkombinationen (Keymap)&lt;/h2>
&lt;p>IntelliJ bietet viele nützliche Shortcuts, um effizienter zu arbeiten. Du findest die wichtigsten in der offiziellen Referenz:&lt;/p>
&lt;p>👉 &lt;a href="https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf">IntelliJ IDEA Reference Card (PDF)&lt;/a>&lt;/p>
&lt;h3 id="personalisierte-keymap">Personalisierte Keymap&lt;/h3>
&lt;p>Manche Tastenkombinationen funktionieren nur unter bestimmten Bedingungen. Zum Beispiel ist &lt;code>Ctrl + /&lt;/code> nur auf Tastaturen mit Nummernblock verfügbar.&lt;/p>
&lt;p>Du kannst deine Shortcuts anpassen:&lt;/p>
&lt;ol>
&lt;li>Öffne die Einstellungen (&lt;code>Ctrl + Alt + S&lt;/code>).&lt;/li>
&lt;li>Suche nach &lt;strong>Keymap&lt;/strong>.&lt;/li>
&lt;li>Ändere oder suche Tastenkombinationen.&lt;/li>
&lt;li>Alternativ kannst du auch eine andere Keymap wie &lt;em>Eclipse&lt;/em> oder &lt;em>Visual Studio&lt;/em> wählen.&lt;/li>
&lt;/ol>
&lt;div style="display: flex; align-items: flex-start; background-color: #dcfce7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-tip.png" alt="it-ninja tip" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Unter &lt;strong>Help → Keymap Reference&lt;/strong> kannst du deine persönliche Keymap als PDF exportieren.
&lt;/div>
&lt;/div>
&lt;h3 id="nützliche-tastenkombinationen-für-den-einstieg">Nützliche Tastenkombinationen für den Einstieg&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Funktion&lt;/th>
&lt;th>Shortcut&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Einstellungen öffnen&lt;/td>
&lt;td>Ctrl + Alt + S&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Überall suchen&lt;/td>
&lt;td>2× Shift&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Smart Code Completion&lt;/td>
&lt;td>Ctrl + Alt + Space&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Code formatieren&lt;/td>
&lt;td>Ctrl + Alt + L&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Imports optimieren&lt;/td>
&lt;td>Ctrl + Alt + O&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Code generieren (Konstruktor, Getter, Setter usw.)&lt;/td>
&lt;td>Alt + Insert&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="code-snippets-mit-kürzeln">Code-Snippets mit Kürzeln&lt;/h3>
&lt;p>IntelliJ bietet Kürzel, mit denen du automatisch Code generieren kannst. Nutze &lt;code>Ctrl + J&lt;/code>, um alle verfügbaren Kürzel anzuzeigen.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Kürzel&lt;/th>
&lt;th>Funktion&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>psvm&lt;/code>&lt;/td>
&lt;td>&lt;code>public static void main(...)&lt;/code>-Methode&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sout&lt;/code>&lt;/td>
&lt;td>&lt;code>System.out.println(...)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>souf&lt;/code>&lt;/td>
&lt;td>Formatierter &lt;code>System.out.printf(...)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>serr&lt;/code>&lt;/td>
&lt;td>&lt;code>System.err.println(...)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fori&lt;/code>&lt;/td>
&lt;td>for-Schleife mit Zähler &lt;code>i&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>foreach&lt;/code>&lt;/td>
&lt;td>foreach-Schleife&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ifn&lt;/code>&lt;/td>
&lt;td>if (x == null)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>itli&lt;/code>&lt;/td>
&lt;td>Iteration über eine Liste&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>itit&lt;/code>&lt;/td>
&lt;td>Iteration mit Iterator&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="neues-projekt-anlegen">Neues Projekt anlegen&lt;/h2>
&lt;p>Nutze folgendes offizielles Tutorial für deinen Einstieg:
👉 &lt;a href="https://www.jetbrains.com/help/idea/creating-and-running-your-first-java-application.html">Dein erstes Java-Projekt erstellen&lt;/a>&lt;/p>
&lt;div style="display: flex; align-items: flex-start; background-color: #dcfce7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-tip.png" alt="it-ninja tip" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Für viele unserer Übungen stellen wir dir ein vorbereitetes Projekt zur Verfügung. Trotzdem lohnt es sich, das Anlegen eines neuen Projekts selbst zu üben – vielleicht willst du ja bald deine eigene Applikation entwickeln.
&lt;/div>
&lt;/div>
&lt;h2 id="plugins-installieren">Plugins installieren&lt;/h2>
&lt;p>Plugins erweitern die Funktionalität von IntelliJ IDEA. Du findest sie unter &lt;strong>Einstellungen → Plugins&lt;/strong> im Marktplatz.&lt;/p>
&lt;h3 id="warum-plugins">Warum Plugins?&lt;/h3>
&lt;ul>
&lt;li>Integration mit Git, Application Servern usw.&lt;/li>
&lt;li>Unterstützung für zusätzliche Sprachen und Frameworks&lt;/li>
&lt;li>Produktivitätssteigerung durch Live-Vorschau, File Watcher, Shortcuts&lt;/li>
&lt;li>Lernhilfe durch Übungs-Plugins&lt;/li>
&lt;/ul>
&lt;h3 id="empfehlung-key-promoter-x">Empfehlung: Key Promoter X&lt;/h3>
&lt;p>Dieses Plugin zeigt dir bei jeder Mausaktion den entsprechenden Shortcut an – ideal, um effizienter zu arbeiten.&lt;/p>
&lt;h2 id="code-formatieren">Code formatieren&lt;/h2>
&lt;p>So formatierst du deinen Code in IntelliJ IDEA:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Wähle den gewünschten Code aus (eine Zeile, ein Block oder alles).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nutze die Tastenkombination:&lt;/p>
&lt;ul>
&lt;li>Windows/Linux: &lt;code>Ctrl + Alt + L&lt;/code>&lt;/li>
&lt;li>macOS: &lt;code>Cmd + Option + L&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Oder über das Kontextmenü: &lt;strong>Rechtsklick → Code neu formatieren&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="formatierungsstil-anpassen">Formatierungsstil anpassen&lt;/h3>
&lt;p>Wenn du den Stil ändern möchtest:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Datei&lt;/strong> → &lt;strong>Einstellungen&lt;/strong> (Windows/Linux)&lt;br>
&lt;strong>IntelliJ IDEA&lt;/strong> → &lt;strong>Einstellungen&lt;/strong> (macOS)&lt;/li>
&lt;li>Navigiere zu &lt;strong>Editor → Code-Stil&lt;/strong>.&lt;/li>
&lt;li>Wähle die Sprache (z. B. Java).&lt;/li>
&lt;li>Passe Einrückungen, Leerzeichen, Klammern usw. an.&lt;/li>
&lt;li>Speichern mit &lt;strong>OK&lt;/strong> oder &lt;strong>Apply&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>IntelliJ wendet die Regeln künftig bei jeder Formatierung automatisch an.&lt;/p>
&lt;hr></description></item><item><title>Docs: Debugging in IntelliJ</title><link>/docs/99_shared/ide/intellij/06_debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/99_shared/ide/intellij/06_debugging/</guid><description>
&lt;div style="display: flex; align-items: flex-start; background-color: #fef3c7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-warning.png" alt="it-ninja warning" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Noch nicht sicher, was Debugging genau ist oder wann man es verwendet? Schau dir zuerst das Modul &lt;a href="../../../../02_java/03_java-grundlagen/10_debugging/">Debugging – Fehler finden und verstehen&lt;/a> an.
&lt;/div>
&lt;/div>
&lt;h2 id="ziele">Ziele&lt;/h2>
&lt;ul>
&lt;li>Du kannst in IntelliJ Breakpoints setzen und konfigurieren.&lt;/li>
&lt;li>Du verstehst die wichtigsten Funktionen des Debuggers.&lt;/li>
&lt;li>Du kannst den Zustand deines Programms gezielt analysieren.&lt;/li>
&lt;/ul>
&lt;h2 id="breakpoints-setzen">Breakpoints setzen&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Linksklick&lt;/strong> auf die Zeilennummer: Standard-Breakpoint&lt;/li>
&lt;li>&lt;strong>Rechtsklick&lt;/strong> für erweiterte Optionen wie Conditional Breakpoints&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/06_debugging/images/debugging-options-intelliJ.png" alt="IntelliJ Breakpoint Optionen" title="Breakpoint Optionen IntelliJ">&lt;/p>
&lt;h2 id="erweiterte-breakpoint-einstellungen">Erweiterte Breakpoint-Einstellungen&lt;/h2>
&lt;ul>
&lt;li>Bedingung festlegen&lt;/li>
&lt;li>Nur einmal auslösen&lt;/li>
&lt;li>Log-Nachricht statt Pause&lt;/li>
&lt;li>Nur aktiv, wenn ein anderer Breakpoint vorher ausgelöst wurde&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/06_debugging/images/debugging-conditional-breakpoint-intelliJ.png" alt="Conditional Breakpoint">
&lt;img src="/docs/99_shared/ide/intellij/06_debugging/images/debugging-conditional-breakpoint-extend-intelliJ.png" alt="Erweiterte Optionen">&lt;/p>
&lt;h2 id="debug-starten">Debug starten&lt;/h2>
&lt;p>Klicke oben rechts auf das &lt;strong>Käfer-Symbol&lt;/strong>, um im Debug-Modus zu starten:&lt;/p>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/06_debugging/images/debugging-starten-intelliJ.png" alt="Debug starten">&lt;/p>
&lt;h2 id="debugger-panel">Debugger-Panel&lt;/h2>
&lt;p>Hier findest du alle wichtigen Bereiche:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Debugger Controls&lt;/strong> (Steuerung)&lt;/li>
&lt;li>&lt;strong>Variables&lt;/strong> (aktuelle Werte)&lt;/li>
&lt;li>&lt;strong>Frames&lt;/strong> (Call Stack)&lt;/li>
&lt;li>&lt;strong>Watches&lt;/strong> (beobachtete Variablen)&lt;/li>
&lt;li>&lt;strong>Console&lt;/strong> (Fehlermeldungen, Ausgaben)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/06_debugging/images/debugging-panel-intelliJ.png" alt="Debugger Panel">&lt;/p>
&lt;h3 id="controls-oben-links">Controls (oben links)&lt;/h3>
&lt;ul>
&lt;li>▶ Resume: weiterlaufen lassen&lt;/li>
&lt;li>⏯ Step Over: nächste Zeile&lt;/li>
&lt;li>🔽 Step Into: in Methode springen&lt;/li>
&lt;li>🔼 Step Out: aus Methode raus&lt;/li>
&lt;li>⏹ Stop: Debug beenden&lt;/li>
&lt;li>♻ Rerun: neu starten&lt;/li>
&lt;li>🔕 Mute Breakpoints: pausiert alle Breakpoints&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/06_debugging/images/debugging-actions-intelliJ.png" alt="Debugger Controls">&lt;/p>
&lt;h3 id="watches--variables">Watches &amp;amp; Variables&lt;/h3>
&lt;p>Variablen und eigene Ausdrücke überwachen:&lt;/p>
&lt;ul>
&lt;li>Rechtsklick → „Add to Watches“&lt;/li>
&lt;li>Oder ins Watch-Feld schreiben&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/06_debugging/images/debugging-add-watcher-intelliJ.png" alt="Watcher hinzufügen">
&lt;img src="/docs/99_shared/ide/intellij/06_debugging/images/debugging-watchers-intelliJ.png" alt="Watchers Übersicht">&lt;/p>
&lt;h2 id="weitere-infos">Weitere Infos&lt;/h2>
&lt;p>👉 &lt;a href="https://www.jetbrains.com/help/idea/debugging-code.html">Offizielle JetBrains Doku zu Debugging&lt;/a>&lt;/p></description></item><item><title>Docs: Mit IntelliJ Java Code kompilieren, ausführen und debuggen</title><link>/docs/99_shared/ide/intellij/03_run-and-debug/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/99_shared/ide/intellij/03_run-and-debug/</guid><description>
&lt;h2 id="ziele">Ziele&lt;/h2>
&lt;ul>
&lt;li>Du kannst deinen Java-Code in IntelliJ ausführen&lt;/li>
&lt;li>Du verstehst, wie du Breakpoints setzt und deinen Code debuggen kannst&lt;/li>
&lt;li>Du lernst die wichtigsten Shortcuts und Funktionen für das Entwickeln mit IntelliJ kennen&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div style="display: flex; align-items: flex-start; background-color: #dcfce7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-tip.png" alt="it-ninja tip" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Um erste Erfahrungen mit IntelliJ zu machen, kannst Du das
&lt;a id="back-from-lab" href="/labs/02_java/03_java-grundlagen/00_simple-hello-world/">Hello World Beispiel&lt;/a>
von it-ninjas verwenden.
&lt;/div>
&lt;/div>
&lt;h2 id="java-programm-ausführen">Java-Programm ausführen&lt;/h2>
&lt;p>Sobald dein Java-Programm eine &lt;code>main&lt;/code>-Methode enthält, kannst du es direkt starten:&lt;/p>
&lt;ol>
&lt;li>Öffne die Datei mit der &lt;code>main&lt;/code>-Methode.&lt;/li>
&lt;li>Klicke links neben die Zeilennummer (dort erscheint ein grünes Dreieck).&lt;/li>
&lt;li>Wähle &lt;strong>Run &amp;lsquo;Dateiname.main()&amp;rsquo;&lt;/strong> aus.&lt;/li>
&lt;/ol>
&lt;p>Alternativ kannst du über das Menü oben auf den &lt;strong>Play-Button&lt;/strong> klicken oder &lt;code>Shift + F10&lt;/code> drücken.&lt;/p>
&lt;div style="display: flex; align-items: flex-start; background-color: #dcfce7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-tip.png" alt="it-ninja tip" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Du kannst mehrere Run-Konfigurationen definieren – zum Beispiel für verschiedene Klassen oder Tests.
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2 id="projekt-kompilieren">Projekt kompilieren&lt;/h2>
&lt;p>IntelliJ kompiliert deinen Code automatisch im Hintergrund, sobald du speicherst.&lt;br>
Manuelles Kompilieren geht so:&lt;/p>
&lt;ul>
&lt;li>Über das Menü: &lt;code>Build → Build Project&lt;/code>&lt;/li>
&lt;li>Tastenkürzel: &lt;code>Ctrl + F9&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Wenn du Fehler machst, werden sie sofort hervorgehoben – das spart dir viel Zeit.&lt;/p>
&lt;hr>
&lt;h2 id="debugging-in-intellij">Debugging in IntelliJ&lt;/h2>
&lt;p>Fehler finden geht einfacher, wenn du den Debugger verwendest.&lt;/p>
&lt;h3 id="breakpoint-setzen">Breakpoint setzen&lt;/h3>
&lt;ol>
&lt;li>Klicke links neben eine Zeilennummer → roter Punkt erscheint.&lt;/li>
&lt;li>Starte das Programm im Debug-Modus: &lt;code>Shift + F9&lt;/code> oder Rechtsklick auf das grüne Dreieck → &lt;strong>Debug &amp;lsquo;&amp;hellip;&amp;rsquo;&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;h3 id="debugger-ansicht">Debugger-Ansicht&lt;/h3>
&lt;p>Sobald der Code anhält:&lt;/p>
&lt;ul>
&lt;li>Du siehst aktuelle Variablen und deren Werte&lt;/li>
&lt;li>Du kannst mit den Buttons &lt;strong>Step Over&lt;/strong>, &lt;strong>Step Into&lt;/strong> oder &lt;strong>Resume&lt;/strong> den Code durchgehen&lt;/li>
&lt;/ul>
&lt;div style="display: flex; align-items: flex-start; background-color: #e0f2fe; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-info.png" alt="it-ninja info" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Im Debug-Fenster kannst du sogar Variablen ändern oder Ausdrücke live auswerten – perfekt zum Testen von Vermutungen!
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2 id="häufige-shortcuts">Häufige Shortcuts&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Aktion&lt;/th>
&lt;th>Shortcut&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Programm ausführen&lt;/td>
&lt;td>&lt;code>Shift + F10&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Debug starten&lt;/td>
&lt;td>&lt;code>Shift + F9&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Projekt kompilieren&lt;/td>
&lt;td>&lt;code>Ctrl + F9&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Nächste Zeile (Debug)&lt;/td>
&lt;td>&lt;code>F8&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>In Methode springen (Debug)&lt;/td>
&lt;td>&lt;code>F7&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h2 id="fazit">Fazit&lt;/h2>
&lt;p>IntelliJ unterstützt dich bei jedem Schritt – vom ersten Ausführen bis zum systematischen Debugging.&lt;br>
Mit ein paar Handgriffen kannst du effizient Fehler finden und verstehen, wie dein Programm wirklich funktioniert.&lt;/p>
&lt;div style="display: flex; align-items: flex-start; background-color: #dcfce7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-tip.png" alt="it-ninja tip" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Nutze den Debugger regelmässig – das verbessert nicht nur deinen Code, sondern auch dein Verständnis für Programmabläufe.
&lt;/div>
&lt;/div></description></item><item><title>Docs: Git mit IntelliJ nutzen</title><link>/docs/99_shared/ide/intellij/04_git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/99_shared/ide/intellij/04_git/</guid><description>
&lt;h2 id="ziele">Ziele&lt;/h2>
&lt;ul>
&lt;li>Ich kann Git direkt in IntelliJ IDEA nutzen, ohne das Terminal öffnen zu müssen.&lt;/li>
&lt;li>Ich verstehe die wichtigsten Funktionen von Git in IntelliJ.&lt;/li>
&lt;li>Ich weiss, wie ich meine Änderungen kontrolliere, zurücknehme und veröffentliche.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="voraussetzungen">Voraussetzungen&lt;/h2>
&lt;p>Damit du Git in IntelliJ nutzen kannst:&lt;/p>
&lt;ul>
&lt;li>Git ist auf deinem System installiert (kann bei Bedarf über IntelliJ automatisch installiert werden).&lt;/li>
&lt;li>Ein Projekt ist als Git-Repository initialisiert oder bereits mit einem Repository verbunden.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="git-repository-erstellen--initialisieren">Git Repository erstellen / initialisieren&lt;/h3>
&lt;p>Falls du noch kein Git-Repository erstellt hast, kannst du das direkt in IntelliJ IDEA tun.&lt;/p>
&lt;p>Gehe dazu oben im Projektfenster auf &lt;strong>Version Control&lt;/strong> (beim Fenstertitel) und wähle &lt;strong>Create Git Repository&amp;hellip;&lt;/strong> aus.&lt;br>
Wähle danach das Projektverzeichnis aus, das versioniert werden soll.&lt;/p>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/04_git/images/create-git-repository.png" alt="Create Git Repository">&lt;/p>
&lt;div style="display: flex; align-items: flex-start; background-color: #dcfce7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-tip.png" alt="it-ninja tip" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Nach dem Erstellen siehst du unten den neuen Git-Tab und kannst mit dem ersten Commit starten.
&lt;/div>
&lt;/div>
&lt;h3 id="git-repository-mit-einem-remote-repository-server-verbinden">Git Repository mit einem Remote Repository (Server) verbinden&lt;/h3>
&lt;p>Wenn Du ein Git Repository selber erstellt hast, ist dieses nur lokal vorhanden. Beim ersten &lt;strong>Push&lt;/strong> wirst du darum von
IntelliJ nach der URL für das Remote Repository gefragt. Wie du die URL für dein Remote Repository bekommst erfährst du
unter &lt;a href="/docs/99_shared/collaboration/source-repositories/">Source Repositories&lt;/a>.&lt;/p>
&lt;div style="display: flex; align-items: flex-start; background-color: #B0B0B0; margin-bottom: 1rem; border-radius: 12px">
&lt;div style="flex-shrink: 0; margin-right: 1rem;">
&lt;img src="/images/it-ninja-work.png" alt="SBB Logo" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px">
&lt;p class="font-bold mb-2">Entschuldige, da fehlt noch was...&lt;/p>
--> Screenshot Remote Repository hinzufügen&amp;hellip;
&lt;/div>
&lt;/div>
&lt;h4 id="gitignore-anpassen">.gitignore anpassen&lt;/h4>
&lt;p>IntelliJ erstellt im Projektverzeichnis eigene Dateien, welche nichts mit dem eigentlichen Projekt zu tun haben und
deshalb im Git Repository nichts verloren haben. Aus diesem Grund empfiehlt es sich, gleich am Anfang eine .gitignore
Datei zu erstellen, welche Verzeichnisse und Dateien enthält, welche ignoriert werden sollen.&lt;/p>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/04_git/images/create-gitignore.png" alt=".gitignore erstellen">&lt;/p>
&lt;p>Die .gitignore Datei selber muss zum Git Repository hinzugefügt werden, damit Git sich daran erinnern kann.&lt;/p>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/04_git/images/add-gitignore.png" alt="add .gitignore">&lt;/p>
&lt;p>Öffne die Datei .gitignore und füge folgende Zeilen hinzu (.idea/ sollte schon vorhanden sein):&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>*.iml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.idea/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>out/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>target/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>build/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;div style="display: flex; align-items: flex-start; background-color: #dcfce7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-tip.png" alt="it-ninja tip" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Die Verzeichnisse &lt;code>target/&lt;/code> und &lt;code>build/&lt;/code> haben nichts mit IntelliJ zu tun sondern sind Verzeichnisse welche erstellt
werden, wenn man Maven oder Gradle nutzt (das sind Build-Mamangement Tools, mehr über Maven erfährst Du
&lt;a href="/labs/02_java/05_maven/">hier&lt;/a>).
&lt;/div>
&lt;/div>
&lt;p>Die Datei sollte am ende etwa so aussehen:&lt;/p>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/04_git/images/gitignore.png" alt=".gitignore">&lt;/p>
&lt;h4 id="intellij-run-configurations">IntelliJ Run Configurations&lt;/h4>
&lt;p>Mit den Run Configurations kann das Starten des Java-Programms vereinfacht werden.
Wenn du hauptsächlich mit IntelliJ arbeitest, kann es sinnvoll sein, diese Einstellungen ebenfalls im Git-Repository zu speichern.&lt;/p>
&lt;p>Passe dazu die .gitignore wie folgt an:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> IntelliJ
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">*&lt;/span>.&lt;span style="color:#a6e22e">iml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">idea&lt;/span>&lt;span style="color:#f92672">/*&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">!&lt;/span>.&lt;span style="color:#a6e22e">idea&lt;/span>&lt;span style="color:#f92672">/&lt;/span>runConfigurations&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">#&lt;/span> Build&lt;span style="color:#f92672">-&lt;/span>Output
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>out&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>target&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>build&lt;span style="color:#f92672">/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="mehrere-projekte-in-einem-git-repository">Mehrere Projekte in einem Git Repository&lt;/h4>
&lt;p>Falls das Repository mehrere Intelli-J Projekte enthält, müssen wir .gitignore anpassen, damit in allen
Unterverzeichnissen gefiltert wird.&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span># IntelliJ-Projekte in Unterordnern
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>**/*.iml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>**/.idea/*
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>!**/.idea/runConfigurations/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># Build-Output in allen Projekten
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>**/out/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>**/target/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>**/build/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h2 id="git-funktionen-in-intellij-idea">Git-Funktionen in IntelliJ IDEA&lt;/h2>
&lt;p>Die folgenden Funktionen sind direkt in die Oberfläche von IntelliJ integriert und erleichtern dir die tägliche Arbeit
mit Git:&lt;/p>
&lt;hr>
&lt;h3 id="2-änderungen-verfolgen">2. Änderungen verfolgen&lt;/h3>
&lt;blockquote>
&lt;p>Ansicht öffnen: &lt;code>View → Tool Windows → Commit&lt;/code> oder &lt;code>Alt+0&lt;/code>&lt;br>
Oder über die linke Leiste: &lt;strong>Commit&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>Du siehst sofort, welche Dateien geändert wurden.&lt;/p>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/04_git/images/commit.png" alt="Önderungen verfolgen">&lt;/p>
&lt;hr>
&lt;h3 id="3-commits-erstellen">3. Commits erstellen&lt;/h3>
&lt;blockquote>
&lt;p>Ansicht öffnen: &lt;code>View → Tool Windows → Commit…&lt;/code> oder &lt;code>Alt+0&lt;/code>&lt;/p>&lt;/blockquote>
&lt;p>Du gibst deine Commit-Nachricht direkt im Dialog ein.&lt;br>
Optional kannst du Tests ausführen oder eine Code-Analyse aktivieren.&lt;/p>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/04_git/images/commit-erstellen.png" alt="Commit erstellen">&lt;/p>
&lt;p>Du kannst einzelne Änderungen (sogenannte &lt;em>Hunks&lt;/em>) selektiv in den Commit übernehmen.&lt;/p>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/04_git/images/hunks.png" alt="Hunks">&lt;/p>
&lt;div style="display: flex; align-items: flex-start; background-color: #dcfce7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-tip.png" alt="it-ninja tip" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Du kannst das Häkchen bei Dateien nutzen, um gezielt auszuwählen, was du aus der Datei committen möchtest (git selbst
commited immer die ganze Datei).
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h3 id="4-änderungen-rückgängig-machen">4. Änderungen rückgängig machen&lt;/h3>
&lt;blockquote>
&lt;p>Rechtsklick auf eine Datei → &lt;strong>Git → Rollback&lt;/strong>&lt;br>
Oder über die linke Leiste: &lt;strong>Commit&lt;/strong> und dort Rechtsclick auf Datei und &lt;strong>Rollback&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>Solange die Datei nicht &amp;lsquo;commited &amp;rsquo; ist, kannst du Änderungen zurücknehmen. Auch gelöschte Dateien lassen sich so
wiederherstellen.&lt;/p>
&lt;div style="display: flex; align-items: flex-start; background-color: #fef3c7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-warning.png" alt="it-ninja warning" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
„Revert“ in IntelliJ betrifft lokale Änderungen – nicht zu verwechseln mit &lt;code>git revert&lt;/code>, das einen Commit rückgängig
macht.
&lt;/div>
&lt;/div>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/04_git/images/revert.png" alt="Datei rollback">&lt;/p>
&lt;hr>
&lt;h3 id="5-branches-verwalten">5. Branches verwalten&lt;/h3>
&lt;blockquote>
&lt;p>Ansicht öffnen: &lt;code>View → Tool Windows → Git&lt;/code> oder &lt;code>Alt+9&lt;/code>&lt;br>
Oder über die linke Leiste: &lt;strong>Git&lt;/strong>&lt;/p>&lt;/blockquote>
&lt;p>Auf den Branch-Namen mit rechter Maustaste klicken oder &lt;code>Git → Branches&lt;/code>&lt;/p>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/04_git/images/new-branch.png" alt="Neuen Branche erstellen">&lt;/p>
&lt;p>Weitere Funktionen stehen dir Oben im Projektfenster zur Verfügung. Dort siehst du den jeweils &lt;strong>aktuellen Branch&lt;/strong> und
kannst Du unter anderem:&lt;/p>
&lt;ul>
&lt;li>Ebenfalls neue Branches erstellen&lt;/li>
&lt;li>Zwischen Branches wechseln&lt;/li>
&lt;li>Branches zusammenführen (merge) oder löschen&lt;/li>
&lt;li>Konflikte visuell auflösen&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/04_git/images/work-with-branches.png" alt="Branches verwalten">&lt;/p>
&lt;hr>
&lt;h3 id="6-push-und-pull">6. Push und Pull&lt;/h3>
&lt;blockquote>
&lt;p>Oben im Projektfenster beim &lt;strong>Branch&lt;/strong> &lt;code>Update Project...&lt;/code> / &lt;code>Push...&lt;/code>&lt;/p>&lt;/blockquote>
&lt;ul>
&lt;li>Push: Lokale Commits zum Remote-Server übertragen&lt;/li>
&lt;li>Update Project: Änderungen vom Remote-Server abrufen (Pull)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/04_git/images/push.png" alt="Push">&lt;/p>
&lt;hr>
&lt;h3 id="7-log-und-history">7. Log und History&lt;/h3>
&lt;blockquote>
&lt;p>&lt;code>Git → Show Git Log&lt;/code> oder &lt;code>Alt+9 → Log&lt;/code>&lt;/p>&lt;/blockquote>
&lt;p>Du siehst alle bisherigen Commits, Autoren und Änderungen.&lt;br>
Perfekt, um gezielt frühere Versionen anzuschauen oder zurückzusetzen.&lt;/p>
&lt;p>&lt;img src="/docs/99_shared/ide/intellij/04_git/images/log.png" alt="Git Log">&lt;/p>
&lt;hr>
&lt;h3 id="8-konflikte-lösen">8. Konflikte lösen&lt;/h3>
&lt;p>Bei Merge-Konflikten öffnet IntelliJ automatisch den Vergleichsdialog:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Left&lt;/strong> = deine Änderungen&lt;/li>
&lt;li>&lt;strong>Right&lt;/strong> = Änderungen vom Remote oder anderen Branch&lt;/li>
&lt;li>&lt;strong>Result&lt;/strong> = zusammengeführte Datei&lt;/li>
&lt;/ul>
&lt;p>Du kannst Zeilen einzeln übernehmen.&lt;/p>
&lt;hr>
&lt;h2 id="was-du-nicht-vergessen-solltest">Was du nicht vergessen solltest&lt;/h2>
&lt;p>Auch wenn vieles visuell möglich ist: Ein Grundverständnis von Git hilft, Probleme besser zu erkennen und zu lösen.&lt;br>
Im &lt;a href="/docs/99_shared/collaboration/source-repositories/git/">Git-Modul&lt;/a> lernst du die Befehle und Konzepte im Detail.&lt;/p>
&lt;div style="display: flex; align-items: flex-start; background-color: #dcfce7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-tip.png" alt="it-ninja tip" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
&lt;p>Die &lt;code>Console&lt;/code> im &lt;code>Git&lt;/code>-Tab zeigt dir oft auch den einer Aktion zugrunde liegenden Git-Befehl – ideal zum Lernen.&lt;/p>
&lt;p>&lt;img src="./images/console.png" alt="Git Konsole">&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>Docs: Geheimnisse schützen</title><link>/docs/99_shared/ide/intellij/05_secrets/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/99_shared/ide/intellij/05_secrets/</guid><description>
&lt;h2 id="ziele">Ziele&lt;/h2>
&lt;ul>
&lt;li>Du verstehst, was API-Schlüssel und Passwörter im Code bedeuten.&lt;/li>
&lt;li>Du erkennst die Risiken bei falscher Handhabung.&lt;/li>
&lt;li>Du lernst, wie man sensible Daten sicher speichert.&lt;/li>
&lt;li>Du kennst die gängigen Formate und Methoden zur Trennung von Code und Konfiguration.&lt;/li>
&lt;/ul>
&lt;span class="zeit" data-lesezeit="5" data-üben="">⏱️ Geschätzte Lesezeit: 5 Minuten&lt;/span>
&lt;hr>
&lt;h2 id="warum-überhaupt-schützen">Warum überhaupt schützen?&lt;/h2>
&lt;p>Viele moderne Anwendungen greifen auf externe Dienste zu – z. B. Google, OpenAI oder Wetterdaten-Anbieter.&lt;br>
Damit diese Dienste erkennen, wer du bist, brauchst du:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Passwörter&lt;/strong>: zum Schutz persönlicher Konten oder Serverzugänge.&lt;/li>
&lt;li>&lt;strong>API-Keys&lt;/strong> (Application Programming Interface Keys): Zugangsschlüssel, die automatisch mitgeschickt werden, wenn dein Programm eine API verwendet.&lt;/li>
&lt;/ul>
&lt;p>Ein API-Key ist wie ein &lt;strong>digitaler Ausweis&lt;/strong> für deine Software. Er identifiziert deine Anwendung gegenüber dem Dienst – und ist oft mit &lt;strong>Zugriffsrechten, Kosten oder Nutzungslimits&lt;/strong> verbunden.&lt;/p>
&lt;div style="display: flex; align-items: flex-start; background-color: #fef3c7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-warning.png" alt="it-ninja warning" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
Wer deinen API-Key oder dein Passwort kennt, kann auf Dienste in deinem Namen zugreifen – im schlimmsten Fall auf deine Kosten.
&lt;/div>
&lt;/div>
&lt;hr>
&lt;h2 id="gute-praxis-trennung-von-code-und-konfiguration">Gute Praxis: Trennung von Code und Konfiguration&lt;/h2>
&lt;p>Sensibler Inhalt wie API-Schlüssel, Passwörter oder geheime Tokens gehört &lt;strong>nicht&lt;/strong> in den Quellcode.&lt;br>
Stattdessen verwendest du Umgebungsvariablen oder &lt;code>.env&lt;/code>-Dateien – sie sind lokal, einfach zu nutzen und sicher (wenn man sie nicht aus Versehen committed).&lt;/p>
&lt;p>Die konkrete Umsetzung hängt davon ab, ob du mit Java, Node.js, Python oder einer anderen Sprache arbeitest.&lt;/p>
&lt;hr>
&lt;p>Wähle nun die passende Anleitung:&lt;/p></description></item><item><title>Docs: Packages lokal verwenden</title><link>/docs/99_shared/ide/intellij/07_packages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/99_shared/ide/intellij/07_packages/</guid><description>
&lt;div class="is-a-sbb" style="display: none;" data-should-display="block">
&lt;div style="width: 100%; margin: 1rem auto;">
&lt;div style="font-size: 1.1rem;">
Dieses Kapitel gehört zum Modul #J1 des Ausbildungsplans
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="ziele">Ziele&lt;/h2>
&lt;ul>
&lt;li>Ich weiss, wie man in IntelliJ eine &lt;code>.jar&lt;/code>-Datei aus einem Java-Projekt erzeugt.&lt;/li>
&lt;li>Ich kann eine &lt;code>.jar&lt;/code>-Datei lokal speichern und weitergeben.&lt;/li>
&lt;li>Ich kann ein lokal gespeichertes Package in einem anderen Projekt einbinden und verwenden.&lt;/li>
&lt;/ul>
&lt;span class="zeit" data-lesezeit="10" data-üben="">⏱️ Geschätzte Lesezeit: 10 Minuten&lt;/span>
&lt;h2 id="warum-das-wichtig-ist">Warum das wichtig ist&lt;/h2>
&lt;p>Wenn du eigene Hilfsklassen oder Utility-Packages erstellt hast, möchtest du sie vielleicht in mehreren Projekten
verwenden – &lt;strong>ohne sie jedes Mal neu zu schreiben&lt;/strong>. Dafür eignet sich das Java-Archivformat (&lt;code>.jar&lt;/code>).&lt;/p>
&lt;p>Dieses Modul zeigt dir, wie du in &lt;strong>IntelliJ IDEA ohne Maven&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>ein &lt;code>.jar&lt;/code>-Archiv erzeugst&lt;/li>
&lt;li>es in einem anderen Projekt wieder einbindest&lt;/li>
&lt;/ul>
&lt;p>Falls du mehr über Java Packages erfahren willst:
&lt;a href="/docs/02_java/03_java-grundlagen/12_packages/">Java Grundlagen - Java Packages&lt;/a>&lt;/p>
&lt;h2 id="schritt-1-projekt-vorbereiten">Schritt 1: Projekt vorbereiten&lt;/h2>
&lt;p>Stelle sicher, dass dein Projekt eine sinnvolle Package-Struktur hat und die Klassen &lt;code>public&lt;/code> sind:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6
&lt;/span>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> ch.itninja.util;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MathUtils&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> &lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#66d9ef">int&lt;/span> a, &lt;span style="color:#66d9ef">int&lt;/span> b) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> a &lt;span style="color:#f92672">+&lt;/span> b;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="schritt-2-jar-datei-erzeugen">Schritt 2: &lt;code>.jar&lt;/code>-Datei erzeugen&lt;/h2>
&lt;ol>
&lt;li>Öffne dein Projekt in IntelliJ&lt;/li>
&lt;li>Gehe auf &lt;strong>File → Project Structure&lt;/strong> (&lt;code>Ctrl+Alt+Shift+S&lt;/code>)&lt;/li>
&lt;li>Unter &lt;strong>Artifacts&lt;/strong>:
&lt;ul>
&lt;li>Klicke auf das &lt;code>+&lt;/code> → &lt;strong>JAR → From modules with dependencies&lt;/strong>&lt;/li>
&lt;li>Wähle dein Hauptmodul und die Hauptklasse (oder „extract to the classes directory“)&lt;/li>
&lt;li>Setze das Häkchen bei &lt;strong>Include in project build&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Klicke auf &lt;strong>Apply&lt;/strong> und &lt;strong>OK&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>Nun kannst du das &lt;code>.jar&lt;/code>-File erstellen:&lt;/p>
&lt;ul>
&lt;li>Menü &lt;strong>Build → Build Artifacts&amp;hellip; → Build&lt;/strong>&lt;/li>
&lt;li>Die Datei findest du im Ordner &lt;code>out/artifacts/...&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="schritt-3-jar-in-neues-projekt-einbinden">Schritt 3: &lt;code>.jar&lt;/code> in neues Projekt einbinden&lt;/h2>
&lt;ol>
&lt;li>Erstelle ein neues Java-Projekt in IntelliJ&lt;/li>
&lt;li>Öffne wieder die &lt;strong>Project Structure&lt;/strong> (&lt;code>Ctrl+Alt+Shift+S&lt;/code>)&lt;/li>
&lt;li>Unter &lt;strong>Libraries&lt;/strong>:
&lt;ul>
&lt;li>Klicke auf das &lt;code>+&lt;/code> → &lt;strong>Java&lt;/strong>&lt;/li>
&lt;li>Wähle dein &lt;code>.jar&lt;/code>-File aus&lt;/li>
&lt;li>IntelliJ fügt es dem Projekt hinzu&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Nun kannst du in deinem Code importieren:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> ch.itninja.util.MathUtils;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Und verwenden:&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">int&lt;/span> result &lt;span style="color:#f92672">=&lt;/span> MathUtils.&lt;span style="color:#a6e22e">add&lt;/span>(3, 5);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="weitergabe-an-andere">Weitergabe an andere&lt;/h2>
&lt;p>Du kannst die &lt;code>.jar&lt;/code>-Datei einfach:&lt;/p>
&lt;ul>
&lt;li>per &lt;strong>E-Mail&lt;/strong>, &lt;strong>USB-Stick&lt;/strong> oder &lt;strong>Cloudspeicher&lt;/strong> weitergeben&lt;/li>
&lt;li>in ein &lt;strong>gemeinsames Netzlaufwerk&lt;/strong> legen&lt;/li>
&lt;/ul>
&lt;p>Wenn du das &lt;code>.jar&lt;/code> regelmässig aktualisierst, empfiehlt sich später ein zentraler Server oder ein Maven-Repository.&lt;/p>
&lt;div style="display: flex; align-items: flex-start; background-color: #dcfce7; margin-bottom: 1rem; border-radius: 6px">
&lt;div style="flex-shrink: 0; margin-right: 1rem">
&lt;img src="/images/it-ninja-tip.png" alt="it-ninja tip" style="width: 60px; height: 60px; border-radius: 12px; margin: 6px;">
&lt;/div>
&lt;div style="font-size: 1.1rem; flex-grow: 1; padding-top: 6px; ">
&lt;p>Die &lt;code>.jar&lt;/code>-Datei enthält nur die kompilierten &lt;code>.class&lt;/code>-Dateien. JavaDoc-Kommentare oder Quellcode sind darin nicht
enthalten.&lt;/p>
&lt;p>Wenn du willst, kannst du im Artifact auch den Sourcecode oder die JavaDoc einbinden.&lt;/p>
&lt;/div>
&lt;/div></description></item></channel></rss>