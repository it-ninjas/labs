<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IT Ninjas – Git Vertiefung</title><link>/docs/git/vertiefung/</link><description>Recent content in Git Vertiefung on IT Ninjas</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 16 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="/docs/git/vertiefung/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Voraussetzungen</title><link>/docs/git/vertiefung/preliminaries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/vertiefung/preliminaries/</guid><description>
&lt;p>Das Modul soll den Einsatz von Git/Bitbucket unter realen Bedingungen vermitteln. Dazu ist es erforderlich,
dass ihr als Team agiert. Mehrere IT-Ninjas, die das Modul #S1 - Git erfolgreich abgeschlossen haben, bilden ein
Team, welches gemeinsam an zwei unterschiedlichen Projekten arbeitet. Hierbei geht es weniger um die
Programmierung, sondern um die gemeinsame Arbeit an der gleichen Codebase und den daraus folgenden Herausforderungen
in der Zusammenarbeit und in der Arbeit mit den Versionierungstools.&lt;/p>
&lt;h2 id="ziele">Ziele&lt;/h2>
&lt;ul>
&lt;li>Ihr wisst, wer zu eurem Team gehört und wie die Aufgaben verteilt sind.&lt;/li>
&lt;li>Ihr habt alle den Zugriff auf dieselben Repositories mit der initialen Version des Beispielprojektes.&lt;/li>
&lt;li>Die Branches &lt;code>master&lt;/code> und &lt;code>develop&lt;/code> sind angelegt.&lt;/li>
&lt;li>Alle Teammitglieder haben die Repositories ausgecheckt.&lt;/li>
&lt;/ul>
&lt;h2 id="aufgaben">Aufgaben&lt;/h2>
&lt;p>In einem ersten Schritt solltet ihr die Voraussetzungen für dieses Modul schaffen. Dazu müsst ihr&lt;/p>
&lt;ul>
&lt;li>ein Team bilden, das aus minimal zwei, maximal fünf IT-Ninjas besteht, die das Modul Git erfolgreich abgeschlossen haben.&lt;/li>
&lt;li>die folgenden Aufgaben als Team ausführen.&lt;/li>
&lt;li>ein Szenario aufbauen, welches den Wechsel zwischen Branches und Projekten unterstützt und eine praxisnahe Zusammenarbeit ermöglicht.&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="../preliminaries/team.png" alt="Bild eines Teams das an zwei Projekten arbeitet">&lt;/p>
&lt;p>Für die Umsetzung könnt ihr die Git Befehle über die Kommandozeile eingeben oder die Funktionen in
IntelliJ und der Bitbucket Weboberfläche nutzen. Die folgenden Screenshots sollen euch dabei helfen,
die Funktionen in den Tools schneller zu finden.&lt;/p>
&lt;h3 id="fork-eines-repositories-erstellen-bitbucket">Fork eines Repositories erstellen (Bitbucket)&lt;/h3>
&lt;p>&lt;strong>Achtung:&lt;/strong> Diese Aktion muss nur von einem Team-Mitglied ausgeführt werden!&lt;/p>
&lt;p>&lt;strong>Hinweis:&lt;/strong>&lt;br>
Die Bilder zeigen ein Beispielprojekt, welches nicht zur Verfügung steht. Als Projekte für diese Aufgabe
können die bereits abgeschlossenen Labs oder Exams der Module #J2 und #J3 verwendet werden.&lt;/p>
&lt;p>Für die Arbeit im Team sollten neue Repositories angelegt werden, damit die Arbeit aus den abgeschlossenen
Modulen erhalten bleibt. Dazu kann der Fork Befehl genutzt werden. Entweder über die Git Kommandozeile oder - bequemer -
über die Bitbucket Weboberfläche:&lt;/p>
&lt;p>&lt;img src="../preliminaries/bitbucket_fork.png" alt="Bitbucket Weboberfläche (Fork)">&lt;/p>
&lt;p>Wenn du die Kopien der Repositories erfolgreich angelegt hast, musst du diese noch für die anderen
Team-Mitglieder freigeben.&lt;/p>
&lt;h3 id="klonen-von-repositories-in-intellij">Klonen von Repositories in IntelliJ&lt;/h3>
&lt;p>Jeder Ninja erstellt einen Klon der Repositories in seinem lokalen Arbeitsbereich:&lt;/p>
&lt;ol>
&lt;li>Bitbucket im Browser aufrufen und zum gewünschten Repository wechseln. Dann Klonen in der Seitenleiste auswählen und die URL kopieren.&lt;/li>
&lt;li>Git im Menu auswählen (ggf. zuerst auf das Hamburger-Menu klicken).&lt;/li>
&lt;li>Im Git-Submenu den Eintrag Clone&amp;hellip; auswählen.&lt;/li>
&lt;li>Im oberen Feld wird die aus Bitbucket kopierte URL eingefügt. Im unteren Feld ist das lokale Zielverzeichnis (muss leer sein!) auszuwählen.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="../preliminaries/bitbucket.png" alt="Bitbucket Weboberfläche (Klonen)">&lt;/p>
&lt;p>&lt;img src="../preliminaries/intellij_git.png" alt="IntelliJ Menueintrag Git">&lt;/p>
&lt;p>&lt;img src="../preliminaries/intellij_clone.png" alt="IntelliJ Git Clone">&lt;/p>
&lt;p>&lt;img src="../preliminaries/intellij_clonedialog.png" alt="Clone Dialog">&lt;/p>
&lt;h4 id="hier-geht-es-zu-den-labs">Hier geht es zu den Labs.&lt;/h4>
&lt;ul>
&lt;li>&lt;a href="/labs/git/vertiefung/01_team/">Teambildung&lt;/a>&lt;/li>
&lt;li>&lt;a href="/labs/git/vertiefung/02_preparing/">Vorbereitung&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Zusammenarbeit im Projekt</title><link>/docs/git/vertiefung/collaboration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/vertiefung/collaboration/</guid><description>
&lt;h2 id="voraussetzungen">Voraussetzungen&lt;/h2>
&lt;p>Die Vorbereitungen aus &lt;a href="/labs/git/vertiefung/01_team/">Aufgabe 1&lt;/a> sind umgesetzt. Insbesondere sind erledigt:&lt;/p>
&lt;ul>
&lt;li>Zwei neue Repositories mit vorhandenen Projekten wurden erstellt.&lt;/li>
&lt;li>Es sind jeweils die Branches &lt;code>master&lt;/code> und &lt;code>develop&lt;/code> vorhanden.&lt;/li>
&lt;li>Alle Team-Mitglieder haben diese Repositories geklont.&lt;/li>
&lt;/ul>
&lt;h2 id="simulieren-einer-realen-projektarbeit">Simulieren einer realen Projektarbeit&lt;/h2>
&lt;p>Ein realistisches Szenario beinhaltet die konkurrierende Arbeit mehrerer Team-Mitglieder auf demselben
Repository, die Arbeit mit mehreren Projekten und die Notwendigkeit schnell zwischen den Projekten und
einzelnen Versionsständen wechseln zu können.&lt;/p>
&lt;p>Im ersten Abschnitt wird die Zusammenarbeit an einem Projekt simuliert, um die Kenntnisse zum Anlegen,
Aktualisieren,Vergleichen und Mergen von Branches aufzufrischen. Hierzu werden die Git Befehle&lt;/p>
&lt;ul>
&lt;li>&lt;strong>branch&lt;/strong>,&lt;/li>
&lt;li>&lt;strong>checkout&lt;/strong>,&lt;/li>
&lt;li>&lt;strong>push&lt;/strong>,&lt;/li>
&lt;li>&lt;strong>diff&lt;/strong>,&lt;/li>
&lt;li>&lt;strong>branch -merged&lt;/strong>,&lt;/li>
&lt;li>&lt;strong>merge&lt;/strong>,&lt;/li>
&lt;li>&lt;strong>rebase&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>verwendet/wiederholt. In den Labs zu diesem Modul werden die Git-Aktionen hauptsächlich innerhalb
von IntelliJ oder über die Weboberfläche von Bitbucket ausgeführt, da dies das in den Projekten
übliche Vorgehen ist.&lt;/p>
&lt;h3 id="bitbucket">Bitbucket&lt;/h3>
&lt;h4 id="hauptansicht">Hauptansicht&lt;/h4>
&lt;p>Die Standardanzeige von Bitbucket ist die Auflistung der vorhandenen Branches. Wichtige Elemente auf
der Bitbucket Weboberfläche, die in diesem Modul benutzt werden, sind durch rote Markierungen hervorgehoben.&lt;/p>
&lt;p>&lt;img src="../images/bitbucket-main.jpg" alt="Bitbucket Mainview">&lt;/p>
&lt;p>Ein Pull Request kann durch einen Klick auf den Branch in der Branch-Übersicht oder auf der
Übersichtsseite der Pull Requests über den Button &lt;code>Pull-Anfrage erstellen&lt;/code> (oben rechts) erstellt werden.
(&lt;em>siehe nächstes Bild&lt;/em>)&lt;/p>
&lt;h4 id="pull-request">Pull Request&lt;/h4>
&lt;p>&lt;strong>Übersicht aller Pull Requests.&lt;/strong> Hier werden alle im Repository erstellt Pull Requests aufgelistet.
Dabei kann ausgewählt werden, ob nur die offenen Pull Requests (&lt;em>Standardeinstellung&lt;/em>), die zusammengeführten,
abgelehnten oder alle Pull Requests angezeigt werden sollen.&lt;/p>
&lt;p>&lt;img src="../images/bitbucket-pr-overview.jpg" alt="Bitbucket Pull Requests">&lt;/p>
&lt;p>Wird ein neuer Pull Request erstellt, sind Ausgangs- und Zielbranch bereits vorbelegt. Beide können
geändert oder auch die Richtung der Zusammenführung umgekehrt werden.
Bei der Erstellung eines neuen Pull Request ist besonders darauf zu achten, dass der richtige Zielbranch
(rote Markierung) ausgewählt ist. Für die Übungen in diesem Modul wird das immer &lt;code>develop&lt;/code> sein.&lt;/p>
&lt;p>&lt;img src="../images/bitbucket-create-pr.jpg" alt="Bitbucket Pull Request erstellen">&lt;/p>
&lt;p>Will man einen Pull Request überprüfen, so gibt es verschiedene Informationen und Aktionen, die dabei
helfen können.&lt;/p>
&lt;ol>
&lt;li>Fügt den aktuellen User als Prüfer hinzu.&lt;/li>
&lt;li>Zeigt die Aktionen an die erforderlich sind, bevor der Pull Request gemergt werden kann. Dazu gehören neben den erforderlichen Freigaben durch den/die Prüfer, auch erfoderliche Builds und eventuell zu lösende Konflikte.&lt;/li>
&lt;li>Startet die Überprüfung (nur nötig, wenn eine Protokollierung gefordert ist).&lt;/li>
&lt;/ol>
&lt;p>Ausserdem werden die Kommentare des Erstellers und anderer Prüfer in der &lt;em>Übersicht&lt;/em> angezeigt. &lt;em>Diff&lt;/em>
führt die Unterschiede zwischen Ausgangs- und Zielbranch auf. Dabei werden entfernte Zeilen rot und
hinzugefügte Zeilen grün hinterlegt. Jede Änderung an einer Zeile, und sei es auch nur ein einzelnes
Zeichen, wird immer als Entfernen der alten Zeile und Einfügen der neuen Zeile dargestellt.
Alle zu diesem Pull Request gehörenden &lt;em>Commits&lt;/em> und auch alle &lt;em>Builds&lt;/em> können einzeln angeschaut werden.&lt;/p>
&lt;p>&lt;img src="../images/bitbucket-approve-pr.jpg" alt="Bitbucket Pull Request prüfen">&lt;/p>
&lt;h3 id="idea-intellij">IDEA IntelliJ&lt;/h3>
&lt;p>Einige der Git-Befehle werden auch in IntelliJ ausgeführt. Die in den Labs verwendeten Menueinträge
sind farbig markiert.&lt;/p>
&lt;p>&lt;img src="../images/intellij-git-menu.jpg" alt="IDEA IntelliJ Git Menu">&lt;/p>
&lt;p>Will man die Änderungen vom Arbeitsbereich in das Repository übertragen, wird &lt;code>git commit&lt;/code> verwendet.
In IntelliJ kann dazu der Menu-Eintrag &lt;em>Commit&amp;hellip;&lt;/em> oder auch &lt;em>Push&lt;/em> aus dem Kontextmenu des Projekts
aufgerufen werden. Die Ansicht wechselt nun auf die Commit-View:&lt;/p>
&lt;p>&lt;img src="../images/intellij-commit.jpg" alt="IDEA IntelliJ Commit View">&lt;/p>
&lt;ol>
&lt;li>Anzeige der geänderten Dateien; hier können einzelne oder alle Dateien ausgewählt werden, die bei Ausführung von commit im Repository aktualisiert werden.&lt;/li>
&lt;li>Die Commit-Message ist erforderlich und beschreibt die übertragenen Änderungen in Kurzfassung.&lt;/li>
&lt;li>Mit dem Button &lt;code>Commit&lt;/code> werden die Änderungen in das lokale Repository übernommen, mit &lt;code>Commit and Push..&lt;/code> werden sie anschliessend auch auf das remote Repository übertragen, wo sie dann allen zugänglich sind.&lt;/li>
&lt;/ol>
&lt;h3 id="collaboration">Collaboration&lt;/h3>
&lt;p>In der Praxis ist es üblich, dass in grossen Projekten mehrere Entwickler an der gleichen Codebasis
arbeiten, aber für unterschiedliche fachliche Features zuständig sind. Diese Änderungen müssen regelmässig
zusammengeführt werden, damit alle Entwickler auf dem aktuellen Stand arbeiten können. Dabei kommt es
immer wieder auch vor, dass Änderungen an einer Klasse in unterschiedlichen Branches zusammen geführt
werden müssen. Im Regelfall erledigt Git diese Zusammenführung (&lt;em>merge&lt;/em>) automatisch. Wenn jedoch Konflikte
auftreten, d.h. eine Zeile in beiden Branches, die zusammengeführt werden sollen, geändert wurde, kann
Git nicht entscheiden, welches die &amp;ldquo;richtige&amp;rdquo; Version ist. Hier muss der Entwickler entscheiden.&lt;/p>
&lt;p>Dieses Szenario kann leicht nachgestellt werden, indem mehrere Team-Mitglieder einen Feature-Branch
von develop erstellen und auf diesem arbeiten.&lt;/p>
&lt;p>In einer ersten Aufgabe sollen kleine Änderungen ohne Merge-Konflikte vorgenommen und zusammegeführt
werden. Dazu werden in den Feature-Branches unterschiediche Dateien bzw. Codestellen bearbeitet und
anschliessend auf &lt;code>develop&lt;/code> zusammengeführt.&lt;/p>
&lt;p>Der zweite Teil stellt Merge-Konflikte und deren Auflösung durch den Entwickler nach. Hier sollen
jeweils mehrere kleine Änderungen am Code vorgenommen werden. Dabei wird mindestens eine Zeile einer
bestimmten Datei von allen beteiligten Entwicklern geändert. Die Änderungen werden auf den Feature-Branch
gepusht und dann nacheinander auf &lt;code>develop&lt;/code> zusammengeführt. Jetzt sollte es zu merge-Konflikten kommen,
die es zu lösen gilt.&lt;/p>
&lt;p>Die passenden Aufgaben sind in den Labs unter&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/labs/git/vertiefung/02_preparing/">Vorbereiten der IDE&lt;/a>&lt;/li>
&lt;li>&lt;a href="/labs/git/vertiefung/03_collaboration/">Gemeinsames Arbeiten an einem Projekt (ohne Konflikte)&lt;/a>&lt;/li>
&lt;li>und &lt;a href="/labs/git/vertiefung/04_merge-conflict/">Gemeinsames Arbeitane an einem Projekt (mit Merge-Konflikten)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>zu finden.&lt;/p></description></item><item><title>Docs: Mit mehreren Repositories arbeiten</title><link>/docs/git/vertiefung/parallel-processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/git/vertiefung/parallel-processing/</guid><description>
&lt;h2 id="voraussetzungen">Voraussetzungen&lt;/h2>
&lt;p>Die Vorbereitungen aus &lt;a href="/labs/git/vertiefung/01_team/">Aufgabe 1&lt;/a> sind umgesetzt. Insbesondere sind erledigt:&lt;/p>
&lt;ul>
&lt;li>Zwei neue Repositories mit vorhandenen Projekten wurden erstellt.&lt;/li>
&lt;li>Es sind jeweils die Branches &lt;code>master&lt;/code> und &lt;code>develop&lt;/code> vorhanden.&lt;/li>
&lt;li>Alle Teammember haben diese Repositories geklont.&lt;/li>
&lt;/ul>
&lt;h2 id="simulieren-einer-realen-projektarbeit">Simulieren einer realen Projektarbeit&lt;/h2>
&lt;p>Ein realistisches Szenario beinhaltet die konkurrierende Arbeit mehrerer Team-Mitglieder auf demselben
Repository, die Arbeit mit mehreren Projekten und die Notwendigkeit schnell zwischen den Projekten und
einzelnen Versionsständen wechseln zu können.&lt;/p>
&lt;p>Im zweiten Abschnitt wird die parallele Arbeit mit mehreren Projekten bzw. Repositories simuliert.
Hier sollen die Kenntnisse zu den nachfolgenden Git Befehlen aufgefrischt werden.&lt;/p>
&lt;ul>
&lt;li>&lt;strong>branch&lt;/strong>&lt;/li>
&lt;li>&lt;strong>checkout&lt;/strong>&lt;/li>
&lt;li>&lt;strong>stash&lt;/strong>&lt;/li>
&lt;li>&lt;strong>pull&lt;/strong>&lt;/li>
&lt;li>&lt;strong>push&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>In den Labs zu diesem Modul werden die Git-Aktionen hauptsächlich innerhalb von IntelliJ oder über
die Weboberfläche von Bitbucket ausgeführt, da dies das in den Projekten übliche Vorgehen ist.&lt;/p>
&lt;h2 id="arbeit-mit-mehreren-repositories">Arbeit mit mehreren Repositories&lt;/h2>
&lt;p>In diesem Abschnitt werdet ihr mit den gleichen Menueinträgen arbeiten, wie im vorigen. Wenn ihr nicht
sicher seid, welche das sind, schaut einfach noch einmal auf der vorigen Seite nach.&lt;/p>
&lt;p>Nach Abschluss der Aufgaben solltet ihr in der Lage sein, zwischen unterschiedlichen Projekten und zwischen
verschiedenen Versionsständen eines Projektes zu wechseln ohne, dass eure lokalen Änderungen verloren gehen.&lt;/p>
&lt;p>Wir werden in diesem Abschnitt mit beiden Projekten arbeiten, wobei auf nur dem zweiten Projekt
geändert wird. In einer ersten Aufgabe wird die parallele Arbeit an mehreren Projekten demonstriert.
Dabei werden die beiden möglichen Arbeitsweisen vorgestellt.&lt;/p>
&lt;p>Die zweite Aufgabe thematisiert den Wechsel zwischen Branches oder Commits des gleichen Projekts.
Kleinere Änderungen werden auf mehrere Commits verteilt. Anschliessend wird zwischen diesen Commits
gewechselt, korrigiert, erneut committed oder mit stash zwischengespeichert.&lt;/p>
&lt;p>Nach den Übungen könnt ihr zwischen Projekten oder zwischen verschiedenen Branches desselben Projekts
wechseln, wisst, wann stash eingesetzt wird und seid mit checkout, rebase, push und pull vertraut.&lt;/p>
&lt;p>Zu den Labs:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="/labs/git/vertiefung/05_project-switch/">Simultanes Arbeiten an mehreren Projekten&lt;/a>&lt;/li>
&lt;li>&lt;a href="/labs/git/vertiefung/06_branch-switch/">Wechseln zwischen Branches desselben Projekts&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>